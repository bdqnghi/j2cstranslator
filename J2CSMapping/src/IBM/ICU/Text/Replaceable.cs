/*
 *******************************************************************************
 * Copyright (C) 1996-2004, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// <c>Replaceable</c> is an interface representing a string of characters
	/// that supports the replacement of a range of itself with a new string of
	/// characters. It is used by APIs that change a piece of text while retaining
	/// metadata. Metadata is data other than the Unicode characters returned by
	/// char32At(). One example of metadata is style attributes; another is an edit
	/// history, marking each character with an author and revision number.
	/// <p>
	/// An implicit aspect of the <c>Replaceable</c> API is that during a
	/// replace operation, new characters take on the metadata of the old characters.
	/// For example, if the string "the <b>bold</b>
	/// font" has range (4, 8) replaced with "strong", then it becomes "the
	/// <b>strong</b> font".
	/// <p>
	/// <c>Replaceable</c> specifies ranges using a start offset and a limit
	/// offset. The range of characters thus specified includes the characters at
	/// offset start..limit-1. That is, the start offset is inclusive, and the limit
	/// offset is exclusive.
	/// <p>
	/// <c>Replaceable</c> also includes API to access characters in the
	/// string: <c>length()</c>, <c>charAt()</c>, <c>char32At()</c>
	/// , and <c>extractBetween()</c>.
	/// <p>
	/// For a subclass to support metadata, typical behavior of
	/// <c>replace()</c> is the following:
	/// <ul>
	/// <li>Set the metadata of the new text to the metadata of the first character
	/// replaced</li>
	/// <li>If no characters are replaced, use the metadata of the previous character
	/// </li>
	/// <li>If there is no previous character (i.e. start == 0), use the following
	/// character</li>
	/// <li>If there is no following character (i.e. the replaceable was empty), use
	/// default metadata<br>
	/// <li>If the code point U+FFFF is seen, it should be interpreted as a special
	/// marker having no metadata
	/// <li>
	/// </li>
	/// </ul>
	/// If this is not the behavior, the subclass should document any differences.
	/// <p>
	/// Copyright &copy; IBM Corporation 1999. All rights reserved.
	/// </summary>
	///
	/// @stable ICU 2.0
	public interface Replaceable {
	    /// <summary>
	    /// Returns the number of 16-bit code units in the text.
	    /// </summary>
	    ///
	    /// <returns>number of 16-bit code units in text</returns>
	    /// @stable ICU 2.0
	    int Length();
	
	    /// <summary>
	    /// Returns the 16-bit code unit at the given offset into the text.
	    /// </summary>
	    ///
	    /// <param name="offset">an integer between 0 and <c>length()</c>-1 inclusive</param>
	    /// <returns>16-bit code unit of text at given offset</returns>
	    /// @stable ICU 2.0
	    char CharAt(int offset);
	
	    /// <summary>
	    /// Returns the 32-bit code point at the given 16-bit offset into the text.
	    /// This assumes the text is stored as 16-bit code units with surrogate pairs
	    /// intermixed. If the offset of a leading or trailing code unit of a
	    /// surrogate pair is given, return the code point of the surrogate pair.
	    /// <p>
	    /// Most subclasses can return
	    /// <c>com.ibm.icu.text.UTF16.charAt(this, offset)</c>.
	    /// </summary>
	    ///
	    /// <param name="offset">an integer between 0 and <c>length()</c>-1 inclusive</param>
	    /// <returns>32-bit code point of text at given offset</returns>
	    /// @stable ICU 2.0
	    int Char32At(int offset);
	
	    /// <summary>
	    /// Copies characters from this object into the destination character array.
	    /// The first character to be copied is at index <c>srcStart</c>; the
	    /// last character to be copied is at index <c>srcLimit-1</c> (thus the
	    /// total number of characters to be copied is <c>srcLimit-srcStart</c>
	    /// ). The characters are copied into the subarray of <c>dst</c>
	    /// starting at index <c>dstStart</c> and ending at index
	    /// <c>dstStart + (srcLimit-srcStart) - 1</c>.
	    /// </summary>
	    ///
	    /// <param name="srcStart">the beginning index to copy, inclusive; <code>0<= start <= limit</code>.</param>
	    /// <param name="srcLimit">the ending index to copy, exclusive;<code>start <= limit <= length()</code>.</param>
	    /// <param name="dst">the destination array.</param>
	    /// <param name="dstStart">the start offset in the destination array.</param>
	    /// @stable ICU 2.0
	    void GetChars(int srcStart, int srcLimit, char[] dst, int dstStart);
	
	    /// <summary>
	    /// Replaces a substring of this object with the given text.
	    /// <p>
	    /// Subclasses must ensure that if the text between start and limit is equal
	    /// to the replacement text, that replace has no effect. That is, any
	    /// metadata should be unaffected. In addition, subclasses are encouraged to
	    /// check for initial and trailing identical characters, and make a smaller
	    /// replacement if possible. This will preserve as much metadata as possible.
	    /// </summary>
	    ///
	    /// <param name="start">the beginning index, inclusive; <code>0 <= start<= limit</code>.</param>
	    /// <param name="limit">the ending index, exclusive; <code>start <= limit<= length()</code>.</param>
	    /// <param name="text">the text to replace characters <c>start</c> to<c>limit - 1</c></param>
	    /// @stable ICU 2.0
	    void Replace(int start, int limit, String text);
	
	    /// <summary>
	    /// Replaces a substring of this object with the given text.
	    /// <p>
	    /// Subclasses must ensure that if the text between start and limit is equal
	    /// to the replacement text, that replace has no effect. That is, any
	    /// metadata should be unaffected. In addition, subclasses are encouraged to
	    /// check for initial and trailing identical characters, and make a smaller
	    /// replacement if possible. This will preserve as much metadata as possible.
	    /// </summary>
	    ///
	    /// <param name="start">the beginning index, inclusive; <code>0 <= start<= limit</code>.</param>
	    /// <param name="limit">the ending index, exclusive; <code>start <= limit<= length()</code>.</param>
	    /// <param name="chars">the text to replace characters <c>start</c> to<c>limit - 1</c></param>
	    /// <param name="charsStart">the beginning index into <c>chars</c>, inclusive;<code>0 <= start <= limit</code>.</param>
	    /// <param name="charsLen">the number of characters of <c>chars</c>.</param>
	    /// @stable ICU 2.0
	    void Replace(int start, int limit, char[] chars, int charsStart,
	            int charsLen);
	
	    // Note: We use length rather than limit to conform to StringBuffer
	    // and System.arraycopy.
	
	    /// <summary>
	    /// Copies a substring of this object, retaining metadata. This method is
	    /// used to duplicate or reorder substrings. The destination index must not
	    /// overlap the source range. If <c>hasMetaData()</c> returns false,
	    /// subclasses may use the naive implementation:
	    /// <pre>
	    /// char[] text = new char[limit - start];
	    /// getChars(start, limit, text, 0);
	    /// replace(dest, dest, text, 0, limit - start);
	    /// </pre>
	    /// </summary>
	    ///
	    /// <param name="start">the beginning index, inclusive; <code>0 <= start <=limit</code>.</param>
	    /// <param name="limit">the ending index, exclusive; <code>start <= limit <=length()</code>.</param>
	    /// <param name="dest">the destination index. The characters from<c>start..limit-1</c> will be copied to<c>dest</c>. Implementations of this method may assumethat <code>dest <= start ||dest >= limit</code>.</param>
	    /// @stable ICU 2.0
	    void Copy(int start, int limit, int dest);
	
	    /// <summary>
	    /// Returns true if this object contains metadata. If a Replaceable object
	    /// has metadata, calls to the Replaceable API must be made so as to preserve
	    /// metadata. If it does not, calls to the Replaceable API may be optimized
	    /// to improve performance.
	    /// </summary>
	    ///
	    /// <returns>true if this object contains metadata</returns>
	    /// @stable ICU 2.2
	    bool HasMetaData();
	}
}
