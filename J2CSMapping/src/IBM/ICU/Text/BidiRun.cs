/*
 *******************************************************************************
 *   Copyright (C) 2001-2007, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 *******************************************************************************
 */
/* Written by Simon Montagu, Matitiahu Allouche
 * (ported from C code written by Markus W. Scherer)
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A BidiRun represents a sequence of characters at the same embedding level.
	/// The Bidi algorithm decomposes a piece of text into sequences of characters at
	/// the same embedding level, each such sequence is called a <quote>run</quote>.
	/// <p>
	/// A BidiRun represents such a run by storing its essential properties, but does
	/// not duplicate the characters which form the run.
	/// <p>
	/// The &quot;limit&quot; of the run is the position just after the last
	/// character, i.e., one more than that position.
	/// <p>
	/// This class has no public constructor, and its members cannot be modified by
	/// users.
	/// </summary>
	///
	/// <seealso cref="T:IBM.ICU.Text.Bidi"/>
	/// @draft ICU 3.8
	public class BidiRun {
	
	    internal int start; /* first logical position of the run */
	
	    internal int limit; /* last visual position of the run +1 */
	
	    internal int insertRemove; /*
	                       * if >0, flags for inserting LRM/RLM before/after run, if
	                       * <0, count of bidi controls within run
	                       */
	
	    internal sbyte level;
	
	    /// <summary>
	    /// Default constructor
	    /// Note that members start and limit of a run instance have different
	    /// meanings depending whether the run is part of the runs array of a Bidi
	    /// object, or if it is a reference returned by getVisualRun() or
	    /// getLogicalRun(). For a member of the runs array of a Bidi object, - start
	    /// is the first logical position of the run in the source text. - limit is
	    /// one after the last visual position of the run. For a reference returned
	    /// by getLogicalRun() or getVisualRun(), - start is the first logical
	    /// position of the run in the source text. - limit is one after the last
	    /// logical position of the run.
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    internal BidiRun() : this(0, 0, (sbyte)0) {
	    }
	
	    /// <summary>
	    /// Constructor
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    internal BidiRun(int start_0, int limit_1, sbyte embeddingLevel) {
	        this.start = start_0;
	        this.limit = limit_1;
	        this.level = embeddingLevel;
	    }
	
	    /// <summary>
	    /// Copy the content of a BidiRun instance
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    internal void CopyFrom(BidiRun run) {
	        this.start = run.start;
	        this.limit = run.limit;
	        this.level = run.level;
	        this.insertRemove = run.insertRemove;
	    }
	
	    /// <summary>
	    /// Get the first logical position of the run in the source text
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    public int GetStart() {
	        return start;
	    }
	
	    /// <summary>
	    /// Get position of one character after the end of the run in the source text
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    public int GetLimit() {
	        return limit;
	    }
	
	    /// <summary>
	    /// Get length of run
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    public int GetLength() {
	        return limit - start;
	    }
	
	    /// <summary>
	    /// Get level of run
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    public sbyte GetEmbeddingLevel() {
	        return level;
	    }
	
	    /// <summary>
	    /// Check if run level is odd
	    /// </summary>
	    ///
	    /// <returns>true if the embedding level of this run is odd, i.e. it is a
	    /// right-to-left run.</returns>
	    /// @draft ICU 3.8
	    public bool IsOddRun() {
	        return (level & 1) == 1;
	    }
	
	    /// <summary>
	    /// Check if run level is even
	    /// </summary>
	    ///
	    /// <returns>true if the embedding level of this run is even, i.e. it is a
	    /// left-to-right run.</returns>
	    /// @draft ICU 3.8
	    public bool IsEvenRun() {
	        return (level & 1) == 0;
	    }
	
	    /// <summary>
	    /// Get direction of run
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    public byte GetDirection() {
	        return (byte) (level & 1);
	    }
	
	    /// <summary>
	    /// String to display run
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    public override String ToString() {
	        return "BidiRun " + start + " - " + limit + " @ " + level;
	    }
	}
}
