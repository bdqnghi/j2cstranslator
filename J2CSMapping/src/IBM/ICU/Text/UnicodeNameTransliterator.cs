/*
 * Copyright (C) 1996-2004, International Business Machines Corporation and
 * others. All Rights Reserved.
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	
	/// <summary>
	/// A transliterator that performs character to name mapping. It generates the
	/// Perl syntax \N{name}.
	/// </summary>
	///
	internal class UnicodeNameTransliterator : Transliterator {
	
	    public sealed class Anonymous_C0 : Transliterator.Factory {
	        public Transliterator GetInstance(String ID) {
	            return new UnicodeNameTransliterator(null);
	        }
	    }
	
	    internal const String _ID = "Any-Name";
	
	    internal const String OPEN_DELIM = "\\N{";
	
	    internal const char CLOSE_DELIM = '}';
	
	    internal const int OPEN_DELIM_LEN = 3;
	
	    /// <summary>
	    /// System registration hook.
	    /// </summary>
	    ///
	    static internal void Register() {
	        IBM.ICU.Text.Transliterator.RegisterFactory(_ID, new UnicodeNameTransliterator.Anonymous_C0 ());
	    }
	
	    /// <summary>
	    /// Constructs a transliterator.
	    /// </summary>
	    ///
	    public UnicodeNameTransliterator(UnicodeFilter filter) : base(_ID, filter) {
	    }
	
	    /// <summary>
	    /// Implements <see cref="M:IBM.ICU.Text.Transliterator.HandleTransliterate(IBM.ICU.Text.Replaceable, null, System.Boolean)"/>.
	    /// </summary>
	    ///
	    protected internal override void HandleTransliterate(Replaceable text, Transliterator.Position  offsets,
	            bool isIncremental) {
	        int cursor = offsets.start;
	        int limit = offsets.limit;
	
	        StringBuilder str = new StringBuilder();
	        str.Append(OPEN_DELIM);
	        int len;
	        String name;
	
	        while (cursor < limit) {
	            int c = text.Char32At(cursor);
	            if ((name = IBM.ICU.Lang.UCharacter.GetExtendedName(c)) != null) {
	
	                str.Length=OPEN_DELIM_LEN;
	                str.Append(name).Append(CLOSE_DELIM);
	
	                int clen = IBM.ICU.Text.UTF16.GetCharCount(c);
	                text.Replace(cursor, cursor + clen, str.ToString());
	                len = str.Length;
	                cursor += len; // advance cursor by 1 and adjust for new text
	                limit += len - clen; // change in length
	            } else {
	                ++cursor;
	            }
	        }
	
	        offsets.contextLimit += limit - offsets.limit;
	        offsets.limit = limit;
	        offsets.start = cursor;
	    }
	}
}
