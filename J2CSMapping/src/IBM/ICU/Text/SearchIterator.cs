/*
 *******************************************************************************
 * Copyright (C) 1996-2004, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using ILOG.J2CsMapping.Text;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	/// <summary>
	/// <p>
	/// SearchIterator is an abstract base class that defines a protocol for text
	/// searching. Subclasses provide concrete implementations of various search
	/// algorithms. A concrete subclass, StringSearch, is provided that implements
	/// language-sensitive pattern matching based on the comparison rules defined in
	/// a RuleBasedCollator object. Instances of SearchIterator maintain a current
	/// position and scan over the target text, returning the indices where a match
	/// is found and the length of each match. Generally, the sequence of forward
	/// matches will be equivalent to the sequence of backward matches.One case where
	/// this statement may not hold is when non-overlapping mode is set on and there
	/// are continuous repetitive patterns in the text. Consider the case searching
	/// for pattern "aba" in the text "ababababa", setting overlapping mode off will
	/// produce forward matches at offsets 0, 4. However when a backwards search is
	/// done, the results will be at offsets 6 and 2.
	/// </p>
	/// <p>
	/// If matches searched for have boundary restrictions. BreakIterators can be
	/// used to define the valid boundaries of such a match. Once a BreakIterator is
	/// set, potential matches will be tested against the BreakIterator to determine
	/// if the boundaries are valid and that all characters in the potential match
	/// are equivalent to the pattern searched for. For example, looking for the
	/// pattern "fox" in the text "foxy fox" will produce match results at offset 0
	/// and 5 with length 3 if no BreakIterators were set. However if a
	/// WordBreakIterator is set, the only match that would be found will be at the
	/// offset 5. Since, the SearchIterator guarantees that if a BreakIterator is
	/// set, all its matches will match the given pattern exactly, a potential match
	/// that passes the BreakIterator might still not produce a valid match. For
	/// instance the pattern "e" will not be found in the string "&#92;u00e9" (latin
	/// small letter e with acute) if a CharacterBreakIterator is used. Even though
	/// "e" is a part of the character "&#92;u00e9" and the potential match at offset
	/// 0 length 1 passes the CharacterBreakIterator test, "&#92;u00e9" is not
	/// equivalent to "e", hence the SearchIterator rejects the potential match. By
	/// default, the SearchIterator does not impose any boundary restriction on the
	/// matches, it will return all results that match the pattern. Illustrating with
	/// the above example, "e" will be found in the string "&#92;u00e9" if no
	/// BreakIterator is specified.
	/// </p>
	/// <p>
	/// SearchIterator also provides a means to handle overlapping matches via the
	/// API setOverlapping(boolean). For example, if overlapping mode is set,
	/// searching for the pattern "abab" in the text "ababab" will match at positions
	/// 0 and 2, whereas if overlapping is not set, SearchIterator will only match at
	/// position 0. By default, overlapping mode is not set.
	/// </p>
	/// <p>
	/// The APIs in SearchIterator are similar to that of other text iteration
	/// classes such as BreakIterator. Using this class, it is easy to scan through
	/// text looking for all occurances of a match.
	/// </p>
	/// <p>
	/// Example of use:<br>
	/// <pre>
	/// String target = &quot;The quick brown fox jumped over the lazy fox&quot;;
	/// String pattern = &quot;fox&quot;;
	/// SearchIterator iter = new StringSearch(pattern, target);
	/// for (int pos = iter.first(); pos != SearchIterator.DONE; pos = iter.next()) {
	/// // println matches at offset 16 and 41 with length 3
	/// System.out.println(&quot;Found match at &quot; + pos + &quot;, length is &quot;
	/// + iter.getMatchLength());
	/// }
	/// target = &quot;ababababa&quot;;
	/// pattern = &quot;aba&quot;;
	/// iter.setTarget(new StringCharacterIterator(pattern));
	/// iter.setOverlapping(false);
	/// System.out.println(&quot;Overlapping mode set to false&quot;);
	/// System.out.println(&quot;Forward matches of pattern &quot; + pattern + &quot; in text &quot; + text
	/// + &quot;: &quot;);
	/// for (int pos = iter.first(); pos != SearchIterator.DONE; pos = iter.next()) {
	/// // println matches at offset 0 and 4 with length 3
	/// System.out.println(&quot;offset &quot; + pos + &quot;, length &quot; + iter.getMatchLength());
	/// }
	/// System.out.println(&quot;Backward matches of pattern &quot; + pattern + &quot; in text &quot;
	/// + text + &quot;: &quot;);
	/// for (int pos = iter.last(); pos != SearchIterator.DONE; pos = iter.previous()) {
	/// // println matches at offset 6 and 2 with length 3
	/// System.out.println(&quot;offset &quot; + pos + &quot;, length &quot; + iter.getMatchLength());
	/// }
	/// System.out.println(&quot;Overlapping mode set to true&quot;);
	/// System.out.println(&quot;Index set to 2&quot;);
	/// iter.setIndex(2);
	/// iter.setOverlapping(true);
	/// System.out.println(&quot;Forward matches of pattern &quot; + pattern + &quot; in text &quot; + text
	/// + &quot;: &quot;);
	/// for (int pos = iter.first(); pos != SearchIterator.DONE; pos = iter.next()) {
	/// // println matches at offset 2, 4 and 6 with length 3
	/// System.out.println(&quot;offset &quot; + pos + &quot;, length &quot; + iter.getMatchLength());
	/// }
	/// System.out.println(&quot;Index set to 2&quot;);
	/// iter.setIndex(2);
	/// System.out.println(&quot;Backward matches of pattern &quot; + pattern + &quot; in text &quot;
	/// + text + &quot;: &quot;);
	/// for (int pos = iter.last(); pos != SearchIterator.DONE; pos = iter.previous()) {
	/// // println matches at offset 0 with length 3
	/// System.out.println(&quot;offset &quot; + pos + &quot;, length &quot; + iter.getMatchLength());
	/// }
	/// </pre>
	/// </p>
	/// </summary>
	///
	/// @stable ICU 2.0
	/// <seealso cref="T:IBM.ICU.Text.BreakIterator"/>
	public abstract class SearchIterator {
	
	    // public data members -------------------------------------------------
	
	    /// <summary>
	    /// DONE is returned by previous() and next() after all valid matches have
	    /// been returned, and by first() and last() if there are no matches at all.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Previous"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Next"/>
	    /// @stable ICU 2.0
	    public const int DONE = -1;
	
	    // public methods -----------------------------------------------------
	
	    // public setters -----------------------------------------------------
	
	    /// <summary>
	    /// <p>
	    /// Sets the position in the target text at which the next search will start.
	    /// This method clears any previous match.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="position">position from which to start the next search</param>
	    /// <exception cref="IndexOutOfBoundsException">thrown if argument position is out of the target textrange.</exception>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetIndex"/>
	    /// @stable ICU 2.8
	    public virtual void SetIndex(int position) {
	        if (position < targetText.GetBeginIndex()
	                || position > targetText.GetEndIndex()) {
	            throw new IndexOutOfRangeException("setIndex(int) expected position to be between "
	                                        + targetText.GetBeginIndex() + " and "
	                                        + targetText.GetEndIndex().ToString());
	        }
	        m_setOffset_ = position;
	        m_reset_ = false;
	        matchLength = 0;
	    }
	
	    /// <summary>
	    /// <p>
	    /// Determines whether overlapping matches are returned. See the class
	    /// documentation for more information about overlapping matches.
	    /// </p>
	    /// <p>
	    /// The default setting of this property is false
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="allowOverlap">flag indicator if overlapping matches are allowed</param>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.IsOverlapping"/>
	    /// @stable ICU 2.8
	    public void SetOverlapping(bool allowOverlap) {
	        m_isOverlap_ = allowOverlap;
	    }
	
	    /// <summary>
	    /// Set the BreakIterator that is used to restrict the points at which
	    /// matches are detected. Using <tt>null</tt> as the parameter is legal; it
	    /// means that break detection should not be attempted. See class
	    /// documentation for more information.
	    /// </summary>
	    ///
	    /// <param name="breakiter">A BreakIterator that will be used to restrict the points atwhich matches are detected.</param>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetBreakIterator"/>
	    /// <seealso cref="T:IBM.ICU.Text.BreakIterator"/>
	    /// @stable ICU 2.0
	    public void SetBreakIterator(BreakIterator breakiter) {
	        breakIterator = breakiter;
	        if (breakIterator != null) {
	            breakIterator.SetText(targetText);
	        }
	    }
	
	    /// <summary>
	    /// Set the target text to be searched. Text iteration will then begin at the
	    /// start of the text string. This method is useful if you want to reuse an
	    /// iterator to search within a different body of text.
	    /// </summary>
	    ///
	    /// <param name="text">new text iterator to look for match,</param>
	    /// <exception cref="IllegalArgumentException">thrown when text is null or has 0 length</exception>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetTarget"/>
	    /// @stable ICU 2.4
	    public virtual void SetTarget(ICharacterIterator text) {
	        if (text == null || text.GetEndIndex() == text.GetIndex()) {
	            throw new ArgumentException("Illegal null or empty text");
	        }
	
	        targetText = text;
	        targetText.SetIndex(targetText.GetBeginIndex());
	        matchLength = 0;
	        m_reset_ = true;
	        m_isForwardSearching_ = true;
	        if (breakIterator != null) {
	            breakIterator.SetText(targetText);
	        }
	    }
	
	    // public getters ----------------------------------------------------
	
	    /// <summary>
	    /// <p>
	    /// Returns the index of the most recent match in the target text. This call
	    /// returns a valid result only after a successful call to <see cref="M:IBM.ICU.Text.SearchIterator.First"/>,<see cref="M:IBM.ICU.Text.SearchIterator.Next"/>, <see cref="M:IBM.ICU.Text.SearchIterator.Previous"/>, or <see cref="M:IBM.ICU.Text.SearchIterator.Last"/>. Just after
	    /// construction, or after a searching method returns <tt>DONE</tt>, this
	    /// method will return <tt>DONE</tt>.
	    /// </p>
	    /// <p>
	    /// Use <tt>getMatchLength</tt> to get the length of the matched text.
	    /// <tt>getMatchedText</tt> will return the subtext in the searched target
	    /// text from index getMatchStart() with length getMatchLength().
	    /// </p>
	    /// </summary>
	    ///
	    /// <returns>index to a substring within the text string that is being
	    /// searched.</returns>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchLength"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchedText"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.First"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Next"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Previous"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Last"/>
	    /// <seealso cref="F:IBM.ICU.Text.SearchIterator.DONE"/>
	    /// @stable ICU 2.8
	    public int GetMatchStart() {
	        return m_lastMatchStart_;
	    }
	
	    /// <summary>
	    /// Return the index in the target text at which the iterator is currently
	    /// positioned. If the iteration has gone past the end of the target text, or
	    /// past the beginning for a backwards search, <see cref="F:IBM.ICU.Text.SearchIterator.DONE"/> is returned.
	    /// </summary>
	    ///
	    /// <returns>index in the target text at which the iterator is currently
	    /// positioned.</returns>
	    /// @stable ICU 2.8
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.First"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Next"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Previous"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Last"/>
	    /// <seealso cref="F:IBM.ICU.Text.SearchIterator.DONE"/>
	    public abstract int GetIndex();
	
	    /// <summary>
	    /// <p>
	    /// Returns the length of the most recent match in the target text. This call
	    /// returns a valid result only after a successful call to <see cref="M:IBM.ICU.Text.SearchIterator.First"/>,<see cref="M:IBM.ICU.Text.SearchIterator.Next"/>, <see cref="M:IBM.ICU.Text.SearchIterator.Previous"/>, or <see cref="M:IBM.ICU.Text.SearchIterator.Last"/>. Just after
	    /// construction, or after a searching method returns <tt>DONE</tt>, this
	    /// method will return 0. See getMatchStart() for more details.
	    /// </p>
	    /// </summary>
	    ///
	    /// <returns>The length of the most recent match in the target text, or 0 if
	    /// there is no match.</returns>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchStart"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchedText"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.First"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Next"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Previous"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Last"/>
	    /// <seealso cref="F:IBM.ICU.Text.SearchIterator.DONE"/>
	    /// @stable ICU 2.0
	    public int GetMatchLength() {
	        return matchLength;
	    }
	
	    /// <summary>
	    /// Returns the BreakIterator that is used to restrict the indexes at which
	    /// matches are detected. This will be the same object that was passed to the
	    /// constructor or to <c>setBreakIterator</c>. If the BreakIterator has
	    /// not been set, <tt>null</tt> will be returned. See setBreakIterator for
	    /// more information.
	    /// </summary>
	    ///
	    /// <returns>the BreakIterator set to restrict logic matches</returns>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.SetBreakIterator(IBM.ICU.Text.BreakIterator)"/>
	    /// <seealso cref="T:IBM.ICU.Text.BreakIterator"/>
	    /// @stable ICU 2.0
	    public BreakIterator GetBreakIterator() {
	        return breakIterator;
	    }
	
	    /// <summary>
	    /// Return the target text that is being searched.
	    /// </summary>
	    ///
	    /// <returns>target text being searched.</returns>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.SetTarget(null)"/>
	    /// @stable ICU 2.0
	    public ICharacterIterator GetTarget() {
	        return targetText;
	    }
	
	    /// <summary>
	    /// Returns the text that was matched by the most recent call to<see cref="M:IBM.ICU.Text.SearchIterator.First"/>, <see cref="M:IBM.ICU.Text.SearchIterator.Next"/>, <see cref="M:IBM.ICU.Text.SearchIterator.Previous"/>, or <see cref="M:IBM.ICU.Text.SearchIterator.Last"/>. If
	    /// the iterator is not pointing at a valid match, for instance just after
	    /// construction or after <tt>DONE</tt> has been returned, an empty String
	    /// will be returned. See getMatchStart for more information
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchStart"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchLength"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.First"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Next"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Previous"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Last"/>
	    /// <seealso cref="F:IBM.ICU.Text.SearchIterator.DONE"/>
	    /// <returns>the substring in the target text of the most recent match</returns>
	    /// @stable ICU 2.0
	    public String GetMatchedText() {
	        if (matchLength > 0) {
	            int limit = m_lastMatchStart_ + matchLength;
	            StringBuilder result = new StringBuilder(matchLength);
	            result.Append(targetText.Current());
	            targetText.Next();
	            while (targetText.GetIndex() < limit) {
	                result.Append(targetText.Current());
	                targetText.Next();
	            }
	            targetText.SetIndex(m_lastMatchStart_);
	            return result.ToString();
	        }
	        return null;
	    }
	
	    // miscellaneous public methods -----------------------------------------
	
	    /// <summary>
	    /// Search <b>forwards</b> in the target text for the next valid match,
	    /// starting the search from the current iterator position. The iterator is
	    /// adjusted so that its current index, as returned by <see cref="M:IBM.ICU.Text.SearchIterator.GetIndex"/>, is
	    /// the starting position of the match if one was found. If a match is found,
	    /// the index of the match is returned, otherwise <tt>DONE</tt> is returned.
	    /// If overlapping mode is set, the beginning of the found match can be
	    /// before the end of the current match, if any.
	    /// </summary>
	    ///
	    /// <returns>The starting index of the next forward match after the current
	    /// iterator position, or <tt>DONE</tt> if there are no more matches.</returns>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchStart"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchLength"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchedText"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Following(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Preceding(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Previous"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.First"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Last"/>
	    /// <seealso cref="F:IBM.ICU.Text.SearchIterator.DONE"/>
	    /// @stable ICU 2.0
	    public int Next() {
	        int start = targetText.GetIndex();
	        if (m_setOffset_ != DONE) {
	            start = m_setOffset_;
	            m_setOffset_ = DONE;
	        }
	        if (m_isForwardSearching_) {
	            if (!m_reset_ && start + matchLength >= targetText.GetEndIndex()) {
	                // not enough characters to match
	                matchLength = 0;
	                targetText.SetIndex(targetText.GetEndIndex());
	                m_lastMatchStart_ = DONE;
	                return DONE;
	            }
	            m_reset_ = false;
	        } else {
	            // switching direction.
	            // if matchedIndex == USEARCH_DONE, it means that either a
	            // setIndex has been called or that previous ran off the text
	            // string. the iterator would have been set to offset 0 if a
	            // match is not found.
	            m_isForwardSearching_ = true;
	            if (start != DONE) {
	                // there's no need to set the collation element iterator
	                // the next call to next will set the offset.
	                return start;
	            }
	        }
	
	        if (start == DONE) {
	            start = targetText.GetBeginIndex();
	        }
	        if (matchLength > 0) {
	            // if match length is 0 we are at the start of the iteration
	            if (m_isOverlap_) {
	                start++;
	            } else {
	                start += matchLength;
	            }
	        }
	        m_lastMatchStart_ = HandleNext(start);
	        return m_lastMatchStart_;
	    }
	
	    /// <summary>
	    /// Search <b>backwards</b> in the target text for the next valid match,
	    /// starting the search from the current iterator position. The iterator is
	    /// adjusted so that its current index, as returned by <see cref="M:IBM.ICU.Text.SearchIterator.GetIndex"/>, is
	    /// the starting position of the match if one was found. If a match is found,
	    /// the index is returned, otherwise <tt>DONE</tt> is returned. If
	    /// overlapping mode is set, the end of the found match can be after the
	    /// beginning of the previous match, if any.
	    /// </summary>
	    ///
	    /// <returns>The starting index of the next backwards match after the current
	    /// iterator position, or <tt>DONE</tt> if there are no more matches.</returns>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchStart"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchLength"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchedText"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Following(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Preceding(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Next"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.First"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Last"/>
	    /// <seealso cref="F:IBM.ICU.Text.SearchIterator.DONE"/>
	    /// @stable ICU 2.0
	    public int Previous() {
	        int start = targetText.GetIndex();
	        if (m_setOffset_ != DONE) {
	            start = m_setOffset_;
	            m_setOffset_ = DONE;
	        }
	        if (m_reset_) {
	            m_isForwardSearching_ = false;
	            m_reset_ = false;
	            start = targetText.GetEndIndex();
	        }
	
	        if (m_isForwardSearching_ == true) {
	            // switching direction.
	            // if matchedIndex == USEARCH_DONE, it means that either a
	            // setIndex has been called or that next ran off the text
	            // string. the iterator would have been set to offset textLength if
	            // a match is not found.
	            m_isForwardSearching_ = false;
	            if (start != targetText.GetEndIndex()) {
	                return start;
	            }
	        } else {
	            if (start == targetText.GetBeginIndex()) {
	                // not enough characters to match
	                matchLength = 0;
	                targetText.SetIndex(targetText.GetBeginIndex());
	                m_lastMatchStart_ = DONE;
	                return DONE;
	            }
	        }
	
	        m_lastMatchStart_ = HandlePrevious(start);
	        return m_lastMatchStart_;
	    }
	
	    /// <summary>
	    /// Return true if the overlapping property has been set. See
	    /// setOverlapping(boolean) for more information.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.SetOverlapping(System.Boolean)"/>
	    /// <returns>true if the overlapping property has been set, false otherwise</returns>
	    /// @stable ICU 2.8
	    public bool IsOverlapping() {
	        return m_isOverlap_;
	    }
	
	    /// <summary>
	    /// <p>
	    /// Resets the search iteration. All properties will be reset to their
	    /// default values.
	    /// </p>
	    /// <p>
	    /// If a forward iteration is initiated, the next search will begin at the
	    /// start of the target text. Otherwise, if a backwards iteration is
	    /// initiated, the next search will begin at the end of the target text.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public virtual void Reset() {
	        // reset is setting the attributes that are already in string search
	        matchLength = 0;
	        SetIndex(targetText.GetBeginIndex());
	        m_isOverlap_ = false;
	        m_isForwardSearching_ = true;
	        m_reset_ = true;
	        m_setOffset_ = DONE;
	    }
	
	    /// <summary>
	    /// Return the index of the first <b>forward</b> match in the target text.
	    /// This method sets the iteration to begin at the start of the target text
	    /// and searches forward from there.
	    /// </summary>
	    ///
	    /// <returns>The index of the first forward match, or <c>DONE</c> if
	    /// there are no matches.</returns>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchStart"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchLength"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchedText"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Following(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Preceding(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Next"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Previous"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Last"/>
	    /// <seealso cref="F:IBM.ICU.Text.SearchIterator.DONE"/>
	    /// @stable ICU 2.0
	    public int First() {
	        m_isForwardSearching_ = true;
	        SetIndex(targetText.GetBeginIndex());
	        return Next();
	    }
	
	    /// <summary>
	    /// Return the index of the first <b>forward</b> match in target text that is
	    /// at or after argument <tt>position</tt>. This method sets the iteration to
	    /// begin at the specified position in the the target text and searches
	    /// forward from there.
	    /// </summary>
	    ///
	    /// <returns>The index of the first forward match, or <c>DONE</c> if
	    /// there are no matches.</returns>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchStart"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchLength"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchedText"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.First"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Preceding(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Next"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Previous"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Last"/>
	    /// <seealso cref="F:IBM.ICU.Text.SearchIterator.DONE"/>
	    /// @stable ICU 2.0
	    public int Following(int position) {
	        m_isForwardSearching_ = true;
	        // position checked in usearch_setOffset
	        SetIndex(position);
	        return Next();
	    }
	
	    /// <summary>
	    /// Return the index of the first <b>backward</b> match in target text. This
	    /// method sets the iteration to begin at the end of the target text and
	    /// searches backwards from there.
	    /// </summary>
	    ///
	    /// <returns>The starting index of the first backward match, or
	    /// <c>DONE</c> if there are no matches.</returns>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchStart"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchLength"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchedText"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.First"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Preceding(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Next"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Previous"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Following(System.Int32)"/>
	    /// <seealso cref="F:IBM.ICU.Text.SearchIterator.DONE"/>
	    /// @stable ICU 2.0
	    public int Last() {
	        m_isForwardSearching_ = false;
	        SetIndex(targetText.GetEndIndex());
	        return Previous();
	    }
	
	    /// <summary>
	    /// Return the index of the first <b>backwards</b> match in target text that
	    /// ends at or before argument <tt>position</tt>. This method sets the
	    /// iteration to begin at the argument position index of the target text and
	    /// searches backwards from there.
	    /// </summary>
	    ///
	    /// <returns>The starting index of the first backwards match, or
	    /// <c>DONE</c> if there are no matches.</returns>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchStart"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchLength"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchedText"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.First"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Following(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Next"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Previous"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.Last"/>
	    /// <seealso cref="F:IBM.ICU.Text.SearchIterator.DONE"/>
	    /// @stable ICU 2.0
	    public int Preceding(int position) {
	        m_isForwardSearching_ = false;
	        // position checked in usearch_setOffset
	        SetIndex(position);
	        return Previous();
	    }
	
	    // protected data member ----------------------------------------------
	
	    /// <summary>
	    /// The BreakIterator to define the boundaries of a logical match. This value
	    /// can be a null. See class documentation for more information.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.SetBreakIterator(IBM.ICU.Text.BreakIterator)"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetBreakIterator"/>
	    /// <seealso cref="T:IBM.ICU.Text.BreakIterator"/>
	    /// @stable ICU 2.0
	    protected internal BreakIterator breakIterator;
	
	    /// <summary>
	    /// Target text for searching.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.SetTarget(null)"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetTarget"/>
	    /// @stable ICU 2.0
	    protected internal ICharacterIterator targetText;
	
	    /// <summary>
	    /// Length of the most current match in target text. Value 0 is the default
	    /// value.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.SetMatchLength(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.GetMatchLength"/>
	    /// @stable ICU 2.0
	    protected internal int matchLength;
	
	    // protected constructor ----------------------------------------------
	
	    /// <summary>
	    /// Protected constructor for use by subclasses. Initializes the iterator
	    /// with the argument target text for searching and sets the BreakIterator.
	    /// See class documentation for more details on the use of the target text
	    /// and BreakIterator.
	    /// </summary>
	    ///
	    /// <param name="target">The target text to be searched.</param>
	    /// <param name="breaker">A <see cref="T:IBM.ICU.Text.BreakIterator"/> that is used to determine theboundaries of a logical match. This argument can be null.</param>
	    /// <exception cref="IllegalArgumentException">thrown when argument target is null, or of length 0</exception>
	    /// <seealso cref="T:IBM.ICU.Text.BreakIterator"/>
	    /// @stable ICU 2.0
	    protected internal SearchIterator(ICharacterIterator target, BreakIterator breaker) {
	        if (target == null
	                || (target.GetEndIndex() - target.GetBeginIndex()) == 0) {
	            throw new ArgumentException("Illegal argument target. "
	                    + " Argument can not be null or of length 0");
	        }
	        targetText = target;
	        breakIterator = breaker;
	        if (breakIterator != null) {
	            breakIterator.SetText(target);
	        }
	        matchLength = 0;
	        m_lastMatchStart_ = DONE;
	        m_isOverlap_ = false;
	        m_isForwardSearching_ = true;
	        m_reset_ = true;
	        m_setOffset_ = DONE;
	    }
	
	    // protected methods --------------------------------------------------
	
	    /// <summary>
	    /// Sets the length of the most recent match in the target text. Subclasses'
	    /// handleNext() and handlePrevious() methods should call this after they
	    /// find a match in the target text.
	    /// </summary>
	    ///
	    /// <param name="length">new length to set</param>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.HandleNext(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.HandlePrevious(System.Int32)"/>
	    /// @stable ICU 2.0
	    protected internal void SetMatchLength(int length) {
	        matchLength = length;
	    }
	
	    /// <summary>
	    /// <p>
	    /// Abstract method that subclasses override to provide the mechanism for
	    /// finding the next <b>forwards</b> match in the target text. This allows
	    /// different subclasses to provide different search algorithms.
	    /// </p>
	    /// <p>
	    /// If a match is found, this function must call setMatchLength(int) to set
	    /// the length of the result match. The iterator is adjusted so that its
	    /// current index, as returned by <see cref="M:IBM.ICU.Text.SearchIterator.GetIndex"/>, is the starting position
	    /// of the match if one was found. If a match is not found, <tt>DONE</tt>
	    /// will be returned.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="start">index in the target text at which the forwards search shouldbegin.</param>
	    /// <returns>the starting index of the next forwards match if found, DONE
	    /// otherwise</returns>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.SetMatchLength(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.HandlePrevious(System.Int32)"/>
	    /// <seealso cref="F:IBM.ICU.Text.SearchIterator.DONE"/>
	    /// @stable ICU 2.0
	    protected abstract internal int HandleNext(int start);
	
	    /// <summary>
	    /// <p>
	    /// Abstract method which subclasses override to provide the mechanism for
	    /// finding the next <b>backwards</b> match in the target text. This allows
	    /// different subclasses to provide different search algorithms.
	    /// </p>
	    /// <p>
	    /// If a match is found, this function must call setMatchLength(int) to set
	    /// the length of the result match. The iterator is adjusted so that its
	    /// current index, as returned by <see cref="M:IBM.ICU.Text.SearchIterator.GetIndex"/>, is the starting position
	    /// of the match if one was found. If a match is not found, <tt>DONE</tt>
	    /// will be returned.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="startAt">index in the target text at which the backwards search shouldbegin.</param>
	    /// <returns>the starting index of the next backwards match if found, DONE
	    /// otherwise</returns>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.SetMatchLength(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.SearchIterator.HandleNext(System.Int32)"/>
	    /// <seealso cref="F:IBM.ICU.Text.SearchIterator.DONE"/>
	    /// @stable ICU 2.0
	    protected abstract internal int HandlePrevious(int startAt);
	
	    // private data members ------------------------------------------------
	
	    /// <summary>
	    /// Flag indicates if we are doing a forwards search
	    /// </summary>
	    ///
	    private bool m_isForwardSearching_;
	
	    /// <summary>
	    /// Flag to indicate if overlapping search is to be done. E.g. looking for
	    /// "aa" in "aaa" will yield matches at offset 0 and 1.
	    /// </summary>
	    ///
	    private bool m_isOverlap_;
	
	    /// <summary>
	    /// Flag indicates if we are at the start of a string search. This indicates
	    /// that we are in forward search and at the start of m_text.
	    /// </summary>
	    ///
	    private bool m_reset_;
	
	    /// <summary>
	    /// Data member to store user defined position in setIndex(). If setIndex()
	    /// is not called, this value will be DONE.
	    /// </summary>
	    ///
	    private int m_setOffset_;
	
	    /// <summary>
	    /// Offset of the beginning of the last match
	    /// </summary>
	    ///
	    private int m_lastMatchStart_;
	}
}
