/*
 *******************************************************************************
 * Copyright (C) 2003-2006, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using IBM.ICU.Util;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
     using ILOG.J2CsMapping.Text;
     using ILOG.J2CsMapping.Formatting;
	
	/// <summary>
	/// An abstract class that extends <see cref="T:ILOG.J2CsMapping.Text.IlFormat"/> to provide additional
	/// ICU protocol, specifically, the <tt>getLocale()</tt> API. All ICU format
	/// classes are subclasses of this class.
	/// </summary>
	///
	/// <seealso cref="T:IBM.ICU.Text.ULocale"/>
	/// @draft ICU 2.8 (retain)
	/// @provisional This API might change or be removed in a future release.
	[Serializable]
	public abstract class UFormat : Format {
	    // jdk1.4.2 serialver
	    private const long serialVersionUID = -4964390515840164416L;
	
	    
	    /// @draft ICU 2.8 (retain)
	    /// @provisional This API might change or be removed in a future release.
	    public UFormat() {
	    }
	
	    // -------- BEGIN ULocale boilerplate --------
	
	    /// <summary>
	    /// Return the locale that was used to create this object, or null. This may
	    /// may differ from the locale requested at the time of this object's
	    /// creation. For example, if an object is created for locale
	    /// <tt>en_US_CALIFORNIA</tt>, the actual data may be drawn from <tt>en</tt>
	    /// (the <i>actual</i> locale), and <tt>en_US</tt> may be the most specific
	    /// locale that exists (the <i>valid</i> locale).
	    /// <p>
	    /// Note: This method will be implemented in ICU 3.0; ICU 2.8 contains a
	    /// partial preview implementation. The <i>actual</i> locale is returned
	    /// correctly, but the <i>valid</i> locale is not, in most cases.
	    /// </summary>
	    ///
	    /// <param name="type">type of information requested, either<see cref="M:IBM.ICU.Text.ULocale.VALID_LOCALE"/> or<see cref="M:IBM.ICU.Text.ULocale.ACTUAL_LOCALE"/>.</param>
	    /// <returns>the information specified by <i>type</i>, or null if this object
	    /// was not constructed from locale data.</returns>
	    /// <seealso cref="T:IBM.ICU.Text.ULocale"/>
	    /// <seealso cref="M:IBM.ICU.Text.ULocale.VALID_LOCALE"/>
	    /// <seealso cref="M:IBM.ICU.Text.ULocale.ACTUAL_LOCALE"/>
	    /// @draft ICU 2.8 (retain)
	    /// @provisional This API might change or be removed in a future release.
	    public ULocale GetLocale(ULocale.Type type) {
	        return (type == IBM.ICU.Util.ULocale.ACTUAL_LOCALE) ? this.actualLocale
	                : this.validLocale;
	    }
	
	    /// <exclude/>
	    /// <summary>
	    /// Set information about the locales that were used to create this object.
	    /// If the object was not constructed from locale data, both arguments should
	    /// be set to null. Otherwise, neither should be null. The actual locale must
	    /// be at the same level or less specific than the valid locale. This method
	    /// is intended for use by factories or other entities that create objects of
	    /// this class.
	    /// </summary>
	    ///
	    /// <param name="valid">the most specific locale containing any resource data, or null</param>
	    /// <param name="actual">the locale containing data used to construct this object, ornull</param>
	    /// <seealso cref="T:IBM.ICU.Text.ULocale"/>
	    /// <seealso cref="M:IBM.ICU.Text.ULocale.VALID_LOCALE"/>
	    /// <seealso cref="M:IBM.ICU.Text.ULocale.ACTUAL_LOCALE"/>
	    internal void SetLocale(ULocale valid, ULocale actual) {
	        // Change the following to an assertion later
	        if ((valid == null) != (actual == null)) {
	            // /CLOVER:OFF
	            throw new ArgumentException();
	            // /CLOVER:ON
	        }
	        // Another check we could do is that the actual locale is at
	        // the same level or less specific than the valid locale.
	        this.validLocale = valid;
	        this.actualLocale = actual;
	    }
	
	    /// <exclude/>
	    /// <summary>
	    /// The most specific locale containing any resource data, or null.
	    /// </summary>
	    ///
	    /// <seealso cref="T:IBM.ICU.Text.ULocale"/>
	    private ULocale validLocale;
	
	    /// <exclude/>
	    /// <summary>
	    /// The locale containing data used to construct this object, or null.
	    /// </summary>
	    ///
	    /// <seealso cref="T:IBM.ICU.Text.ULocale"/>
	    private ULocale actualLocale;
	
	    // -------- END ULocale boilerplate --------
	}
}
