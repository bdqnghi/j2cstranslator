// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2000-2007, International Business Machines Corporation and
/// others. All Rights Reserved.
/// </summary>
///
namespace IBM.ICU.Text {
	
	using IBM.ICU.Impl;
	using IBM.ICU.Util;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Globalization;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A subclass of <see cref="T:IBM.ICU.Text.DateFormatSymbols"/> for <see cref="T:IBM.ICU.Text.ChineseDateFormat"/>. This
	/// class contains additional symbols corresponding to the
	/// <c>ChineseCalendar.IS_LEAP_MONTH</c> field.
	/// </summary>
	///
	/// <seealso cref="T:IBM.ICU.Text.ChineseDateFormat"/>
	/// <seealso cref="T:IBM.ICU.Text.ChineseCalendar"/>
	/// @stable ICU 2.0
	public class ChineseDateFormatSymbols : DateFormatSymbols {
	    // Generated by serialver from JDK 1.4.1_01
	    internal const long serialVersionUID = 6827816119783952890L;
	
	    internal String[] isLeapMonth;
	
	    /// <summary>
	    /// Construct a ChineseDateFormatSymbols for the default locale.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public ChineseDateFormatSymbols() : this(IBM.ICU.Util.ULocale.GetDefault()) {
	    }
	
	    /// <summary>
	    /// Construct a ChineseDateFormatSymbols for the provided locale.
	    /// </summary>
	    ///
	    /// <param name="locale">the locale</param>
	    /// @stable ICU 2.0
        public ChineseDateFormatSymbols(ILOG.J2CsMapping.Util.Locale locale)
            : base(typeof(ChineseCalendar), IBM.ICU.Util.ULocale.ForLocale(locale))
        {
	    }
	
	    /// <summary>
	    /// Construct a ChineseDateFormatSymbols for the provided locale.
	    /// </summary>
	    ///
	    /// <param name="locale">the locale</param>
	    /// @stable ICU 3.2
	    public ChineseDateFormatSymbols(ULocale locale) : base(typeof(ChineseCalendar), locale) {
	    }
	
	    /// <summary>
	    /// Construct a ChineseDateFormatSymbols for the provided calendar and
	    /// locale.
	    /// </summary>
	    ///
	    /// <param name="cal">the Calendar</param>
	    /// <param name="locale">the locale</param>
	    /// @stable ICU 2.0
        public ChineseDateFormatSymbols(IBM.ICU.Util.Calendar cal, ILOG.J2CsMapping.Util.Locale locale)
            : base((cal == null) ? null : ((object)cal).GetType(), locale)
        {
	    }
	
	    /// <summary>
	    /// Construct a ChineseDateFormatSymbols for the provided calendar and
	    /// locale.
	    /// </summary>
	    ///
	    /// <param name="cal">the Calendar</param>
	    /// <param name="locale">the locale</param>
	    /// @stable ICU 3.2
        public ChineseDateFormatSymbols(IBM.ICU.Util.Calendar cal, ULocale locale)
            : base((cal == null) ? null : ((object)cal).GetType(), locale)
        {
	    }
	
	    // New API
	    
	    /// @stable ICU 2.0
	    public String GetLeapMonth(int isLeapMonth_0) {
	        return this.isLeapMonth[isLeapMonth_0];
	    }
	
	    /// <summary>
	    /// 
	    /// </summary>
	    ///
	    /// @stable ICU 3.0
	    protected internal override void InitializeData(ULocale loc, CalendarData calData) {
	        base.InitializeData(loc,calData);
	        isLeapMonth = calData.GetStringArray("isLeapMonth");
	    }
	
	    internal override void InitializeData(DateFormatSymbols dfs) {
	        base.InitializeData(dfs);
	        if (dfs  is  ChineseDateFormatSymbols) {
	            this.isLeapMonth = ((ChineseDateFormatSymbols) dfs).isLeapMonth;
	        }
	    }
	}
}
