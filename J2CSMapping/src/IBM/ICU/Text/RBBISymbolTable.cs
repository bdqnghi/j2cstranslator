/*
 ***************************************************************************
 *   Copyright (C) 2002-2006 International Business Machines Corporation   *
 *   and others. All rights reserved.                                      *
 ***************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
     using ILOG.J2CsMapping.Util;
     using ParsePosition = ILOG.J2CsMapping.Text.ParsePosition;
	
	internal class RBBISymbolTable : SymbolTable {
	
	    internal String fRules;
	
	    internal Hashtable fHashTable;
	
	    internal RBBIRuleScanner fRuleScanner;
	
	    // These next two fields are part of the mechanism for passing references to
	    // already-constructed UnicodeSets back to the UnicodeSet constructor
	    // when the pattern includes $variable references.
	    internal String ffffString;
	
	    internal UnicodeSet fCachedSetLookup;
	
	    internal class RBBISymbolTableEntry {
	        internal String key;
	
	        internal RBBINode val;
	    }
	
	    internal RBBISymbolTable(RBBIRuleScanner rs, String rules) {
	        fRules = rules;
	        fRuleScanner = rs;
	        fHashTable = new Hashtable();
	        ffffString = "\uffff";
	    }
	
	    //
	    // RBBISymbolTable::lookup This function from the abstract symbol table
	    // inteface
	    // looks up a variable name and returns a UnicodeString
	    // containing the substitution text.
	    //
	    // The variable name does NOT include the leading $.
	    //
	    public virtual char[] Lookup(String s) {
	        RBBISymbolTable.RBBISymbolTableEntry  el;
	        RBBINode varRefNode;
	        RBBINode exprNode;
	
	        RBBINode usetNode;
	        String retString;
	
	        el = (RBBISymbolTable.RBBISymbolTableEntry ) ILOG.J2CsMapping.Collections.Collections.Get(fHashTable,s);
	        if (el == null) {
	            return null;
	        }
	
	        // Walk through any chain of variable assignments that ultimately
	        // resolve to a Set Ref.
	        varRefNode = el.val;
	        while (varRefNode.fLeftChild.fType == IBM.ICU.Text.RBBINode.varRef) {
	            varRefNode = varRefNode.fLeftChild;
	        }
	
	        exprNode = varRefNode.fLeftChild; // Root node of expression for
	                                          // variable
	        if (exprNode.fType == IBM.ICU.Text.RBBINode.setRef) {
	            // The $variable refers to a single UnicodeSet
	            // return the ffffString, which will subsequently be interpreted as
	            // a
	            // stand-in character for the set by
	            // RBBISymbolTable::lookupMatcher()
	            usetNode = exprNode.fLeftChild;
	            fCachedSetLookup = usetNode.fInputSet;
	            retString = ffffString;
	        } else {
	            // The variable refers to something other than just a set.
	            // This is an error in the rules being compiled. $Variables inside
	            // of UnicodeSets
	            // must refer only to another set, not to some random non-set
	            // expression.
	            // Note: single characters are represented as sets, so they are ok.
	            fRuleScanner.Error(IBM.ICU.Text.RBBIRuleBuilder.U_BRK_MALFORMED_SET);
	            retString = exprNode.fText;
	            fCachedSetLookup = null;
	        }
	        return retString.ToCharArray();
	    }
	
	    //
	    // RBBISymbolTable::lookupMatcher This function from the abstract symbol
	    // table
	    // interface maps a single stand-in character to a
	    // pointer to a Unicode Set. The Unicode Set code uses this
	    // mechanism to get all references to the same $variable
	    // name to refer to a single common Unicode Set instance.
	    //
	    // This implementation cheats a little, and does not maintain a map of
	    // stand-in chars
	    // to sets. Instead, it takes advantage of the fact that the UnicodeSet
	    // constructor will always call this function right after calling lookup(),
	    // and we just need to remember what set to return between these two calls.
	    public virtual UnicodeMatcher LookupMatcher(int ch) {
	        UnicodeSet retVal = null;
	        if (ch == 0xffff) {
	            retVal = fCachedSetLookup;
	            fCachedSetLookup = null;
	        }
	        return retVal;
	    }
	
	    //
	    // RBBISymbolTable::parseReference This function from the abstract symbol
	    // table interface
	    // looks for a $variable name in the source text.
	    // It does not look it up, only scans for it.
	    // It is used by the UnicodeSet parser.
	    //
	    public virtual String ParseReference(String text, ParsePosition pos, int limit) {
	        int start = pos.GetIndex();
	        int i = start;
	        String result = "";
	        while (i < limit) {
	            int c = IBM.ICU.Text.UTF16.CharAt(text, i);
	            if ((i == start && !IBM.ICU.Lang.UCharacter.IsUnicodeIdentifierStart(c))
	                    || !IBM.ICU.Lang.UCharacter.IsUnicodeIdentifierPart(c)) {
	                break;
	            }
	            i += IBM.ICU.Text.UTF16.GetCharCount(c);
	        }
	        if (i == start) { // No valid name chars
	            return result; // Indicate failure with empty string
	        }
	        pos.SetIndex(i);
	        result = text.Substring(start,(i)-(start));
	        return result;
	    }
	
	    //
	    // RBBISymbolTable::lookupNode Given a key (a variable name), return the
	    // corresponding RBBI Node. If there is no entry
	    // in the table for this name, return NULL.
	    //
	    internal RBBINode LookupNode(String key_0) {
	
	        RBBINode retNode = null;
	        RBBISymbolTable.RBBISymbolTableEntry  el;
	
	        el = (RBBISymbolTable.RBBISymbolTableEntry ) ILOG.J2CsMapping.Collections.Collections.Get(fHashTable,key_0);
	        if (el != null) {
	            retNode = el.val;
	        }
	        return retNode;
	    }
	
	    //
	    // RBBISymbolTable::addEntry Add a new entry to the symbol table.
	    // Indicate an error if the name already exists -
	    // this will only occur in the case of duplicate
	    // variable assignments.
	    //
	    internal void AddEntry(String key_0, RBBINode val_1) {
	        RBBISymbolTable.RBBISymbolTableEntry  e;
	        e = (RBBISymbolTable.RBBISymbolTableEntry ) ILOG.J2CsMapping.Collections.Collections.Get(fHashTable,key_0);
	        if (e != null) {
	            fRuleScanner.Error(IBM.ICU.Text.RBBIRuleBuilder.U_BRK_VARIABLE_REDFINITION);
	            return;
	        }
	
	        e = new RBBISymbolTable.RBBISymbolTableEntry ();
	        e.key = key_0;
	        e.val = val_1;
	        ILOG.J2CsMapping.Collections.Collections.Put(fHashTable,e.key,e);
	    }
	
	    //
	    // RBBISymbolTable::print Debugging function, dump out the symbol table
	    // contents.
	    //
	    // /CLOVER:OFF
	    internal void RbbiSymtablePrint() {
	        System.Console.Out
	                .Write("Variable Definitions\n"
	                        + "Name               Node Val     String Val\n"
	                        + "----------------------------------------------------------------------\n");
	
	        RBBISymbolTable.RBBISymbolTableEntry [] syms = new RBBISymbolTable.RBBISymbolTableEntry [0];
	        ICollection t = fHashTable.Values;
	        syms = (RBBISymbolTable.RBBISymbolTableEntry []) ILOG.J2CsMapping.Collections.Generics.Collections.ToArray(t,syms);
	
	        for (int i = 0; i < syms.Length; i++) {
	            RBBISymbolTable.RBBISymbolTableEntry  s = syms[i];
	
	            System.Console.Out.Write("  " + s.key + "  "); // TODO: format output into
	                                                   // columns.
	            System.Console.Out.Write("  " + s.val + "  ");
	            System.Console.Out.Write(s.val.fLeftChild.fText);
	            System.Console.Out.Write("\n");
	        }
	
	        System.Console.Out.WriteLine("\nParsed Variable Definitions\n");
	        for (int i_0 = 0; i_0 < syms.Length; i_0++) {
	            RBBISymbolTable.RBBISymbolTableEntry  s_1 = syms[i_0];
	            System.Console.Out.Write(s_1.key);
	            s_1.val.fLeftChild.PrintTree(true);
	            System.Console.Out.Write("\n");
	        }
	    }
	    // /CLOVER:ON
	
	}
}
