// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 1996-2006, International Business Machines Corporation and    
/// others. All Rights Reserved.                                                
/// </summary>
///
namespace IBM.ICU.Text {
	
	using IBM.ICU.Impl;
	using ILOG.J2CsMapping.IO;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	/// <exclude/>
	/// <summary>
	/// <p>
	/// Internal class used for Rule Based Break Iterators
	/// </p>
	/// <p>
	/// This class provides access to the compiled break rule data, as it is stored
	/// in a .brk file.
	/// </summary>
	///
	public sealed class RBBIDataWrapper {
	    //
	    // These fields are the ready-to-use compiled rule data, as
	    // read from the file.
	    //
	    internal RBBIDataWrapper.RBBIDataHeader  fHeader;
	
	    internal short[] fFTable;
	
	    internal short[] fRTable;
	
	    internal short[] fSFTable;
	
	    internal short[] fSRTable;
	
	    internal CharTrie fTrie;
	
	    internal String fRuleSource;
	
	    internal int[] fStatusTable;
	
	    //
	    // Indexes to fields in the ICU4C style binary form of the RBBI Data Header
	    // Used by the rule compiler when flattening the data.
	    //
	    internal const int DH_SIZE = 24;
	
	    internal const int DH_MAGIC = 0;
	
	    internal const int DH_FORMATVERSION = 1;
	
	    internal const int DH_LENGTH = 2;
	
	    internal const int DH_CATCOUNT = 3;
	
	    internal const int DH_FTABLE = 4;
	
	    internal const int DH_FTABLELEN = 5;
	
	    internal const int DH_RTABLE = 6;
	
	    internal const int DH_RTABLELEN = 7;
	
	    internal const int DH_SFTABLE = 8;
	
	    internal const int DH_SFTABLELEN = 9;
	
	    internal const int DH_SRTABLE = 10;
	
	    internal const int DH_SRTABLELEN = 11;
	
	    internal const int DH_TRIE = 12;
	
	    internal const int DH_TRIELEN = 13;
	
	    internal const int DH_RULESOURCE = 14;
	
	    internal const int DH_RULESOURCELEN = 15;
	
	    internal const int DH_STATUSTABLE = 16;
	
	    internal const int DH_STATUSTABLELEN = 17;
	
	    // Index offsets to the fields in a state table row.
	    // Corresponds to struct RBBIStateTableRow in the C version.
	    //
	    internal const int ACCEPTING = 0;
	
	    internal const int LOOKAHEAD = 1;
	
	    internal const int TAGIDX = 2;
	
	    internal const int RESERVED = 3;
	
	    internal const int NEXTSTATES = 4;
	
	    // Index offsets to header fields of a state table
	    // struct RBBIStateTable {... in the C version.
	    //
	    internal const int NUMSTATES = 0;
	
	    internal const int ROWLEN = 2;
	
	    internal const int FLAGS = 4;
	
	    internal const int RESERVED_2 = 6;
	
	    internal const int ROW_DATA = 8;
	
	    // Bit selectors for the "FLAGS" field of the state table header
	    // enum RBBIStateTableFlags in the C version.
	    //
	    internal const int RBBI_LOOKAHEAD_HARD_BREAK = 1;
	
	    internal const int RBBI_BOF_REQUIRED = 2;
	
	    /// <summary>
	    /// Data Header. A struct-like class with the fields from the RBBI data file
	    /// header.
	    /// </summary>
	    ///
	    internal sealed class RBBIDataHeader {
	        internal int fMagic; // == 0xbla0
	
	        internal int fVersion; // == 1 (for ICU 3.2 and earlier.
	
	        internal byte[] fFormatVersion; // For ICU 3.4 and later.
	
	        internal int fLength; // Total length in bytes of this RBBI Data,
	                     // including all sections, not just the header.
	
	        internal int fCatCount; // Number of character categories.
	
	        //
	        // Offsets and sizes of each of the subsections within the RBBI data.
	        // All offsets are bytes from the start of the RBBIDataHeader.
	        // All sizes are in bytes.
	        //
	        internal int fFTable; // forward state transition table.
	
	        internal int fFTableLen;
	
	        internal int fRTable; // Offset to the reverse state transition table.
	
	        internal int fRTableLen;
	
	        internal int fSFTable; // safe point forward transition table
	
	        internal int fSFTableLen;
	
	        internal int fSRTable; // safe point reverse transition table
	
	        internal int fSRTableLen;
	
	        internal int fTrie; // Offset to Trie data for character categories
	
	        internal int fTrieLen;
	
	        internal int fRuleSource; // Offset to the source for for the break
	
	        internal int fRuleSourceLen; // rules. Stored UChar *.
	
	        internal int fStatusTable; // Offset to the table of rule status values
	
	        internal int fStatusTableLen;
	
	        public RBBIDataHeader() {
	            fMagic = 0;
	            fFormatVersion = new byte[4];
	        }
	    }
	
	    /// <summary>
	    /// RBBI State Table Indexing Function. Given a state number, return the
	    /// array index of the start of the state table row for that state.
	    /// </summary>
	    ///
	    internal int GetRowIndex(int state) {
	        return ROW_DATA + state * (fHeader.fCatCount + 4);
	    }
	
	    internal class TrieFoldingFunc : Trie.DataManipulate {
	        public virtual int GetFoldingOffset(int data) {
	            if ((data & 0x8000) != 0) {
	                return data & 0x7fff;
	            } else {
	                return 0;
	            }
	        }
	    }
	
	    static internal RBBIDataWrapper.TrieFoldingFunc  fTrieFoldingFunc = new RBBIDataWrapper.TrieFoldingFunc ();
	
	    internal RBBIDataWrapper() {
	    }
	
	    /*
	     * Get an RBBIDataWrapper from an InputStream onto a pre-compiled set of
	     * RBBI rules.
	     */
	    static internal RBBIDataWrapper Get(Stream mask0) {
	        int i;
	
	        DataInputStream dis = new DataInputStream(new BufferedStream(mask0));
	        RBBIDataWrapper This = new RBBIDataWrapper();
	
	        // Seek past the ICU data header.
	        // TODO: verify that the header looks good.
	        dis.SkipBytes(0x80);
	
	        // Read in the RBBI data header...
	        This.fHeader = new RBBIDataWrapper.RBBIDataHeader ();
	        This.fHeader.fMagic = dis.ReadInt();
	        This.fHeader.fVersion = dis.ReadInt();
	        This.fHeader.fFormatVersion[0] = (byte) (This.fHeader.fVersion >> 24);
	        This.fHeader.fFormatVersion[1] = (byte) (This.fHeader.fVersion >> 16);
	        This.fHeader.fFormatVersion[2] = (byte) (This.fHeader.fVersion >> 8);
	        This.fHeader.fFormatVersion[3] = (byte) (This.fHeader.fVersion);
	        This.fHeader.fLength = dis.ReadInt();
	        This.fHeader.fCatCount = dis.ReadInt();
	        This.fHeader.fFTable = dis.ReadInt();
	        This.fHeader.fFTableLen = dis.ReadInt();
	        This.fHeader.fRTable = dis.ReadInt();
	        This.fHeader.fRTableLen = dis.ReadInt();
	        This.fHeader.fSFTable = dis.ReadInt();
	        This.fHeader.fSFTableLen = dis.ReadInt();
	        This.fHeader.fSRTable = dis.ReadInt();
	        This.fHeader.fSRTableLen = dis.ReadInt();
	        This.fHeader.fTrie = dis.ReadInt();
	        This.fHeader.fTrieLen = dis.ReadInt();
	        This.fHeader.fRuleSource = dis.ReadInt();
	        This.fHeader.fRuleSourceLen = dis.ReadInt();
	        This.fHeader.fStatusTable = dis.ReadInt();
	        This.fHeader.fStatusTableLen = dis.ReadInt();
	        dis.SkipBytes(6 * 4); // uint32_t fReserved[6];
	
	        if (This.fHeader.fMagic != 0xb1a0 || !(This.fHeader.fVersion == 1 || // ICU
	                                                                             // 3.2
	                                                                             // and
	                                                                             // earlier
	                This.fHeader.fFormatVersion[0] == 3) // ICU 3.4
	        ) {
	            throw new IOException(
	                    "Break Iterator Rule Data Magic Number Incorrect, or unsupported data version.");
	        }
	
	        // Current position in input stream.
	        int pos = 24 * 4; // offset of end of header, which has 24 fields, all
	                          // int32_t (4 bytes)
	
	        //
	        // Read in the Forward state transition table as an array of shorts.
	        //
	
	        // Quick Sanity Check
	        if (This.fHeader.fFTable < pos
	                || This.fHeader.fFTable > This.fHeader.fLength) {
	            throw new IOException("Break iterator Rule data corrupt");
	        }
	
	        // Skip over any padding preceding this table
	        dis.SkipBytes(This.fHeader.fFTable - pos);
	        pos = This.fHeader.fFTable;
	
	        This.fFTable = new short[This.fHeader.fFTableLen / 2];
	        for (i = 0; i < This.fFTable.Length; i++) {
	            This.fFTable[i] = dis.ReadShort();
	            pos += 2;
	        }
	
	        //
	        // Read in the Reverse state table
	        //
	
	        // Skip over any padding in the file
	        dis.SkipBytes(This.fHeader.fRTable - pos);
	        pos = This.fHeader.fRTable;
	
	        // Create & fill the table itself.
	        This.fRTable = new short[This.fHeader.fRTableLen / 2];
	        for (i = 0; i < This.fRTable.Length; i++) {
	            This.fRTable[i] = dis.ReadShort();
	            pos += 2;
	        }
	
	        //
	        // Read in the Safe Forward state table
	        //
	        if (This.fHeader.fSFTableLen > 0) {
	            // Skip over any padding in the file                
	            dis.SkipBytes(This.fHeader.fSFTable - pos);
	            pos = This.fHeader.fSFTable;
	
	            // Create & fill the table itself.
	            This.fSFTable = new short[This.fHeader.fSFTableLen / 2];
	            for (i = 0; i < This.fSFTable.Length; i++) {
	                This.fSFTable[i] = dis.ReadShort();
	                pos += 2;
	            }
	        }
	
	        //
	        // Read in the Safe Reverse state table
	        //
	        if (This.fHeader.fSRTableLen > 0) {
	            // Skip over any padding in the file
	            dis.SkipBytes(This.fHeader.fSRTable - pos);
	            pos = This.fHeader.fSRTable;
	
	            // Create & fill the table itself.
	            This.fSRTable = new short[This.fHeader.fSRTableLen / 2];
	            for (i = 0; i < This.fSRTable.Length; i++) {
	                This.fSRTable[i] = dis.ReadShort();
	                pos += 2;
	            }
	        }
	
	        //
	        // Unserialize the Character categories TRIE
	        // Because we can't be absolutely certain where the Trie deserialize
	        // will
	        // leave the input stream, leave position unchanged.
	        // The seek to the start of the next item following the TRIE will get us
	        // back in sync.
	        //
	        dis.SkipBytes(This.fHeader.fTrie - pos); // seek input stream from end of
	                                            // previous section to
	        pos = This.fHeader.fTrie; // to the start of the trie
	
	        dis.Mark(This.fHeader.fTrieLen + 100); // Mark position of start of TRIE
	                                               // in the input
	                                               // and tell Java to keep the mark
	                                               // valid so long
	                                               // as we don't go more than 100
	                                               // bytes past the
	                                               // past the end of the TRIE.
	
	        This.fTrie = new CharTrie(dis, fTrieFoldingFunc); // Deserialize the
	                                                          // TRIE, leaving input
	        // stream at an unknown position, preceding the
	        // padding between TRIE and following section.
	
	        dis.Reset(); // Move input stream back to marked position at
	                     // the start of the serialized TRIE. Now our
	                     // "pos" variable and the input stream are in
	                     // agreement.
	
	        //
	        // Read the Rule Status Table
	        //
	        if (pos > This.fHeader.fStatusTable) {
	            throw new IOException("Break iterator Rule data corrupt");
	        }
	        dis.SkipBytes(This.fHeader.fStatusTable - pos);
	        pos = This.fHeader.fStatusTable;
	        This.fStatusTable = new int[This.fHeader.fStatusTableLen / 4];
	        for (i = 0; i < This.fStatusTable.Length; i++) {
	            This.fStatusTable[i] = dis.ReadInt();
	            pos += 4;
	        }
	
	        //
	        // Put the break rule source into a String
	        //
	        if (pos > This.fHeader.fRuleSource) {
	            throw new IOException("Break iterator Rule data corrupt");
	        }
	        dis.SkipBytes(This.fHeader.fRuleSource - pos);
	        pos = This.fHeader.fRuleSource;
	        StringBuilder sb = new StringBuilder(This.fHeader.fRuleSourceLen / 2);
	        for (i = 0; i < This.fHeader.fRuleSourceLen; i += 2) {
	            sb.Append(dis.ReadChar());
	            pos += 2;
	        }
	        This.fRuleSource = sb.ToString();
	
	        if (IBM.ICU.Text.RuleBasedBreakIterator.fDebugEnv != null
	                && IBM.ICU.Text.RuleBasedBreakIterator.fDebugEnv.IndexOf("data") >= 0) {
	            This.Dump();
	        }
	        return This;
	    }
	
	    // /CLOVER:OFF
	    // Getters for fields from the state table header
	    //
	    static internal int GetNumStates(short[] table) {
	        int hi = table[NUMSTATES];
	        int lo = table[NUMSTATES + 1];
	        int val = (hi << 16) + (lo & 0x0000ffff);
	        return val;
	    }
	
	    // /CLOVER:ON
	
	    // /CLOVER:OFF
	    /// <exclude/>
	    /// <summary>
	    /// Debug function to display the break iterator data.
	    /// </summary>
	    ///
	    internal void Dump() {
	        System.Console.Out.WriteLine("RBBI Data Wrapper dump ...");
	        System.Console.Out.WriteLine();
	        System.Console.Out.WriteLine("Forward State Table");
	        DumpTable(fFTable);
	        System.Console.Out.WriteLine("Reverse State Table");
	        DumpTable(fRTable);
	        System.Console.Out.WriteLine("Forward Safe Points Table");
	        DumpTable(fSFTable);
	        System.Console.Out.WriteLine("Reverse Safe Points Table");
	        DumpTable(fSRTable);
	
	        DumpCharCategories();
	        System.Console.Out.WriteLine("Source Rules: " + fRuleSource);
	
	    }
	
	    // /CLOVER:ON
	
	    // /CLOVER:OFF
	    /// <exclude/>
	    /// <summary>
	    /// Fixed width int-to-string conversion.
	    /// </summary>
	    ///
	    static public String IntToString(int n, int width) {
	        StringBuilder dest = new StringBuilder(width);
	        dest.Append(n);
	        while (dest.Length < width) {
	            dest.Insert(0, ' ');
	        }
	        return dest.ToString();
	    }
	
	    // /CLOVER:ON
	
	    // /CLOVER:OFF
	    /// <exclude/>
	    /// <summary>
	    /// Fixed width int-to-string conversion.
	    /// </summary>
	    ///
	    static public String IntToHexString(int n, int width) {
	        StringBuilder dest = new StringBuilder(width);
	        dest.Append(ILOG.J2CsMapping.Util.IlNumber.ToString(n,16));
	        while (dest.Length < width) {
	            dest.Insert(0, ' ');
	        }
	        return dest.ToString();
	    }
	
	    // /CLOVER:ON
	
	    // /CLOVER:OFF
	    /// <summary>
	    /// Dump a state table. (A full set of RBBI rules has 4 state tables.) 
	    /// </summary>
	    ///
	    private void DumpTable(short[] table) {
	        if (table == null) {
	            System.Console.Out.WriteLine("  -- null -- ");
	        } else {
	            int n;
	            int state;
	            String header = " Row  Acc Look  Tag";
	            for (n = 0; n < fHeader.fCatCount; n++) {
	                header += IntToString(n, 5);
	            }
	            System.Console.Out.WriteLine(header);
	            for (n = 0; n < header.Length; n++) {
	                System.Console.Out.Write("-");
	            }
	            System.Console.Out.WriteLine();
	            for (state = 0; state < GetNumStates(table); state++) {
	                DumpRow(table, state);
	            }
	            System.Console.Out.WriteLine();
	        }
	    }
	
	    // /CLOVER:ON
	
	    // /CLOVER:OFF
	    /// <exclude/>
	    /// <summary>
	    /// Dump (for debug) a single row of an RBBI state table
	    /// </summary>
	    ///
	    /// <param name="table"></param>
	    /// <param name="state"></param>
	    private void DumpRow(short[] table, int state) {
	        StringBuilder dest = new StringBuilder(fHeader.fCatCount * 5 + 20);
	        dest.Append(IntToString(state, 4));
	        int row = GetRowIndex(state);
	        if (table[row + ACCEPTING] != 0) {
	            dest.Append(IntToString(table[row + ACCEPTING], 5));
	        } else {
	            dest.Append("     ");
	        }
	        if (table[row + LOOKAHEAD] != 0) {
	            dest.Append(IntToString(table[row + LOOKAHEAD], 5));
	        } else {
	            dest.Append("     ");
	        }
	        dest.Append(IntToString(table[row + TAGIDX], 5));
	
	        for (int col = 0; col < fHeader.fCatCount; col++) {
	            dest.Append(IntToString(table[row + NEXTSTATES + col], 5));
	        }
	
	        System.Console.Out.WriteLine(dest);
	    }
	
	    // /CLOVER:ON
	
	    // /CLOVER:OFF
	    private void DumpCharCategories() {
	        int n = fHeader.fCatCount;
	        String[] catStrings = new String[n + 1];
	        int rangeStart = 0;
	        int rangeEnd = 0;
	        int lastCat = -1;
	        int char32;
	        int category;
	        int[] lastNewline = new int[n + 1];
	
	        for (category = 0; category <= fHeader.fCatCount; category++) {
	            catStrings[category] = "";
	        }
	        System.Console.Out.WriteLine("\nCharacter Categories");
	        System.Console.Out.WriteLine("--------------------");
	        for (char32 = 0; char32 <= 0x10ffff; char32++) {
	            category = fTrie.GetCodePointValue(char32);
	            category &= ~0x4000; // Mask off dictionary bit.
	            if (category < 0 || category > fHeader.fCatCount) {
	                System.Console.Out.WriteLine("Error, bad category "
	                        + ILOG.J2CsMapping.Util.IlNumber.ToString(category,16) + " for char "
	                        + ILOG.J2CsMapping.Util.IlNumber.ToString(char32,16));
	                break;
	            }
	            if (category == lastCat) {
	                rangeEnd = char32;
	            } else {
	                if (lastCat >= 0) {
	                    if (catStrings[lastCat].Length > lastNewline[lastCat] + 70) {
	                        lastNewline[lastCat] = catStrings[lastCat].Length + 10;
	                        catStrings[lastCat] += "\n       ";
	                    }
	
	                    catStrings[lastCat] += " "
	                            + ILOG.J2CsMapping.Util.IlNumber.ToString(rangeStart,16);
	                    if (rangeEnd != rangeStart) {
	                        catStrings[lastCat] += "-"
	                                + ILOG.J2CsMapping.Util.IlNumber.ToString(rangeEnd,16);
	                    }
	                }
	                lastCat = category;
	                rangeStart = rangeEnd = char32;
	            }
	        }
	        catStrings[lastCat] += " " + ILOG.J2CsMapping.Util.IlNumber.ToString(rangeStart,16);
	        if (rangeEnd != rangeStart) {
	            catStrings[lastCat] += "-" + ILOG.J2CsMapping.Util.IlNumber.ToString(rangeEnd,16);
	        }
	
	        for (category = 0; category <= fHeader.fCatCount; category++) {
	            System.Console.Out.WriteLine(IntToString(category, 5) + "  "
	                    + catStrings[category]);
	        }
	        System.Console.Out.WriteLine();
	    }
	    // /CLOVER:ON
	
	    /*
	     * static RBBIDataWrapper get(String name) throws IOException { String
	     * fullName = "data/" + name; InputStream is =
	     * ICUData.getRequiredStream(fullName); return get(is); }
	     * 
	     * public static void main(String[] args) { String s; if (args.length == 0)
	     * { s = "char"; } else { s = args[0]; }
	     * System.out.println("RBBIDataWrapper.main(" + s + ") ");
	     * 
	     * String versionedName = ICUResourceBundle.ICU_BUNDLE+"/"+ s + ".brk";
	     * 
	     * try { RBBIDataWrapper This = RBBIDataWrapper.get(versionedName);
	     * This.dump(); } catch (Exception e) { System.out.println("Exception: " +
	     * e.toString()); }
	     * 
	     * }
	     */
	}
}
