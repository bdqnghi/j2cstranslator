// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 1996-2007, International Business Machines Corporation and    
/// others. All Rights Reserved.                                                
/// </summary>
///
namespace IBM.ICU.Text {
	
	using IBM.ICU.Util;
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Globalization;
	using System.IO;
	using System.Resources;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// <p>
	/// Collator performs locale-sensitive string comparison. A concrete subclass,
	/// RuleBasedCollator, allows customization of the collation ordering by the use
	/// of rule sets.
	/// </p>
	/// <p>
	/// Following the <a href=http://www.unicode.org>Unicode Consortium</a>'s
	/// specifications for the <a
	/// href="http://www.unicode.org/unicode/reports/tr10/">Unicode Collation
	/// Algorithm (UCA)</a>, there are 5 different levels of strength used in
	/// comparisons:
	/// <ul>
	/// <li>PRIMARY strength: Typically, this is used to denote differences between
	/// base characters (for example, "a" &lt; "b"). It is the strongest difference.
	/// For example, dictionaries are divided into different sections by base
	/// character.
	/// <li>SECONDARY strength: Accents in the characters are considered secondary
	/// differences (for example, "as" &lt; "&agrave;s" &lt; "at"). Other differences
	/// between letters can also be considered secondary differences, depending on
	/// the language. A secondary difference is ignored when there is a primary
	/// difference anywhere in the strings.
	/// <li>TERTIARY strength: Upper and lower case differences in characters are
	/// distinguished at tertiary strength (for example, "ao" &lt; "Ao" &lt;
	/// "a&ograve;"). In addition, a variant of a letter differs from the base form
	/// on the tertiary strength (such as "A" and "&#9398;"). Another example is the
	/// difference between large and small Kana. A tertiary difference is ignored
	/// when there is a primary or secondary difference anywhere in the strings.
	/// <li>QUATERNARY strength: When punctuation is ignored <a href=
	/// "http://www.icu-project.org/userguide/Collate_Concepts.html#Ignoring_Punctuation"
	/// > (see Ignoring Punctuations in the user guide)</a> at PRIMARY to TERTIARY
	/// strength, an additional strength level can be used to distinguish words with
	/// and without punctuation (for example, "ab" &lt; "a-b" &lt; "aB"). This
	/// difference is ignored when there is a PRIMARY, SECONDARY or TERTIARY
	/// difference. The QUATERNARY strength should only be used if ignoring
	/// punctuation is required.
	/// <li>IDENTICAL strength: When all other strengths are equal, the IDENTICAL
	/// strength is used as a tiebreaker. The Unicode code point values of the NFD
	/// form of each string are compared, just in case there is no difference. For
	/// example, Hebrew cantellation marks are only distinguished at this strength.
	/// This strength should be used sparingly, as only code point value differences
	/// between two strings is an extremely rare occurrence. Using this strength
	/// substantially decreases the performance for both comparison and collation key
	/// generation APIs. This strength also increases the size of the collation key.
	/// </ul>
	/// Unlike the JDK, ICU4J's Collator deals only with 2 decomposition modes, the
	/// canonical decomposition mode and one that does not use any decomposition. The
	/// compatibility decomposition mode, java.text.Collator.FULL_DECOMPOSITION is
	/// not supported here. If the canonical decomposition mode is set, the Collator
	/// handles un-normalized text properly, producing the same results as if the
	/// text were normalized in NFD. If canonical decomposition is turned off, it is
	/// the user's responsibility to ensure that all text is already in the
	/// appropriate form before performing a comparison or before getting a
	/// CollationKey.
	/// </p>
	/// <p>
	/// For more information about the collation service see the <a
	/// href="http://www.icu-project.org/userguide/Collate_Intro.html">users
	/// guide</a>.
	/// </p>
	/// <p>
	/// Examples of use
	/// <pre>
	/// // Get the Collator for US English and set its strength to PRIMARY
	/// Collator usCollator = Collator.getInstance(Locale.US);
	/// usCollator.setStrength(Collator.PRIMARY);
	/// if (usCollator.compare("abc", "ABC") == 0) {
	/// System.out.println("Strings are equivalent");
	/// }
	/// The following example shows how to compare two strings using the
	/// Collator for the default locale.
	/// // Compare two strings in the default locale
	/// Collator myCollator = Collator.getInstance();
	/// myCollator.setDecomposition(NO_DECOMPOSITION);
	/// if (myCollator.compare("&agrave;&#92;u0325", "a&#92;u0325&#768;") != 0) {
	/// System.out.println("&agrave;&#92;u0325 is not equals to a&#92;u0325&#768; without decomposition");
	/// myCollator.setDecomposition(CANONICAL_DECOMPOSITION);
	/// if (myCollator.compare("&agrave;&#92;u0325", "a&#92;u0325&#768;") != 0) {
	/// System.out.println("Error: &agrave;&#92;u0325 should be equals to a&#92;u0325&#768; with decomposition");
	/// }
	/// else {
	/// System.out.println("&agrave;&#92;u0325 is equals to a&#92;u0325&#768; with decomposition");
	/// }
	/// }
	/// else {
	/// System.out.println("Error: &agrave;&#92;u0325 should be not equals to a&#92;u0325&#768; without decomposition");
	/// }
	/// </pre>
	/// </p>
	/// </summary>
	///
	/// <seealso cref="T:IBM.ICU.Text.RuleBasedCollator"/>
	/// <seealso cref="T:IBM.ICU.Text.CollationKey"/>
	/// @stable ICU 2.8
	public abstract class Collator : IComparer, ICloneable {
	    // public data members ---------------------------------------------------
	
	    /// <summary>
	    /// Strongest collator strength value. Typically used to denote differences
	    /// between base characters. See class documentation for more explanation.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Text.Collator.SetStrength(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetStrength"/>
	    /// @stable ICU 2.8
	    public const int PRIMARY = 0;
	
	    /// <summary>
	    /// Second level collator strength value. Accents in the characters are
	    /// considered secondary differences. Other differences between letters can
	    /// also be considered secondary differences, depending on the language. See
	    /// class documentation for more explanation.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Text.Collator.SetStrength(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetStrength"/>
	    /// @stable ICU 2.8
	    public const int SECONDARY = 1;
	
	    /// <summary>
	    /// Third level collator strength value. Upper and lower case differences in
	    /// characters are distinguished at this strength level. In addition, a
	    /// variant of a letter differs from the base form on the tertiary level. See
	    /// class documentation for more explanation.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Text.Collator.SetStrength(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetStrength"/>
	    /// @stable ICU 2.8
	    public const int TERTIARY = 2;
	
	    /// <summary>
	    /// Fourth level collator strength value. When punctuation is ignored <a
	    /// href=
	    /// "http://www.icu-project.org/userguide/Collate_Concepts.html#Ignoring_Punctuation"
	    /// > (see Ignoring Punctuations in the user guide)</a> at PRIMARY to
	    /// TERTIARY strength, an additional strength level can be used to
	    /// distinguish words with and without punctuation. See class documentation
	    /// for more explanation.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Text.Collator.SetStrength(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetStrength"/>
	    /// @stable ICU 2.8
	    public const int QUATERNARY = 3;
	
	    /// <summary>
	    /// <p>
	    /// Smallest Collator strength value. When all other strengths are equal, the
	    /// IDENTICAL strength is used as a tiebreaker. The Unicode code point values
	    /// of the NFD form of each string are compared, just in case there is no
	    /// difference. See class documentation for more explanation.
	    /// </p>
	    /// <p>
	    /// Note this value is different from JDK's
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public const int IDENTICAL = 15;
	
	    /// <summary>
	    /// This is for backwards compatibility with Java APIs only. It should not be
	    /// used, IDENTICAL should be used instead. ICU's collation does not support
	    /// Java's FULL_DECOMPOSITION mode.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int FULL_DECOMPOSITION = IDENTICAL;
	
	    /// <summary>
	    /// <p>
	    /// Decomposition mode value. With NO_DECOMPOSITION set, Strings will not be
	    /// decomposed for collation. This is the default decomposition setting
	    /// unless otherwise specified by the locale used to create the Collator.
	    /// </p>
	    /// <p>
	    /// <strong>Note</strong> this value is different from the JDK's.
	    /// </p>
	    /// </summary>
	    ///
	    /// <seealso cref="F:IBM.ICU.Text.Collator.CANONICAL_DECOMPOSITION"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetDecomposition"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.SetDecomposition(System.Int32)"/>
	    /// @stable ICU 2.8
	    public const int NO_DECOMPOSITION = 16;
	
	    /// <summary>
	    /// <p>
	    /// Decomposition mode value. With CANONICAL_DECOMPOSITION set, characters
	    /// that are canonical variants according to the Unicode standard will be
	    /// decomposed for collation.
	    /// </p>
	    /// <p>
	    /// CANONICAL_DECOMPOSITION corresponds to Normalization Form D as described
	    /// in <a href="http://www.unicode.org/unicode/reports/tr15/"> Unicode
	    /// Technical Report #15</a>.
	    /// </p>
	    /// </summary>
	    ///
	    /// <seealso cref="F:IBM.ICU.Text.Collator.NO_DECOMPOSITION"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetDecomposition"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.SetDecomposition(System.Int32)"/>
	    /// @stable ICU 2.8
	    public const int CANONICAL_DECOMPOSITION = 17;
	
	    // public methods --------------------------------------------------------
	
	    // public setters --------------------------------------------------------
	
	    /// <summary>
	    /// <p>
	    /// Sets this Collator's strength property. The strength property determines
	    /// the minimum level of difference considered significant during comparison.
	    /// </p>
	    /// <p>
	    /// The default strength for the Collator is TERTIARY, unless specified
	    /// otherwise by the locale used to create the Collator.
	    /// </p>
	    /// <p>
	    /// See the Collator class description for an example of use.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="newStrength">the new strength value.</param>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetStrength"/>
	    /// <seealso cref="F:IBM.ICU.Text.Collator.PRIMARY"/>
	    /// <seealso cref="F:IBM.ICU.Text.Collator.SECONDARY"/>
	    /// <seealso cref="F:IBM.ICU.Text.Collator.TERTIARY"/>
	    /// <seealso cref="F:IBM.ICU.Text.Collator.QUATERNARY"/>
	    /// <seealso cref="F:IBM.ICU.Text.Collator.IDENTICAL"/>
	    /// <exception cref="IllegalArgumentException">if the new strength value is not one of PRIMARY,SECONDARY, TERTIARY, QUATERNARY or IDENTICAL.</exception>
	    /// @stable ICU 2.8
	    public virtual void SetStrength(int newStrength) {
	        if ((newStrength != PRIMARY) && (newStrength != SECONDARY)
	                && (newStrength != TERTIARY) && (newStrength != QUATERNARY)
	                && (newStrength != IDENTICAL)) {
	            throw new ArgumentException("Incorrect comparison level.");
	        }
	        m_strength_ = newStrength;
	    }
	
	    /// <summary>
	    /// <p>
	    /// Set the decomposition mode of this Collator. Setting this decomposition
	    /// property with CANONICAL_DECOMPOSITION allows the Collator to handle
	    /// un-normalized text properly, producing the same results as if the text
	    /// were normalized. If NO_DECOMPOSITION is set, it is the user's
	    /// responsibility to insure that all text is already in the appropriate form
	    /// before a comparison or before getting a CollationKey. Adjusting
	    /// decomposition mode allows the user to select between faster and more
	    /// complete collation behavior.
	    /// </p>
	    /// <p>
	    /// Since a great many of the world's languages do not require text
	    /// normalization, most locales set NO_DECOMPOSITION as the default
	    /// decomposition mode.
	    /// </p>
	    /// The default decompositon mode for the Collator is NO_DECOMPOSITON, unless
	    /// specified otherwise by the locale used to create the Collator.</p>
	    /// <p>
	    /// See getDecomposition for a description of decomposition mode.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="decomposition">the new decomposition mode</param>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetDecomposition"/>
	    /// <seealso cref="F:IBM.ICU.Text.Collator.NO_DECOMPOSITION"/>
	    /// <seealso cref="F:IBM.ICU.Text.Collator.CANONICAL_DECOMPOSITION"/>
	    /// <exception cref="IllegalArgumentException">If the given value is not a valid decomposition mode.</exception>
	    /// @stable ICU 2.8
	    public void SetDecomposition(int decomposition) {
	        if ((decomposition != NO_DECOMPOSITION)
	                && (decomposition != CANONICAL_DECOMPOSITION)) {
	            throw new ArgumentException("Wrong decomposition mode.");
	        }
	        m_decomposition_ = decomposition;
	    }
	
	    // public getters --------------------------------------------------------
	
	    /// <summary>
	    /// Gets the Collator for the current default locale. The default locale is
	    /// determined by java.util.Locale.getDefault().
	    /// </summary>
	    ///
	    /// <returns>the Collator for the default locale (for example, en_US) if it is
	    /// created successfully. Otherwise if there is no Collator
	    /// associated with the current locale, the default UCA collator will
	    /// be returned.</returns>
	    /// <seealso cref="null"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetInstance(null)"/>
	    /// @stable ICU 2.8
	    public static Collator GetInstance() {
	        return GetInstance(IBM.ICU.Util.ULocale.GetDefault());
	    }
	
	    /// <summary>
	    /// Clone the collator.
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    /// <returns>a clone of this collator.</returns>
	    public virtual Object Clone() {
	        return base.MemberwiseClone();
	    }
	
	    // begin registry stuff
	
	    /// <summary>
	    /// A factory used with registerFactory to register multiple collators and
	    /// provide display names for them. If standard locale display names are
	    /// sufficient, Collator instances may be registered instead.
	    /// <p>
	    /// <b>Note:</b> as of ICU4J 3.2, the default API for CollatorFactory uses
	    /// ULocale instead of Locale. Instead of overriding createCollator(Locale),
	    /// new implementations should override createCollator(ULocale). Note that
	    /// one of these two methods <b>MUST</b> be overridden or else an infinite
	    /// loop will occur.
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public abstract class CollatorFactory {
	        /// <summary>
	        /// Return true if this factory will be visible. Default is true. If not
	        /// visible, the locales supported by this factory will not be listed by
	        /// getAvailableLocales.
	        /// </summary>
	        ///
	        /// <returns>true if this factory is visible</returns>
	        /// @stable ICU 2.6
	        public bool Visible() {
	            return true;
	        }
	
	        /// <summary>
	        /// Return an instance of the appropriate collator. If the locale is not
	        /// supported, return null. <b>Note:</b> as of ICU4J 3.2, implementations
	        /// should override this method instead of createCollator(Locale).
	        /// </summary>
	        ///
	        /// <param name="loc">the locale for which this collator is to be created.</param>
	        /// <returns>the newly created collator.</returns>
	        /// @stable ICU 3.2
	        public Collator CreateCollator(ULocale loc) {
	            return CreateCollator(loc.ToLocale());
	        }
	
	        /// <summary>
	        /// Return an instance of the appropriate collator. If the locale is not
	        /// supported, return null.
	        /// <p>
	        /// <b>Note:</b> as of ICU4J 3.2, implementations should override
	        /// createCollator(ULocale) instead of this method, and inherit this
	        /// method's implementation. This method is no longer abstract and
	        /// instead delegates to createCollator(ULocale).
	        /// </summary>
	        ///
	        /// <param name="loc">the locale for which this collator is to be created.</param>
	        /// <returns>the newly created collator.</returns>
	        /// @stable ICU 2.6
            public Collator CreateCollator(ILOG.J2CsMapping.Util.Locale loc)
            {
	            return CreateCollator(IBM.ICU.Util.ULocale.ForLocale(loc));
	        }
	
	        /// <summary>
	        /// Return the name of the collator for the objectLocale, localized for
	        /// the displayLocale. If objectLocale is not visible or not defined by
	        /// the factory, return null.
	        /// </summary>
	        ///
	        /// <param name="objectLocale">the locale identifying the collator</param>
	        /// <param name="displayLocale">the locale for which the display name of the collatorshould be localized</param>
	        /// <returns>the display name</returns>
	        /// @stable ICU 2.6
            public String GetDisplayName(ILOG.J2CsMapping.Util.Locale objectLocale, ILOG.J2CsMapping.Util.Locale displayLocale)
            {
	            return GetDisplayName(IBM.ICU.Util.ULocale.ForLocale(objectLocale),
	                    IBM.ICU.Util.ULocale.ForLocale(displayLocale));
	        }
	
	        /// <summary>
	        /// Return the name of the collator for the objectLocale, localized for
	        /// the displayLocale. If objectLocale is not visible or not defined by
	        /// the factory, return null.
	        /// </summary>
	        ///
	        /// <param name="objectLocale">the locale identifying the collator</param>
	        /// <param name="displayLocale">the locale for which the display name of the collatorshould be localized</param>
	        /// <returns>the display name</returns>
	        /// @stable ICU 3.2
	        public String GetDisplayName(ULocale objectLocale, ULocale displayLocale) {
	            if (Visible()) {
	                ILOG.J2CsMapping.Collections.ISet supported = GetSupportedLocaleIDs();
	                String name = objectLocale.GetBaseName();
	                if (ILOG.J2CsMapping.Collections.Collections.Contains(name,supported)) {
	                    return objectLocale.GetDisplayName(displayLocale);
	                }
	            }
	            return null;
	        }
	
	        /// <summary>
	        /// Return an unmodifiable collection of the locale names directly
	        /// supported by this factory.
	        /// </summary>
	        ///
	        /// <returns>the set of supported locale IDs.</returns>
	        /// @stable ICU 2.6
	        public abstract ILOG.J2CsMapping.Collections.ISet GetSupportedLocaleIDs();
	
	        /// <summary>
	        /// Empty default constructor.
	        /// </summary>
	        ///
	        /// @stable ICU 2.6
	        protected internal CollatorFactory() {
	        }
	    }
	
	    abstract internal class ServiceShim {
	        abstract internal Collator GetInstance(ULocale l);
	
	        abstract internal Object RegisterInstance(Collator c, ULocale l);
	
	        abstract internal Object RegisterFactory(Collator.CollatorFactory  f);
	
	        abstract internal bool Unregister(Object k);

            abstract internal ILOG.J2CsMapping.Util.Locale[] GetAvailableLocales(); // TODO remove
	
	        abstract internal ULocale[] GetAvailableULocales();
	
	        abstract internal String GetDisplayName(ULocale ol, ULocale dl);
	    }
	
	    private static Collator.ServiceShim  shim;
	
	    private static Collator.ServiceShim  GetShim() {
	        // Note: this instantiation is safe on loose-memory-model configurations
	        // despite lack of synchronization, since the shim instance has no
	        // state--
	        // it's all in the class init. The worst problem is we might instantiate
	        // two shim instances, but they'll share the same state so that's ok.
	        if (shim == null) {
	            try {
	                Type cls = ILOG.J2CsMapping.Reflect.Helper.GetNativeType("IBM.ICU.Text.CollatorServiceShim");
	                shim = (Collator.ServiceShim ) Activator.CreateInstance(cls);
	            } catch (MissingManifestResourceException e) {
	                throw e;
	            } catch (Exception e_0) {
	                // /CLOVER:OFF
	                if (DEBUG) {
	                    Console.Error.WriteLine(e_0.StackTrace);
	                }
	                throw new Exception(e_0.Message);
	                // /CLOVER:ON
	            }
	        }
	        return shim;
	    }
	
	    /// <summary>
	    /// Gets the Collator for the desired locale.
	    /// </summary>
	    ///
	    /// <param name="locale">the desired locale.</param>
	    /// <returns>Collator for the desired locale if it is created successfully.
	    /// Otherwise if there is no Collator associated with the current
	    /// locale, a default UCA collator will be returned.</returns>
	    /// <seealso cref="T:System.Globalization.CultureInfo"/>
	    /// <seealso cref="T:System.Resources.ResourceManager"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetInstance(null)"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetInstance"/>
	    /// @stable ICU 3.0
	    public static Collator GetInstance(ULocale locale) {
	        // fetching from service cache is faster than instantiation
	        return GetShim().GetInstance(locale);
	    }
	
	    /// <summary>
	    /// Gets the Collator for the desired locale.
	    /// </summary>
	    ///
	    /// <param name="locale">the desired locale.</param>
	    /// <returns>Collator for the desired locale if it is created successfully.
	    /// Otherwise if there is no Collator associated with the current
	    /// locale, a default UCA collator will be returned.</returns>
	    /// <seealso cref="T:System.Globalization.CultureInfo"/>
	    /// <seealso cref="T:System.Resources.ResourceManager"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetInstance(null)"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetInstance"/>
	    /// @stable ICU 2.8
        public static Collator GetInstance(ILOG.J2CsMapping.Util.Locale locale)
        {
	        return GetInstance(IBM.ICU.Util.ULocale.ForLocale(locale));
	    }
	
	    /// <summary>
	    /// Register a collator as the default collator for the provided locale. The
	    /// collator should not be modified after it is registered.
	    /// </summary>
	    ///
	    /// <param name="collator">the collator to register</param>
	    /// <param name="locale">the locale for which this is the default collator</param>
	    /// <returns>an object that can be used to unregister the registered collator.</returns>
	    /// @stable ICU 3.2
	    public static Object RegisterInstance(Collator collator,
	            ULocale locale) {
	        return GetShim().RegisterInstance(collator, locale);
	    }
	
	    /// <summary>
	    /// Register a collator factory.
	    /// </summary>
	    ///
	    /// <param name="factory">the factory to register</param>
	    /// <returns>an object that can be used to unregister the registered factory.</returns>
	    /// @stable ICU 2.6
	    public static Object RegisterFactory(Collator.CollatorFactory  factory) {
	        return GetShim().RegisterFactory(factory);
	    }
	
	    /// <summary>
	    /// Unregister a collator previously registered using registerInstance.
	    /// </summary>
	    ///
	    /// <param name="registryKey">the object previously returned by registerInstance.</param>
	    /// <returns>true if the collator was successfully unregistered.</returns>
	    /// @stable ICU 2.6
	    public static bool Unregister(Object registryKey) {
	        if (shim == null) {
	            return false;
	        }
	        return shim.Unregister(registryKey);
	    }
	
	    /// <summary>
	    /// Get the set of locales, as Locale objects, for which collators are
	    /// installed. Note that Locale objects do not support RFC 3066.
	    /// </summary>
	    ///
	    /// <returns>the list of locales in which collators are installed. This list
	    /// includes any that have been registered, in addition to those that
	    /// are installed with ICU4J.</returns>
	    /// @stable ICU 2.4
        public static ILOG.J2CsMapping.Util.Locale[] GetAvailableLocales()
        {
	        // TODO make this wrap getAvailableULocales later
	        if (shim == null) {
	            return IBM.ICU.Impl.ICUResourceBundle
	                    .GetAvailableLocales(IBM.ICU.Impl.ICUResourceBundle.ICU_COLLATION_BASE_NAME);
	        }
	        return shim.GetAvailableLocales();
	    }
	
	    /// <summary>
	    /// Get the set of locales, as ULocale objects, for which collators are
	    /// installed. ULocale objects support RFC 3066.
	    /// </summary>
	    ///
	    /// <returns>the list of locales in which collators are installed. This list
	    /// includes any that have been registered, in addition to those that
	    /// are installed with ICU4J.</returns>
	    /// @stable ICU 3.0
	    public static ULocale[] GetAvailableULocales() {
	        if (shim == null) {
	            return IBM.ICU.Impl.ICUResourceBundle
	                    .GetAvailableULocales(IBM.ICU.Impl.ICUResourceBundle.ICU_COLLATION_BASE_NAME);
	        }
	        return shim.GetAvailableULocales();
	    }
	
	    /// <summary>
	    /// The list of keywords for this service. This must be kept in sync with the
	    /// resource data.
	    /// </summary>
	    ///
	    private static readonly String[] KEYWORDS = { "collation" };
	
	    /// <summary>
	    /// The resource name for this service. Note that this is not the same as the
	    /// keyword for this service.
	    /// </summary>
	    ///
	    private const String RESOURCE = "collations";
	
	    /// <summary>
	    /// The resource bundle base name for this service.///since ICU 3.0
	    /// </summary>
	    ///
	    private const String BASE = IBM.ICU.Impl.ICUResourceBundle.ICU_COLLATION_BASE_NAME;
	
	    /// <summary>
	    /// Return an array of all possible keywords that are relevant to collation.
	    /// At this point, the only recognized keyword for this service is
	    /// "collation".
	    /// </summary>
	    ///
	    /// <returns>an array of valid collation keywords.</returns>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetKeywordValues(System.String)"/>
	    /// @stable ICU 3.0
	    public static String[] GetKeywords() {
	        return KEYWORDS;
	    }
	
	    /// <summary>
	    /// Given a keyword, return an array of all values for that keyword that are
	    /// currently in use.
	    /// </summary>
	    ///
	    /// <param name="keyword">one of the keywords returned by getKeywords.</param>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetKeywords"/>
	    /// @stable ICU 3.0
	    public static String[] GetKeywordValues(String keyword) {
	        if (!keyword.Equals(KEYWORDS[0])) {
	            throw new ArgumentException("Invalid keyword: " + keyword);
	        }
	        return IBM.ICU.Impl.ICUResourceBundle.GetKeywordValues(BASE, RESOURCE);
	    }
	
	    /// <summary>
	    /// Return the functionally equivalent locale for the given requested locale,
	    /// with respect to given keyword, for the collation service. If two locales
	    /// return the same result, then collators instantiated for these locales
	    /// will behave equivalently. The converse is not always true; two collators
	    /// may in fact be equivalent, but return different results, due to internal
	    /// details. The return result has no other meaning than that stated above,
	    /// and implies nothing as to the relationship between the two locales. This
	    /// is intended for use by applications who wish to cache collators, or
	    /// otherwise reuse collators when possible. The functional equivalent may
	    /// change over time. For more information, please see the <a
	    /// href="http://www.icu-project.org/userguide/locale.html#services"> Locales
	    /// and Services</a> section of the ICU User Guide.
	    /// </summary>
	    ///
	    /// <param name="keyword">a particular keyword as enumerated by getKeywords.</param>
	    /// <param name="locID">The requested locale</param>
	    /// <param name="isAvailable">If non-null, isAvailable[0] will receive and output booleanthat indicates whether the requested locale was 'available' tothe collation service. If non-null, isAvailable must havelength >= 1.</param>
	    /// <returns>the locale</returns>
	    /// @stable ICU 3.0
	    public static ULocale GetFunctionalEquivalent(String keyword,
	            ULocale locID, bool[] isAvailable) {
	        return IBM.ICU.Impl.ICUResourceBundle.GetFunctionalEquivalent(BASE, RESOURCE,
	                keyword, locID, isAvailable);
	    }
	
	    /// <summary>
	    /// Return the functionally equivalent locale for the given requested locale,
	    /// with respect to given keyword, for the collation service.
	    /// </summary>
	    ///
	    /// <param name="keyword">a particular keyword as enumerated by getKeywords.</param>
	    /// <param name="locID">The requested locale</param>
	    /// <returns>the locale</returns>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetFunctionalEquivalent(System.String, null, null)"/>
	    /// @stable ICU 3.0
	    public static ULocale GetFunctionalEquivalent(String keyword,
	            ULocale locID) {
	        return GetFunctionalEquivalent(keyword, locID, null);
	    }
	
	    /// <summary>
	    /// Get the name of the collator for the objectLocale, localized for the
	    /// displayLocale.
	    /// </summary>
	    ///
	    /// <param name="objectLocale">the locale of the collator</param>
	    /// <param name="displayLocale">the locale for the collator's display name</param>
	    /// <returns>the display name</returns>
	    /// @stable ICU 2.6
        static public String GetDisplayName(ILOG.J2CsMapping.Util.Locale objectLocale,
                ILOG.J2CsMapping.Util.Locale displayLocale)
        {
	        return GetShim().GetDisplayName(IBM.ICU.Util.ULocale.ForLocale(objectLocale),
	                IBM.ICU.Util.ULocale.ForLocale(displayLocale));
	    }
	
	    /// <summary>
	    /// Get the name of the collator for the objectLocale, localized for the
	    /// displayLocale.
	    /// </summary>
	    ///
	    /// <param name="objectLocale">the locale of the collator</param>
	    /// <param name="displayLocale">the locale for the collator's display name</param>
	    /// <returns>the display name</returns>
	    /// @stable ICU 3.2
	    static public String GetDisplayName(ULocale objectLocale,
	            ULocale displayLocale) {
	        return GetShim().GetDisplayName(objectLocale, displayLocale);
	    }
	
	    /// <summary>
	    /// Get the name of the collator for the objectLocale, localized for the
	    /// current locale.
	    /// </summary>
	    ///
	    /// <param name="objectLocale">the locale of the collator</param>
	    /// <returns>the display name</returns>
	    /// @stable ICU 2.6
        static public String GetDisplayName(ILOG.J2CsMapping.Util.Locale objectLocale)
        {
	        return GetShim().GetDisplayName(IBM.ICU.Util.ULocale.ForLocale(objectLocale),
	                IBM.ICU.Util.ULocale.GetDefault());
	    }
	
	    /// <summary>
	    /// Get the name of the collator for the objectLocale, localized for the
	    /// current locale.
	    /// </summary>
	    ///
	    /// <param name="objectLocale">the locale of the collator</param>
	    /// <returns>the display name</returns>
	    /// @stable ICU 3.2
	    static public String GetDisplayName(ULocale objectLocale) {
	        return GetShim().GetDisplayName(objectLocale, IBM.ICU.Util.ULocale.GetDefault());
	    }
	
	    /// <summary>
	    /// <p>
	    /// Returns this Collator's strength property. The strength property
	    /// determines the minimum level of difference considered significant.
	    /// </p>
	    /// <p>
	    /// See the Collator class description for more details.
	    /// </p>
	    /// </summary>
	    ///
	    /// <returns>this Collator's current strength property.</returns>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.SetStrength(System.Int32)"/>
	    /// <seealso cref="F:IBM.ICU.Text.Collator.PRIMARY"/>
	    /// <seealso cref="F:IBM.ICU.Text.Collator.SECONDARY"/>
	    /// <seealso cref="F:IBM.ICU.Text.Collator.TERTIARY"/>
	    /// <seealso cref="F:IBM.ICU.Text.Collator.QUATERNARY"/>
	    /// <seealso cref="F:IBM.ICU.Text.Collator.IDENTICAL"/>
	    /// @stable ICU 2.8
	    public int GetStrength() {
	        return m_strength_;
	    }
	
	    /// <summary>
	    /// <p>
	    /// Get the decomposition mode of this Collator. Decomposition mode
	    /// determines how Unicode composed characters are handled.
	    /// </p>
	    /// <p>
	    /// See the Collator class description for more details.
	    /// </p>
	    /// </summary>
	    ///
	    /// <returns>the decomposition mode</returns>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.SetDecomposition(System.Int32)"/>
	    /// <seealso cref="F:IBM.ICU.Text.Collator.NO_DECOMPOSITION"/>
	    /// <seealso cref="F:IBM.ICU.Text.Collator.CANONICAL_DECOMPOSITION"/>
	    /// @stable ICU 2.8
	    public int GetDecomposition() {
	        return m_decomposition_;
	    }
	
	    /// <summary>
	    /// <p>
	    /// Compares the source text String to the target text String according to
	    /// this Collator's rules, strength and decomposition mode. Returns an
	    /// integer less than, equal to or greater than zero depending on whether the
	    /// source String is less than, equal to or greater than the target String.
	    /// See the Collator class description for an example of use.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="source">the source String.</param>
	    /// <param name="target">the target String.</param>
	    /// <returns>Returns an integer value. Value is less than zero if source is
	    /// less than target, value is zero if source and target are equal,
	    /// value is greater than zero if source is greater than target.</returns>
	    /// <seealso cref="T:IBM.ICU.Text.CollationKey"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetCollationKey(System.String)"/>
	    /// <exception cref="NullPointerException">thrown if either arguments is null.IllegalArgumentException thrown if either source or targetis not of the class String.</exception>
	    /// @stable ICU 2.8
	    public virtual int Compare(Object source, Object target) {
	        if (!(source  is  String) || !(target  is  String)) {
	            throw new ArgumentException(
	                    "Arguments have to be of type String");
	        }
	        return Compare((String) source, (String) target);
	    }
	
	    // public other methods -------------------------------------------------
	
	    /// <summary>
	    /// Convenience method for comparing the equality of two text Strings using
	    /// this Collator's rules, strength and decomposition mode.
	    /// </summary>
	    ///
	    /// <param name="source">the source string to be compared.</param>
	    /// <param name="target">the target string to be compared.</param>
	    /// <returns>true if the strings are equal according to the collation rules,
	    /// otherwise false.</returns>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.Compare(System.Object, System.Object)"/>
	    /// <exception cref="NullPointerException">thrown if either arguments is null.</exception>
	    /// @stable ICU 2.8
	    public bool Equals(String source, String target) {
	        return (Compare(source, target) == 0);
	    }
	
	    /// <summary>
	    /// Get an UnicodeSet that contains all the characters and sequences tailored
	    /// in this collator.
	    /// </summary>
	    ///
	    /// <returns>a pointer to a UnicodeSet object containing all the code points
	    /// and sequences that may sort differently than in the UCA.</returns>
	    /// @stable ICU 2.4
	    public virtual UnicodeSet GetTailoredSet() {
	        return new UnicodeSet(0, 0x10FFFF);
	    }
	
	    /// <summary>
	    /// <p>
	    /// Compares the source text String to the target text String according to
	    /// this Collator's rules, strength and decomposition mode. Returns an
	    /// integer less than, equal to or greater than zero depending on whether the
	    /// source String is less than, equal to or greater than the target String.
	    /// See the Collator class description for an example of use.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="source">the source String.</param>
	    /// <param name="target">the target String.</param>
	    /// <returns>Returns an integer value. Value is less than zero if source is
	    /// less than target, value is zero if source and target are equal,
	    /// value is greater than zero if source is greater than target.</returns>
	    /// <seealso cref="T:IBM.ICU.Text.CollationKey"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetCollationKey(System.String)"/>
	    /// <exception cref="NullPointerException">thrown if either arguments is null.</exception>
	    /// @stable ICU 2.8
	    public abstract int Compare(String source, String target);
	
	    /// <summary>
	    /// <p>
	    /// Transforms the String into a CollationKey suitable for efficient repeated
	    /// comparison. The resulting key depends on the collator's rules, strength
	    /// and decomposition mode.
	    /// </p>
	    /// <p>
	    /// See the CollationKey class documentation for more information.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="source">the string to be transformed into a CollationKey.</param>
	    /// <returns>the CollationKey for the given String based on this Collator's
	    /// collation rules. If the source String is null, a null
	    /// CollationKey is returned.</returns>
	    /// <seealso cref="T:IBM.ICU.Text.CollationKey"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.Compare(System.String, System.String)"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetRawCollationKey(System.String, IBM.ICU.Text.RawCollationKey)"/>
	    /// @stable ICU 2.8
	    public abstract CollationKey GetCollationKey(String source);
	
	    /// <summary>
	    /// Gets the simpler form of a CollationKey for the String source following
	    /// the rules of this Collator and stores the result into the user provided
	    /// argument key. If key has a internal byte array of length that's too small
	    /// for the result, the internal byte array will be grown to the exact
	    /// required size.
	    /// </summary>
	    ///
	    /// <param name="source">the text String to be transformed into a RawCollationKey</param>
	    /// <returns>If key is null, a new instance of RawCollationKey will be created
	    /// and returned, otherwise the user provided key will be returned.</returns>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.Compare(System.String, System.String)"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetCollationKey(System.String)"/>
	    /// <seealso cref="T:IBM.ICU.Text.RawCollationKey"/>
	    /// @stable ICU 2.8
	    public abstract RawCollationKey GetRawCollationKey(String source,
	            RawCollationKey key);
	
	    /// <summary>
	    /// <p>
	    /// Variable top is a two byte primary value which causes all the codepoints
	    /// with primary values that are less or equal than the variable top to be
	    /// shifted when alternate handling is set to SHIFTED.
	    /// </p>
	    /// <p>
	    /// Sets the variable top to a collation element value of a string supplied.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="varTop">one or more (if contraction) characters to which the variabletop should be set</param>
	    /// <returns>a int value containing the value of the variable top in upper 16
	    /// bits. Lower 16 bits are undefined.</returns>
	    /// <exception cref="IllegalArgumentException">is thrown if varTop argument is not a valid variable topelement. A variable top element is invalid when it is acontraction that does not exist in the Collation order orwhen the PRIMARY strength collation element for thevariable top has more than two bytes</exception>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetVariableTop"/>
	    /// <seealso cref="M:IBM.ICU.Text.RuleBasedCollator.SetAlternateHandlingShifted(System.Boolean)"/>
	    /// @stable ICU 2.6
	    public abstract int SetVariableTop(String varTop);
	
	    /// <summary>
	    /// Gets the variable top value of a Collator. Lower 16 bits are undefined
	    /// and should be ignored.
	    /// </summary>
	    ///
	    /// <returns>the variable top value of a Collator.</returns>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.SetVariableTop(System.String)"/>
	    /// @stable ICU 2.6
	    public abstract int GetVariableTop();
	
	    /// <summary>
	    /// Sets the variable top to a collation element value supplied. Variable top
	    /// is set to the upper 16 bits. Lower 16 bits are ignored.
	    /// </summary>
	    ///
	    /// <param name="varTop">Collation element value, as returned by setVariableTop orgetVariableTop</param>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.GetVariableTop"/>
	    /// <seealso cref="M:IBM.ICU.Text.Collator.SetVariableTop(System.String)"/>
	    /// @stable ICU 2.6
	    public abstract void SetVariableTop(int varTop);
	
	    /// <summary>
	    /// Get the version of this collator object.
	    /// </summary>
	    ///
	    /// <returns>the version object associated with this collator</returns>
	    /// @stable ICU 2.8
	    public abstract VersionInfo GetVersion();
	
	    /// <summary>
	    /// Get the UCA version of this collator object.
	    /// </summary>
	    ///
	    /// <returns>the version object associated with this collator</returns>
	    /// @stable ICU 2.8
	    public abstract VersionInfo GetUCAVersion();
	
	    // protected constructor -------------------------------------------------
	
	    /// <summary>
	    /// Empty default constructor to make javadocs happy
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    protected internal Collator() {
	        this.m_strength_ = TERTIARY;
	        this.m_decomposition_ = CANONICAL_DECOMPOSITION;
	    }
	
	    // package private methods -----------------------------------------------
	
	    // private data members --------------------------------------------------
	
	    /// <summary>
	    /// Collation strength
	    /// </summary>
	    ///
	    private int m_strength_;
	
	    /// <summary>
	    /// Decomposition mode
	    /// </summary>
	    ///
	    private int m_decomposition_;
	
	    private static readonly bool DEBUG = IBM.ICU.Impl.ICUDebug.Enabled("collator");
	
	    // private methods -------------------------------------------------------
	
	    // end registry stuff
	
	    // -------- BEGIN ULocale boilerplate --------
	
	    /// <summary>
	    /// Return the locale that was used to create this object, or null. This may
	    /// may differ from the locale requested at the time of this object's
	    /// creation. For example, if an object is created for locale
	    /// <tt>en_US_CALIFORNIA</tt>, the actual data may be drawn from <tt>en</tt>
	    /// (the <i>actual</i> locale), and <tt>en_US</tt> may be the most specific
	    /// locale that exists (the <i>valid</i> locale).
	    /// <p>
	    /// Note: This method will be implemented in ICU 3.0; ICU 2.8 contains a
	    /// partial preview implementation. The/// <i>actual</i> locale is returned
	    /// correctly, but the <i>valid</i> locale is not, in most cases.
	    /// </summary>
	    ///
	    /// <param name="type">type of information requested, either<see cref="M:IBM.ICU.Text.ULocale.VALID_LOCALE"/> or<see cref="M:IBM.ICU.Text.ULocale.ACTUAL_LOCALE"/>.</param>
	    /// <returns>the information specified by <i>type</i>, or null if this object
	    /// was not constructed from locale data.</returns>
	    /// <seealso cref="T:IBM.ICU.Text.ULocale"/>
	    /// <seealso cref="M:IBM.ICU.Text.ULocale.VALID_LOCALE"/>
	    /// <seealso cref="M:IBM.ICU.Text.ULocale.ACTUAL_LOCALE"/>
	    /// @draft ICU 2.8 (retain)
	    /// @provisional This API might change or be removed in a future release.
	    public ULocale GetLocale(ULocale.Type type) {
	        return (type == IBM.ICU.Util.ULocale.ACTUAL_LOCALE) ? this.actualLocale
	                : this.validLocale;
	    }
	
	    /// <exclude/>
	    /// <summary>
	    /// Set information about the locales that were used to create this object.
	    /// If the object was not constructed from locale data, both arguments should
	    /// be set to null. Otherwise, neither should be null. The actual locale must
	    /// be at the same level or less specific than the valid locale. This method
	    /// is intended for use by factories or other entities that create objects of
	    /// this class.
	    /// </summary>
	    ///
	    /// <param name="valid">the most specific locale containing any resource data, or null</param>
	    /// <param name="actual">the locale containing data used to construct this object, ornull</param>
	    /// <seealso cref="T:IBM.ICU.Text.ULocale"/>
	    /// <seealso cref="M:IBM.ICU.Text.ULocale.VALID_LOCALE"/>
	    /// <seealso cref="M:IBM.ICU.Text.ULocale.ACTUAL_LOCALE"/>
	    internal void SetLocale(ULocale valid, ULocale actual) {
	        // Change the following to an assertion later
	        if ((valid == null) != (actual == null)) {
	            // /CLOVER:OFF
	            throw new ArgumentException();
	            // /CLOVER:ON
	        }
	        // Another check we could do is that the actual locale is at
	        // the same level or less specific than the valid locale.
	        this.validLocale = valid;
	        this.actualLocale = actual;
	    }
	
	    /// <exclude/>
	    /// <summary>
	    /// The most specific locale containing any resource data, or null.
	    /// </summary>
	    ///
	    /// <seealso cref="T:IBM.ICU.Text.ULocale"/>
	    private ULocale validLocale;
	
	    /// <exclude/>
	    /// <summary>
	    /// The locale containing data used to construct this object, or null.
	    /// </summary>
	    ///
	    /// <seealso cref="T:IBM.ICU.Text.ULocale"/>
	    private ULocale actualLocale;
	
	    // -------- END ULocale boilerplate --------
	}
}
