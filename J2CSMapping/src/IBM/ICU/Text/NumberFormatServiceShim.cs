/*
 *******************************************************************************
 * Copyright (C) 2003-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using IBM.ICU.Impl;
     using System;
     using IBM.ICU.Util;
     using System.Resources;
	
	internal class NumberFormatServiceShim : NumberFormat.NumberFormatShim {
	
	    internal override ILOG.J2CsMapping.Util.Locale[] GetAvailableLocales() {
	        if (service.IsDefault()) {
	            return IBM.ICU.Impl.ICUResourceBundle
	                    .GetAvailableLocales(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME);
	        }
	        return service.GetAvailableLocales();
	    }
	
	    internal override IBM.ICU.Util.ULocale[] GetAvailableULocales() {
	        if (service.IsDefault()) {
	            return IBM.ICU.Impl.ICUResourceBundle
	                    .GetAvailableULocales(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME);
	        }
	        return service.GetAvailableULocales();
	    }
	
	    private sealed class NFFactory : IBM.ICU.Impl.ICULocaleService.LocaleKeyFactory  {
	        private IBM.ICU.Text.NumberFormat.NumberFormatFactory  delegat0;
	
	        internal NFFactory(IBM.ICU.Text.NumberFormat.NumberFormatFactory  delegat0) : base((delegat0.Visible())?IBM.ICU.Impl.ICULocaleService.LocaleKeyFactory.VISIBLE:IBM.ICU.Impl.ICULocaleService.LocaleKeyFactory.INVISIBLE) {
	            this.delegat0 = delegat0;
	        }
	
	        public override Object Create(IBM.ICU.Impl.ICUService.Key  key, ICUService service) {
	            if (HandlesKey(key)) {
	                IBM.ICU.Impl.ICULocaleService.LocaleKey  lkey = (IBM.ICU.Impl.ICULocaleService.LocaleKey ) key;
	                ULocale loc = lkey.CanonicalLocale();
	                int kind = lkey.Kind();
	
	                Object result = delegat0.CreateFormat(loc, kind);
	                if (result == null) {
	                    result = service.GetKey(key, null, this);
	                }
	                return result;
	            }
	            return null;
	        }
	
	        protected internal override ILOG.J2CsMapping.Collections.ISet GetSupportedIDs() {
	            return delegat0.GetSupportedLocaleNames();
	        }
	    }
	
	    internal override Object RegisterFactory(IBM.ICU.Text.NumberFormat.NumberFormatFactory  factory) {
	        return service.RegisterFactory(new NumberFormatServiceShim.NFFactory (factory));
	    }
	
	    internal override bool Unregister(Object registryKey) {
	        return service.UnregisterFactory((IBM.ICU.Impl.ICUService.Factory ) registryKey);
	    }
	
	    internal override NumberFormat CreateInstance(IBM.ICU.Util.ULocale desiredLocale, int choice) {
	
	        // use service cache
	        // if (service.isDefault()) {
	        // return NumberFormat.createInstance(desiredLocale, choice);
	        // }
	
	        ULocale[] actualLoc = new ULocale[1];
	        if (desiredLocale.Equals(IBM.ICU.Util.ULocale.ROOT)) {
	            desiredLocale = IBM.ICU.Util.ULocale.ROOT;
	        }
	        NumberFormat fmt = (NumberFormat) service.Get(desiredLocale, choice,
	                actualLoc);
	        if (fmt == null) {
	            throw new MissingManifestResourceException("Unable to construct NumberFormat");
	        }
	        fmt = (NumberFormat) fmt.Clone();
	
	        ULocale uloc = actualLoc[0];
	        fmt.SetLocale(uloc, uloc); // services make no distinction between
	                                   // actual & valid
	        return fmt;
	    }
	
	    private class NFService : ICULocaleService {
	        internal NFService() : base("NumberFormat") {
	            this.RegisterFactory(new IBM.ICU.Text.NumberFormatServiceShim.NFService.RBNumberFormatFactory ());
	            MarkDefault();
	        }
	
	        internal class RBNumberFormatFactory : IBM.ICU.Impl.ICULocaleService.ICUResourceBundleFactory  {
	            protected internal override Object HandleCreate(IBM.ICU.Util.ULocale loc, int kind,
	                    ICUService service) {
	                return IBM.ICU.Text.NumberFormat.CreateInstance(loc, kind);
	            }
	        }
	    }
	
	    private static ICULocaleService service = new NumberFormatServiceShim.NFService ();
	}
}
