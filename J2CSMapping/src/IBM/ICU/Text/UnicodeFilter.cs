/*
 *******************************************************************************
 * Copyright (C) 1996-2006, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
	/// <c>UnicodeFilter</c> defines a protocol for selecting a subset of the
	/// full range (U+0000 to U+FFFF) of Unicode characters. Currently, filters are
	/// used in conjunction with classes like <see cref="T:IBM.ICU.Text.Transliterator"/> to only process
	/// selected characters through a transformation.
	/// </summary>
	///
	/// @stable ICU 2.0
	public abstract class UnicodeFilter : UnicodeMatcher {
	
	    /// <summary>
	    /// Returns <tt>true</tt> for characters that are in the selected subset. In
	    /// other words, if a character is <b>to be filtered</b>, then
	    /// <tt>contains()</tt> returns <b><tt>false</tt></b>.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public abstract bool Contains(int c);
	
	    /// <summary>
	    /// Default implementation of UnicodeMatcher::matches() for Unicode filters.
	    /// Matches a single 16-bit code unit at offset.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public virtual int Matches(Replaceable text, int[] offset, int limit,
	            bool incremental) {
	        int c;
	        if (offset[0] < limit && Contains(c = text.Char32At(offset[0]))) {
	            offset[0] += IBM.ICU.Text.UTF16.GetCharCount(c);
	            return IBM.ICU.Text.UnicodeMatcher_Constants.U_MATCH;
	        }
	        if (offset[0] > limit && Contains(c = text.Char32At(offset[0]))) {
	            // Backup offset by 1, unless the preceding character is a
	            // surrogate pair -- then backup by 2 (keep offset pointing at
	            // the lead surrogate).
	            --offset[0];
	            if (offset[0] >= 0) {
	                offset[0] -= IBM.ICU.Text.UTF16.GetCharCount(text.Char32At(offset[0])) - 1;
	            }
	            return IBM.ICU.Text.UnicodeMatcher_Constants.U_MATCH;
	        }
	        if (incremental && offset[0] == limit) {
	            return IBM.ICU.Text.UnicodeMatcher_Constants.U_PARTIAL_MATCH;
	        }
	        return IBM.ICU.Text.UnicodeMatcher_Constants.U_MISMATCH;
	    }
	
	    /// <exclude/>
	    /// <summary>
	    /// (This should not be here; it is declared to make CheckTags happy. Java
	    /// inserts a synthetic constructor and CheckTags can't tell that it's
	    /// synthetic.)
	    /// TODO Remove this when the JDK property implements MemberDoc.isSynthetic
	    /// </summary>
	    ///
	    protected internal UnicodeFilter() {
	    }
	
	    /// <summary>
	    /// from com.ibm.icu.text.UnicodeMatcher
	    /// </summary>
	    ///
	    public abstract void AddMatchSetTo(IBM.ICU.Text.UnicodeSet toUnionTo);
	
	    /// <summary>
	    /// from com.ibm.icu.text.UnicodeMatcher
	    /// </summary>
	    ///
	    public abstract bool MatchesIndexValue(int v);
	
	    /// <summary>
	    /// from com.ibm.icu.text.UnicodeMatcher
	    /// </summary>
	    ///
	    public abstract System.String ToPattern(bool escapeUnprintable);
	}
}
