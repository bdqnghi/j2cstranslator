/*
 *******************************************************************************
 * Copyright (C) 2005, International Business Machines Corporation and         *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <exclude/>
	/// <summary>
	/// class CharsetRecog_2022 part of the ICU charset detection imlementation. This
	/// is a superclass for the individual detectors for each of the detectable
	/// members of the ISO 2022 family of encodings.
	/// The separate classes are nested within this class.
	/// </summary>
	///
	abstract internal class CharsetRecog_2022 : CharsetRecognizer {
	
	    /// <summary>
	    /// Matching function shared among the 2022 detectors JP, CN and KR Counts up
	    /// the number of legal an unrecognized escape sequences in the sample of
	    /// text, and computes a score based on the total number & the proportion
	    /// that fit the encoding.
	    /// </summary>
	    ///
	    /// <param name="text">the byte buffer containing text to analyse</param>
	    /// <param name="textLen">the size of the text in the byte.</param>
	    /// <param name="escapeSequences">the byte escape sequences to test for.</param>
	    /// <returns>match quality, in the range of 0-100.</returns>
	    internal int Match(byte[] text, int textLen, byte[][] escapeSequences) {
	        int i, j;
	        int escN;
	        int hits = 0;
	        int misses = 0;
	        int shifts = 0;
	        int quality;
	        scanInput: {
	            for (i = 0; i < textLen; i++) {
	                if (text[i] == 0x1b) {
	                    checkEscapes: {
	                        for (escN = 0; escN < escapeSequences.Length; escN++) {
	                            byte[] seq = escapeSequences[escN];
	
	                            for (j = 1; j < seq.Length; j++) {
	                                if (seq[j] != text[i + j]) {
	                                    goto checkEscapes;
	                                }
	                            }
	
	                            hits++;
	                            i += seq.Length - 1;
	                            goto scanInput;
	                        }
	                    }
	                    gotocheckEscapes:
	                    ;
	
	                    misses++;
	                }
	
	                if (text[i] == 0x0e || text[i] == 0x0f) {
	                    // Shift in/out
	                    shifts++;
	                }
	            }
	        }
	        gotoscanInput:
	        ;
	
	        if (hits == 0) {
	            return 0;
	        }
	
	        //
	        // Initial quality is based on relative proportion of recongized vs.
	        // unrecognized escape sequences.
	        // All good: quality = 100;
	        // half or less good: quality = 0;
	        // linear inbetween.
	        quality = (100 * hits - 100 * misses) / (hits + misses);
	
	        // Back off quality if there were too few escape sequences seen.
	        // Include shifts in this computation, so that KR does not get penalized
	        // for having only a single Escape sequence, but many shifts.
	        if (hits + shifts < 5) {
	            quality -= (5 - (hits + shifts)) * 10;
	        }
	
	        if (quality < 0) {
	            quality = 0;
	        }
	        return quality;
	    }
	
	    internal class CharsetRecog_2022JP : CharsetRecog_2022 {
	        public CharsetRecog_2022JP() {
	            this.escapeSequences = new byte[][] { new byte[] { 0x1b, 0x24, 0x28, 0x43 },
	                    new byte[] { 0x1b, 0x24, 0x28, 0x44 },
	                    new byte[] { 0x1b, 0x24, 0x40 },
	                    new byte[] { 0x1b, 0x24, 0x41 },
	                    new byte[] { 0x1b, 0x24, 0x42 },
	                    new byte[] { 0x1b, 0x26, 0x40 },
	                    new byte[] { 0x1b, 0x28, 0x42 },
	                    new byte[] { 0x1b, 0x28, 0x48 },
	                    new byte[] { 0x1b, 0x28, 0x49 },
	                    new byte[] { 0x1b, 0x28, 0x4a },
	                    new byte[] { 0x1b, 0x2e, 0x41 },
	                    new byte[] { 0x1b, 0x2e, 0x46 } };
	        }
	
	        private byte[][] escapeSequences;
	
	        internal override String GetName() {
	            return "ISO-2022-JP";
	        }
	
	        internal override int Match(CharsetDetector det) {
	            return Match(det.fInputBytes, det.fInputLen, escapeSequences);
	        }
	    }
	
	    internal class CharsetRecog_2022KR : CharsetRecog_2022 {
	        public CharsetRecog_2022KR() {
	            this.escapeSequences = new byte[][] { new byte[] { 0x1b, 0x24, 0x29, 0x43 } };
	        }
	
	        private byte[][] escapeSequences;
	
	        internal override String GetName() {
	            return "ISO-2022-KR";
	        }
	
	        internal override int Match(CharsetDetector det) {
	            return Match(det.fInputBytes, det.fInputLen, escapeSequences);
	        }
	
	    }
	
	    internal class CharsetRecog_2022CN : CharsetRecog_2022 {
	        public CharsetRecog_2022CN() {
	            this.escapeSequences = new byte[][] { new byte[] { 0x1b, 0x24, 0x29, 0x41 },
	                    new byte[] { 0x1b, 0x24, 0x29, 0x47 },
	                    new byte[] { 0x1b, 0x24, 0x2A, 0x48 },
	                    new byte[] { 0x1b, 0x24, 0x29, 0x45 },
	                    new byte[] { 0x1b, 0x24, 0x2B, 0x49 },
	                    new byte[] { 0x1b, 0x24, 0x2B, 0x4A },
	                    new byte[] { 0x1b, 0x24, 0x2B, 0x4B },
	                    new byte[] { 0x1b, 0x24, 0x2B, 0x4C },
	                    new byte[] { 0x1b, 0x24, 0x2B, 0x4D },
	                    new byte[] { 0x1b, 0x4e }, new byte[] { 0x1b, 0x4f } };
	        }
	
	        private byte[][] escapeSequences;
	
	        internal override String GetName() {
	            return "ISO-2022-CN";
	        }
	
	        internal override int Match(CharsetDetector det) {
	            return Match(det.fInputBytes, det.fInputLen, escapeSequences);
	        }
	    }
	
	}
}
