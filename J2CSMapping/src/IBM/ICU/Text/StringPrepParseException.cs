/*
 *******************************************************************************
 * Copyright (C) 2003-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
     using ILOG.J2CsMapping.Util;
	
	/// <summary>
	/// Exception that signals an error has occurred while parsing the input to
	/// StringPrep or IDNA.
	/// </summary>
	///
	/// @stable ICU 2.8
	[Serializable]
     public class StringPrepParseException : ILOG.J2CsMapping.Util.ParseException
     {
	    // Generated by serialver from JDK 1.4.1_01
	    internal const long serialVersionUID = 7160264827701651255L;
	
	    
	    /// @stable ICU 2.8
	    public const int INVALID_CHAR_FOUND = 0;
	
	    
	    /// @stable ICU 2.8
	    public const int ILLEGAL_CHAR_FOUND = 1;
	
	    
	    /// @stable ICU 2.8
	    public const int PROHIBITED_ERROR = 2;
	
	    
	    /// @stable ICU 2.8
	    public const int UNASSIGNED_ERROR = 3;
	
	    
	    /// @stable ICU 2.8
	    public const int CHECK_BIDI_ERROR = 4;
	
	    
	    /// @stable ICU 2.8
	    public const int STD3_ASCII_RULES_ERROR = 5;
	
	    
	    /// @stable ICU 2.8
	    public const int ACE_PREFIX_ERROR = 6;
	
	    
	    /// @stable ICU 2.8
	    public const int VERIFICATION_ERROR = 7;
	
	    
	    /// @stable ICU 2.8
	    public const int LABEL_TOO_LONG_ERROR = 8;
	
	    
	    /// @stable ICU 2.8
	    public const int BUFFER_OVERFLOW_ERROR = 9;
	
	    
	    /// @stable ICU 2.8
	    public const int ZERO_LENGTH_LABEL = 10;
	
	    
	    /// @draft ICU 3.8
	    public const int DOMAIN_NAME_TOO_LONG_ERROR = 11;
	
	    /// <summary>
	    /// Construct a ParseException object with the given message and error code
	    /// </summary>
	    ///
	    /// <param name="message">A string describing the type of error that occurred</param>
	    /// <param name="error">The error that has occurred</param>
	    /// @stable ICU 2.8
	    public StringPrepParseException(String message, int error) : base(message, -1) {
	        this.preContext = new StringBuilder();
	        this.postContext = new StringBuilder();
	        this.error = error;
	        this.line = 0;
	    }
	
	    /// <summary>
	    /// Construct a ParseException object with the given message and error code
	    /// </summary>
	    ///
	    /// <param name="message">A string describing the type of error that occurred</param>
	    /// <param name="error">The error that has occurred</param>
	    /// <param name="rules">The input rules string</param>
	    /// <param name="pos">The position of error in the rules string</param>
	    /// @stable ICU 2.8
	    public StringPrepParseException(String message, int error, String rules,
	            int pos) : base(message, -1) {
	        this.preContext = new StringBuilder();
	        this.postContext = new StringBuilder();
	        this.error = error;
	        SetContext(rules, pos);
	        this.line = 0;
	    }
	
	    /// <summary>
	    /// Construct a ParseException object with the given message and error code
	    /// </summary>
	    ///
	    /// <param name="message">A string describing the type of error that occurred</param>
	    /// <param name="error">The error that has occurred</param>
	    /// <param name="rules">The input rules string</param>
	    /// <param name="pos">The position of error in the rules string</param>
	    /// <param name="lineNumber">The line number at which the error has occurred. If the parseengine is not using this field, it should set it to zero.Otherwise it should be a positive integer. The default valueof this field is -1. It will be set to 0 if the codepopulating this struct is not using line numbers.</param>
	    /// @stable ICU 2.8
	    public StringPrepParseException(String message, int error, String rules,
	            int pos, int lineNumber) : base(message, -1) {
	        this.preContext = new StringBuilder();
	        this.postContext = new StringBuilder();
	        this.error = error;
	        SetContext(rules, pos);
	        this.line = lineNumber;
	    }
	
	    /// <summary>
	    /// Compare this ParseException to another and evaluate if they are equal.
	    /// The comparison works only on the type of error and does not compare the
	    /// rules strings, if any, for equality.
	    /// </summary>
	    ///
	    /// <param name="other">The exception that this object should be compared to</param>
	    /// <returns>true if the objects are equal, false if unequal</returns>
	    /// @stable ICU 2.8
	    public override bool Equals(Object other) {
	        if (!(other  is  StringPrepParseException)) {
	            return false;
	        }
	        return ((StringPrepParseException) other).error == this.error;
	
	    }
	
	    /// <summary>
	    /// Returns the position of error in the rules string
	    /// </summary>
	    ///
	    /// <returns>String</returns>
	    /// @stable ICU 2.8
	    public override String ToString() {
	        StringBuilder buf = new StringBuilder();
	        buf.Append(base.Message);
	        buf.Append(". line:  ");
	        buf.Append(line);
	        buf.Append(". preContext:  ");
	        buf.Append(preContext);
	        buf.Append(". postContext: ");
	        buf.Append(postContext);
	        buf.Append("\n");
	        return buf.ToString();
	    }
	
	    private int error;
	
	    /// <summary>
	    /// The line on which the error occured. If the parse engine is not using
	    /// this field, it should set it to zero. Otherwise it should be a positive
	    /// integer. The default value of this field is -1. It will be set to 0 if
	    /// the code populating this struct is not using line numbers.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    private int line;
	
	    /// <summary>
	    /// Textual context before the error. Null-terminated. May be the empty
	    /// string if not implemented by parser.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    private StringBuilder preContext;
	
	    /// <summary>
	    /// Textual context after the error. Null-terminated. May be the empty string
	    /// if not implemented by parser.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    private StringBuilder postContext;
	
	    private const int PARSE_CONTEXT_LEN = 16;
	
	    private void SetPreContext(String str, int pos) {
	        SetPreContext(str.ToCharArray(), pos);
	    }
	
	    private void SetPreContext(char[] str, int pos) {
	        int start = (pos <= PARSE_CONTEXT_LEN) ? 0
	                : (pos - (PARSE_CONTEXT_LEN - 1));
	        int len = (start <= PARSE_CONTEXT_LEN) ? start : PARSE_CONTEXT_LEN;
	        preContext.Append(str, start, len);
	
	    }
	
	    private void SetPostContext(String str, int pos) {
	        SetPostContext(str.ToCharArray(), pos);
	    }
	
	    private void SetPostContext(char[] str, int pos) {
	        int start = pos;
	        int len = str.Length - start;
	        postContext.Append(str, start, len);
	
	    }
	
	    private void SetContext(String str, int pos) {
	        SetPreContext(str, pos);
	        SetPostContext(str, pos);
	    }
	
	    /// <summary>
	    /// Returns the error code of this exception. This method is only used for
	    /// testing to verify the error.
	    /// </summary>
	    ///
	    /// <returns>The error code</returns>
	    /// @draft ICU 3.8
	    public int GetError() {
	        return error;
	    }
	}
}
