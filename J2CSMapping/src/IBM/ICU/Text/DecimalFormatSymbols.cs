/*
 *******************************************************************************
 * Copyright (C) 1996-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using IBM.ICU.Impl;
	using IBM.ICU.Util;
	using ILOG.J2CsMapping.IO;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Globalization;
	using System.IO;
	using System.Resources;
	using System.Runtime.CompilerServices;
	using System.Runtime.Serialization;
     using ILOG.J2CsMapping.Util;
     using ILOG.J2CsMapping.Formatting;
	
	/// <summary>
	/// This class represents the set of symbols (such as the decimal separator, the
	/// grouping separator, and so on) needed by <c>DecimalFormat</c> to format
	/// numbers. <c>DecimalFormat</c> creates for itself an instance of
	/// <c>DecimalFormatSymbols</c> from its locale data. If you need to change
	/// any of these symbols, you can get the <c>DecimalFormatSymbols</c>
	/// object from your <c>DecimalFormat</c> and modify it.
	/// <p>
	/// <strong>This is an enhanced version of <c>DecimalFormatSymbols</c> that
	/// is based on the standard version in the JDK. New or changed functionality is
	/// labeled <strong><font face=helvetica color=red>NEW</font></strong>.</strong>
	/// </summary>
	///
	/// <seealso cref="T:System.Globalization.CultureInfo"/>
	/// <seealso cref="T:IBM.ICU.Text.DecimalFormat"/>
	/// @stable ICU 2.0
	[Serializable]
	
	public sealed class DecimalFormatSymbols : ICloneable {
	
	    /// <summary>
	    /// Create a DecimalFormatSymbols object for the default locale.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public DecimalFormatSymbols() {
	        this.serialVersionOnStream = currentSerialVersion;
	        this.currencyPattern = null;
	        Initialize(IBM.ICU.Util.ULocale.GetDefault());
	    }
	
	    /// <summary>
	    /// Create a DecimalFormatSymbols object for the given locale.
	    /// </summary>
	    ///
	    /// <param name="locale">the locale</param>
	    /// @stable ICU 2.0
        public DecimalFormatSymbols(Locale locale)
        {
	        this.serialVersionOnStream = currentSerialVersion;
	        this.currencyPattern = null;
	        Initialize(IBM.ICU.Util.ULocale.ForLocale(locale));
	    }
	
	    /// <summary>
	    /// Create a DecimalFormatSymbols object for the given locale.
	    /// </summary>
	    ///
	    /// <param name="locale">the locale</param>
	    /// @stable ICU 3.2
	    public DecimalFormatSymbols(ULocale locale) {
	        this.serialVersionOnStream = currentSerialVersion;
	        this.currencyPattern = null;
	        Initialize(locale);
	    }
	
	    /// <summary>
	    /// Gets a DecimalFormatSymbols instance for the default locale. <br>
	    /// <br>
	    /// <b>Note:</b> Unlike
	    /// <c>java.text.DecimalFormatSymbols#getInstance</c>, this method
	    /// simply returns <c>new com.ibm.icu.text.DecimalFormatSymbols()</c>.
	    /// ICU does not support <c>DecimalFormatSymbolsProvider</c> introduced
	    /// in Java 6 or its equivalent implementation for now.
	    /// </summary>
	    ///
	    /// <returns>A DecimalFormatSymbols instance.</returns>
	    /// @stable ICU 3.8
	    public static DecimalFormatSymbols GetInstance() {
	        return new DecimalFormatSymbols();
	    }
	
	    /// <summary>
	    /// Gets a DecimalFormatSymbols instance for the given locale. <br>
	    /// <br>
	    /// <b>Note:</b> Unlike
	    /// <c>java.text.DecimalFormatSymbols#getInstance</c>, this method
	    /// simply returns
	    /// <c>new com.ibm.icu.text.DecimalFormatSymbols(locale)</c>. ICU does
	    /// not support <c>DecimalFormatSymbolsProvider</c> introduced in Java
	    /// 6 or its equivalent implementation for now.
	    /// </summary>
	    ///
	    /// <param name="locale">the locale.</param>
	    /// <returns>A DecimalFormatSymbols instance.</returns>
	    /// @stable ICU 3.8
        public static DecimalFormatSymbols GetInstance(Locale locale)
        {
	        return new DecimalFormatSymbols(locale);
	    }
	
	    /// <summary>
	    /// Gets a DecimalFormatSymbols instance for the given locale. <br>
	    /// <br>
	    /// <b>Note:</b> Unlike
	    /// <c>java.text.DecimalFormatSymbols#getInstance</c>, this method
	    /// simply returns
	    /// <c>new com.ibm.icu.text.DecimalFormatSymbols(locale)</c>. ICU does
	    /// not support <c>DecimalFormatSymbolsProvider</c> introduced in Java
	    /// 6 or its equivalent implementation for now.
	    /// </summary>
	    ///
	    /// <param name="locale">the locale.</param>
	    /// <returns>A DecimalFormatSymbols instance.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public static DecimalFormatSymbols GetInstance(ULocale locale) {
	        return new DecimalFormatSymbols(locale);
	    }
	
	    /// <summary>
	    /// Returns an array of all locales for which the <c>getInstance</c>
	    /// methods of this class can return localized instances. <br>
	    /// <br>
	    /// <b>Note:</b> Unlike
	    /// <c>java.text.DecimalFormatSymbols#getAvailableLocales</c>, this
	    /// method simply returns the array of <c>Locale</c>s available for
	    /// this class. ICU does not support
	    /// <c>DecimalFormatSymbolsProvider</c> introduced in Java 6 or its
	    /// equivalent implementation for now.
	    /// </summary>
	    ///
	    /// <returns>An array of <c>Locale</c>s for which localized
	    /// <c>DecimalFormatSymbols</c> instances are available.</returns>
	    /// @stable ICU 3.8
        public static Locale[] GetAvailableLocales()
        {
	        return IBM.ICU.Impl.ICUResourceBundle
	                .GetAvailableLocales(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME);
	    }
	
	    /// <summary>
	    /// Returns an array of all locales for which the <c>getInstance</c>
	    /// methods of this class can return localized instances. <br>
	    /// <br>
	    /// <b>Note:</b> Unlike
	    /// <c>java.text.DecimalFormatSymbols#getAvailableLocales</c>, this
	    /// method simply returns the array of <c>ULocale</c>s available in
	    /// this class. ICU does not support
	    /// <c>DecimalFormatSymbolsProvider</c> introduced in Java 6 or its
	    /// equivalent implementation for now.
	    /// </summary>
	    ///
	    /// <returns>An array of <c>ULocale</c>s for which localized
	    /// <c>DecimalFormatSymbols</c> instances are available.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public static ULocale[] GetAvailableULocales() {
	        return IBM.ICU.Impl.ICUResourceBundle
	                .GetAvailableULocales(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME);
	    }
	
	    /// <summary>
	    /// Return the character used for zero. Different for Arabic, etc.
	    /// </summary>
	    ///
	    /// <returns>the character</returns>
	    /// @stable ICU 2.0
	    public char GetZeroDigit() {
	        return zeroDigit;
	    }
	
	    /// <summary>
	    /// Set the character used for zero.
	    /// </summary>
	    ///
	    /// <param name="zeroDigit">the zero character.</param>
	    /// @stable ICU 2.0
	    public void SetZeroDigit(char zeroDigit) {
	        this.zeroDigit = zeroDigit;
	    }
	
	    /// <summary>
	    /// Return the character used to represent a significant digit in a pattern.
	    /// </summary>
	    ///
	    /// <returns>the significant digit pattern character</returns>
	    /// @stable ICU 3.0
	    public char GetSignificantDigit() {
	        return sigDigit;
	    }
	
	    /// <summary>
	    /// Set the character used to represent a significant digit in a pattern.
	    /// </summary>
	    ///
	    /// <param name="sigDigit">the significant digit pattern character</param>
	    /// @stable ICU 3.0
	    public void SetSignificantDigit(char sigDigit) {
	        this.sigDigit = sigDigit;
	    }
	
	    /// <summary>
	    /// Return the character used for thousands separator. Different for French,
	    /// etc.
	    /// </summary>
	    ///
	    /// <returns>the thousands character</returns>
	    /// @stable ICU 2.0
	    public char GetGroupingSeparator() {
	        return groupingSeparator;
	    }
	
	    /// <summary>
	    /// Set the character used for thousands separator. Different for French,
	    /// etc.
	    /// </summary>
	    ///
	    /// <param name="groupingSeparator">the thousands character</param>
	    /// @stable ICU 2.0
	    public void SetGroupingSeparator(char groupingSeparator) {
	        this.groupingSeparator = groupingSeparator;
	    }
	
	    /// <summary>
	    /// Return the character used for decimal sign. Different for French, etc.
	    /// </summary>
	    ///
	    /// <returns>the decimal character</returns>
	    /// @stable ICU 2.0
	    public char GetDecimalSeparator() {
	        return decimalSeparator;
	    }
	
	    /// <summary>
	    /// Set the character used for decimal sign. Different for French, etc.
	    /// </summary>
	    ///
	    /// <param name="decimalSeparator">the decimal character</param>
	    /// @stable ICU 2.0
	    public void SetDecimalSeparator(char decimalSeparator) {
	        this.decimalSeparator = decimalSeparator;
	    }
	
	    /// <summary>
	    /// Return the character used for mille percent sign. Different for Arabic,
	    /// etc.
	    /// </summary>
	    ///
	    /// <returns>the mille percent character</returns>
	    /// @stable ICU 2.0
	    public char GetPerMill() {
	        return perMill;
	    }
	
	    /// <summary>
	    /// Set the character used for mille percent sign. Different for Arabic, etc.
	    /// </summary>
	    ///
	    /// <param name="perMill">the mille percent character</param>
	    /// @stable ICU 2.0
	    public void SetPerMill(char perMill) {
	        this.perMill = perMill;
	    }
	
	    /// <summary>
	    /// Return the character used for percent sign. Different for Arabic, etc.
	    /// </summary>
	    ///
	    /// <returns>the percent character</returns>
	    /// @stable ICU 2.0
	    public char GetPercent() {
	        return percent;
	    }
	
	    /// <summary>
	    /// Set the character used for percent sign. Different for Arabic, etc.
	    /// </summary>
	    ///
	    /// <param name="percent">the percent character</param>
	    /// @stable ICU 2.0
	    public void SetPercent(char percent) {
	        this.percent = percent;
	    }
	
	    /// <summary>
	    /// Return the character used for a digit in a pattern.
	    /// </summary>
	    ///
	    /// <returns>the digit pattern character</returns>
	    /// @stable ICU 2.0
	    public char GetDigit() {
	        return digit;
	    }
	
	    /// <summary>
	    /// Set the character used for a digit in a pattern.
	    /// </summary>
	    ///
	    /// <param name="digit">the digit pattern character</param>
	    /// @stable ICU 2.0
	    public void SetDigit(char digit) {
	        this.digit = digit;
	    }
	
	    /// <summary>
	    /// Return the character used to separate positive and negative subpatterns
	    /// in a pattern.
	    /// </summary>
	    ///
	    /// <returns>the pattern separator character</returns>
	    /// @stable ICU 2.0
	    public char GetPatternSeparator() {
	        return patternSeparator;
	    }
	
	    /// <summary>
	    /// Set the character used to separate positive and negative subpatterns in a
	    /// pattern.
	    /// </summary>
	    ///
	    /// <param name="patternSeparator">the pattern separator character</param>
	    /// @stable ICU 2.0
	    public void SetPatternSeparator(char patternSeparator) {
	        this.patternSeparator = patternSeparator;
	    }
	
	    /// <summary>
	    /// Return the String used to represent infinity. Almost always left
	    /// unchanged.
	    /// </summary>
	    ///
	    /// <returns>the Infinity string</returns>
	    /// @stable ICU 2.0
	    // Bug 4194173 [Richard/GCL]
	
	    public String GetInfinity() {
	        return infinity;
	    }
	
	    /// <summary>
	    /// Set the String used to represent infinity. Almost always left unchanged.
	    /// </summary>
	    ///
	    /// <param name="infinity">the Infinity String</param>
	    /// @stable ICU 2.0
	    public void SetInfinity(String infinity) {
	        this.infinity = infinity;
	    }
	
	    /// <summary>
	    /// Return the String used to represent NaN. Almost always left unchanged.
	    /// </summary>
	    ///
	    /// <returns>the NaN String</returns>
	    /// @stable ICU 2.0
	    // Bug 4194173 [Richard/GCL]
	    public String GetNaN() {
	        return NaN;
	    }
	
	    /// <summary>
	    /// Set the String used to represent NaN. Almost always left unchanged.
	    /// </summary>
	    ///
	    /// <param name="NaN">the NaN String</param>
	    /// @stable ICU 2.0
	    public void SetNaN(String NaN) {
	        this.NaN = NaN;
	    }
	
	    /// <summary>
	    /// Return the character used to represent minus sign. If no explicit
	    /// negative format is specified, one is formed by prefixing minusSign to the
	    /// positive format.
	    /// </summary>
	    ///
	    /// <returns>the minus sign character</returns>
	    /// @stable ICU 2.0
	    public char GetMinusSign() {
	        return minusSign;
	    }
	
	    /// <summary>
	    /// Set the character used to represent minus sign. If no explicit negative
	    /// format is specified, one is formed by prefixing minusSign to the positive
	    /// format.
	    /// </summary>
	    ///
	    /// <param name="minusSign">the minus sign character</param>
	    /// @stable ICU 2.0
	    public void SetMinusSign(char minusSign) {
	        this.minusSign = minusSign;
	    }
	
	    /// <summary>
	    /// Return the string denoting the local currency.
	    /// </summary>
	    ///
	    /// <returns>the local currency String.</returns>
	    /// @stable ICU 2.0
	    public String GetCurrencySymbol() {
	        return currencySymbol;
	    }
	
	    /// <summary>
	    /// Set the string denoting the local currency.
	    /// </summary>
	    ///
	    /// <param name="currency">the local currency String.</param>
	    /// @stable ICU 2.0
	    public void SetCurrencySymbol(String currency) {
	        currencySymbol = currency;
	    }
	
	    /// <summary>
	    /// Return the international string denoting the local currency.
	    /// </summary>
	    ///
	    /// <returns>the international string denoting the local currency</returns>
	    /// @stable ICU 2.0
	    public String GetInternationalCurrencySymbol() {
	        return intlCurrencySymbol;
	    }
	
	    /// <summary>
	    /// Set the international string denoting the local currency.
	    /// </summary>
	    ///
	    /// <param name="currency">the international string denoting the local currency.</param>
	    /// @stable ICU 2.0
	    public void SetInternationalCurrencySymbol(String currency) {
	        intlCurrencySymbol = currency;
	    }
	
	    /// <summary>
	    /// Returns the currency symbol, for JDK 1.4 compatibility only. ICU clients
	    /// should use the Currency API directly.
	    /// </summary>
	    ///
	    /// <returns>the currency used, or null</returns>
	    /// @stable ICU 3.4
	    public Currency GetCurrency() {
	        return currency;
	    }
	
	    /// <summary>
	    /// ICU does not use the DecimalFormatSymbols for the currency any more. This
	    /// API is present for API compatibility only.
	    /// This also sets the currency symbol attribute to the currency's symbol in
	    /// the DecimalFormatSymbols' locale, and the international currency symbol
	    /// attribute to the currency's ISO 4217 currency code.
	    /// </summary>
	    ///
	    /// <param name="currency">the new currency to be used</param>
	    /// <exception cref="NullPointerException">if <c>currency</c> is null</exception>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.SetCurrencySymbol(System.String)"/>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.SetInternationalCurrencySymbol(System.String)"/>
	    /// @stable ICU 3.4
	    public void SetCurrency(Currency currency) {
	        if (currency == null) {
	            throw new NullReferenceException();
	        }
	        this.currency = currency;
	        intlCurrencySymbol = currency.GetCurrencyCode();
	        currencySymbol = currency.GetSymbol(requestedLocale);
	    }
	
	    /// <summary>
	    /// Return the monetary decimal separator.
	    /// </summary>
	    ///
	    /// <returns>the monetary decimal separator character</returns>
	    /// @stable ICU 2.0
	    public char GetMonetaryDecimalSeparator() {
	        return monetarySeparator;
	    }
	
	    /// <summary>
	    /// Return the monetary decimal separator.
	    /// </summary>
	    ///
	    /// <returns>the monetary decimal separator character</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public char GetMonetaryGroupingSeparator() {
	        return monetaryGroupingSeparator;
	    }
	
	    /// <exclude/>
	    /// <summary>
	    /// Internal API for NumberFormat
	    /// </summary>
	    ///
	    /// <returns>String currency pattern string</returns>
	    internal String GetCurrencyPattern() {
	        return currencyPattern;
	    }
	
	    /// <summary>
	    /// Set the monetary decimal separator.
	    /// </summary>
	    ///
	    /// <param name="sep">the monetary decimal separator character</param>
	    /// @stable ICU 2.0
	    public void SetMonetaryDecimalSeparator(char sep) {
	        monetarySeparator = sep;
	    }
	
	    /// <summary>
	    /// Set the monetary decimal separator.
	    /// </summary>
	    ///
	    /// <param name="sep">the monetary decimal separator character</param>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public void SetMonetaryGroupingSeparator(char sep) {
	        monetaryGroupingSeparator = sep;
	    }
	
	    /// <summary>
	    /// <strong><font face=helvetica color=red>NEW</font></strong> Return the
	    /// string used to separate the mantissa from the exponent. Examples: "x10^"
	    /// for 1.23x10^4, "E" for 1.23E4.
	    /// </summary>
	    ///
	    /// <returns>the localized exponent symbol, used in localized patterns and
	    /// formatted strings</returns>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.SetExponentSeparator(System.String)"/>
	    /// @stable ICU 2.0
	    public String GetExponentSeparator() {
	        return exponentSeparator;
	    }
	
	    /// <summary>
	    /// <strong><font face=helvetica color=red>NEW</font></strong> Set the string
	    /// used to separate the mantissa from the exponent. Examples: "x10^" for
	    /// 1.23x10^4, "E" for 1.23E4.
	    /// </summary>
	    ///
	    /// <param name="exp">the localized exponent symbol, used in localized patterns andformatted strings</param>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetExponentSeparator"/>
	    /// @stable ICU 2.0
	    public void SetExponentSeparator(String exp) {
	        exponentSeparator = exp;
	    }
	
	    /// <summary>
	    /// <strong><font face=helvetica color=red>NEW</font></strong> Return the
	    /// localized plus sign.
	    /// </summary>
	    ///
	    /// <returns>the plus sign, used in localized patterns and formatted strings</returns>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.SetPlusSign(System.Character)"/>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.SetMinusSign(System.Character)"/>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetMinusSign"/>
	    /// @stable ICU 2.0
	    public char GetPlusSign() {
	        return plusSign;
	    }
	
	    /// <summary>
	    /// <strong><font face=helvetica color=red>NEW</font></strong> Set the
	    /// localized plus sign.
	    /// </summary>
	    ///
	    /// <param name="plus">the plus sign, used in localized patterns and formattedstrings</param>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetPlusSign"/>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.SetMinusSign(System.Character)"/>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetMinusSign"/>
	    /// @stable ICU 2.0
	    public void SetPlusSign(char plus) {
	        plusSign = plus;
	    }
	
	    /// <summary>
	    /// <strong><font face=helvetica color=red>NEW</font></strong> Return the
	    /// character used to pad numbers out to a specified width. This is not the
	    /// pad character itself; rather, it is the special pattern character
	    /// <em>preceding</em> the pad character. In the pattern "///_#,##0", '///' is
	    /// the pad escape, and '_' is the pad character.
	    /// </summary>
	    ///
	    /// <returns>the character</returns>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.SetPadEscape(System.Character)"/>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormat.GetFormatWidth"/>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormat.GetPadPosition"/>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormat.GetPadCharacter"/>
	    /// @stable ICU 2.0
	    public char GetPadEscape() {
	        return padEscape;
	    }
	
	    /// <summary>
	    /// <strong><font face=helvetica color=red>NEW</font></strong> Set the
	    /// character used to pad numbers out to a specified width. This is not the
	    /// pad character itself; rather, it is the special pattern character
	    /// <em>preceding</em> the pad character. In the pattern "///_#,##0", '///' is
	    /// the pad escape, and '_' is the pad character.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetPadEscape"/>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormat.SetFormatWidth(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormat.SetPadPosition(System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormat.SetPadCharacter(System.Character)"/>
	    /// @stable ICU 2.0
	    public void SetPadEscape(char c) {
	        padEscape = c;
	    }
	
	    /// <summary>
	    /// Returns the locale for which this object was constructed.
	    /// </summary>
	    ///
	    /// <returns>the locale for which this object was constructed</returns>
	    /// @stable ICU 2.0
        public Locale GetLocale()
        {
	        return requestedLocale;
	    }
	
	    /// <summary>
	    /// Returns the locale for which this object was constructed.
	    /// </summary>
	    ///
	    /// <returns>the locale for which this object was constructed</returns>
	    /// @stable ICU 3.2
	    public ULocale GetULocale() {
	        return ulocale;
	    }
	
	    /// <summary>
	    /// Standard override.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public Object Clone() {
	        try {
	            return (DecimalFormatSymbols) base.MemberwiseClone();
	            // other fields are bit-copied
	        } catch (Exception e) {
	            // /CLOVER:OFF
	            throw new InvalidOperationException();
	            // /CLOVER:ON
	        }
	    }
	
	    /// <summary>
	    /// Override equals.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public override bool Equals(Object obj) {
	        if (obj == null)
	            return false;
	        if ((Object) this == obj)
	            return true;
	        DecimalFormatSymbols other = (DecimalFormatSymbols) obj;
	        return (zeroDigit == other.zeroDigit
	                && groupingSeparator == other.groupingSeparator
	                && decimalSeparator == other.decimalSeparator
	                && percent == other.percent && perMill == other.perMill
	                && digit == other.digit && minusSign == other.minusSign
	                && patternSeparator == other.patternSeparator
	                && infinity.Equals(other.infinity) && NaN.Equals(other.NaN)
	                && currencySymbol.Equals(other.currencySymbol)
	                && intlCurrencySymbol.Equals(other.intlCurrencySymbol)
	                && padEscape == other.padEscape && // [NEW]
	                plusSign == other.plusSign && // [NEW]
	                exponentSeparator.Equals(other.exponentSeparator) && // [NEW]
	        monetarySeparator == other.monetarySeparator);
	    }
	
	    /// <summary>
	    /// Override hashCode
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public override int GetHashCode() {
	        int result = zeroDigit;
	        result = result * 37 + groupingSeparator;
	        result = result * 37 + decimalSeparator;
	        return result;
	    }
	
	    /// <summary>
	    /// Initializes the symbols from the LocaleElements resource bundle. Note:
	    /// The organization of LocaleElements badly needs to be cleaned up.
	    /// </summary>
	    ///
	    private void Initialize(ULocale locale) {
	        this.requestedLocale = locale.ToLocale();
	        this.ulocale = locale;
	
	        /* try the cache first */
	        String[][] data = (String[][]) cachedLocaleData[locale];
	        String[] numberElements;
	        if (data == null) { /* cache miss */
	            data = new String[1][];
	            ICUResourceBundle rb = (ICUResourceBundle) IBM.ICU.Util.UResourceBundle
	                    .GetBundleInstance(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME, locale);
	            data[0] = rb.GetStringArray("NumberElements");
	            /* update cache */
	            ILOG.J2CsMapping.Collections.Collections.Put(cachedLocaleData,locale,data);
	        }
	        numberElements = data[0];
	
	        ICUResourceBundle r = (ICUResourceBundle) IBM.ICU.Util.UResourceBundle
	                .GetBundleInstance(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME, locale);
	
	        // TODO: Determine actual and valid locale correctly.
	        ULocale uloc = r.GetULocale();
	        SetLocale(uloc, uloc);
	
	        // {dlf} clean up below now that we have our own resource data
	        decimalSeparator = numberElements[0][0];
	        groupingSeparator = numberElements[1][0];
	        // Temporary hack to support old JDK 1.1 resources
	        // patternSeparator = numberElements[2].length() > 0 ?
	        // numberElements[2].charAt(0) : ';';
	        patternSeparator = numberElements[2][0];
	        percent = numberElements[3][0];
	        zeroDigit = numberElements[4][0]; // different for Arabic,etc.
	        digit = numberElements[5][0];
	        minusSign = numberElements[6][0];
	
	        // Temporary hack to support JDK versions before 1.1.6 (?)
	        // exponentSeparator = numberElements.length >= 9 ?
	        // numberElements[7] : DecimalFormat.PATTERN_EXPONENT;
	        // perMill = numberElements.length >= 9 ?
	        // numberElements[8].charAt(0) : '\u2030';
	        // infinity = numberElements.length >= 10 ?
	        // numberElements[9] : "\u221e";
	        // NaN = numberElements.length >= 11 ?
	        // numberElements[10] : "\ufffd";
	        exponentSeparator = numberElements[7];
	        perMill = numberElements[8][0];
	        infinity = numberElements[9];
	        NaN = numberElements[10];
	
	        plusSign = numberElements[11][0];
	        padEscape = IBM.ICU.Text.DecimalFormat.PATTERN_PAD_ESCAPE;
	        sigDigit = IBM.ICU.Text.DecimalFormat.PATTERN_SIGNIFICANT_DIGIT;
	
	        // Obtain currency data from the currency API. This is strictly
	        // for backward compatibility; we don't use DecimalFormatSymbols
	        // for currency data anymore.
	        String currname = null;
	        currency = IBM.ICU.Util.Currency.GetInstance(locale);
	        if (currency != null) {
	            intlCurrencySymbol = currency.GetCurrencyCode();
	            bool[] isChoiceFormat = new bool[1];
	            currname = currency.GetName(locale, IBM.ICU.Util.Currency.SYMBOL_NAME,
	                    isChoiceFormat);
	            // If this is a ChoiceFormat currency, then format an
	            // arbitrary value; pick something != 1; more common.
                currencySymbol = (isChoiceFormat[0]) ? new ChoiceFormat(currname)
	                    .Format(2.0d) : currname;
	        } else {
	            intlCurrencySymbol = "XXX";
	            currencySymbol = "\u00A4"; // 'OX' currency symbol
	        }
	        // If there is a currency decimal, use it.
	        monetarySeparator = decimalSeparator;
	        monetaryGroupingSeparator = groupingSeparator;
	        Currency curr = IBM.ICU.Util.Currency.GetInstance(locale);
	        if (curr != null) {
	            String currencyCode = curr.GetCurrencyCode();
	            if (currencyCode != null) {
	                /* An explicit currency was requested */
	                ICUResourceBundle resource = (ICUResourceBundle) IBM.ICU.Util.UResourceBundle
	                        .GetBundleInstance(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME,
	                                locale);
	                ICUResourceBundle currencyRes = resource
	                        .GetWithFallback("Currencies");
	                try {
	                    currencyRes = currencyRes.GetWithFallback(currencyCode);
	                    if (currencyRes.GetSize() > 2) {
	                        currencyRes = (ICUResourceBundle) currencyRes.Get(2);
	                        currencyPattern = currencyRes.GetString(0);
	                        monetarySeparator = currencyRes.GetString(1)[0];
	                        monetaryGroupingSeparator = currencyRes.GetString(2)[0];
	                    }
	                } catch (MissingManifestResourceException ex) {
	                    /*
	                     * else An explicit currency was requested and is unknown or
	                     * locale data is malformed.
	                     */
	                    /* decimal format API will get the correct value later on. */
	                }
	            }
	            /* else no currency keyword used. */
	        }
	        // monetarySeparator = numberElements[11].charAt(0);
	    }
	
	    /// <summary>
	    /// Read the default serializable fields, then if
	    /// <c>serialVersionOnStream</c> is less than 1, initialize
	    /// <c>monetarySeparator</c> to be the same as
	    /// <c>decimalSeparator</c> and <c>exponential</c> to be 'E'.
	    /// Finally, set serialVersionOnStream back to the maximum allowed value so
	    /// that default serialization will work properly if this object is streamed
	    /// out again.
	    /// </summary>
	    ///
	    private void ReadObject(IlObjectInputStream stream) {
	
	        // TODO: it looks to me {dlf} that the serialization code was never
	        // updated
	        // to handle the actual/valid ulocale fields.
	
	        stream.DefaultReadObject();
	        // /CLOVER:OFF
	        // we don't have data for these old serialized forms any more
	        if (serialVersionOnStream < 1) {
	            // Didn't have monetarySeparator or exponential field;
	            // use defaults.
	            monetarySeparator = decimalSeparator;
	            exponential = 'E';
	        }
	        if (serialVersionOnStream < 2) {
	            padEscape = IBM.ICU.Text.DecimalFormat.PATTERN_PAD_ESCAPE;
	            plusSign = IBM.ICU.Text.DecimalFormat.PATTERN_PLUS_SIGN;
	            exponentSeparator = exponential.ToString();
	            // Although we read the exponential field on stream to create the
	            // exponentSeparator, we don't do the reverse, since scientific
	            // notation isn't supported by the old classes, even though the
	            // symbol is there.
	        }
	        // /CLOVER:ON
	        if (serialVersionOnStream < 3) {
	            // Resurrected objects from old streams will have no
	            // locale. There is no 100% fix for this. A
	            // 90% fix is to construct a mapping of data back to
	            // locale, perhaps a hash of all our members. This is
	            // expensive and doesn't seem worth it.
                requestedLocale = Locale.GetDefault();
	        }
	        if (serialVersionOnStream < 4) {
	            // use same default behavior as for versions with no Locale
	            ulocale = IBM.ICU.Util.ULocale.ForLocale(requestedLocale);
	        }
	        if (serialVersionOnStream < 5) {
	            // use the same one for groupingSeparator
	            monetaryGroupingSeparator = groupingSeparator;
	        }
	        serialVersionOnStream = currentSerialVersion;
	
	        // recreate
	        currency = IBM.ICU.Util.Currency.GetInstance(intlCurrencySymbol);
	    }
	
	    /// <summary>
	    /// Character used for zero.
	    /// </summary>
	    ///
	    /// @serial
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetZeroDigit"/>
	    private char zeroDigit;
	
	    /// <summary>
	    /// Character used for thousands separator.
	    /// </summary>
	    ///
	    /// @serial
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetGroupingSeparator"/>
	    private char groupingSeparator;
	
	    /// <summary>
	    /// Character used for decimal sign.
	    /// </summary>
	    ///
	    /// @serial
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetDecimalSeparator"/>
	    private char decimalSeparator;
	
	    /// <summary>
	    /// Character used for mille percent sign.
	    /// </summary>
	    ///
	    /// @serial
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetPerMill"/>
	    private char perMill;
	
	    /// <summary>
	    /// Character used for percent sign.
	    /// </summary>
	    ///
	    /// @serial
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetPercent"/>
	    private char percent;
	
	    /// <summary>
	    /// Character used for a digit in a pattern.
	    /// </summary>
	    ///
	    /// @serial
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetDigit"/>
	    private char digit;
	
	    /// <summary>
	    /// Character used for a significant digit in a pattern.
	    /// </summary>
	    ///
	    /// @serial
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetSignificantDigit"/>
	    private char sigDigit;
	
	    /// <summary>
	    /// Character used to separate positive and negative subpatterns in a
	    /// pattern.
	    /// </summary>
	    ///
	    /// @serial
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetPatternSeparator"/>
	    private char patternSeparator;
	
	    /// <summary>
	    /// Character used to represent infinity.
	    /// </summary>
	    ///
	    /// @serial
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetInfinity"/>
	    private String infinity;
	
	    /// <summary>
	    /// Character used to represent NaN.
	    /// </summary>
	    ///
	    /// @serial
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetNaN"/>
	    private String NaN;
	
	    /// <summary>
	    /// Character used to represent minus sign.
	    /// </summary>
	    ///
	    /// @serial
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetMinusSign"/>
	    private char minusSign;
	
	    /// <summary>
	    /// String denoting the local currency, e.g. "$".
	    /// </summary>
	    ///
	    /// @serial
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetCurrencySymbol"/>
	    private String currencySymbol;
	
	    /// <summary>
	    /// International string denoting the local currency, e.g. "USD".
	    /// </summary>
	    ///
	    /// @serial
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetInternationalCurrencySymbol"/>
	    private String intlCurrencySymbol;
	
	    /// <summary>
	    /// The decimal separator used when formatting currency values.
	    /// </summary>
	    ///
	    /// @serial
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetMonetaryDecimalSeparator"/>
	    private char monetarySeparator; // Field new in JDK 1.1.6
	
	    /// <summary>
	    /// The decimal separator used when formatting currency values.
	    /// </summary>
	    ///
	    /// @serial
	    /// <seealso cref="M:IBM.ICU.Text.DecimalFormatSymbols.GetMonetaryGroupingSeparator"/>
	    private char monetaryGroupingSeparator; // Field new in JDK 1.1.6
	
	    /// <summary>
	    /// The character used to distinguish the exponent in a number formatted in
	    /// exponential notation, e.g. 'E' for a number such as "1.23E45".
	    /// <p>
	    /// Note that this field has been superseded by
	    /// <c>exponentSeparator</c>. It is retained for backward
	    /// compatibility.
	    /// </summary>
	    ///
	    /// @serial
	    private char exponential; // Field new in JDK 1.1.6
	
	    /// <summary>
	    /// The string used to separate the mantissa from the exponent. Examples:
	    /// "x10^" for 1.23x10^4, "E" for 1.23E4.
	    /// <p>
	    /// Note that this supersedes the <c>exponential</c> field.
	    /// </summary>
	    ///
	    /// @serial
	    private String exponentSeparator;
	
	    /// <summary>
	    /// <strong><font face=helvetica color=red>NEW</font></strong> The character
	    /// used to indicate a padding character in a format, e.g., '///' in a pattern
	    /// such as "$///_#,##0.00".
	    /// </summary>
	    ///
	    /// @serial
	    private char padEscape;
	
	    /// <summary>
	    /// <strong><font face=helvetica color=red>NEW</font></strong> The character
	    /// used to indicate a plus sign.
	    /// </summary>
	    ///
	    /// @serial
	    private char plusSign;
	
	    /// <summary>
	    /// The locale for which this object was constructed. Set to the default
	    /// locale for objects resurrected from old streams.
	    /// </summary>
	    ///
        private Locale requestedLocale;
	
	    /// <summary>
	    /// The requested ULocale. We keep the old locale for serialization
	    /// compatibility.
	    /// </summary>
	    ///
	    private ULocale ulocale;
	
	    // Proclaim JDK 1.1 FCS compatibility
	    private const long serialVersionUID = 5772796243397350300L;
	
	    // The internal serial version which says which version was written
	    // - 0 (default) for version up to JDK 1.1.5
	    // - 1 for version from JDK 1.1.6, which includes two new fields:
	    // monetarySeparator and exponential.
	    // - 2 for version from AlphaWorks, which includes 3 new fields:
	    // padEscape, exponentSeparator, and plusSign.
	    // - 3 for ICU 2.2, which includes the locale field
	    // - 4 for ICU 3.2, which includes the ULocale field
	    // - 5 for ICU 3.6, which includes the monetaryGroupingSeparator field
	    private const int currentSerialVersion = 5;
	
	    /// <summary>
	    /// Describes the version of <c>DecimalFormatSymbols</c> present on the
	    /// stream. Possible values are:
	    /// <ul>
	    /// <li><b>0</b> (or uninitialized): versions prior to JDK 1.1.6.
	    /// <li><b>1</b>: Versions written by JDK 1.1.6 or later, which includes two
	    /// new fields: <c>monetarySeparator</c> and <c>exponential</c>.
	    /// <li><b>2</b>: Version for AlphaWorks. Adds padEscape, exponentSeparator,
	    /// and plusSign.
	    /// </ul>
	    /// When streaming out a <c>DecimalFormatSymbols</c>, the most recent
	    /// format (corresponding to the highest allowable
	    /// <c>serialVersionOnStream</c>) is always written.
	    /// </summary>
	    ///
	    /// @serial
	    private int serialVersionOnStream;
	
	    /// <summary>
	    /// cache to hold the NumberElements of a Locale.
	    /// </summary>
	    ///
	    private static readonly Hashtable cachedLocaleData = new Hashtable(3);
	
	    private String currencyPattern;
	
	    // -------- BEGIN ULocale boilerplate --------
	
	    /// <summary>
	    /// Return the locale that was used to create this object, or null. This may
	    /// may differ from the locale requested at the time of this object's
	    /// creation. For example, if an object is created for locale
	    /// <tt>en_US_CALIFORNIA</tt>, the actual data may be drawn from <tt>en</tt>
	    /// (the <i>actual</i> locale), and <tt>en_US</tt> may be the most specific
	    /// locale that exists (the <i>valid</i> locale).
	    /// <p>
	    /// Note: This method will be implemented in ICU 3.0; ICU 2.8 contains a
	    /// partial preview implementation. The/// <i>actual</i> locale is returned
	    /// correctly, but the <i>valid</i> locale is not, in most cases.
	    /// </summary>
	    ///
	    /// <param name="type">type of information requested, either<see cref="M:IBM.ICU.Text.ULocale.VALID_LOCALE"/> or<see cref="M:IBM.ICU.Text.ULocale.ACTUAL_LOCALE"/>.</param>
	    /// <returns>the information specified by <i>type</i>, or null if this object
	    /// was not constructed from locale data.</returns>
	    /// <seealso cref="T:IBM.ICU.Text.ULocale"/>
	    /// <seealso cref="M:IBM.ICU.Text.ULocale.VALID_LOCALE"/>
	    /// <seealso cref="M:IBM.ICU.Text.ULocale.ACTUAL_LOCALE"/>
	    /// @draft ICU 2.8 (retain)
	    /// @provisional This API might change or be removed in a future release.
	    public ULocale GetLocale(ULocale.Type type) {
	        return (type == IBM.ICU.Util.ULocale.ACTUAL_LOCALE) ? this.actualLocale
	                : this.validLocale;
	    }
	
	    /// <exclude/>
	    /// <summary>
	    /// Set information about the locales that were used to create this object.
	    /// If the object was not constructed from locale data, both arguments should
	    /// be set to null. Otherwise, neither should be null. The actual locale must
	    /// be at the same level or less specific than the valid locale. This method
	    /// is intended for use by factories or other entities that create objects of
	    /// this class.
	    /// </summary>
	    ///
	    /// <param name="valid">the most specific locale containing any resource data, or null</param>
	    /// <param name="actual">the locale containing data used to construct this object, ornull</param>
	    /// <seealso cref="T:IBM.ICU.Text.ULocale"/>
	    /// <seealso cref="M:IBM.ICU.Text.ULocale.VALID_LOCALE"/>
	    /// <seealso cref="M:IBM.ICU.Text.ULocale.ACTUAL_LOCALE"/>
	    internal void SetLocale(ULocale valid, ULocale actual) {
	        // Change the following to an assertion later
	        if ((valid == null) != (actual == null)) {
	            // /CLOVER:OFF
	            throw new ArgumentException();
	            // /CLOVER:ON
	        }
	        // Another check we could do is that the actual locale is at
	        // the same level or less specific than the valid locale.
	        this.validLocale = valid;
	        this.actualLocale = actual;
	    }
	
	    /// <exclude/>
	    /// <summary>
	    /// The most specific locale containing any resource data, or null.
	    /// </summary>
	    ///
	    /// <seealso cref="T:IBM.ICU.Text.ULocale"/>
	    private ULocale validLocale;
	
	    /// <exclude/>
	    /// <summary>
	    /// The locale containing data used to construct this object, or null.
	    /// </summary>
	    ///
	    /// <seealso cref="T:IBM.ICU.Text.ULocale"/>
	    private ULocale actualLocale;
	
	    // not serialized, reconstructed from intlCurrencyCode
	    private Currency currency;
	
	    // -------- END ULocale boilerplate --------
	}
}
