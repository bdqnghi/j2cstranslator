/* Generated from 'MathContext.nrx' 8 Sep 2000 11:07:48 [v2.00] */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:57 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /* Options: Binary Comments Crossref Format Java Logo Strictargs Strictcase Trace2 Verbose3 */
namespace IBM.ICU.Math {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Runtime.Serialization;
	
	/* ------------------------------------------------------------------ */
	/* MathContext -- Math context settings                               */
	/* ------------------------------------------------------------------ */
	/* Copyright IBM Corporation, 1997, 2000, 2005, 2007.  All Rights Reserved. */
	/*                                                                    */
	/*   The MathContext object encapsulates the settings used by the     */
	/*   BigDecimal class; it could also be used by other arithmetics.    */
	/* ------------------------------------------------------------------ */
	/* Notes:                                                             */
	/*                                                                    */
	/* 1. The properties are checked for validity on construction, so     */
	/*    the BigDecimal class may assume that they are correct.          */
	/* ------------------------------------------------------------------ */
	/* Author:    Mike Cowlishaw                                          */
	/* 1997.09.03 Initial version (edited from netrexx.lang.RexxSet)      */
	/* 1997.09.12 Add lostDigits property                                 */
	/* 1998.05.02 Make the class immutable and final; drop set methods    */
	/* 1998.06.05 Add Round (rounding modes) property                     */
	/* 1998.06.25 Rename from DecimalContext; allow digits=0              */
	/* 1998.10.12 change to com.ibm.icu.math package                          */
	/* 1999.02.06 add javadoc comments                                    */
	/* 1999.03.05 simplify; changes from discussion with J. Bloch         */
	/* 1999.03.13 1.00 release to IBM Centre for Java Technology          */
	/* 1999.07.10 1.04 flag serialization unused                          */
	/* 2000.01.01 1.06 copyright update                                   */
	/* ------------------------------------------------------------------ */
	
	/// <summary>
	/// The <c>MathContext</c> immutable class encapsulates the settings
	/// understood by the operator methods of the <see cref="T:IBM.ICU.Math.BigDecimal"/> class (and
	/// potentially other classes). Operator methods are those that effect an
	/// operation on a number or a pair of numbers.
	/// <p>
	/// The settings, which are not base-dependent, comprise:
	/// <ol>
	/// <li><c>digits</c>: the number of digits (precision) to be used for an
	/// operation
	/// <li><c>form</c>: the form of any exponent that results from the
	/// operation
	/// <li><c>lostDigits</c>: whether checking for lost digits is enabled
	/// <li><c>roundingMode</c>: the algorithm to be used for rounding.
	/// </ol>
	/// <p>
	/// When provided, a <c>MathContext</c> object supplies the settings for an
	/// operation directly.
	/// <p>
	/// When <c>MathContext.DEFAULT</c> is provided for a
	/// <c>MathContext</c> parameter then the default settings are used (
	/// <c>9, SCIENTIFIC, false, ROUND_HALF_UP</c>).
	/// <p>
	/// In the <c>BigDecimal</c> class, all methods which accept a
	/// <c>MathContext</c> object defaults) also have a version of the method
	/// which does not accept a MathContext parameter. These versions carry out
	/// unlimited precision fixed point arithmetic (as though the settings were (
	/// <c>0, PLAIN, false, ROUND_HALF_UP</c>).
	/// <p>
	/// The instance variables are shared with default access (so they are directly
	/// accessible to the <c>BigDecimal</c> class), but must never be changed.
	/// <p>
	/// The rounding mode constants have the same names and values as the constants
	/// of the same name in <c>java.math.BigDecimal</c>, to maintain
	/// compatibility with earlier versions of <c>BigDecimal</c>.
	/// </summary>
	///
	/// <seealso cref="T:IBM.ICU.Math.BigDecimal"/>
	/// @stable ICU 2.0
	[Serializable]
	
	public sealed class MathContext {
	    // private static final java.lang.String $0="MathContext.nrx";
	
	    /* ----- Properties ----- */
	    /* properties public constant */
	    /// <summary>
	    /// Plain (fixed point) notation, without any exponent. Used as a setting to
	    /// control the form of the result of a <c>BigDecimal</c> operation. A
	    /// zero result in plain form may have a decimal part of one or more zeros.
	    /// </summary>
	    ///
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.ENGINEERING"/>
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.SCIENTIFIC"/>
	    /// @stable ICU 2.0
	    public const int PLAIN = 0; // [no exponent]
	
	    /// <summary>
	    /// Standard floating point notation (with scientific exponential format,
	    /// where there is one digit before any decimal point). Used as a setting to
	    /// control the form of the result of a <c>BigDecimal</c> operation. A
	    /// zero result in plain form may have a decimal part of one or more zeros.
	    /// </summary>
	    ///
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.ENGINEERING"/>
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.PLAIN"/>
	    /// @stable ICU 2.0
	    public const int SCIENTIFIC = 1; // 1 digit before .
	
	    /// <summary>
	    /// Standard floating point notation (with engineering exponential format,
	    /// where the power of ten is a multiple of 3). Used as a setting to control
	    /// the form of the result of a <c>BigDecimal</c> operation. A zero
	    /// result in plain form may have a decimal part of one or more zeros.
	    /// </summary>
	    ///
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.PLAIN"/>
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.SCIENTIFIC"/>
	    /// @stable ICU 2.0
	    public const int ENGINEERING = 2; // 1-3 digits before .
	
	    // The rounding modes match the original BigDecimal class values
	    /// <summary>
	    /// Rounding mode to round to a more positive number. Used as a setting to
	    /// control the rounding mode used during a <c>BigDecimal</c>
	    /// operation.
	    /// <p>
	    /// If any of the discarded digits are non-zero then the result should be
	    /// rounded towards the next more positive digit.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public const int ROUND_CEILING = 2;
	
	    /// <summary>
	    /// Rounding mode to round towards zero. Used as a setting to control the
	    /// rounding mode used during a <c>BigDecimal</c> operation.
	    /// <p>
	    /// All discarded digits are ignored (truncated). The result is neither
	    /// incremented nor decremented.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public const int ROUND_DOWN = 1;
	
	    /// <summary>
	    /// Rounding mode to round to a more negative number. Used as a setting to
	    /// control the rounding mode used during a <c>BigDecimal</c>
	    /// operation.
	    /// <p>
	    /// If any of the discarded digits are non-zero then the result should be
	    /// rounded towards the next more negative digit.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public const int ROUND_FLOOR = 3;
	
	    /// <summary>
	    /// Rounding mode to round to nearest neighbor, where an equidistant value is
	    /// rounded down. Used as a setting to control the rounding mode used during
	    /// a <c>BigDecimal</c> operation.
	    /// <p>
	    /// If the discarded digits represent greater than half (0.5 times) the value
	    /// of a one in the next position then the result should be rounded up (away
	    /// from zero). Otherwise the discarded digits are ignored.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public const int ROUND_HALF_DOWN = 5;
	
	    /// <summary>
	    /// Rounding mode to round to nearest neighbor, where an equidistant value is
	    /// rounded to the nearest even neighbor. Used as a setting to control the
	    /// rounding mode used during a <c>BigDecimal</c> operation.
	    /// <p>
	    /// If the discarded digits represent greater than half (0.5 times) the value
	    /// of a one in the next position then the result should be rounded up (away
	    /// from zero). If they represent less than half, then the result should be
	    /// rounded down.
	    /// <p>
	    /// Otherwise (they represent exactly half) the result is rounded down if its
	    /// rightmost digit is even, or rounded up if its rightmost digit is odd (to
	    /// make an even digit).
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public const int ROUND_HALF_EVEN = 6;
	
	    /// <summary>
	    /// Rounding mode to round to nearest neighbor, where an equidistant value is
	    /// rounded up. Used as a setting to control the rounding mode used during a
	    /// <c>BigDecimal</c> operation.
	    /// <p>
	    /// If the discarded digits represent greater than or equal to half (0.5
	    /// times) the value of a one in the next position then the result should be
	    /// rounded up (away from zero). Otherwise the discarded digits are ignored.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public const int ROUND_HALF_UP = 4;
	
	    /// <summary>
	    /// Rounding mode to assert that no rounding is necessary. Used as a setting
	    /// to control the rounding mode used during a <c>BigDecimal</c>
	    /// operation.
	    /// <p>
	    /// Rounding (potential loss of information) is not permitted. If any of the
	    /// discarded digits are non-zero then an <c>ArithmeticException</c>
	    /// should be thrown.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public const int ROUND_UNNECESSARY = 7;
	
	    /// <summary>
	    /// Rounding mode to round away from zero. Used as a setting to control the
	    /// rounding mode used during a <c>BigDecimal</c> operation.
	    /// <p>
	    /// If any of the discarded digits are non-zero then the result will be
	    /// rounded up (away from zero).
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public const int ROUND_UP = 0;
	
	    /* properties shared */
	    /// <summary>
	    /// The number of digits (precision) to be used for an operation. A value of
	    /// 0 indicates that unlimited precision (as many digits as are required)
	    /// will be used.
	    /// <p>
	    /// The <see cref="T:IBM.ICU.Math.BigDecimal"/> operator methods use this value to determine the
	    /// precision of results. Note that leading zeros (in the integer part of a
	    /// number) are never significant.
	    /// <p>
	    /// <c>digits</c> will always be non-negative.
	    /// </summary>
	    ///
	    /// @serial
	    internal int digits;
	
	    /// <summary>
	    /// The form of results from an operation.
	    /// <p>
	    /// The <see cref="T:IBM.ICU.Math.BigDecimal"/> operator methods use this value to determine the
	    /// form of results, in particular whether and how exponential notation
	    /// should be used.
	    /// </summary>
	    ///
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.ENGINEERING"/>
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.PLAIN"/>
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.SCIENTIFIC"/>
	    /// @serial
	    internal int form; // values for this must fit in a byte
	
	    /// <summary>
	    /// Controls whether lost digits checking is enabled for an operation. Set to
	    /// <c>true</c> to enable checking, or to <c>false</c> to disable
	    /// checking.
	    /// <p>
	    /// When enabled, the <see cref="T:IBM.ICU.Math.BigDecimal"/> operator methods check the precision
	    /// of their operand or operands, and throw an
	    /// <c>ArithmeticException</c> if an operand is more precise than the
	    /// digits setting (that is, digits would be lost). When disabled, operands
	    /// are rounded to the specified digits.
	    /// </summary>
	    ///
	    /// @serial
	    internal bool lostDigits;
	
	    /// <summary>
	    /// The rounding algorithm to be used for an operation.
	    /// <p>
	    /// The <see cref="T:IBM.ICU.Math.BigDecimal"/> operator methods use this value to determine the
	    /// algorithm to be used when non-zero digits have to be discarded in order
	    /// to reduce the precision of a result. The value must be one of the public
	    /// constants whose name starts with <c>ROUND_</c>.
	    /// </summary>
	    ///
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.ROUND_CEILING"/>
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.ROUND_DOWN"/>
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.ROUND_FLOOR"/>
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.ROUND_HALF_DOWN"/>
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.ROUND_HALF_EVEN"/>
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.ROUND_HALF_UP"/>
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.ROUND_UNNECESSARY"/>
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.ROUND_UP"/>
	    /// @serial
	    internal int roundingMode;
	
	    /* properties private constant */
	    // default settings
	    private const int DEFAULT_FORM = SCIENTIFIC;
	
	    private const int DEFAULT_DIGITS = 9;
	
	    private const bool DEFAULT_LOSTDIGITS = false;
	
	    private const int DEFAULT_ROUNDINGMODE = ROUND_HALF_UP;
	
	    /* properties private constant */
	
	    private const int MIN_DIGITS = 0; // smallest value for DIGITS.
	
	    private const int MAX_DIGITS = 999999999; // largest value for
	                                                     // DIGITS. If increased,
	
	    private static readonly int[] ROUNDS = new int[] { ROUND_HALF_UP,
	            ROUND_UNNECESSARY, ROUND_CEILING, ROUND_DOWN, ROUND_FLOOR,
	            ROUND_HALF_DOWN, ROUND_HALF_EVEN, ROUND_UP };
	
	    private static readonly System.String[] ROUNDWORDS = new String[] {
	            "ROUND_HALF_UP", "ROUND_UNNECESSARY", "ROUND_CEILING",
	            "ROUND_DOWN", "ROUND_FLOOR", "ROUND_HALF_DOWN", "ROUND_HALF_EVEN",
	            "ROUND_UP" };
	
	    /* properties private constant unused */
	
	    // Serialization version
	    private const long serialVersionUID = 7163376998892515376L;
	
	    /* properties public constant */
	    /// <summary>
	    /// A <c>MathContext</c> object initialized to the default settings for
	    /// general-purpose arithmetic. That is,
	    /// <code>digits=9 form=SCIENTIFIC lostDigits=false
	    /// roundingMode=ROUND_HALF_UP</code>.
	    /// </summary>
	    ///
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.SCIENTIFIC"/>
	    /// <seealso cref="F:IBM.ICU.Math.MathContext.ROUND_HALF_UP"/>
	    /// @stable ICU 2.0
	    public static readonly IBM.ICU.Math.MathContext DEFAULT = new IBM.ICU.Math.MathContext(
	            DEFAULT_DIGITS, DEFAULT_FORM, DEFAULT_LOSTDIGITS,
	            DEFAULT_ROUNDINGMODE);
	
	    /* ----- Constructors ----- */
	
	    /// <summary>
	    /// Constructs a new <c>MathContext</c> with a specified precision. The
	    /// other settings are set to the default values (see <see cref="F:IBM.ICU.Math.MathContext.DEFAULT"/>).
	    /// An <c>IllegalArgumentException</c> is thrown if the
	    /// <c>setdigits</c> parameter is out of range (&lt;0 or
	    /// &gt;999999999).
	    /// </summary>
	    ///
	    /// <param name="setdigits">The <c>int</c> digits setting for this<c>MathContext</c>.</param>
	    /// <exception cref="IllegalArgumentException">parameter out of range.</exception>
	    /// @stable ICU 2.0
	
	    public MathContext(int setdigits) : this(setdigits, DEFAULT_FORM, DEFAULT_LOSTDIGITS, DEFAULT_ROUNDINGMODE) {
	        return;
	    }
	
	    /// <summary>
	    /// Constructs a new <c>MathContext</c> with a specified precision and
	    /// form. The other settings are set to the default values (see<see cref="F:IBM.ICU.Math.MathContext.DEFAULT"/>).
	    /// An <c>IllegalArgumentException</c> is thrown if the
	    /// <c>setdigits</c> parameter is out of range (&lt;0 or
	    /// &gt;999999999), or if the value given for the <c>setform</c>
	    /// parameter is not one of the appropriate constants.
	    /// </summary>
	    ///
	    /// <param name="setdigits">The <c>int</c> digits setting for this<c>MathContext</c>.</param>
	    /// <param name="setform">The <c>int</c> form setting for this<c>MathContext</c>.</param>
	    /// <exception cref="IllegalArgumentException">parameter out of range.</exception>
	    /// @stable ICU 2.0
	
	    public MathContext(int setdigits, int setform) : this(setdigits, setform, DEFAULT_LOSTDIGITS, DEFAULT_ROUNDINGMODE) {
	        return;
	    }
	
	    /// <summary>
	    /// Constructs a new <c>MathContext</c> with a specified precision,
	    /// form, and lostDigits setting. The roundingMode setting is set to its
	    /// default value (see <see cref="F:IBM.ICU.Math.MathContext.DEFAULT"/>).
	    /// An <c>IllegalArgumentException</c> is thrown if the
	    /// <c>setdigits</c> parameter is out of range (&lt;0 or
	    /// &gt;999999999), or if the value given for the <c>setform</c>
	    /// parameter is not one of the appropriate constants.
	    /// </summary>
	    ///
	    /// <param name="setdigits">The <c>int</c> digits setting for this<c>MathContext</c>.</param>
	    /// <param name="setform">The <c>int</c> form setting for this<c>MathContext</c>.</param>
	    /// <param name="setlostdigits">The <c>boolean</c> lostDigits setting for this<c>MathContext</c>.</param>
	    /// <exception cref="IllegalArgumentException">parameter out of range.</exception>
	    /// @stable ICU 2.0
	
	    public MathContext(int setdigits, int setform, bool setlostdigits) : this(setdigits, setform, setlostdigits, DEFAULT_ROUNDINGMODE) {
	        return;
	    }
	
	    /// <summary>
	    /// Constructs a new <c>MathContext</c> with a specified precision,
	    /// form, lostDigits, and roundingMode setting.
	    /// An <c>IllegalArgumentException</c> is thrown if the
	    /// <c>setdigits</c> parameter is out of range (&lt;0 or
	    /// &gt;999999999), or if the value given for the <c>setform</c> or
	    /// <c>setroundingmode</c> parameters is not one of the appropriate
	    /// constants.
	    /// </summary>
	    ///
	    /// <param name="setdigits">The <c>int</c> digits setting for this<c>MathContext</c>.</param>
	    /// <param name="setform">The <c>int</c> form setting for this<c>MathContext</c>.</param>
	    /// <param name="setlostdigits">The <c>boolean</c> lostDigits setting for this<c>MathContext</c>.</param>
	    /// <param name="setroundingmode">The <c>int</c> roundingMode setting for this<c>MathContext</c>.</param>
	    /// <exception cref="IllegalArgumentException">parameter out of range.</exception>
	    /// @stable ICU 2.0
	
	    public MathContext(int setdigits, int setform, bool setlostdigits,
	            int setroundingmode) : base() {
	        // set values, after checking
	        if (setdigits != DEFAULT_DIGITS) {
	            if (setdigits < MIN_DIGITS)
	                throw new ArgumentException(
	                        "Digits too small:" + " " + setdigits);
	            if (setdigits > MAX_DIGITS)
	                throw new ArgumentException(
	                        "Digits too large:" + " " + setdigits);
	        }
	        {/* select */
	            if (setform == SCIENTIFIC) {
	                // [most common]
	            } else if (setform == ENGINEERING) {
	            } else if (setform == PLAIN) {
	            } else {
	                throw new ArgumentException("Bad form value:"
	                        + " " + setform);
	            }
	        }
	        if ((!(IsValidRound(setroundingmode))))
	            throw new ArgumentException(
	                    "Bad roundingMode value:" + " " + setroundingmode);
	        digits = setdigits;
	        form = setform;
	        lostDigits = setlostdigits; // [no bad value possible]
	        roundingMode = setroundingmode;
	        return;
	    }
	
	    /// <summary>
	    /// Returns the digits setting. This value is always non-negative.
	    /// </summary>
	    ///
	    /// <returns>an <c>int</c> which is the value of the digits setting</returns>
	    /// @stable ICU 2.0
	
	    public int GetDigits() {
	        return digits;
	    }
	
	    /// <summary>
	    /// Returns the form setting. This will be one of <see cref="F:IBM.ICU.Math.MathContext.ENGINEERING"/>,<see cref="F:IBM.ICU.Math.MathContext.PLAIN"/>, or <see cref="F:IBM.ICU.Math.MathContext.SCIENTIFIC"/>.
	    /// </summary>
	    ///
	    /// <returns>an <c>int</c> which is the value of the form setting</returns>
	    /// @stable ICU 2.0
	
	    public int GetForm() {
	        return form;
	    }
	
	    /// <summary>
	    /// Returns the lostDigits setting. This will be either <c>true</c>
	    /// (enabled) or <c>false</c> (disabled).
	    /// </summary>
	    ///
	    /// <returns>a <c>boolean</c> which is the value of the lostDigits
	    /// setting</returns>
	    /// @stable ICU 2.0
	
	    public bool GetLostDigits() {
	        return lostDigits;
	    }
	
	    /// <summary>
	    /// Returns the roundingMode setting. This will be one of<see cref="F:IBM.ICU.Math.MathContext.ROUND_CEILING"/>, <see cref="F:IBM.ICU.Math.MathContext.ROUND_DOWN"/>, <see cref="F:IBM.ICU.Math.MathContext.ROUND_FLOOR"/>,<see cref="F:IBM.ICU.Math.MathContext.ROUND_HALF_DOWN"/>, <see cref="F:IBM.ICU.Math.MathContext.ROUND_HALF_EVEN"/>,<see cref="F:IBM.ICU.Math.MathContext.ROUND_HALF_UP"/>, <see cref="F:IBM.ICU.Math.MathContext.ROUND_UNNECESSARY"/>, or <see cref="F:IBM.ICU.Math.MathContext.ROUND_UP"/>.
	    /// </summary>
	    ///
	    /// <returns>an <c>int</c> which is the value of the roundingMode
	    /// setting</returns>
	    /// @stable ICU 2.0
	
	    public int GetRoundingMode() {
	        return roundingMode;
	    }
	
	    /// <summary>
	    /// Returns the <c>MathContext</c> as a readable string. The
	    /// <c>String</c> returned represents the settings of the
	    /// <c>MathContext</c> object as four blank-delimited words separated
	    /// by a single blank and with no leading or trailing blanks, as follows:
	    /// <ol>
	    /// <li>
	    /// <c>digits=</c>, immediately followed by the value of the digits
	    /// setting as a numeric word.
	    /// <li>
	    /// <c>form=</c>, immediately followed by the value of the form setting
	    /// as an uppercase word (one of <c>SCIENTIFIC</c>, <c>PLAIN</c>,
	    /// or <c>ENGINEERING</c>).
	    /// <li>
	    /// <c>lostDigits=</c>, immediately followed by the value of the
	    /// lostDigits setting (<c>1</c> if enabled, <c>0</c> if
	    /// disabled).
	    /// <li>
	    /// <c>roundingMode=</c>, immediately followed by the value of the
	    /// roundingMode setting as a word. This word will be the same as the name of
	    /// the corresponding public constant.
	    /// </ol>
	    /// <p>
	    /// For example: <br>
	    /// <code>
	    /// digits=9 form=SCIENTIFIC lostDigits=0 roundingMode=ROUND_HALF_UP
	    /// </code>
	    /// <p>
	    /// Additional words may be appended to the result of <c>toString</c>
	    /// in the future if more properties are added to the class.
	    /// </summary>
	    ///
	    /// <returns>a <c>String</c> representing the context settings.</returns>
	    /// @stable ICU 2.0
	
	    public override System.String ToString() {
	        System.String formstr = null;
	        int r = 0;
	        System.String roundword = null;
	        {/* select */
	            if (form == SCIENTIFIC)
	                formstr = "SCIENTIFIC";
	            else if (form == ENGINEERING)
	                formstr = "ENGINEERING";
	            else {
	                formstr = "PLAIN";/* form=PLAIN */
	            }
	        }
	        {
	            int _1 = ROUNDS.Length;
	            r = 0;
	            r: {
	                for (; _1 > 0; _1--, r++) {
	                    if (roundingMode == ROUNDS[r]) {
	                        roundword = ROUNDWORDS[r];
	                        goto gotor;
	                    }
	                }
	            }
	            gotor:
	            ;
	        }/* r */
	        return "digits=" + digits + " " + "form=" + formstr + " "
	                + "lostDigits=" + ((lostDigits) ? "1" : "0") + " "
	                + "roundingMode=" + roundword;
	    }
	
	    /* <sgml> Test whether round is valid. </sgml> */
	    // This could be made shared for use by BigDecimal for setScale.
	
	    private static bool IsValidRound(int testround) {
	        int r = 0;
	        {
	            int _2 = ROUNDS.Length;
	            for (r = 0; _2 > 0; _2--, r++) {
	                if (testround == ROUNDS[r])
	                    return true;
	            }
	        }/* r */
	        return false;
	    }
	}
}
