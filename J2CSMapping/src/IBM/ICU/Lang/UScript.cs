// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 2:05 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2001-2007 International Business Machines Corporation and     
/// others. All Rights Reserved.                                                
/// </summary>
///
namespace IBM.ICU.Lang {
	
	using IBM.ICU.Impl;
	using IBM.ICU.Util;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Globalization;
	using System.IO;
	using System.Resources;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A class to reflect UTR #24: Script Names (based on ISO 15924:2000, "Code for
	/// the representation of names of scripts"). UTR #24 describes the basis for a
	/// new Unicode data file, Scripts.txt.
	/// </summary>
	///
	/// @stable ICU 2.4
	public sealed class UScript {
	    /// <summary>
	    /// Invalid code
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int INVALID_CODE = -1;
	
	    /// <summary>
	    /// Common
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int COMMON = 0; /* Zyyy */
	
	    /// <summary>
	    /// Inherited
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int INHERITED = 1; /* Qaai */
	
	    /// <summary>
	    /// Arabic
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int ARABIC = 2; /* Arab */
	
	    /// <summary>
	    /// Armenian
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int ARMENIAN = 3; /* Armn */
	
	    /// <summary>
	    /// Bengali
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int BENGALI = 4; /* Beng */
	
	    /// <summary>
	    /// Bopomofo
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int BOPOMOFO = 5; /* Bopo */
	
	    /// <summary>
	    /// Cherokee
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int CHEROKEE = 6; /* Cher */
	
	    /// <summary>
	    /// Coptic
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int COPTIC = 7; /* Qaac */
	
	    /// <summary>
	    /// Cyrillic
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int CYRILLIC = 8; /* Cyrl (Cyrs) */
	
	    /// <summary>
	    /// Deseret
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int DESERET = 9; /* Dsrt */
	
	    /// <summary>
	    /// Devanagari
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int DEVANAGARI = 10; /* Deva */
	
	    /// <summary>
	    /// Ethiopic
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int ETHIOPIC = 11; /* Ethi */
	
	    /// <summary>
	    /// Georgian
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int GEORGIAN = 12; /* Geor (Geon; Geoa) */
	
	    /// <summary>
	    /// Gothic
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int GOTHIC = 13; /* Goth */
	
	    /// <summary>
	    /// Greek
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int GREEK = 14; /* Grek */
	
	    /// <summary>
	    /// Gujarati
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int GUJARATI = 15; /* Gujr */
	
	    /// <summary>
	    /// Gurmukhi
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int GURMUKHI = 16; /* Guru */
	
	    /// <summary>
	    /// Han
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int HAN = 17; /* Hani */
	
	    /// <summary>
	    /// Hangul
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int HANGUL = 18; /* Hang */
	
	    /// <summary>
	    /// Hebrew
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int HEBREW = 19; /* Hebr */
	
	    /// <summary>
	    /// Hiragana
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int HIRAGANA = 20; /* Hira */
	
	    /// <summary>
	    /// Kannada
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int KANNADA = 21; /* Knda */
	
	    /// <summary>
	    /// Katakana
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int KATAKANA = 22; /* Kana */
	
	    /// <summary>
	    /// Khmer
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int KHMER = 23; /* Khmr */
	
	    /// <summary>
	    /// Lao
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int LAO = 24; /* Laoo */
	
	    /// <summary>
	    /// Latin
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int LATIN = 25; /* Latn (Latf; Latg) */
	
	    /// <summary>
	    /// Malayalam
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int MALAYALAM = 26; /* Mlym */
	
	    /// <summary>
	    /// Mangolian
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int MONGOLIAN = 27; /* Mong */
	
	    /// <summary>
	    /// Myammar
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int MYANMAR = 28; /* Mymr */
	
	    /// <summary>
	    /// Ogham
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int OGHAM = 29; /* Ogam */
	
	    /// <summary>
	    /// Old Itallic
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int OLD_ITALIC = 30; /* Ital */
	
	    /// <summary>
	    /// Oriya
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int ORIYA = 31; /* Orya */
	
	    /// <summary>
	    /// Runic
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int RUNIC = 32; /* Runr */
	
	    /// <summary>
	    /// Sinhala
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int SINHALA = 33; /* Sinh */
	
	    /// <summary>
	    /// Syriac
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int SYRIAC = 34; /* Syrc (Syrj; Syrn; Syre) */
	
	    /// <summary>
	    /// Tamil
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int TAMIL = 35; /* Taml */
	
	    /// <summary>
	    /// Telugu
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int TELUGU = 36; /* Telu */
	
	    /// <summary>
	    /// Thana
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int THAANA = 37; /* Thaa */
	
	    /// <summary>
	    /// Thai
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int THAI = 38; /* Thai */
	
	    /// <summary>
	    /// Tibetan
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int TIBETAN = 39; /* Tibt */
	
	    /// <summary>
	    /// Unified Canadian Aboriginal Symbols
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int CANADIAN_ABORIGINAL = 40; /* Cans */
	
	    /// <summary>
	    /// Unified Canadian Aboriginal Symbols (alias)
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int UCAS = CANADIAN_ABORIGINAL; /* Cans */
	
	    /// <summary>
	    /// Yi syllables
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int YI = 41; /* Yiii */
	
	    /// <summary>
	    /// Tagalog
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int TAGALOG = 42; /* Tglg */
	
	    /// <summary>
	    /// Hanunooo
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int HANUNOO = 43; /* Hano */
	
	    /// <summary>
	    /// Buhid
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int BUHID = 44; /* Buhd */
	
	    /// <summary>
	    /// Tagbanwa
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int TAGBANWA = 45; /* Tagb */
	
	    /// <summary>
	    /// Braille Script in Unicode 4
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int BRAILLE = 46; /* Brai */
	
	    /// <summary>
	    /// Cypriot Script in Unicode 4
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int CYPRIOT = 47; /* Cprt */
	
	    /// <summary>
	    /// Limbu Script in Unicode 4
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int LIMBU = 48; /* Limb */
	
	    /// <summary>
	    /// Linear B Script in Unicode 4
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int LINEAR_B = 49; /* Linb */
	
	    /// <summary>
	    /// Osmanya Script in Unicode 4
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int OSMANYA = 50; /* Osma */
	
	    /// <summary>
	    /// Shavian Script in Unicode 4
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int SHAVIAN = 51; /* Shaw */
	
	    /// <summary>
	    /// Tai Le Script in Unicode 4
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int TAI_LE = 52; /* Tale */
	
	    /// <summary>
	    /// Ugaritic Script in Unicode 4
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int UGARITIC = 53; /* Ugar */
	
	    /// <summary>
	    /// Script in Unicode 4.0.1
	    /// </summary>
	    ///
	    /// @stable ICU 3.0
	    public const int KATAKANA_OR_HIRAGANA = 54; /* Hrkt */
	
	    /// <summary>
	    /// Script in Unicode 4.1
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int BUGINESE = 55; /* Bugi */
	
	    /// <summary>
	    /// Script in Unicode 4.1
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int GLAGOLITIC = 56; /* Glag */
	
	    /// <summary>
	    /// Script in Unicode 4.1
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int KHAROSHTHI = 57; /* Khar */
	
	    /// <summary>
	    /// Script in Unicode 4.1
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int SYLOTI_NAGRI = 58; /* Sylo */
	
	    /// <summary>
	    /// Script in Unicode 4.1
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int NEW_TAI_LUE = 59; /* Talu */
	
	    /// <summary>
	    /// Script in Unicode 4.1
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int TIFINAGH = 60; /* Tfng */
	
	    /// <summary>
	    /// Script in Unicode 4.1
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int OLD_PERSIAN = 61; /* Xpeo */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int BALINESE = 62; /* Bali */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int BATAK = 63; /* Batk */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int BLISSYMBOLS = 64; /* Blis */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int BRAHMI = 65; /* Brah */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int CHAM = 66; /* Cham */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int CIRTH = 67; /* Cirt */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int OLD_CHURCH_SLAVONIC_CYRILLIC = 68; /* Cyrs */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int DEMOTIC_EGYPTIAN = 69; /* Egyd */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int HIERATIC_EGYPTIAN = 70; /* Egyh */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int EGYPTIAN_HIEROGLYPHS = 71; /* Egyp */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int KHUTSURI = 72; /* Geok */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int SIMPLIFIED_HAN = 73; /* Hans */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int TRADITIONAL_HAN = 74; /* Hant */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int PAHAWH_HMONG = 75; /* Hmng */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int OLD_HUNGARIAN = 76; /* Hung */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int HARAPPAN_INDUS = 77; /* Inds */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int JAVANESE = 78; /* Java */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int KAYAH_LI = 79; /* Kali */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int LATIN_FRAKTUR = 80; /* Latf */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int LATIN_GAELIC = 81; /* Latg */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int LEPCHA = 82; /* Lepc */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int LINEAR_A = 83; /* Lina */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int MANDAEAN = 84; /* Mand */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int MAYAN_HIEROGLYPHS = 85; /* Maya */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int MEROITIC = 86; /* Mero */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int NKO = 87; /* Nkoo */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int ORKHON = 88; /* Orkh */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int OLD_PERMIC = 89; /* Perm */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int PHAGS_PA = 90; /* Phag */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int PHOENICIAN = 91; /* Phnx */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int PHONETIC_POLLARD = 92; /* Plrd */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int RONGORONGO = 93; /* Roro */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int SARATI = 94; /* Sara */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int ESTRANGELO_SYRIAC = 95; /* Syre */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int WESTERN_SYRIAC = 96; /* Syrj */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int EASTERN_SYRIAC = 97; /* Syrn */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int TENGWAR = 98; /* Teng */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int VAI = 99; /* Vaii */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int VISIBLE_SPEECH = 100;/* Visp */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int CUNEIFORM = 101;/* Xsux */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int UNWRITTEN_LANGUAGES = 102;/* Zxxx */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int UNKNOWN = 103;/* Zzzz *//*
	                                                     * Unknown=
	                                                     * "Code for uncoded script"
	                                                     * , for unassigned code
	                                                     * points
	                                                     */
	
	    /* Private use codes from Qaaa - Qabx are not supported */
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int CARIAN = 104;/* Cari */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int JAPANESE = 105;/* Jpan */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int LANNA = 106;/* Lana */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int LYCIAN = 107;/* Lyci */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int LYDIAN = 108;/* Lydi */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int OL_CHIKI = 109;/* Olck */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int REJANG = 110;/* Rjng */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int SAURASHTRA = 111;/* Saur */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int SIGN_WRITING = 112;/* Sgnw */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int SUNDANESE = 113;/* Sund */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int MOON = 114;/* Moon */
	
	    /// <summary>
	    /// ISO 15924 script code
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int MEITEI_MAYEK = 115;/* Mtei */
	
	    /// <summary>
	    /// Limit
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int CODE_LIMIT = 116;
	
	    private const int SCRIPT_MASK = 0x0000007f;
	
	    private static readonly UCharacterProperty prop = IBM.ICU.Impl.UCharacterProperty
	            .GetInstance();
	
	    private const String kLocaleScript = "LocaleScript";
	
	    // private static final String INVALID_NAME = "Invalid";
	    /// <summary>
	    /// Helper function to find the code from locale.
	    /// </summary>
	    ///
	    /// <param name="locale">The locale.</param>
	    private static int[] FindCodeFromLocale(ULocale locale) {
	        ICUResourceBundle rb;
	        try {
	            rb = (ICUResourceBundle) IBM.ICU.Util.UResourceBundle.GetBundleInstance(
	                    IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME, locale);
	        } catch (MissingManifestResourceException e) {
	            return null;
	        }
	
	        // if rb is not a strict fallback of the requested locale, return null
	        // if(!LocaleUtility.isFallbackOf(rb.getULocale().toString(),
	        // locale.toString())){
	        // return null;
	        // }
	        // non existent locale check
	        if (rb.GetLoadingStatus() == IBM.ICU.Impl.ICUResourceBundle.FROM_DEFAULT
	                && !locale.Equals(IBM.ICU.Util.ULocale.GetDefault())) {
	            return null;
	        }
	        UResourceBundle sub = rb.Get(kLocaleScript);
	
	        int[] result = new int[sub.GetSize()];
	        int w = 0;
	        for (int i = 0; i < result.Length; ++i) {
	            int code = IBM.ICU.Lang.UCharacter.GetPropertyValueEnum(IBM.ICU.Lang.UProperty_Constants.SCRIPT,
	                    sub.GetString(i));
	            result[w++] = code;
	
	        }
	
	        if (w < result.Length) {
	            throw new InvalidOperationException("bad locale data, listed "
	                    + result.Length + " scripts but found only " + w);
	        }
	
	        return result;
	    }
	
	    /// <summary>
	    /// Gets a script codes associated with the given locale or ISO 15924
	    /// abbreviation or name. Returns MALAYAM given "Malayam" OR "Mlym". Returns
	    /// LATIN given "en" OR "en_US"
	    /// </summary>
	    ///
	    /// <param name="locale">Locale</param>
	    /// <returns>The script codes array. null if the the code cannot be found.</returns>
	    /// @stable ICU 2.4
        public static int[] GetCode(ILOG.J2CsMapping.Util.Locale locale)
        {
	        return FindCodeFromLocale(IBM.ICU.Util.ULocale.ForLocale(locale));
	    }
	
	    /// <summary>
	    /// Gets a script codes associated with the given locale or ISO 15924
	    /// abbreviation or name. Returns MALAYAM given "Malayam" OR "Mlym". Returns
	    /// LATIN given "en" OR "en_US"
	    /// </summary>
	    ///
	    /// <param name="locale">ULocale</param>
	    /// <returns>The script codes array. null if the the code cannot be found.</returns>
	    /// @stable ICU 3.0
	    public static int[] GetCode(ULocale locale) {
	        return FindCodeFromLocale(locale);
	    }
	
	    /// <summary>
	    /// Gets a script codes associated with the given locale or ISO 15924
	    /// abbreviation or name. Returns MALAYAM given "Malayam" OR "Mlym". Returns
	    /// LATIN given "en" OR "en_US"
	    /// <p>
	    /// Note: To search by short or long script alias only, use
	    /// UCharacater.getPropertyValueEnum(UProperty.SCRIPT, alias) instead. This
	    /// does a fast lookup with no access of the locale data.
	    /// </summary>
	    ///
	    /// <param name="nameOrAbbrOrLocale">name of the script or ISO 15924 code or locale</param>
	    /// <returns>The script codes array. null if the the code cannot be found.</returns>
	    /// @stable ICU 2.4
	    public static int[] GetCode(String nameOrAbbrOrLocale) {
	        try {
	            return new int[] { IBM.ICU.Lang.UCharacter.GetPropertyValueEnum(
	                    IBM.ICU.Lang.UProperty_Constants.SCRIPT, nameOrAbbrOrLocale) };
	        } catch (ArgumentException e) {
	            return FindCodeFromLocale(new ULocale(nameOrAbbrOrLocale));
	        }
	    }
	
	    /// <exclude/>
	    /// <summary>
	    /// Gets a script codes associated with the given ISO 15924 abbreviation or
	    /// name. Returns MALAYAM given "Malayam" OR "Mlym".
	    /// </summary>
	    ///
	    /// <param name="nameOrAbbr">name of the script or ISO 15924 code</param>
	    /// <returns>The script code value or INVALID_CODE if the code cannot be
	    /// found.</returns>
	    public static int GetCodeFromName(String nameOrAbbr) {
	        try {
	            return IBM.ICU.Lang.UCharacter
	                    .GetPropertyValueEnum(IBM.ICU.Lang.UProperty_Constants.SCRIPT, nameOrAbbr);
	        } catch (ArgumentException e) {
	            return INVALID_CODE;
	        }
	    }
	
	    /// <summary>
	    /// Gets the script code associated with the given codepoint. Returns
	    /// UScript.MALAYAM given 0x0D02
	    /// </summary>
	    ///
	    /// <param name="codepoint">UChar32 codepoint</param>
	    /// <returns>The script code</returns>
	    /// @stable ICU 2.4
	    public static int GetScript(int codepoint) {
	        if (codepoint >= IBM.ICU.Lang.UCharacter.MIN_VALUE
	                & codepoint <= IBM.ICU.Lang.UCharacter.MAX_VALUE) {
	            return (prop.GetAdditional(codepoint, 0) & SCRIPT_MASK);
	        } else {
	            throw new ArgumentException(ILOG.J2CsMapping.Util.IlNumber.ToString(codepoint));
	        }
	    }
	
	    /// <summary>
	    /// Gets a script name associated with the given script code. Returns
	    /// "Malayam" given MALAYAM
	    /// </summary>
	    ///
	    /// <param name="scriptCode">int script code</param>
	    /// <returns>script name as a string in full as given in TR#24</returns>
	    /// @stable ICU 2.4
	    public static String GetName(int scriptCode) {
	        return IBM.ICU.Lang.UCharacter.GetPropertyValueName(IBM.ICU.Lang.UProperty_Constants.SCRIPT, scriptCode,
	                IBM.ICU.Lang.UProperty_Constants.NameChoice.LONG);
	    }
	
	    /// <summary>
	    /// Gets a script name associated with the given script code. Returns "Mlym"
	    /// given MALAYAM
	    /// </summary>
	    ///
	    /// <param name="scriptCode">int script code</param>
	    /// <returns>script abbreviated name as a string as given in TR#24</returns>
	    /// @stable ICU 2.4
	    public static String GetShortName(int scriptCode) {
	        return IBM.ICU.Lang.UCharacter.GetPropertyValueName(IBM.ICU.Lang.UProperty_Constants.SCRIPT, scriptCode,
	                IBM.ICU.Lang.UProperty_Constants.NameChoice.SHORT);
	    }
	
	    // /CLOVER:OFF
	    /// <summary>
	    /// Private Constructor. Never default construct
	    /// </summary>
	    ///
	    private UScript() {
	    }
	    // /CLOVER:ON
	}
}
