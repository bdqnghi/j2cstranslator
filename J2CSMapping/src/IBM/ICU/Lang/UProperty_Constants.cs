// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 2:05 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Lang {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	public class UProperty_Constants {
	
	    /// <summary>
	    /// Selector constants for UCharacter.getPropertyName() and
	    /// UCharacter.getPropertyValueName(). These selectors are used to choose
	    /// which name is returned for a given property or value. All properties and
	    /// values have a long name. Most have a short name, but some do not. Unicode
	    /// allows for additional names, beyond the long and short name, which would
	    /// be indicated by LONG + i, where i=1, 2,...
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Lang.UCharacter.GetPropertyName(System.Int32, System.Int32)"/>
	    /// <seealso cref="M:IBM.ICU.Lang.UCharacter.GetPropertyValueName(System.Int32, System.Int32, System.Int32)"/>
	    /// @stable ICU 2.4
	    public class NameChoice {
	        /// <summary>
	        /// Selector for the abbreviated name of a property or value. Most
	        /// properties and values have a short name; those that do not return
	        /// null.
	        /// </summary>
	        ///
	        /// @stable ICU 2.4
            public const int SHORT = 0;
	    
	        /// <summary>
	        /// Selector for the long name of a property or value. All properties and
	        /// values have a long name.
	        /// </summary>
	        ///
	        /// @stable ICU 2.4
            public const int LONG = 1;
	    
	        /// <summary>
	        /// The number of predefined property name choices. Individual properties
	        /// or values may have more than COUNT aliases.
	        /// </summary>
	        ///
	        /// @stable ICU 2.4
            public const int COUNT = 2;
	    }
	
	    /// <summary>
	    /// <p>
	    /// Binary property Alphabetic.
	    /// </p>
	    /// <p>
	    /// Property for UCharacter.isUAlphabetic(), different from the property in
	    /// UCharacter.isalpha().
	    /// </p>
	    /// <p>
	    /// Lu + Ll + Lt + Lm + Lo + Nl + Other_Alphabetic.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int ALPHABETIC = 0;
	    /// <summary>
	    /// First constant for binary Unicode properties.
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int BINARY_START = ALPHABETIC;
	    /// <summary>
	    /// Binary property ASCII_Hex_Digit (0-9 A-F a-f).
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int ASCII_HEX_DIGIT = 1;
	    /// <summary>
	    /// <p>
	    /// Binary property Bidi_Control.
	    /// </p>
	    /// <p>
	    /// Format controls which have specific functions in the Bidi Algorithm.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int BIDI_CONTROL = 2;
	    /// <summary>
	    /// <p>
	    /// Binary property Bidi_Mirrored.
	    /// </p>
	    /// <p>
	    /// Characters that may change display in RTL text.
	    /// </p>
	    /// <p>
	    /// Property for UCharacter.isMirrored().
	    /// </p>
	    /// <p>
	    /// See Bidi Algorithm; UTR 9.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int BIDI_MIRRORED = 3;
	    /// <summary>
	    /// <p>
	    /// Binary property Dash.
	    /// </p>
	    /// <p>
	    /// Variations of dashes.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int DASH = 4;
	    /// <summary>
	    /// <p>
	    /// Binary property Default_Ignorable_Code_Point (new).
	    /// </p>
	    /// <p>
	    /// Property that indicates codepoint is ignorable in most processing.
	    /// </p>
	    /// <p>
	    /// Codepoints (2060..206F, FFF0..FFFB, E0000..E0FFF) +
	    /// Other_Default_Ignorable_Code_Point + (Cf + Cc + Cs - White_Space)
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int DEFAULT_IGNORABLE_CODE_POINT = 5;
	    /// <summary>
	    /// <p>
	    /// Binary property Deprecated (new).
	    /// </p>
	    /// <p>
	    /// The usage of deprecated characters is strongly discouraged.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int DEPRECATED = 6;
	    /// <summary>
	    /// <p>
	    /// Binary property Diacritic.
	    /// </p>
	    /// <p>
	    /// Characters that linguistically modify the meaning of another character to
	    /// which they apply.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int DIACRITIC = 7;
	    /// <summary>
	    /// <p>
	    /// Binary property Extender.
	    /// </p>
	    /// <p>
	    /// Extend the value or shape of a preceding alphabetic character, e.g.
	    /// length and iteration marks.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int EXTENDER = 8;
	    /// <summary>
	    /// <p>
	    /// Binary property Full_Composition_Exclusion.
	    /// </p>
	    /// <p>
	    /// CompositionExclusions.txt + Singleton Decompositions + Non-Starter
	    /// Decompositions.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int FULL_COMPOSITION_EXCLUSION = 9;
	    /// <summary>
	    /// <p>
	    /// Binary property Grapheme_Base (new).
	    /// </p>
	    /// <p>
	    /// For programmatic determination of grapheme cluster boundaries.
	    /// [0..10FFFF]-Cc-Cf-Cs-Co-Cn-Zl-Zp-Grapheme_Link-Grapheme_Extend-CGJ
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int GRAPHEME_BASE = 10;
	    /// <summary>
	    /// <p>
	    /// Binary property Grapheme_Extend (new).
	    /// </p>
	    /// <p>
	    /// For programmatic determination of grapheme cluster boundaries.
	    /// </p>
	    /// <p>
	    /// Me+Mn+Mc+Other_Grapheme_Extend-Grapheme_Link-CGJ
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int GRAPHEME_EXTEND = 11;
	    /// <summary>
	    /// <p>
	    /// Binary property Grapheme_Link (new).
	    /// </p>
	    /// <p>
	    /// For programmatic determination of grapheme cluster boundaries.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int GRAPHEME_LINK = 12;
	    /// <summary>
	    /// <p>
	    /// Binary property Hex_Digit.
	    /// </p>
	    /// <p>
	    /// Characters commonly used for hexadecimal numbers.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int HEX_DIGIT = 13;
	    /// <summary>
	    /// <p>
	    /// Binary property Hyphen.
	    /// </p>
	    /// <p>
	    /// Dashes used to mark connections between pieces of words, plus the
	    /// Katakana middle dot.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int HYPHEN = 14;
	    /// <summary>
	    /// <p>
	    /// Binary property ID_Continue.
	    /// </p>
	    /// <p>
	    /// Characters that can continue an identifier.
	    /// </p>
	    /// <p>
	    /// ID_Start+Mn+Mc+Nd+Pc
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int ID_CONTINUE = 15;
	    /// <summary>
	    /// <p>
	    /// Binary property ID_Start.
	    /// </p>
	    /// <p>
	    /// Characters that can start an identifier.
	    /// </p>
	    /// <p>
	    /// Lu+Ll+Lt+Lm+Lo+Nl
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int ID_START = 16;
	    /// <summary>
	    /// <p>
	    /// Binary property Ideographic.
	    /// </p>
	    /// <p>
	    /// CJKV ideographs.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int IDEOGRAPHIC = 17;
	    /// <summary>
	    /// <p>
	    /// Binary property IDS_Binary_Operator (new).
	    /// </p>
	    /// <p>
	    /// For programmatic determination of Ideographic Description Sequences.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int IDS_BINARY_OPERATOR = 18;
	    /// <summary>
	    /// <p>
	    /// Binary property IDS_Trinary_Operator (new).
	    /// </p>
	    /// <p
	    /// ?For programmatic determination of Ideographic Description Sequences.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int IDS_TRINARY_OPERATOR = 19;
	    /// <summary>
	    /// <p>
	    /// Binary property Join_Control.
	    /// </p>
	    /// <p>
	    /// Format controls for cursive joining and ligation.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int JOIN_CONTROL = 20;
	    /// <summary>
	    /// <p>
	    /// Binary property Logical_Order_Exception (new).
	    /// </p>
	    /// <p>
	    /// Characters that do not use logical order and require special handling in
	    /// most processing.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int LOGICAL_ORDER_EXCEPTION = 21;
	    /// <summary>
	    /// <p>
	    /// Binary property Lowercase.
	    /// </p>
	    /// <p>
	    /// Same as UCharacter.isULowercase(), different from UCharacter.islower().
	    /// </p>
	    /// <p>
	    /// Ll+Other_Lowercase
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int LOWERCASE = 22;
	    /// <summary>
	    /// <p>
	    /// Binary property Math.
	    /// </p>
	    /// <p>
	    /// Sm+Other_Math
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int MATH = 23;
	    /// <summary>
	    /// <p>
	    /// Binary property Noncharacter_Code_Point.
	    /// </p>
	    /// <p>
	    /// Code points that are explicitly defined as illegal for the encoding of
	    /// characters.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int NONCHARACTER_CODE_POINT = 24;
	    /// <summary>
	    /// <p>
	    /// Binary property Quotation_Mark.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int QUOTATION_MARK = 25;
	    /// <summary>
	    /// <p>
	    /// Binary property Radical (new).
	    /// </p>
	    /// <p>
	    /// For programmatic determination of Ideographic Description Sequences.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int RADICAL = 26;
	    /// <summary>
	    /// <p>
	    /// Binary property Soft_Dotted (new).
	    /// </p>
	    /// <p>
	    /// Characters with a "soft dot", like i or j.
	    /// </p>
	    /// <p>
	    /// An accent placed on these characters causes the dot to disappear.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int SOFT_DOTTED = 27;
	    /// <summary>
	    /// <p>
	    /// Binary property Terminal_Punctuation.
	    /// </p>
	    /// <p>
	    /// Punctuation characters that generally mark the end of textual units.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int TERMINAL_PUNCTUATION = 28;
	    /// <summary>
	    /// <p>
	    /// Binary property Unified_Ideograph (new).
	    /// </p>
	    /// <p>
	    /// For programmatic determination of Ideographic Description Sequences.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int UNIFIED_IDEOGRAPH = 29;
	    /// <summary>
	    /// <p>
	    /// Binary property Uppercase.
	    /// </p>
	    /// <p>
	    /// Same as UCharacter.isUUppercase(), different from
	    /// UCharacter.isUpperCase().
	    /// </p>
	    /// <p>
	    /// Lu+Other_Uppercase
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int UPPERCASE = 30;
	    /// <summary>
	    /// <p>
	    /// Binary property White_Space.
	    /// </p>
	    /// <p>
	    /// Same as UCharacter.isUWhiteSpace(), different from UCharacter.isSpace()
	    /// and UCharacter.isWhitespace().
	    /// </p>
	    /// Space characters+TAB+CR+LF-ZWSP-ZWNBSP</p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int WHITE_SPACE = 31;
	    /// <summary>
	    /// <p>
	    /// Binary property XID_Continue.
	    /// </p>
	    /// <p>
	    /// ID_Continue modified to allow closure under normalization forms NFKC and
	    /// NFKD.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int XID_CONTINUE = 32;
	    /// <summary>
	    /// <p>
	    /// Binary property XID_Start.
	    /// </p>
	    /// <p>
	    /// ID_Start modified to allow closure under normalization forms NFKC and
	    /// NFKD.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int XID_START = 33;
	    /// <summary>
	    /// <p>
	    /// Binary property Case_Sensitive.
	    /// </p>
	    /// <p>
	    /// Either the source of a case mapping or _in_ the target of a case mapping.
	    /// Not the same as the general category Cased_Letter.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int CASE_SENSITIVE = 34;
	    /// <summary>
	    /// Binary property STerm (new in Unicode 4.0.1). Sentence Terminal. Used in
	    /// UAX #29: Text Boundaries (http://www.unicode.org/reports/tr29/)
	    /// </summary>
	    ///
	    /// @stable ICU 3.0
	    public const int S_TERM = 35;
	    /// <summary>
	    /// Binary property Variation_Selector (new in Unicode 4.0.1). Indicates all
	    /// those characters that qualify as Variation Selectors. For details on the
	    /// behavior of these characters, see StandardizedVariants.html and 15.6
	    /// Variation Selectors.
	    /// </summary>
	    ///
	    /// @stable ICU 3.0
	    public const int VARIATION_SELECTOR = 36;
	    /// <summary>
	    /// Binary property NFD_Inert. ICU-specific property for characters that are
	    /// inert under NFD, i.e., they do not interact with adjacent characters.
	    /// Used for example in normalizing transforms in incremental mode to find
	    /// the boundary of safely normalizable text despite possible text additions.
	    /// There is one such property per normalization form. These properties are
	    /// computed as follows - an inert character is: a) unassigned, or ALL of the
	    /// following: b) of combining class 0. c) not decomposed by this
	    /// normalization form. AND if NFC or NFKC, d) can never compose with a
	    /// previous character. e) can never compose with a following character. f)
	    /// can never change if another character is added. Example: a-breve might
	    /// satisfy all but f, but if you add an ogonek it changes to a-ogonek +
	    /// breve
	    /// See also com.ibm.text.UCD.NFSkippable in the ICU4J repository, and
	    /// icu/source/common/unormimp.h .
	    /// </summary>
	    ///
	    /// @stable ICU 3.0
	    public const int NFD_INERT = 37;
	    /// <summary>
	    /// Binary property NFKD_Inert. ICU-specific property for characters that are
	    /// inert under NFKD, i.e., they do not interact with adjacent characters.
	    /// Used for example in normalizing transforms in incremental mode to find
	    /// the boundary of safely normalizable text despite possible text additions.
	    /// </summary>
	    ///
	    /// <seealso cref="null"/>
	    /// @stable ICU 3.0
	    public const int NFKD_INERT = 38;
	    /// <summary>
	    /// Binary property NFC_Inert. ICU-specific property for characters that are
	    /// inert under NFC, i.e., they do not interact with adjacent characters.
	    /// Used for example in normalizing transforms in incremental mode to find
	    /// the boundary of safely normalizable text despite possible text additions.
	    /// </summary>
	    ///
	    /// <seealso cref="null"/>
	    /// @stable ICU 3.0
	    public const int NFC_INERT = 39;
	    /// <summary>
	    /// Binary property NFKC_Inert. ICU-specific property for characters that are
	    /// inert under NFKC, i.e., they do not interact with adjacent characters.
	    /// Used for example in normalizing transforms in incremental mode to find
	    /// the boundary of safely normalizable text despite possible text additions.
	    /// </summary>
	    ///
	    /// <seealso cref="null"/>
	    /// @stable ICU 3.0
	    public const int NFKC_INERT = 40;
	    /// <summary>
	    /// Binary Property Segment_Starter. ICU-specific property for characters
	    /// that are starters in terms of Unicode normalization and combining
	    /// character sequences. They have ccc=0 and do not occur in non-initial
	    /// position of the canonical decomposition of any character (like " in
	    /// NFD(a-umlaut) and a Jamo T in an NFD(Hangul LVT)). ICU uses this property
	    /// for segmenting a string for generating a set of canonically equivalent
	    /// strings, e.g. for canonical closure while processing collation tailoring
	    /// rules.
	    /// </summary>
	    ///
	    /// @stable ICU 3.0
	    public const int SEGMENT_STARTER = 41;
	    /// <summary>
	    /// Binary property Pattern_Syntax (new in Unicode 4.1). See UAX #31
	    /// Identifier and Pattern Syntax (http://www.unicode.org/reports/tr31/)
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int PATTERN_SYNTAX = 42;
	    /// <summary>
	    /// Binary property Pattern_White_Space (new in Unicode 4.1). See UAX #31
	    /// Identifier and Pattern Syntax (http://www.unicode.org/reports/tr31/)
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int PATTERN_WHITE_SPACE = 43;
	    /// <summary>
	    /// Binary property alnum (a C/POSIX character class). Implemented according
	    /// to the UTS #18 Annex C Standard Recommendation. See the UCharacter class
	    /// documentation.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int POSIX_ALNUM = 44;
	    /// <summary>
	    /// Binary property blank (a C/POSIX character class). Implemented according
	    /// to the UTS #18 Annex C Standard Recommendation. See the UCharacter class
	    /// documentation.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int POSIX_BLANK = 45;
	    /// <summary>
	    /// Binary property graph (a C/POSIX character class). Implemented according
	    /// to the UTS #18 Annex C Standard Recommendation. See the UCharacter class
	    /// documentation.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int POSIX_GRAPH = 46;
	    /// <summary>
	    /// Binary property print (a C/POSIX character class). Implemented according
	    /// to the UTS #18 Annex C Standard Recommendation. See the UCharacter class
	    /// documentation.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int POSIX_PRINT = 47;
	    /// <summary>
	    /// Binary property xdigit (a C/POSIX character class). Implemented according
	    /// to the UTS #18 Annex C Standard Recommendation. See the UCharacter class
	    /// documentation.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int POSIX_XDIGIT = 48;
	    /// <summary>
	    /// <p>
	    /// One more than the last constant for binary Unicode properties.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int BINARY_LIMIT = 49;
	    /// <summary>
	    /// Enumerated property Bidi_Class. Same as UCharacter.getDirection(int),
	    /// returns UCharacterDirection values.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int BIDI_CLASS = 0x1000;
	    /// <summary>
	    /// First constant for enumerated/integer Unicode properties.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int INT_START = BIDI_CLASS;
	    /// <summary>
	    /// Enumerated property Block. Same as UCharacter.UnicodeBlock.of(int),
	    /// returns UCharacter.UnicodeBlock values.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int BLOCK = 0x1001;
	    /// <summary>
	    /// Enumerated property Canonical_Combining_Class. Same as
	    /// UCharacter.getCombiningClass(int), returns 8-bit numeric values.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int CANONICAL_COMBINING_CLASS = 0x1002;
	    /// <summary>
	    /// Enumerated property Decomposition_Type. Returns
	    /// UCharacter.DecompositionType values.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int DECOMPOSITION_TYPE = 0x1003;
	    /// <summary>
	    /// Enumerated property East_Asian_Width. See
	    /// http://www.unicode.org/reports/tr11/ Returns UCharacter.EastAsianWidth
	    /// values.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int EAST_ASIAN_WIDTH = 0x1004;
	    /// <summary>
	    /// Enumerated property General_Category. Same as UCharacter.getType(int),
	    /// returns UCharacterCategory values.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int GENERAL_CATEGORY = 0x1005;
	    /// <summary>
	    /// Enumerated property Joining_Group. Returns UCharacter.JoiningGroup
	    /// values.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int JOINING_GROUP = 0x1006;
	    /// <summary>
	    /// Enumerated property Joining_Type. Returns UCharacter.JoiningType values.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int JOINING_TYPE = 0x1007;
	    /// <summary>
	    /// Enumerated property Line_Break. Returns UCharacter.LineBreak values.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int LINE_BREAK = 0x1008;
	    /// <summary>
	    /// Enumerated property Numeric_Type. Returns UCharacter.NumericType values.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int NUMERIC_TYPE = 0x1009;
	    /// <summary>
	    /// Enumerated property Script. Same as UScript.getScript(int), returns
	    /// UScript values.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int SCRIPT = 0x100A;
	    /// <summary>
	    /// Enumerated property Hangul_Syllable_Type, new in Unicode 4. Returns
	    /// HangulSyllableType values.
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public const int HANGUL_SYLLABLE_TYPE = 0x100B;
	    /// <summary>
	    /// Enumerated property NFD_Quick_Check. Returns numeric values compatible
	    /// with Normalizer.QuickCheckResult.
	    /// </summary>
	    ///
	    /// @stable ICU 3.0
	    public const int NFD_QUICK_CHECK = 0x100C;
	    /// <summary>
	    /// Enumerated property NFKD_Quick_Check. Returns numeric values compatible
	    /// with Normalizer.QuickCheckResult.
	    /// </summary>
	    ///
	    /// @stable ICU 3.0
	    public const int NFKD_QUICK_CHECK = 0x100D;
	    /// <summary>
	    /// Enumerated property NFC_Quick_Check. Returns numeric values compatible
	    /// with Normalizer.QuickCheckResult.
	    /// </summary>
	    ///
	    /// @stable ICU 3.0
	    public const int NFC_QUICK_CHECK = 0x100E;
	    /// <summary>
	    /// Enumerated property NFKC_Quick_Check. Returns numeric values compatible
	    /// with Normalizer.QuickCheckResult.
	    /// </summary>
	    ///
	    /// @stable ICU 3.0
	    public const int NFKC_QUICK_CHECK = 0x100F;
	    /// <summary>
	    /// Enumerated property Lead_Canonical_Combining_Class. ICU-specific property
	    /// for the ccc of the first code point of the decomposition, or
	    /// lccc(c)=ccc(NFD(c)[0]). Useful for checking for canonically ordered text;
	    /// see Normalizer.FCD and http://www.unicode.org/notes/tn5/#FCD . Returns
	    /// 8-bit numeric values like CANONICAL_COMBINING_CLASS.
	    /// </summary>
	    ///
	    /// @stable ICU 3.0
	    public const int LEAD_CANONICAL_COMBINING_CLASS = 0x1010;
	    /// <summary>
	    /// Enumerated property Trail_Canonical_Combining_Class. ICU-specific
	    /// property for the ccc of the last code point of the decomposition, or
	    /// lccc(c)=ccc(NFD(c)[last]). Useful for checking for canonically ordered
	    /// text; see Normalizer.FCD and http://www.unicode.org/notes/tn5/#FCD .
	    /// Returns 8-bit numeric values like CANONICAL_COMBINING_CLASS.
	    /// </summary>
	    ///
	    /// @stable ICU 3.0
	    public const int TRAIL_CANONICAL_COMBINING_CLASS = 0x1011;
	    /// <summary>
	    /// Enumerated property Grapheme_Cluster_Break (new in Unicode 4.1). Used in
	    /// UAX #29: Text Boundaries (http://www.unicode.org/reports/tr29/) Returns
	    /// UGraphemeClusterBreak values.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int GRAPHEME_CLUSTER_BREAK = 0x1012;
	    /// <summary>
	    /// Enumerated property Sentence_Break (new in Unicode 4.1). Used in UAX #29:
	    /// Text Boundaries (http://www.unicode.org/reports/tr29/) Returns
	    /// USentenceBreak values.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int SENTENCE_BREAK = 0x1013;
	    /// <summary>
	    /// Enumerated property Word_Break (new in Unicode 4.1). Used in UAX #29:
	    /// Text Boundaries (http://www.unicode.org/reports/tr29/) Returns
	    /// UWordBreakValues values.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int WORD_BREAK = 0x1014;
	    /// <summary>
	    /// One more than the last constant for enumerated/integer Unicode
	    /// properties.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int INT_LIMIT = 0x1015;
	    /// <summary>
	    /// Bitmask property General_Category_Mask. This is the General_Category
	    /// property returned as a bit mask. When used in
	    /// UCharacter.getIntPropertyValue(c), returns bit masks for
	    /// UCharacterCategory values where exactly one bit is set. When used with
	    /// UCharacter.getPropertyValueName() and UCharacter.getPropertyValueEnum(),
	    /// a multi-bit mask is used for sets of categories like "Letters".
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int GENERAL_CATEGORY_MASK = 0x2000;
	    /// <summary>
	    /// First constant for bit-mask Unicode properties.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int MASK_START = GENERAL_CATEGORY_MASK;
	    /// <summary>
	    /// One more than the last constant for bit-mask Unicode properties.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int MASK_LIMIT = 0x2001;
	    /// <summary>
	    /// Double property Numeric_Value. Corresponds to
	    /// UCharacter.getUnicodeNumericValue(int).
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int NUMERIC_VALUE = 0x3000;
	    /// <summary>
	    /// First constant for double Unicode properties.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int DOUBLE_START = NUMERIC_VALUE;
	    /// <summary>
	    /// One more than the last constant for double Unicode properties.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int DOUBLE_LIMIT = 0x3001;
	    /// <summary>
	    /// String property Age. Corresponds to UCharacter.getAge(int).
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int AGE = 0x4000;
	    /// <summary>
	    /// First constant for string Unicode properties.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int STRING_START = AGE;
	    /// <summary>
	    /// String property Bidi_Mirroring_Glyph. Corresponds to
	    /// UCharacter.getMirror(int).
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int BIDI_MIRRORING_GLYPH = 0x4001;
	    /// <summary>
	    /// String property Case_Folding. Corresponds to UCharacter.foldCase(String,
	    /// boolean).
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int CASE_FOLDING = 0x4002;
	    /// <summary>
	    /// String property ISO_Comment. Corresponds to
	    /// UCharacter.getISOComment(int).
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int ISO_COMMENT = 0x4003;
	    /// <summary>
	    /// String property Lowercase_Mapping. Corresponds to
	    /// UCharacter.toLowerCase(String).
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int LOWERCASE_MAPPING = 0x4004;
	    /// <summary>
	    /// String property Name. Corresponds to UCharacter.getName(int).
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int NAME = 0x4005;
	    /// <summary>
	    /// String property Simple_Case_Folding. Corresponds to
	    /// UCharacter.foldCase(int, boolean).
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int SIMPLE_CASE_FOLDING = 0x4006;
	    /// <summary>
	    /// String property Simple_Lowercase_Mapping. Corresponds to
	    /// UCharacter.toLowerCase(int).
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int SIMPLE_LOWERCASE_MAPPING = 0x4007;
	    /// <summary>
	    /// String property Simple_Titlecase_Mapping. Corresponds to
	    /// UCharacter.toTitleCase(int).
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int SIMPLE_TITLECASE_MAPPING = 0x4008;
	    /// <summary>
	    /// String property Simple_Uppercase_Mapping. Corresponds to
	    /// UCharacter.toUpperCase(int).
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int SIMPLE_UPPERCASE_MAPPING = 0x4009;
	    /// <summary>
	    /// String property Titlecase_Mapping. Corresponds to
	    /// UCharacter.toTitleCase(String).
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int TITLECASE_MAPPING = 0x400A;
	    /// <summary>
	    /// String property Unicode_1_Name. Corresponds to
	    /// UCharacter.getName1_0(int).
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int UNICODE_1_NAME = 0x400B;
	    /// <summary>
	    /// String property Uppercase_Mapping. Corresponds to
	    /// UCharacter.toUpperCase(String).
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int UPPERCASE_MAPPING = 0x400C;
	    /// <summary>
	    /// One more than the last constant for string Unicode properties.
	    /// </summary>
	    ///
	    /// @stable ICU 2.4
	    public const int STRING_LIMIT = 0x400D; 
	}
}
