/*
 ******************************************************************************
 * Copyright (C) 2004-2007, International Business Machines Corporation and   *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// <p>
	/// Class for enabling iteration over UResourceBundle objects. Example of use:<br>
	/// <pre>
	/// ICUResourceBundleIterator iterator = resB.getIterator();
	/// ICUResourceBundle temp;
	/// while (iterator.hasNext()) {
	/// temp = iterartor.next();  
	/// int type = temp.getType();
	/// switch(type){
	/// case UResourceBundle.STRING:
	/// str = temp.getString();
	/// break;
	/// case UResourceBundle.INT:
	/// integer = temp.getInt();
	/// break;
	/// .....
	/// }
	/// // do something interesting with data collected
	/// }
	/// </pre>
	/// </summary>
	///
	/// @draft ICU 3.8
	/// @provisional This API might change or be removed in a future release.
	public class UResourceBundleIterator {
	    private UResourceBundle bundle;
	
	    private int index;
	
	    private int size;
	
	    /// <summary>
	    /// Construct a resource bundle iterator for the given resource bundle
	    /// </summary>
	    ///
	    /// <param name="bndl">The resource bundle to iterate over</param>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public UResourceBundleIterator(UResourceBundle bndl) {
	        this.index = 0;
	        this.size = 0;
	        bundle = bndl;
	        size = bundle.GetSize();
	    }
	
	    /// <summary>
	    /// Returns the next element of this iterator if this iterator object has at
	    /// least one more element to provide
	    /// </summary>
	    ///
	    /// <returns>the UResourceBundle object</returns>
	    /// <exception cref="NoSuchElementException"></exception>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public UResourceBundle Next() {
	        if (index < size) {
	            return bundle.Get(index++);
	        }
	        throw new InvalidOperationException();
	    }
	
	    /// <summary>
	    /// Returns the next String of this iterator if this iterator object has at
	    /// least one more element to provide
	    /// </summary>
	    ///
	    /// <returns>the UResourceBundle object</returns>
	    /// <exception cref="NoSuchElementException"></exception>
	    /// <exception cref="UResourceTypeMismatchException"></exception>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public String NextString() {
	        if (index < size) {
	            return bundle.GetString(index++);
	        }
	        throw new InvalidOperationException();
	    }
	
	    /// <summary>
	    /// Resets the internal context of a resource so that iteration starts from
	    /// the first element.
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public void Reset() {
	        // reset the internal context
	        index = 0;
	    }
	
	    /// <summary>
	    /// Checks whether the given resource has another element to iterate over.
	    /// </summary>
	    ///
	    /// <returns>TRUE if there are more elements, FALSE if there is no more
	    /// elements</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public bool HasNext() {
	        return index < size;
	    }
	}}
