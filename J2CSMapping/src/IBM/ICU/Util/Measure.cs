/*
 **********************************************************************
 * Copyright (c) 2004-2006, International Business Machines
 * Corporation and others.  All Rights Reserved.
 **********************************************************************
 * Author: Alan Liu
 * Created: April 20, 2004
 * Since: ICU 3.0
 **********************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// An amount of a specified unit, consisting of a Number and a Unit. For
	/// example, a length measure consists of a Number and a length unit, such as
	/// feet or meters. This is an abstract class. Subclasses specify a concrete Unit
	/// type.
	/// <p>
	/// Measure objects are parsed and formatted by subclasses of MeasureFormat.
	/// <p>
	/// Measure objects are immutable.
	/// </summary>
	///
	/// <seealso cref="T:System.object"/>
	/// <seealso cref="T:IBM.ICU.Util.MeasureUnit"/>
	/// <seealso cref="T:IBM.ICU.Util.MeasureFormat"/>
	/// @stable ICU 3.0
	public abstract class Measure {
	
	    private object number;
	
	    private MeasureUnit unit;
	
	    /// <summary>
	    /// Constructs a new object given a number and a unit.
	    /// </summary>
	    ///
	    /// <param name="number_0">the number</param>
	    /// <param name="unit_1">the unit</param>
	    /// @stable ICU 3.0
	    protected internal Measure(object number_0, MeasureUnit unit_1) {
	        if (number_0 == null || unit_1 == null) {
	            throw new NullReferenceException();
	        }
	        this.number = number_0;
	        this.unit = unit_1;
	    }
	
	    /// <summary>
	    /// Returns true if the given object is equal to this object.
	    /// </summary>
	    ///
	    /// <returns>true if this object is equal to the given object</returns>
	    /// @stable ICU 3.0
	    public override bool Equals(Object obj) {
	        if (obj == null)
	            return false;
	        if (obj == (Object) this)
	            return true;
	        try {
	            Measure m = (Measure) obj;
	            return number.Equals(m.number) && unit.Equals(m.unit);
	        } catch (InvalidCastException e) {
	            return false;
	        }
	    }
	
	    /// <summary>
	    /// Returns a hashcode for this object.
	    /// </summary>
	    ///
	    /// <returns>a 32-bit hash</returns>
	    /// @stable ICU 3.0
	    public override int GetHashCode() {
	        return number.GetHashCode() ^ unit.GetHashCode();
	    }
	
	    /// <summary>
	    /// Returns a string representation of this object.
	    /// </summary>
	    ///
	    /// <returns>a string representation consisting of the ISO currency code
	    /// together with the numeric amount</returns>
	    /// @stable ICU 3.0
	    public override String ToString() {
	        return number.ToString() + ' ' + unit.ToString();
	    }
	
	    /// <summary>
	    /// Returns the numeric value of this object.
	    /// </summary>
	    ///
	    /// <returns>this object's Number</returns>
	    /// @stable ICU 3.0
	    public object GetNumber() {
	        return number;
	    }
	
	    /// <summary>
	    /// Returns the unit of this object.
	    /// </summary>
	    ///
	    /// <returns>this object's Unit</returns>
	    /// @stable ICU 3.0
	    public MeasureUnit GetUnit() {
	        return unit;
	    }
	}
}
