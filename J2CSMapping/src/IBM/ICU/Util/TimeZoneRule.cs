/*
 *******************************************************************************
 * Copyright (C) 2007, International Business Machines Corporation and         *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Runtime.Serialization;
	using System.Text;
	
	/// <summary>
	/// <c>TimeZoneRule</c> is an abstract class representing a rule for time
	/// zone. <c>TimeZoneRule</c> has a set of time zone attributes, such as
	/// zone name, raw offset (UTC offset for standard time) and daylight saving time
	/// offset.
	/// </summary>
	///
	/// <seealso cref="T:IBM.ICU.Util.TimeZoneTransition"/>
	/// <seealso cref="T:IBM.ICU.Util.RuleBasedTimeZone"/>
	/// @draft ICU 3.8
	/// @provisional This API might change or be removed in a future release.
	[Serializable]
	public abstract class TimeZoneRule {
	
	    private readonly String name;
	
	    private readonly int rawOffset;
	
	    private readonly int dstSavings;
	
	    /// <summary>
	    /// Constructs a <c>TimeZoneRule</c> with the name, the GMT offset of
	    /// its standard time and the amount of daylight saving offset adjustment.
	    /// </summary>
	    ///
	    /// <param name="name_0">The time zone name.</param>
	    /// <param name="rawOffset_1">The UTC offset of its standard time in milliseconds.</param>
	    /// <param name="dstSavings_2">The amount of daylight saving offset adjustment inmilliseconds. If this is a rule for standard time, the valueof this argument is 0.</param>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public TimeZoneRule(String name_0, int rawOffset_1, int dstSavings_2) {
	        this.name = name_0;
	        this.rawOffset = rawOffset_1;
	        this.dstSavings = dstSavings_2;
	    }
	
	    /// <summary>
	    /// Gets the name of this time zone.
	    /// </summary>
	    ///
	    /// <returns>The name of this time zone.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public String GetName() {
	        return name;
	    }
	
	    /// <summary>
	    /// Gets the standard time offset.
	    /// </summary>
	    ///
	    /// <returns>The standard time offset from UTC in milliseconds.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public int GetRawOffset() {
	        return rawOffset;
	    }
	
	    /// <summary>
	    /// Gets the amount of daylight saving delta time from the standard time.
	    /// </summary>
	    ///
	    /// <returns>The amount of daylight saving offset used by this rule in
	    /// milliseconds.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public int GetDSTSavings() {
	        return dstSavings;
	    }
	
	    /// <summary>
	    /// Returns if this rule represents the same rule and offsets as another.
	    /// When two <c>TimeZoneRule</c> objects differ only its names, this
	    /// method returns true.
	    /// </summary>
	    ///
	    /// <param name="other">The <c>TimeZoneRule</c> object to be compared with.</param>
	    /// <returns>true if the other <c>TimeZoneRule</c> is the same as this
	    /// one.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual bool IsEquivalentTo(TimeZoneRule other) {
	        if (rawOffset == other.rawOffset && dstSavings == other.dstSavings) {
	            return true;
	        }
	        return false;
	    }
	
	    /// <summary>
	    /// Gets the very first time when this rule takes effect.
	    /// </summary>
	    ///
	    /// <param name="prevRawOffset">The standard time offset from UTC before this rule takeseffect in milliseconds.</param>
	    /// <param name="prevDSTSavings">The amount of daylight saving offset from the standard time.</param>
	    /// <returns>The very first time when this rule takes effect.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public abstract DateTime GetFirstStart(int prevRawOffset, int prevDSTSavings);
	
	    /// <summary>
	    /// Gets the final time when this rule takes effect.
	    /// </summary>
	    ///
	    /// <param name="prevRawOffset">The standard time offset from UTC before this rule takeseffect in milliseconds.</param>
	    /// <param name="prevDSTSavings">The amount of daylight saving offset from the standard time.</param>
	    /// <returns>The very last time when this rule takes effect, or null if this
	    /// rule is applied for future dates infinitely.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public abstract DateTime GetFinalStart(int prevRawOffset, int prevDSTSavings);
	
	    /// <summary>
	    /// Gets the first time when this rule takes effect after the specified time.
	    /// </summary>
	    ///
	    /// <param name="base">The first time after this time is returned.</param>
	    /// <param name="prevRawOffset">The standard time offset from UTC before this rule takeseffect in milliseconds.</param>
	    /// <param name="prevDSTSavings">The amount of daylight saving offset from the standard time.</param>
	    /// <param name="inclusive">Whether the base time is inclusive or not.</param>
	    /// <returns>The first time when this rule takes effect after the specified
	    /// time, or null when this rule never takes effect after the
	    /// specified time.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public abstract DateTime GetNextStart(long bs, int prevRawOffset,
	            int prevDSTSavings, bool inclusive);
	
	    /// <summary>
	    /// Gets the most recent time when this rule takes effect before the
	    /// specified time.
	    /// </summary>
	    ///
	    /// <param name="base">The most recent time when this rule takes effect before thistime is returned.</param>
	    /// <param name="prevRawOffset">The standard time offset from UTC before this rule takeseffect in milliseconds.</param>
	    /// <param name="prevDSTSavings">The amount of daylight saving offset from the standard time.</param>
	    /// <param name="inclusive">Whether the base time is inclusive or not.</param>
	    /// <returns>The most recent time when this rule takes effect before the
	    /// specified time, or null when this rule never takes effect before
	    /// the specified time.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public abstract DateTime GetPreviousStart(long bs, int prevRawOffset,
	            int prevDSTSavings, bool inclusive);
	
	    /// <summary>
	    /// Returns if this <c>TimeZoneRule</c> has one or more start times.
	    /// </summary>
	    ///
	    /// <returns>true if this <TimeZoneRule</code> has one or more start times.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public abstract bool IsTransitionRule();
	
	    /// <summary>
	    /// Returns a <c>String</c> representation of this
	    /// <c>TimeZoneRule</c> object. This method is used for debugging
	    /// purpose only. The string representation can be changed in future version
	    /// of ICU without any notice.
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public override String ToString() {
	        StringBuilder buf = new StringBuilder();
	        buf.Append("name=" + name);
	        buf.Append(", stdOffset=" + rawOffset);
	        buf.Append(", dstSaving=" + dstSavings);
	        return buf.ToString();
	    }
	}
}
