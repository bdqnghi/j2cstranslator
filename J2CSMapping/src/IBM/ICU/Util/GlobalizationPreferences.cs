/*
 *******************************************************************************
 * Copyright (C) 2004-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:48 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using IBM.ICU.Text;
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using ILOG.J2CsMapping.Util;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Reflection;
	using System.Resources;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// This convenience class provides a mechanism for bundling together different
	/// globalization preferences. It includes:
	/// <ul>
	/// <li>A list of locales/languages in preference order</li>
	/// <li>A territory</li>
	/// <li>A currency</li>
	/// <li>A timezone</li>
	/// <li>A calendar</li>
	/// <li>A collator (for language-sensitive sorting, searching, and matching).</li>
	/// <li>Explicit overrides for date/time formats, etc.</li>
	/// </ul>
	/// The class will heuristically compute implicit, heuristic values for the above
	/// based on available data if explicit values are not supplied. These implicit
	/// values can be presented to users for confirmation, or replacement if the
	/// values are incorrect.
	/// <p>
	/// To reset any explicit field so that it will get heuristic values, pass in
	/// null. For example, myPreferences.setLocale(null);
	/// <p>
	/// All of the heuristics can be customized by subclasses, by overriding
	/// getTerritory(), guessCollator(), etc.
	/// <p>
	/// The class also supplies display names for languages, scripts, territories,
	/// currencies, timezones, etc. These are computed according to the
	/// locale/language preference list. Thus, if the preference is Breton; French;
	/// English, then the display name for a language will be returned in Breton if
	/// available, otherwise in French if available, otherwise in English.
	/// <p>
	/// The codes used to reference territory, currency, etc. are as defined
	/// elsewhere in ICU, and are taken from CLDR (which reflects RFC 3066bis usage,
	/// ISO 4217, and the TZ Timezone database identifiers).
	/// <p>
	/// <b>This is at a prototype stage, and has not incorporated all the design
	/// changes that we would like yet; further feedback is welcome.</b>
	/// </p>
	/// Note:
	/// <ul>
	/// <li>to get the display name for the first day of the week, use the calendar +
	/// display names.</li>
	/// <li>to get the work days, ask the calendar (when that is available).</li>
	/// <li>to get papersize / measurement system/bidi-orientation, ask the locale
	/// (when that is available there)</li>
	/// <li>to get the field order in a date, and whether a time is 24hour or not,
	/// ask the DateFormat (when that is available there)</li>
	/// <li>it will support HOST locale when it becomes available (it is a special
	/// locale that will ask the services to use the host platform's values).</li>
	/// </ul>
	/// </summary>
	///
	/// @draft ICU 3.6
	/// @provisional This API might change or be removed in a future release.
	
	// TODO:
	// - Add Holidays
	// - Add convenience to get/take Locale as well as ULocale.
	// - Add Lenient datetime formatting when that is available.
	// - Should this be serializable?
	// - Other utilities?
	
	public class GlobalizationPreferences : Freezable {
	
	    /// <summary>
	    /// Default constructor
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public GlobalizationPreferences() {
	        Reset();
	    }
	
	    /// <summary>
	    /// Number Format type
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int NF_NUMBER = 0, // NumberFormat.NUMBERSTYLE
	            NF_CURRENCY = 1, // NumberFormat.CURRENCYSTYLE
	            NF_PERCENT = 2, // NumberFormat.PERCENTSTYLE
	            NF_SCIENTIFIC = 3, // NumberFormat.SCIENTIFICSTYLE
	            NF_INTEGER = 4; // NumberFormat.INTEGERSTYLE
	
	    private const int NF_LIMIT = NF_INTEGER + 1;
	
	    /// <summary>
	    /// Date Format type
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int DF_FULL = IBM.ICU.Text.DateFormat.FULL, // 0
	            DF_LONG = IBM.ICU.Text.DateFormat.LONG, // 1
	            DF_MEDIUM = IBM.ICU.Text.DateFormat.MEDIUM, // 2
	            DF_SHORT = IBM.ICU.Text.DateFormat.SHORT, // 3
	            DF_NONE = 4;
	
	    private const int DF_LIMIT = DF_NONE + 1;
	
	    /// <summary>
	    /// For selecting a choice of display names
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int ID_LOCALE = 0, ID_LANGUAGE = 1, ID_SCRIPT = 2,
	            ID_TERRITORY = 3, ID_VARIANT = 4, ID_KEYWORD = 5,
	            ID_KEYWORD_VALUE = 6, ID_CURRENCY = 7, ID_CURRENCY_SYMBOL = 8,
	            ID_TIMEZONE = 9;
	
	    // private static final int ID_LIMIT = ID_TIMEZONE + 1;
	
	    /// <summary>
	    /// Break iterator type
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public const int BI_CHARACTER = IBM.ICU.Text.BreakIterator.KIND_CHARACTER, // 0
	            BI_WORD = IBM.ICU.Text.BreakIterator.KIND_WORD, // 1
	            BI_LINE = IBM.ICU.Text.BreakIterator.KIND_LINE, // 2
	            BI_SENTENCE = IBM.ICU.Text.BreakIterator.KIND_SENTENCE, // 3
	            BI_TITLE = IBM.ICU.Text.BreakIterator.KIND_TITLE; // 4
	
	    private const int BI_LIMIT = BI_TITLE + 1;
	
	    /// <summary>
	    /// Sets the language/locale priority list. If other information is not (yet)
	    /// available, this is used to to produce a default value for the appropriate
	    /// territory, currency, timezone, etc. The user should be given the
	    /// opportunity to correct those defaults in case they are incorrect.
	    /// </summary>
	    ///
	    /// <param name="inputLocales">list of locales in priority order, eg {"be", "fr"} for Bretonfirst, then French if that fails.</param>
	    /// <returns>this, for chaining</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public GlobalizationPreferences SetLocales(IList inputLocales) {
	        if (IsFrozen()) {
	            throw new NotSupportedException(
	                    "Attempt to modify immutable object");
	        }
	        locales = ProcessLocales(inputLocales);
	        return this;
	    }
	
	    /// <summary>
	    /// Get a copy of the language/locale priority list
	    /// </summary>
	    ///
	    /// <returns>a copy of the language/locale priority list.</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public IList GetLocales() {
	        IList result;
	        if (locales == null) {
	            result = GuessLocales();
	        } else {
	            result = new ArrayList();
	            ILOG.J2CsMapping.Collections.Generics.Collections.AddAll(locales,result);
	        }
	        return result;
	    }
	
	    /// <summary>
	    /// Convenience function for getting the locales in priority order
	    /// </summary>
	    ///
	    /// <param name="index">The index (0..n) of the desired item.</param>
	    /// <returns>desired item. null if index is out of range</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public ULocale GetLocale(int index) {
	        IList lcls = locales;
	        if (lcls == null) {
	            lcls = GuessLocales();
	        }
	        if (index >= 0 && index < lcls.Count) {
	            return (ULocale) lcls[index];
	        }
	        return null;
	    }
	
	    /// <summary>
	    /// Convenience routine for setting the language/locale priority list from an
	    /// array.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Util.GlobalizationPreferences.SetLocales(null)"/>
	    /// <param name="uLocales">list of locales in an array</param>
	    /// <returns>this, for chaining</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public GlobalizationPreferences SetLocales(ULocale[] uLocales) {
	        if (IsFrozen()) {
	            throw new NotSupportedException(
	                    "Attempt to modify immutable object");
	        }
	        return SetLocales(ILOG.J2CsMapping.Collections.Arrays.AsList(uLocales));
	    }
	
	    /// <summary>
	    /// Convenience routine for setting the language/locale priority list from a
	    /// single locale/language.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Util.GlobalizationPreferences.SetLocales(null)"/>
	    /// <param name="uLocale">single locale</param>
	    /// <returns>this, for chaining</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public GlobalizationPreferences SetLocale(ULocale uLocale) {
	        if (IsFrozen()) {
	            throw new NotSupportedException(
	                    "Attempt to modify immutable object");
	        }
	        return SetLocales(new ULocale[] { uLocale });
	    }
	
	    /// <summary>
	    /// Convenience routine for setting the locale priority list from an
	    /// Accept-Language string.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Util.GlobalizationPreferences.SetLocales(null)"/>
	    /// <param name="acceptLanguageString">Accept-Language list, as defined by Section 14.4 of the RFC2616 (HTTP 1.1)</param>
	    /// <returns>this, for chaining</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public GlobalizationPreferences SetLocales(String acceptLanguageString) {
	        if (IsFrozen()) {
	            throw new NotSupportedException(
	                    "Attempt to modify immutable object");
	        }
	        ULocale[] acceptLocales = null;
	        try {
	            acceptLocales = IBM.ICU.Util.ULocale.ParseAcceptLanguage(acceptLanguageString,
	                    true);
	        } catch (ParseException pe) {
	            // TODO: revisit after 3.8
	            throw new ArgumentException("Invalid Accept-Language string");
	        }
	        return SetLocales(acceptLocales);
	    }
	
	    /// <summary>
	    /// Convenience function to get a ResourceBundle instance using the specified
	    /// base name based on the language/locale priority list stored in this
	    /// object.
	    /// </summary>
	    ///
	    /// <param name="baseName">the base name of the resource bundle, a fully qualified classname</param>
	    /// <returns>a resource bundle for the given base name and locale based on the
	    /// language/locale priority list stored in this object</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public ResourceBundle GetResourceBundle(String baseName) {
	        return GetResourceBundle(baseName, null);
	    }
	
	    /// <summary>
	    /// Convenience function to get a ResourceBundle instance using the specified
	    /// base name and class loader based on the language/locale priority list
	    /// stored in this object.
	    /// </summary>
	    ///
	    /// <param name="baseName">the base name of the resource bundle, a fully qualified classname</param>
	    /// <param name="loader">the class object from which to load the resource bundle</param>
	    /// <returns>a resource bundle for the given base name and locale based on the
	    /// language/locale priority list stored in this object</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public ResourceBundle GetResourceBundle(String baseName, Assembly loader) {
	        UResourceBundle urb = null;
	        UResourceBundle candidate = null;
	        String actualLocaleName = null;
	        IList fallbacks = GetLocales();
	        for (int i = 0; i < fallbacks.Count; i++) {
	            String localeName = ((ULocale) fallbacks[i]).ToString();
	            if (actualLocaleName != null && localeName.Equals(actualLocaleName)) {
	                // Actual locale name in the previous round may exactly matches
	                // with the next fallback locale
	                urb = candidate;
	                break;
	            }
	            try {
	                if (loader == null) {
	                    candidate = IBM.ICU.Util.UResourceBundle.GetBundleInstance(baseName,
	                            localeName);
	                } else {
	                    candidate = IBM.ICU.Util.UResourceBundle.GetBundleInstance(baseName,
	                            localeName, loader);
	                }
	                if (candidate != null) {
	                    actualLocaleName = candidate.GetULocale().GetName();
	                    if (actualLocaleName.Equals(localeName)) {
	                        urb = candidate;
	                        break;
	                    }
	                    if (urb == null) {
	                        // Preserve the available bundle as the last resort
	                        urb = candidate;
	                    }
	                }
	            } catch (MissingManifestResourceException mre) {
	                actualLocaleName = null;
	                continue;
	            }
	        }
	        if (urb == null) {
	            throw new MissingManifestResourceException("Can't find bundle for base name " + baseName);
	        }
	        return urb;
	    }
	
	    /// <summary>
	    /// Sets the territory, which is a valid territory according to for RFC 3066
	    /// (or successor). If not otherwise set, default currency and timezone
	    /// values will be set from this. The user should be given the opportunity to
	    /// correct those defaults in case they are incorrect.
	    /// </summary>
	    ///
	    /// <param name="territory">code</param>
	    /// <returns>this, for chaining</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public GlobalizationPreferences SetTerritory(String territory) {
	        if (IsFrozen()) {
	            throw new NotSupportedException(
	                    "Attempt to modify immutable object");
	        }
	        this.territory = territory; // immutable, so don't need to clone
	        return this;
	    }
	
	    /// <summary>
	    /// Gets the territory setting. If it wasn't explicitly set, it is computed
	    /// from the general locale setting.
	    /// </summary>
	    ///
	    /// <returns>territory code, explicit or implicit.</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public String GetTerritory() {
	        if (territory == null) {
	            return GuessTerritory();
	        }
	        return territory; // immutable, so don't need to clone
	    }
	
	    /// <summary>
	    /// Sets the currency code. If this has not been set, uses default for
	    /// territory.
	    /// </summary>
	    ///
	    /// <param name="currency">Valid ISO 4217 currency code.</param>
	    /// <returns>this, for chaining</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public GlobalizationPreferences SetCurrency(Currency currency) {
	        if (IsFrozen()) {
	            throw new NotSupportedException(
	                    "Attempt to modify immutable object");
	        }
	        this.currency = currency; // immutable, so don't need to clone
	        return this;
	    }
	
	    /// <summary>
	    /// Get a copy of the currency computed according to the settings.
	    /// </summary>
	    ///
	    /// <returns>currency code, explicit or implicit.</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public Currency GetCurrency() {
	        if (currency == null) {
	            return GuessCurrency();
	        }
	        return currency; // immutable, so don't have to clone
	    }
	
	    /// <summary>
	    /// Sets the calendar. If this has not been set, uses default for territory.
	    /// </summary>
	    ///
	    /// <param name="calendar">arbitrary calendar</param>
	    /// <returns>this, for chaining</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public GlobalizationPreferences SetCalendar(Calendar calendar) {
	        if (IsFrozen()) {
	            throw new NotSupportedException(
	                    "Attempt to modify immutable object");
	        }
	        this.calendar = (Calendar) calendar.Clone(); // clone for safety
	        return this;
	    }
	
	    /// <summary>
	    /// Get a copy of the calendar according to the settings.
	    /// </summary>
	    ///
	    /// <returns>calendar explicit or implicit.</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public Calendar GetCalendar() {
	        if (calendar == null) {
	            return GuessCalendar();
	        }
	        Calendar temp = (Calendar) calendar.Clone(); // clone for safety
	        temp.SetTimeZone(GetTimeZone());
	        temp.SetTimeInMillis(DateTime.Now.Millisecond);
	        return temp;
	    }
	
	    /// <summary>
	    /// Sets the timezone ID. If this has not been set, uses default for
	    /// territory.
	    /// </summary>
	    ///
	    /// <param name="timezone">a valid TZID (see UTS#35).</param>
	    /// <returns>this, for chaining</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public GlobalizationPreferences SetTimeZone(TimeZone timezone) {
	        if (IsFrozen()) {
	            throw new NotSupportedException(
	                    "Attempt to modify immutable object");
	        }
	        this.timezone = (TimeZone) timezone.Clone(); // clone for safety;
	        return this;
	    }
	
	    /// <summary>
	    /// Get the timezone. It was either explicitly set, or is heuristically
	    /// computed from other settings.
	    /// </summary>
	    ///
	    /// <returns>timezone, either implicitly or explicitly set</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public TimeZone GetTimeZone() {
	        if (timezone == null) {
	            return GuessTimeZone();
	        }
	        return (TimeZone) timezone.Clone(); // clone for safety
	    }
	
	    /// <summary>
	    /// Get a copy of the collator according to the settings.
	    /// </summary>
	    ///
	    /// <returns>collator explicit or implicit.</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public Collator GetCollator() {
	        if (collator == null) {
	            return GuessCollator();
	        }
	        try {
	            return (Collator) collator.Clone(); // clone for safety
	        } catch (Exception e) {
	            throw new InvalidOperationException("Error in cloning collator");
	        }
	    }
	
	    /// <summary>
	    /// Explicitly set the collator for this object.
	    /// </summary>
	    ///
	    /// <param name="collator"></param>
	    /// <returns>this, for chaining</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public GlobalizationPreferences SetCollator(Collator collator) {
	        if (IsFrozen()) {
	            throw new NotSupportedException(
	                    "Attempt to modify immutable object");
	        }
	        try {
	            this.collator = (Collator) collator.Clone(); // clone for safety
	        } catch (Exception e) {
	            throw new InvalidOperationException("Error in cloning collator");
	        }
	        return this;
	    }
	
	    /// <summary>
	    /// Get a copy of the break iterator for the specified type according to the
	    /// settings.
	    /// </summary>
	    ///
	    /// <param name="type">break type - BI_CHARACTER or BI_WORD, BI_LINE, BI_SENTENCE,BI_TITLE</param>
	    /// <returns>break iterator explicit or implicit</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public BreakIterator GetBreakIterator(int type) {
	        if (type < BI_CHARACTER || type >= BI_LIMIT) {
	            throw new ArgumentException("Illegal break iterator type");
	        }
	        if (breakIterators == null || breakIterators[type] == null) {
	            return GuessBreakIterator(type);
	        }
	        return (BreakIterator) breakIterators[type].Clone(); // clone for safety
	    }
	
	    /// <summary>
	    /// Explicitly set the break iterator for this object.
	    /// </summary>
	    ///
	    /// <param name="type">break type - BI_CHARACTER or BI_WORD, BI_LINE, BI_SENTENCE,BI_TITLE</param>
	    /// <param name="iterator">a break iterator</param>
	    /// <returns>this, for chaining</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public GlobalizationPreferences SetBreakIterator(int type,
	            BreakIterator iterator) {
	        if (type < BI_CHARACTER || type >= BI_LIMIT) {
	            throw new ArgumentException("Illegal break iterator type");
	        }
	        if (IsFrozen()) {
	            throw new NotSupportedException(
	                    "Attempt to modify immutable object");
	        }
	        if (breakIterators == null)
	            breakIterators = new BreakIterator[BI_LIMIT];
	        breakIterators[type] = (BreakIterator) iterator.Clone(); // clone for
	                                                                 // safety
	        return this;
	    }
	
	    /// <summary>
	    /// Get the display name for an ID: language, script, territory, currency,
	    /// timezone... Uses the language priority list to do so.
	    /// </summary>
	    ///
	    /// <param name="id">language code, script code, ...</param>
	    /// <param name="type">specifies the type of the ID: ID_LANGUAGE, etc.</param>
	    /// <returns>the display name</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public String GetDisplayName(String id, int type) {
	        String result = id;
	        for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(GetLocales().GetEnumerator()); it.HasNext();) {
	            ULocale locale = (ULocale) it.Next();
	            if (!IsAvailableLocale(locale, TYPE_GENERIC)) {
	                continue;
	            }
	            switch (type) {
	            case ID_LOCALE:
	                result = IBM.ICU.Util.ULocale.GetDisplayName(id, locale);
	                break;
	            case ID_LANGUAGE:
	                result = IBM.ICU.Util.ULocale.GetDisplayLanguage(id, locale);
	                break;
	            case ID_SCRIPT:
	                result = IBM.ICU.Util.ULocale.GetDisplayScript("und-" + id, locale);
	                break;
	            case ID_TERRITORY:
	                result = IBM.ICU.Util.ULocale.GetDisplayCountry("und-" + id, locale);
	                break;
	            case ID_VARIANT:
	                // TODO fix variant parsing
	                result = IBM.ICU.Util.ULocale.GetDisplayVariant("und-QQ-" + id, locale);
	                break;
	            case ID_KEYWORD:
	                result = IBM.ICU.Util.ULocale.GetDisplayKeyword(id, locale);
	                break;
	            case ID_KEYWORD_VALUE:
	                String[] parts = new String[2];
	                IBM.ICU.Impl.Utility.Split(id, '=', parts);
	                result = IBM.ICU.Util.ULocale.GetDisplayKeywordValue("und@" + id, parts[0],
	                        locale);
	                // TODO fix to tell when successful
	                if (result.Equals(parts[1])) {
	                    continue;
	                }
	                break;
	            case ID_CURRENCY_SYMBOL:
	            case ID_CURRENCY:
	                Currency temp = new Currency(id);
	                result = temp.GetName(locale,
	                        (type == ID_CURRENCY) ? IBM.ICU.Util.Currency.LONG_NAME
	                                : IBM.ICU.Util.Currency.SYMBOL_NAME, new bool[1]);
	                // TODO: have method that doesn't take parameter. Add
	                // function to determine whether string is choice
	                // format.
	                // TODO: have method that doesn't require us
	                // to create a currency
	                break;
	            case ID_TIMEZONE:
	                SimpleDateFormat dtf = new SimpleDateFormat("vvvv", locale);
	                dtf.SetTimeZone(IBM.ICU.Util.TimeZone.GetTimeZone(id));
	                result = dtf.Format(DateTime.Now);
	                // TODO, have method that doesn't require us to create a
	                // timezone
	                // fix other hacks
	                // hack for couldn't match
	
	                bool isBadStr = false;
	                // Matcher badTimeZone =
	                // Pattern.compile("[A-Z]{2}|.*\\s\\([A-Z]{2}\\)").matcher("");
	                // badtzstr = badTimeZone.reset(result).matches();
	                String teststr = result;
	                int sidx = result.IndexOf('(');
	                int eidx = result.IndexOf(')');
	                if (sidx != -1 && eidx != -1 && (eidx - sidx) == 3) {
	                    teststr = result.Substring(sidx + 1,(eidx)-(sidx + 1));
	                }
	                if (teststr.Length == 2) {
	                    isBadStr = true;
	                    for (int i = 0; i < 2; i++) {
	                        char c = teststr[i];
	                        if (c < 'A' || 'Z' < c) {
	                            isBadStr = false;
	                            break;
	                        }
	                    }
	                }
	                if (isBadStr) {
	                    continue;
	                }
	                break;
	            default:
	                throw new ArgumentException("Unknown type: " + type);
	            }
	
	            // TODO need better way of seeing if we fell back to root!!
	            // This will not work at all for lots of stuff
	            if (!id.Equals(result)) {
	                return result;
	            }
	        }
	        return result;
	    }
	
	    /// <summary>
	    /// Set an explicit date format. Overrides the locale priority list for a
	    /// particular combination of dateStyle and timeStyle. DF_NONE should be used
	    /// if for the style, where only the date or time format individually is
	    /// being set.
	    /// </summary>
	    ///
	    /// <param name="dateStyle">DF_FULL, DF_LONG, DF_MEDIUM, DF_SHORT or DF_NONE</param>
	    /// <param name="timeStyle">DF_FULL, DF_LONG, DF_MEDIUM, DF_SHORT or DF_NONE</param>
	    /// <param name="format">The date format</param>
	    /// <returns>this, for chaining</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public GlobalizationPreferences SetDateFormat(int dateStyle, int timeStyle,
	            DateFormat format) {
	        if (IsFrozen()) {
	            throw new NotSupportedException(
	                    "Attempt to modify immutable object");
	        }
	        if (dateFormats == null) {
	            dateFormats = (DateFormat[][])ILOG.J2CsMapping.Collections.Arrays.CreateJaggedArray(typeof(DateFormat), DF_LIMIT, DF_LIMIT);
	        }
	        dateFormats[dateStyle][timeStyle] = (DateFormat) format.Clone(); // for
	                                                                         // safety
	        return this;
	    }
	
	    /// <summary>
	    /// Gets a date format according to the current settings. If there is an
	    /// explicit (non-null) date/time format set, a copy of that is returned.
	    /// Otherwise, the language priority list is used. DF_NONE should be used for
	    /// the style, where only the date or time format individually is being
	    /// gotten.
	    /// </summary>
	    ///
	    /// <param name="dateStyle">DF_FULL, DF_LONG, DF_MEDIUM, DF_SHORT or DF_NONE</param>
	    /// <param name="timeStyle">DF_FULL, DF_LONG, DF_MEDIUM, DF_SHORT or DF_NONE</param>
	    /// <returns>a DateFormat, according to the above description</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public DateFormat GetDateFormat(int dateStyle, int timeStyle) {
	        if (dateStyle == DF_NONE && timeStyle == DF_NONE || dateStyle < 0
	                || dateStyle >= DF_LIMIT || timeStyle < 0
	                || timeStyle >= DF_LIMIT) {
	            throw new ArgumentException(
	                    "Illegal date format style arguments");
	        }
	        DateFormat result = null;
	        if (dateFormats != null) {
	            result = dateFormats[dateStyle][timeStyle];
	        }
	        if (result != null) {
	            result = (DateFormat) result.Clone(); // clone for safety
	            // Not sure overriding configuration is what we really want...
	            result.SetTimeZone(GetTimeZone());
	        } else {
	            result = GuessDateFormat(dateStyle, timeStyle);
	        }
	        return result;
	    }
	
	    /// <summary>
	    /// Gets a number format according to the current settings. If there is an
	    /// explicit (non-null) number format set, a copy of that is returned.
	    /// Otherwise, the language priority list is used.
	    /// </summary>
	    ///
	    /// <param name="style">NF_NUMBER, NF_CURRENCY, NF_PERCENT, NF_SCIENTIFIC, NF_INTEGER</param>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public NumberFormat GetNumberFormat(int style) {
	        if (style < 0 || style >= NF_LIMIT) {
	            throw new ArgumentException("Illegal number format type");
	        }
	        NumberFormat result = null;
	        if (numberFormats != null) {
	            result = numberFormats[style];
	        }
	        if (result != null) {
	            result = (NumberFormat) result.Clone(); // clone for safety (later
	                                                    // optimize)
	        } else {
	            result = GuessNumberFormat(style);
	        }
	        return result;
	    }
	
	    /// <summary>
	    /// Sets a number format explicitly. Overrides the general locale settings.
	    /// </summary>
	    ///
	    /// <param name="style">NF_NUMBER, NF_CURRENCY, NF_PERCENT, NF_SCIENTIFIC, NF_INTEGER</param>
	    /// <param name="format">The number format</param>
	    /// <returns>this, for chaining</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public GlobalizationPreferences SetNumberFormat(int style,
	            NumberFormat format) {
	        if (IsFrozen()) {
	            throw new NotSupportedException(
	                    "Attempt to modify immutable object");
	        }
	        if (numberFormats == null) {
	            numberFormats = new NumberFormat[NF_LIMIT];
	        }
	        numberFormats[style] = (NumberFormat) format.Clone(); // for safety
	        return this;
	    }
	
	    /// <summary>
	    /// Restore the object to the initial state.
	    /// </summary>
	    ///
	    /// <returns>this, for chaining</returns>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public GlobalizationPreferences Reset() {
	        if (IsFrozen()) {
	            throw new NotSupportedException(
	                    "Attempt to modify immutable object");
	        }
	        locales = null;
	        territory = null;
	        calendar = null;
	        collator = null;
	        breakIterators = null;
	        timezone = null;
	        currency = null;
	        dateFormats = null;
	        numberFormats = null;
	        implicitLocales = null;
	        return this;
	    }
	
	    /// <summary>
	    /// Process a language/locale priority list specified via
	    /// <c>setLocales</c>. The input locale list may be expanded or
	    /// re-ordered to represent the prioritized language/locale order actually
	    /// used by this object by the algorithm explained below. <br>
	    /// <br>
	    /// <b>Step 1</b>: Move later occurrence of more specific locale before
	    /// earlier occurrence of less specific locale. <br>
	    /// Before: en, fr_FR, en_US, en_GB <br>
	    /// After: en_US, en_GB, en, fr_FR <br>
	    /// <br>
	    /// <b>Step 2</b>: Append a fallback locale to each locale. <br>
	    /// Before: en_US, en_GB, en, fr_FR <br>
	    /// After: en_US, en, en_GB, en, en, fr_FR, fr <br>
	    /// <br>
	    /// <b>Step 3</b>: Remove earlier occurrence of duplicated locale entries. <br>
	    /// Before: en_US, en, en_GB, en, en, fr_FR, fr <br>
	    /// After: en_US, en_GB, en, fr_FR, fr <br>
	    /// <br>
	    /// The final locale list is used to produce a default value for the
	    /// appropriate territory, currency, timezone, etc. The list also represents
	    /// the lookup order used in <c>getResourceBundle</c> for this object.
	    /// A subclass may override this method to customize the algorithm used for
	    /// populating the locale list.
	    /// </summary>
	    ///
	    /// <param name="inputLocales">The list of input locales</param>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    protected internal IList ProcessLocales(IList inputLocales) {
	        IList result = new ArrayList();
	        /*
	         * Step 1: Relocate later occurrence of more specific locale before
	         * earlier occurrence of less specific locale.
	         * 
	         * Example: Before - en_US, fr_FR, zh, en_US_Boston, zh_TW, zh_Hant,
	         * fr_CA After - en_US_Boston, en_US, fr_FR, zh_TW, zh_Hant, zh, fr_CA
	         */
	        for (int i = 0; i < inputLocales.Count; i++) {
	            ULocale uloc = (ULocale) inputLocales[i];
	
	            String language = uloc.GetLanguage();
	            String script = uloc.GetScript();
	            String country = uloc.GetCountry();
	            String variant = uloc.GetVariant();
	
	            bool bInserted = false;
	            for (int j = 0; j < result.Count; j++) {
	                // Check if this locale is more specific
	                // than existing locale entries already inserted
	                // in the destination list
	                ULocale u = (ULocale) result[j];
	                if (!u.GetLanguage().Equals(language)) {
	                    continue;
	                }
	                String s = u.GetScript();
	                String c = u.GetCountry();
	                String v = u.GetVariant();
	                if (!s.Equals(script)) {
	                    if (s.Length == 0 && c.Length == 0 && v.Length == 0) {
	                        result.Insert(j, uloc);
	                        bInserted = true;
	                        break;
	                    } else if (s.Length == 0 && c.Equals(country)) {
	                        // We want to see zh_Hant_HK before zh_HK
	                        result.Insert(j, uloc);
	                        bInserted = true;
	                        break;
	                    } else if (script.Length == 0 && country.Length > 0
	                            && c.Length == 0) {
	                        // We want to see zh_HK before zh_Hant
	                        result.Insert(j, uloc);
	                        bInserted = true;
	                        break;
	                    }
	                    continue;
	                }
	                if (!c.Equals(country)) {
	                    if (c.Length == 0 && v.Length == 0) {
	                        result.Insert(j, uloc);
	                        bInserted = true;
	                        break;
	                    }
	                }
	                if (!v.Equals(variant) && v.Length == 0) {
	                    result.Insert(j, uloc);
	                    bInserted = true;
	                    break;
	                }
	            }
	            if (!bInserted) {
	                // Add this locale at the end of the list
	                ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,uloc);
	            }
	        }
	
	        // TODO: Locale aliases might be resolved here
	        // For example, zh_Hant_TW = zh_TW
	
	        /*
	         * Step 2: Append fallback locales for each entry
	         * 
	         * Example: Before - en_US_Boston, en_US, fr_FR, zh_TW, zh_Hant, zh,
	         * fr_CA After - en_US_Boston, en_US, en, en_US, en, fr_FR, fr, zh_TW,
	         * zn, zh_Hant, zh, zh, fr_CA, fr
	         */
	        int index = 0;
	        while (index < result.Count) {
	            ULocale uloc_0 = (ULocale) result[index];
	            while (true) {
	                uloc_0 = uloc_0.GetFallback();
	                if (uloc_0.GetLanguage().Length == 0) {
	                    break;
	                }
	                index++;
	                result.Insert(index, uloc_0);
	            }
	            index++;
	        }
	
	        /*
	         * Step 3: Remove earlier occurrence of duplicated locales
	         * 
	         * Example: Before - en_US_Boston, en_US, en, en_US, en, fr_FR, fr,
	         * zh_TW, zn, zh_Hant, zh, zh, fr_CA, fr After - en_US_Boston, en_US,
	         * en, fr_FR, zh_TW, zh_Hant, zh, fr_CA, fr
	         */
	        index = 0;
	        while (index < result.Count - 1) {
	            ULocale uloc_1 = (ULocale) result[index];
	            bool bRemoved = false;
	            for (int i_2 = index + 1; i_2 < result.Count; i_2++) {
	                if (uloc_1.Equals((ULocale) result[i_2])) {
	                    // Remove earlier one
	                    ILOG.J2CsMapping.Collections.Collections.RemoveAt(result,index);
	                    bRemoved = true;
	                    break;
	                }
	            }
	            if (!bRemoved) {
	                index++;
	            }
	        }
	        return result;
	    }
	
	    /// <summary>
	    /// This function can be overridden by subclasses to use different
	    /// heuristics. <b>It MUST return a 'safe' value, one whose modification will
	    /// not affect this object.</b>
	    /// </summary>
	    ///
	    /// <param name="dateStyle"></param>
	    /// <param name="timeStyle"></param>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    protected internal DateFormat GuessDateFormat(int dateStyle, int timeStyle) {
	        DateFormat result;
	        ULocale dfLocale = GetAvailableLocale(TYPE_DATEFORMAT);
	        if (dfLocale == null) {
	            dfLocale = IBM.ICU.Util.ULocale.ROOT;
	        }
	        if (timeStyle == DF_NONE) {
	            result = IBM.ICU.Text.DateFormat.GetDateInstance(GetCalendar(), dateStyle,
	                    dfLocale);
	        } else if (dateStyle == DF_NONE) {
	            result = IBM.ICU.Text.DateFormat.GetTimeInstance(GetCalendar(), timeStyle,
	                    dfLocale);
	        } else {
	            result = IBM.ICU.Text.DateFormat.GetDateTimeInstance(GetCalendar(), dateStyle,
	                    timeStyle, dfLocale);
	        }
	        return result;
	    }
	
	    /// <summary>
	    /// This function can be overridden by subclasses to use different
	    /// heuristics. <b>It MUST return a 'safe' value, one whose modification will
	    /// not affect this object.</b>
	    /// </summary>
	    ///
	    /// <param name="style"></param>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    protected internal NumberFormat GuessNumberFormat(int style) {
	        NumberFormat result;
	        ULocale nfLocale = GetAvailableLocale(TYPE_NUMBERFORMAT);
	        if (nfLocale == null) {
	            nfLocale = IBM.ICU.Util.ULocale.ROOT;
	        }
	        switch (style) {
	        case NF_NUMBER:
	            result = IBM.ICU.Text.NumberFormat.GetInstance(nfLocale);
	            break;
	        case NF_SCIENTIFIC:
	            result = IBM.ICU.Text.NumberFormat.GetScientificInstance(nfLocale);
	            break;
	        case NF_INTEGER:
	            result = IBM.ICU.Text.NumberFormat.GetIntegerInstance(nfLocale);
	            break;
	        case NF_PERCENT:
	            result = IBM.ICU.Text.NumberFormat.GetPercentInstance(nfLocale);
	            break;
	        case NF_CURRENCY:
	            result = IBM.ICU.Text.NumberFormat.GetCurrencyInstance(nfLocale);
	            result.SetCurrency(GetCurrency());
	            break;
	        default:
	            throw new ArgumentException("Unknown number format style");
	        }
	        return result;
	    }
	
	    /// <summary>
	    /// This function can be overridden by subclasses to use different
	    /// heuristics.
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    protected internal String GuessTerritory() {
	        String result;
	        // pass through locales to see if there is a territory.
	        for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(GetLocales().GetEnumerator()); it.HasNext();) {
	            ULocale locale = (ULocale) it.Next();
	            result = locale.GetCountry();
	            if (result.Length != 0) {
	                return result;
	            }
	        }
	        // if not, guess from the first language tag, or maybe from
	        // intersection of languages, eg nl + fr => BE
	        // TODO: fix using real data
	        // for now, just use fixed values
	        ULocale firstLocale = GetLocale(0);
	        String language = firstLocale.GetLanguage();
	        String script = firstLocale.GetScript();
	        result = null;
	        if (script.Length != 0) {
	            result = (String) ILOG.J2CsMapping.Collections.Collections.Get(language_territory_hack_map,language + "_"
	                                + script);
	        }
	        if (result == null) {
	            result = (String) ILOG.J2CsMapping.Collections.Collections.Get(language_territory_hack_map,language);
	        }
	        if (result == null) {
	            result = "US"; // need *some* default
	        }
	        return result;
	    }
	
	    /// <summary>
	    /// This function can be overridden by subclasses to use different heuristics
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    protected internal Currency GuessCurrency() {
	        return IBM.ICU.Util.Currency.GetInstance(new ULocale("und-" + GetTerritory()));
	    }
	
	    /// <summary>
	    /// This function can be overridden by subclasses to use different heuristics
	    /// <b>It MUST return a 'safe' value, one whose modification will not affect
	    /// this object.</b>
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    protected internal IList GuessLocales() {
	        if (implicitLocales == null) {
	            IList result = new ArrayList(1);
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,IBM.ICU.Util.ULocale.GetDefault());
	            implicitLocales = ProcessLocales(result);
	        }
	        return implicitLocales;
	    }
	
	    /// <summary>
	    /// This function can be overridden by subclasses to use different
	    /// heuristics. <b>It MUST return a 'safe' value, one whose modification will
	    /// not affect this object.</b>
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    protected internal Collator GuessCollator() {
	        ULocale collLocale = GetAvailableLocale(TYPE_COLLATOR);
	        if (collLocale == null) {
	            collLocale = IBM.ICU.Util.ULocale.ROOT;
	        }
	        return IBM.ICU.Text.Collator.GetInstance(collLocale);
	    }
	
	    /// <summary>
	    /// This function can be overridden by subclasses to use different
	    /// heuristics. <b>It MUST return a 'safe' value, one whose modification will
	    /// not affect this object.</b>
	    /// </summary>
	    ///
	    /// <param name="type"></param>
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    protected internal BreakIterator GuessBreakIterator(int type) {
	        BreakIterator bitr = null;
	        ULocale brkLocale = GetAvailableLocale(TYPE_BREAKITERATOR);
	        if (brkLocale == null) {
	            brkLocale = IBM.ICU.Util.ULocale.ROOT;
	        }
	        switch (type) {
	        case BI_CHARACTER:
	            bitr = IBM.ICU.Text.BreakIterator.GetCharacterInstance(brkLocale);
	            break;
	        case BI_TITLE:
	            bitr = IBM.ICU.Text.BreakIterator.GetTitleInstance(brkLocale);
	            break;
	        case BI_WORD:
	            bitr = IBM.ICU.Text.BreakIterator.GetWordInstance(brkLocale);
	            break;
	        case BI_LINE:
	            bitr = IBM.ICU.Text.BreakIterator.GetLineInstance(brkLocale);
	            break;
	        case BI_SENTENCE:
	            bitr = IBM.ICU.Text.BreakIterator.GetSentenceInstance(brkLocale);
	            break;
	        default:
	            throw new ArgumentException("Unknown break iterator type");
	        }
	        return bitr;
	    }
	
	    /// <summary>
	    /// This function can be overridden by subclasses to use different
	    /// heuristics. <b>It MUST return a 'safe' value, one whose modification will
	    /// not affect this object.</b>
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    protected internal TimeZone GuessTimeZone() {
	        // TODO fix using real data
	        // for single-zone countries, pick that zone
	        // for others, pick the most populous zone
	        // for now, just use fixed value
	        // NOTE: in a few cases can do better by looking at language.
	        // Eg haw+US should go to Pacific/Honolulu
	        // fr+CA should go to America/Montreal
	        String timezoneString = (String) ILOG.J2CsMapping.Collections.Collections.Get(territory_tzid_hack_map,GetTerritory());
	        if (timezoneString == null) {
	            String[] attempt = IBM.ICU.Impl.ZoneMeta.GetAvailableIDs(GetTerritory());
	            if (attempt.Length == 0) {
	                timezoneString = "Etc/GMT"; // gotta do something
	            } else {
	                int i;
	                // this all needs to be fixed to use real data. But for now, do
	                // slightly better by skipping cruft
	                for (i = 0; i < attempt.Length; ++i) {
	                    if (attempt[i].IndexOf("/") >= 0)
	                        break;
	                }
	                if (i > attempt.Length)
	                    i = 0;
	                timezoneString = attempt[i];
	            }
	        }
	        return IBM.ICU.Util.TimeZone.GetTimeZone(timezoneString);
	    }
	
	    /// <summary>
	    /// This function can be overridden by subclasses to use different
	    /// heuristics. <b>It MUST return a 'safe' value, one whose modification will
	    /// not affect this object.</b>
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    protected internal Calendar GuessCalendar() {
	        ULocale calLocale = GetAvailableLocale(TYPE_CALENDAR);
	        if (calLocale == null) {
	            calLocale = IBM.ICU.Util.ULocale.US;
	        }
	        return IBM.ICU.Util.Calendar.GetInstance(GetTimeZone(), calLocale);
	    }
	
	    // PRIVATES
	
	    private IList locales;
	
	    private String territory;
	
	    private Currency currency;
	
	    private TimeZone timezone;
	
	    private Calendar calendar;
	
	    private Collator collator;
	
	    private BreakIterator[] breakIterators;
	
	    private DateFormat[][] dateFormats;
	
	    private NumberFormat[] numberFormats;
	
	    private IList implicitLocales;
	
	    private ULocale GetAvailableLocale(int type) {
	        IList locs = GetLocales();
	        ULocale result = null;
	        for (int i = 0; i < locs.Count; i++) {
	            ULocale l = (ULocale) locs[i];
	            if (IsAvailableLocale(l, type)) {
	                result = l;
	                break;
	            }
	        }
	        return result;
	    }
	
	    private bool IsAvailableLocale(ULocale loc, int type) {
	        BitSet bits = (BitSet) ILOG.J2CsMapping.Collections.Collections.Get(available_locales,loc);
	        if (bits != null && bits.Get(type)) {
	            return true;
	        }
	        return false;
	    }
	
	    /*
	     * Available locales for service types
	     */
	    private static readonly Hashtable available_locales = new Hashtable();
	
	    private const int TYPE_GENERIC = 0, TYPE_CALENDAR = 1,
	            TYPE_DATEFORMAT = 2, TYPE_NUMBERFORMAT = 3, TYPE_COLLATOR = 4,
	            TYPE_BREAKITERATOR = 5, TYPE_LIMIT = TYPE_BREAKITERATOR + 1;
	
	    /// <summary>
	    /// WARNING: All of this data is temporary, until we start importing from
	    /// CLDR!!!
	    /// </summary>
	    ///
	    private static readonly IDictionary language_territory_hack_map = new Hashtable();
	
	    private static readonly String[][] language_territory_hack = { new String[] { "af", "ZA" }, new String[] { "am", "ET" },
	            new String[] { "ar", "SA" }, new String[] { "as", "IN" },
	            new String[] { "ay", "PE" }, new String[] { "az", "AZ" },
	            new String[] { "bal", "PK" }, new String[] { "be", "BY" },
	            new String[] { "bg", "BG" }, new String[] { "bn", "IN" },
	            new String[] { "bs", "BA" }, new String[] { "ca", "ES" },
	            new String[] { "ch", "MP" }, new String[] { "cpe", "SL" },
	            new String[] { "cs", "CZ" }, new String[] { "cy", "GB" },
	            new String[] { "da", "DK" }, new String[] { "de", "DE" },
	            new String[] { "dv", "MV" }, new String[] { "dz", "BT" },
	            new String[] { "el", "GR" }, new String[] { "en", "US" },
	            new String[] { "es", "ES" }, new String[] { "et", "EE" },
	            new String[] { "eu", "ES" }, new String[] { "fa", "IR" },
	            new String[] { "fi", "FI" }, new String[] { "fil", "PH" },
	            new String[] { "fj", "FJ" }, new String[] { "fo", "FO" },
	            new String[] { "fr", "FR" }, new String[] { "ga", "IE" },
	            new String[] { "gd", "GB" }, new String[] { "gl", "ES" },
	            new String[] { "gn", "PY" }, new String[] { "gu", "IN" },
	            new String[] { "gv", "GB" }, new String[] { "ha", "NG" },
	            new String[] { "he", "IL" }, new String[] { "hi", "IN" },
	            new String[] { "ho", "PG" }, new String[] { "hr", "HR" },
	            new String[] { "ht", "HT" }, new String[] { "hu", "HU" },
	            new String[] { "hy", "AM" }, new String[] { "id", "ID" },
	            new String[] { "is", "IS" }, new String[] { "it", "IT" },
	            new String[] { "ja", "JP" }, new String[] { "ka", "GE" },
	            new String[] { "kk", "KZ" }, new String[] { "kl", "GL" },
	            new String[] { "km", "KH" }, new String[] { "kn", "IN" },
	            new String[] { "ko", "KR" }, new String[] { "kok", "IN" },
	            new String[] { "ks", "IN" }, new String[] { "ku", "TR" },
	            new String[] { "ky", "KG" }, new String[] { "la", "VA" },
	            new String[] { "lb", "LU" }, new String[] { "ln", "CG" },
	            new String[] { "lo", "LA" }, new String[] { "lt", "LT" },
	            new String[] { "lv", "LV" }, new String[] { "mai", "IN" },
	            new String[] { "men", "GN" }, new String[] { "mg", "MG" },
	            new String[] { "mh", "MH" }, new String[] { "mk", "MK" },
	            new String[] { "ml", "IN" }, new String[] { "mn", "MN" },
	            new String[] { "mni", "IN" }, new String[] { "mo", "MD" },
	            new String[] { "mr", "IN" }, new String[] { "ms", "MY" },
	            new String[] { "mt", "MT" }, new String[] { "my", "MM" },
	            new String[] { "na", "NR" }, new String[] { "nb", "NO" },
	            new String[] { "nd", "ZA" }, new String[] { "ne", "NP" },
	            new String[] { "niu", "NU" }, new String[] { "nl", "NL" },
	            new String[] { "nn", "NO" }, new String[] { "no", "NO" },
	            new String[] { "nr", "ZA" }, new String[] { "nso", "ZA" },
	            new String[] { "ny", "MW" }, new String[] { "om", "KE" },
	            new String[] { "or", "IN" }, new String[] { "pa", "IN" },
	            new String[] { "pau", "PW" }, new String[] { "pl", "PL" },
	            new String[] { "ps", "PK" }, new String[] { "pt", "BR" },
	            new String[] { "qu", "PE" }, new String[] { "rn", "BI" },
	            new String[] { "ro", "RO" }, new String[] { "ru", "RU" },
	            new String[] { "rw", "RW" }, new String[] { "sd", "IN" },
	            new String[] { "sg", "CF" }, new String[] { "si", "LK" },
	            new String[] { "sk", "SK" }, new String[] { "sl", "SI" },
	            new String[] { "sm", "WS" }, new String[] { "so", "DJ" },
	            new String[] { "sq", "CS" }, new String[] { "sr", "CS" },
	            new String[] { "ss", "ZA" }, new String[] { "st", "ZA" },
	            new String[] { "sv", "SE" }, new String[] { "sw", "KE" },
	            new String[] { "ta", "IN" }, new String[] { "te", "IN" },
	            new String[] { "tem", "SL" }, new String[] { "tet", "TL" },
	            new String[] { "th", "TH" }, new String[] { "ti", "ET" },
	            new String[] { "tg", "TJ" }, new String[] { "tk", "TM" },
	            new String[] { "tkl", "TK" }, new String[] { "tvl", "TV" },
	            new String[] { "tl", "PH" }, new String[] { "tn", "ZA" },
	            new String[] { "to", "TO" }, new String[] { "tpi", "PG" },
	            new String[] { "tr", "TR" }, new String[] { "ts", "ZA" },
	            new String[] { "uk", "UA" }, new String[] { "ur", "IN" },
	            new String[] { "uz", "UZ" }, new String[] { "ve", "ZA" },
	            new String[] { "vi", "VN" }, new String[] { "wo", "SN" },
	            new String[] { "xh", "ZA" }, new String[] { "zh", "CN" },
	            new String[] { "zh_Hant", "TW" }, new String[] { "zu", "ZA" },
	            new String[] { "aa", "ET" }, new String[] { "byn", "ER" },
	            new String[] { "eo", "DE" }, new String[] { "gez", "ET" },
	            new String[] { "haw", "US" }, new String[] { "iu", "CA" },
	            new String[] { "kw", "GB" }, new String[] { "sa", "IN" },
	            new String[] { "sh", "HR" }, new String[] { "sid", "ET" },
	            new String[] { "syr", "SY" }, new String[] { "tig", "ER" },
	            new String[] { "tt", "RU" }, new String[] { "wal", "ET" } };
	    static internal readonly IDictionary territory_tzid_hack_map = new Hashtable();
	
	    static internal readonly String[][] territory_tzid_hack = { new String[] { "AQ", "Antarctica/McMurdo" },
	            new String[] { "AR", "America/Buenos_Aires" },
	            new String[] { "AU", "Australia/Sydney" },
	            new String[] { "BR", "America/Sao_Paulo" },
	            new String[] { "CA", "America/Toronto" },
	            new String[] { "CD", "Africa/Kinshasa" },
	            new String[] { "CL", "America/Santiago" },
	            new String[] { "CN", "Asia/Shanghai" },
	            new String[] { "EC", "America/Guayaquil" },
	            new String[] { "ES", "Europe/Madrid" },
	            new String[] { "GB", "Europe/London" },
	            new String[] { "GL", "America/Godthab" },
	            new String[] { "ID", "Asia/Jakarta" },
	            new String[] { "ML", "Africa/Bamako" },
	            new String[] { "MX", "America/Mexico_City" },
	            new String[] { "MY", "Asia/Kuala_Lumpur" },
	            new String[] { "NZ", "Pacific/Auckland" },
	            new String[] { "PT", "Europe/Lisbon" },
	            new String[] { "RU", "Europe/Moscow" },
	            new String[] { "UA", "Europe/Kiev" },
	            new String[] { "US", "America/New_York" },
	            new String[] { "UZ", "Asia/Tashkent" },
	            new String[] { "PF", "Pacific/Tahiti" },
	            new String[] { "FM", "Pacific/Kosrae" },
	            new String[] { "KI", "Pacific/Tarawa" },
	            new String[] { "KZ", "Asia/Almaty" },
	            new String[] { "MH", "Pacific/Majuro" },
	            new String[] { "MN", "Asia/Ulaanbaatar" },
	            new String[] { "SJ", "Arctic/Longyearbyen" },
	            new String[] { "UM", "Pacific/Midway" } };
	    private bool frozen;
	
	    
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public virtual bool IsFrozen() {
	        return frozen;
	    }
	
	    
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public virtual Object Freeze() {
	        frozen = true;
	        return this;
	    }
	
	    
	    /// @draft ICU 3.6
	    /// @provisional This API might change or be removed in a future release.
	    public virtual Object CloneAsThawed() {
	        try {
	            GlobalizationPreferences result = (GlobalizationPreferences) Clone();
	            result.frozen = false;
	            return result;
	        } catch (Exception e) {
	            // will always work
	            return null;
	        }
	    }
	
	    static GlobalizationPreferences() {
	            BitSet bits;
	            ULocale[] allLocales = IBM.ICU.Util.ULocale.GetAvailableLocales();
	            for (int i = 0; i < allLocales.Length; i++) {
	                bits = new BitSet(TYPE_LIMIT);
	                ILOG.J2CsMapping.Collections.Collections.Put(available_locales,allLocales[i],bits);
	                bits.Set(TYPE_GENERIC);
	            }
	            ULocale[] calLocales = IBM.ICU.Util.Calendar.GetAvailableULocales();
	            for (int i = 0; i < calLocales.Length; i++) {
	                bits = (BitSet) ILOG.J2CsMapping.Collections.Collections.Get(available_locales,calLocales[i]);
	                if (bits == null) {
	                    bits = new BitSet(TYPE_LIMIT);
	                    ILOG.J2CsMapping.Collections.Collections.Put(available_locales,allLocales[i],bits);
	                }
	                bits.Set(TYPE_CALENDAR);
	            }
	            ULocale[] dateLocales = IBM.ICU.Text.DateFormat
	                    .GetAvailableULocales();
	            for (int i = 0; i < dateLocales.Length; i++) {
	                bits = (BitSet) ILOG.J2CsMapping.Collections.Collections.Get(available_locales,dateLocales[i]);
	                if (bits == null) {
	                    bits = new BitSet(TYPE_LIMIT);
	                    ILOG.J2CsMapping.Collections.Collections.Put(available_locales,allLocales[i],bits);
	                }
	                bits.Set(TYPE_DATEFORMAT);
	            }
	            ULocale[] numLocales = IBM.ICU.Text.NumberFormat
	                    .GetAvailableULocales();
	            for (int i = 0; i < numLocales.Length; i++) {
	                bits = (BitSet) ILOG.J2CsMapping.Collections.Collections.Get(available_locales,numLocales[i]);
	                if (bits == null) {
	                    bits = new BitSet(TYPE_LIMIT);
	                    ILOG.J2CsMapping.Collections.Collections.Put(available_locales,allLocales[i],bits);
	                }
	                bits.Set(TYPE_NUMBERFORMAT);
	            }
	            ULocale[] collLocales = IBM.ICU.Text.Collator
	                    .GetAvailableULocales();
	            for (int i = 0; i < collLocales.Length; i++) {
	                bits = (BitSet) ILOG.J2CsMapping.Collections.Collections.Get(available_locales,collLocales[i]);
	                if (bits == null) {
	                    bits = new BitSet(TYPE_LIMIT);
	                    ILOG.J2CsMapping.Collections.Collections.Put(available_locales,allLocales[i],bits);
	                }
	                bits.Set(TYPE_COLLATOR);
	            }
	            ULocale[] brkLocales = IBM.ICU.Text.BreakIterator
	                    .GetAvailableULocales();
	            for (int i = 0; i < brkLocales.Length; i++) {
	                bits = (BitSet) ILOG.J2CsMapping.Collections.Collections.Get(available_locales,brkLocales[i]);
	                bits.Set(TYPE_BREAKITERATOR);
	            }
	            for (int i = 0; i < language_territory_hack.Length; ++i) {
	                ILOG.J2CsMapping.Collections.Collections.Put(language_territory_hack_map,language_territory_hack[i][0],language_territory_hack[i][1]);
	            }
	            for (int i = 0; i < territory_tzid_hack.Length; ++i) {
	                ILOG.J2CsMapping.Collections.Collections.Put(territory_tzid_hack_map,territory_tzid_hack[i][0],territory_tzid_hack[i][1]);
	            }
	        }

        #region ICloneable Members

        public object Clone()
        {
            throw new NotImplementedException();
        }

        #endregion
    }
}
