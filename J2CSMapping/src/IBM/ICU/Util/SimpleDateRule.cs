/*
 *******************************************************************************
 * Copyright (C) 1996-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Simple implementation of DateRule.
	/// </summary>
	///
	/// @draft ICU 2.8 (retainAll)
	/// @provisional This API might change or be removed in a future release.
	public class SimpleDateRule : DateRule {
	    /// <summary>
	    /// Construct a rule for a fixed date within a month
	    /// </summary>
	    ///
	    /// <param name="month">The month in which this rule occurs (0-based).</param>
	    /// <param name="dayOfMonth">The date in that month (1-based).</param>
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public SimpleDateRule(int month, int dayOfMonth) {
	        this.calendar = gCalendar;
	        this.month = month;
	        this.dayOfMonth = dayOfMonth;
	        this.dayOfWeek = 0;
	    }
	
	    // temporary
	    /* package */internal SimpleDateRule(int month, int dayOfMonth, Calendar cal) {
	        this.calendar = gCalendar;
	        this.month = month;
	        this.dayOfMonth = dayOfMonth;
	        this.dayOfWeek = 0;
	        this.calendar = cal;
	    }
	
	    /// <summary>
	    /// Construct a rule for a weekday within a month, e.g. the first Monday.
	    /// </summary>
	    ///
	    /// <param name="month">The month in which this rule occurs (0-based).</param>
	    /// <param name="dayOfMonth">A date within that month (1-based).</param>
	    /// <param name="dayOfWeek">The day of the week on which this rule occurs.</param>
	    /// <param name="after">If true, this rule selects the first dayOfWeek on or afterdayOfMonth. If false, the rule selects the first dayOfWeek onor before dayOfMonth.</param>
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public SimpleDateRule(int month, int dayOfMonth, int dayOfWeek,
	            bool after) {
	        this.calendar = gCalendar;
	        this.month = month;
	        this.dayOfMonth = dayOfMonth;
	        this.dayOfWeek = (after) ? dayOfWeek : -dayOfWeek;
	    }
	
	    /// <summary>
	    /// Return the first occurrance of the event represented by this rule that is
	    /// on or after the given start date.
	    /// </summary>
	    ///
	    /// <param name="start">Only occurrances on or after this date are returned.</param>
	    /// <returns>The date on which this event occurs, or null if it does not occur
	    /// on or after the start date.</returns>
	    /// <seealso cref="M:IBM.ICU.Util.SimpleDateRule.FirstBetween(null, null)"/>
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual DateTime FirstAfter(DateTime start) {
	        return DoFirstBetween(start, default(DateTime));
	    }
	
	    /// <summary>
	    /// Return the first occurrance of the event represented by this rule that is
	    /// on or after the given start date and before the given end date.
	    /// </summary>
	    ///
	    /// <param name="start">Only occurrances on or after this date are returned.</param>
	    /// <param name="end">Only occurrances before this date are returned.</param>
	    /// <returns>The date on which this event occurs, or null if it does not occur
	    /// between the start and end dates.</returns>
	    /// <seealso cref="M:IBM.ICU.Util.SimpleDateRule.FirstAfter(null)"/>
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual DateTime FirstBetween(DateTime start, DateTime end) {
	        // Pin to the min/max dates for this rule
	        return DoFirstBetween(start, end);
	    }
	
	    /// <summary>
	    /// Checks whether this event occurs on the given date. This does
	    /// <em>not</em> take time of day into account; instead it checks whether
	    /// this event and the given date are on the same day. This is useful for
	    /// applications such as determining whether a given day is a holiday.
	    /// </summary>
	    ///
	    /// <param name="date">The date to check.</param>
	    /// <returns>true if this event occurs on the given date.</returns>
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual bool IsOn(DateTime date) {
	        Calendar c = calendar;
	
	         lock (c) {
	                    c.SetTime(date);
	        
	                    int dayOfYear = c.Get(IBM.ICU.Util.Calendar.DAY_OF_YEAR);
	        
	                    c.SetTime(ComputeInYear(c.Get(IBM.ICU.Util.Calendar.YEAR), c));
	        
	                    // System.out.println("  isOn: dayOfYear = " + dayOfYear);
	                    // System.out.println("        holiday   = " +
	                    // c.get(Calendar.DAY_OF_YEAR));
	        
	                    return c.Get(IBM.ICU.Util.Calendar.DAY_OF_YEAR) == dayOfYear;
	                }
	    }
	
	    /// <summary>
	    /// Check whether this event occurs at least once between the two dates
	    /// given.
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual bool IsBetween(DateTime start, DateTime end) {
	        return FirstBetween(start, end) != null; // TODO: optimize?
	    }
	
	    private DateTime DoFirstBetween(DateTime start, DateTime end) {
	        Calendar c = calendar;
	
	         lock (c) {
	                    c.SetTime(start);
	        
	                    int year = c.Get(IBM.ICU.Util.Calendar.YEAR);
	                    int month = c.Get(IBM.ICU.Util.Calendar.MONTH);
	        
	                    // If the rule is earlier in the year than the start date
	                    // we have to go to the next year.
	                    if (month > this.month) {
	                        year++;
	                    }
	        
	                    // Figure out when the rule lands in the given year
	                    DateTime result = ComputeInYear(year, c);
	        
	                    // If the rule is in the same month as the start date, it's possible
	                    // to get a result that's before the start. If so, go to next year.
	                    if (month == this.month && ILOG.J2CsMapping.Util.DateUtil.Before(result,start)) {
	                        result = ComputeInYear(year + 1, c);
	                    }
	        
	                    if (end != null && ILOG.J2CsMapping.Util.DateUtil.After(result,end)) {
                            return default(DateTime);
	                    }
	                    return result;
	                }
	    }
	
	    private DateTime ComputeInYear(int year, Calendar c) {
	         lock (c) {
	                    c.Clear();
	                    c.Set(IBM.ICU.Util.Calendar.ERA, c.GetMaximum(IBM.ICU.Util.Calendar.ERA));
	                    c.Set(IBM.ICU.Util.Calendar.YEAR, year);
	                    c.Set(IBM.ICU.Util.Calendar.MONTH, month);
	                    c.Set(IBM.ICU.Util.Calendar.DATE, dayOfMonth);
	        
	                    // System.out.println("     computeInYear: start at " +
	                    // c.getTime().toString());
	        
	                    if (dayOfWeek != 0) {
	                        c.SetTime(c.GetTime()); // JDK 1.1.2 workaround
	                        int weekday = c.Get(IBM.ICU.Util.Calendar.DAY_OF_WEEK);
	        
	                        // System.out.println("                    weekday = " +
	                        // weekday);
	                        // System.out.println("                    dayOfYear = " +
	                        // c.get(Calendar.DAY_OF_YEAR));
	        
	                        int delta = 0;
	                        if (dayOfWeek > 0) {
	                            // We want the first occurrance of the given day of the week
	                            // on or after the specified date in the month.
	                            delta = (dayOfWeek - weekday + 7) % 7;
	                        } else {
	                            // We want the first occurrance of the (-dayOfWeek)
	                            // on or before the specified date in the month.
	                            delta = -((dayOfWeek + weekday + 7) % 7);
	                        }
	                        // System.out.println("                    adding " + delta +
	                        // " days");
	                        c.Add(IBM.ICU.Util.Calendar.DATE, delta);
	                    }
	        
	                    return c.GetTime();
	                }
	    }
	
	    
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    // public void setCalendar(Calendar c) {
	    // calendar = c;
	    // }
	
	    private static GregorianCalendar gCalendar = new GregorianCalendar();
	
	    private Calendar calendar;
	
	    private int month;
	
	    private int dayOfMonth;
	
	    private int dayOfWeek;
	}
}
