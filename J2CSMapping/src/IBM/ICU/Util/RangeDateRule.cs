/*
 *******************************************************************************
 * Copyright (C) 1996-2006, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Implementation of DateRule that takes a range.
	/// </summary>
	///
	/// @draft ICU 2.8 (retainAll)
	/// @provisional This API might change or be removed in a future release.
	public class RangeDateRule : DateRule {
	    
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public RangeDateRule() {
	        this.ranges = new ArrayList(2);
	    }
	
	    /**
	     * @internal
	     */
	    // Range is a package-private class so this should be package-private too,
	    // probably
	    // public RangeDateRule(Range[] ranges)
	    // {
	    // for (int i = 0; i < ranges.length; i++) {
	    // this.ranges.addElement(ranges[i]);
	    // }
	    // }
	
	    
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public void Add(DateRule rule) {
            throw new NotImplementedException();
	        //Add(new DateTime((Int64.MinValue)*10000), rule);
	    }
	
	    
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public void Add(DateTime start, DateRule rule) {
	        // TODO: Insert in the right place
	        // System.out.println("Add: " + start.toString());
	        ranges.Add(new Range(start, rule));
	    }
	
	    // -----------------------------------------------------------------------
	
	    
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual DateTime FirstAfter(DateTime start) {
	        // Find the range that I should look at
	        int index = StartIndex(start);
	        if (index == ranges.Count) {
	            index = 0;
	        }
            DateTime result = default(DateTime);
	
	        Range r = RangeAt(index);
	        Range e = RangeAt(index + 1);
	
	        if (r != null && r.rule != null) {
	            if (e != null) {
	                result = r.rule.FirstBetween(start, e.start);
	            } else {
	                result = r.rule.FirstAfter(start);
	            }
	        }
	        return result;
	    }
	
	    
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual DateTime FirstBetween(DateTime start, DateTime end) {
	        if (end == null) {
	            return FirstAfter(start);
	        }
	
	        // Find the range that I should look at
	        int index = StartIndex(start);
            DateTime result = default(DateTime);
	
	        Range next = RangeAt(index);
	
	        while (result == null && next != null && !ILOG.J2CsMapping.Util.DateUtil.After(next.start,end)) {
	            Range r = next;
	            next = RangeAt(index + 1);
	
	            if (r.rule != null) {
	                DateTime e = (next != null && !ILOG.J2CsMapping.Util.DateUtil.After(next.start,end)) ? next.start
	                        : end;
	                result = r.rule.FirstBetween(start, e);
	            }
	        }
	        return result;
	    }
	
	    
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual bool IsOn(DateTime date) {
	        Range r = RangeAt(StartIndex(date));
	        return r != null && r.rule != null && r.rule.IsOn(date);
	    }
	
	    /// <summary>
	    /// Check whether this event occurs at least once between the two dates
	    /// given.
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual bool IsBetween(DateTime start, DateTime end) {
	        return FirstBetween(start, end) == null;
	    }
	
	    /*
	     * find the index of the last range whose start date is before "start"
	     * returns an index >= ranges.size() if there is none
	     */
	    private int StartIndex(DateTime start) {
	        int lastIndex = ranges.Count;
	
	        for (int i = 0; i < ranges.Count; i++) {
	            Range r = (Range) ranges[i];
	            if (ILOG.J2CsMapping.Util.DateUtil.Before(start,r.start)) {
	                break;
	            }
	            lastIndex = i;
	        }
	        return lastIndex;
	    }
	
	    private Range RangeAt(int index) {
	        return (index < ranges.Count) ? (Range) ranges[index] : null;
	    }
	
	    internal ArrayList ranges;
	}
	
	// -----------------------------------------------------------------------
	// Privates
	//
	
	internal class Range {
	    public Range(DateTime start, DateRule rule) {
	        this.start = start;
	        this.rule = rule;
	    }
	
	    public DateTime start;
	
	    public DateRule rule;
	}
}
