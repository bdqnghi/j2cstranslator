/*
 *******************************************************************************
 * Copyright (C) 2007, International Business Machines Corporation and         *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Runtime.Serialization;
	using System.Text;
	
	/// <summary>
	/// <c>DateTimeRule</c> is a class representing a time in a year by a rule
	/// specified by month, day of month, day of week and time in the day.
	/// </summary>
	///
	/// @draft ICU 3.8
	/// @provisional This API might change or be removed in a future release.
	[Serializable]
	public class DateTimeRule {
	
	    private const long serialVersionUID = 2183055795738051443L;
	
	    /// <summary>
	    /// Date rule type defined by exact day of month. For example, March 14.
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int DOM = 0;
	
	    /// <summary>
	    /// Date rule type defined by day of week in month. For example, 2nd Sunday
	    /// in March.
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int DOW = 1;
	
	    /// <summary>
	    /// Date rule type defined by first day of week on or after exact day of
	    /// month. For example, 1st Monday on or after March 15.
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int DOW_GEQ_DOM = 2;
	
	    /// <summary>
	    /// Date rule type defined by last day of week on or before exact day of
	    /// month. For example, last Saturday on or before March 15.
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int DOW_LEQ_DOM = 3;
	
	    /// <summary>
	    /// Time rule type for local wall time.
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int WALL_TIME = 0;
	
	    /// <summary>
	    /// Time rule type for local standard time.
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int STANDARD_TIME = 1;
	
	    /// <summary>
	    /// Time rule type for coordinated universal time.
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int UTC_TIME = 2;
	
	    // private stuff
	    private readonly int dateRuleType;
	
	    private readonly int month;
	
	    private readonly int dayOfMonth;
	
	    private readonly int dayOfWeek;
	
	    private readonly int weekInMonth;
	
	    private readonly int timeRuleType;
	
	    private readonly int millisInDay;
	
	    /// <summary>
	    /// Constructs a <c>DateTimeRule</c> by the day of month and the time
	    /// rule. The date rule type for an instance created by this constructor is
	    /// <c>DOM</c>.
	    /// </summary>
	    ///
	    /// <param name="month_0">The rule month, for example, <c>Calendar.JANUARY</c></param>
	    /// <param name="dayOfMonth_1">The day of month, 1-based.</param>
	    /// <param name="millisInDay_2">The milliseconds in the rule date.</param>
	    /// <param name="timeType">The time type, <c>WALL_TIME</c> or<c>STANDARD_TIME</c> or <c>UTC_TIME</c>.</param>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public DateTimeRule(int month_0, int dayOfMonth_1, int millisInDay_2, int timeType) {
	        dateRuleType = DOM;
	        this.month = month_0;
	        this.dayOfMonth = dayOfMonth_1;
	
	        this.millisInDay = millisInDay_2;
	        this.timeRuleType = timeType;
	
	        // not used by this rule type
	        this.dayOfWeek = 0;
	        this.weekInMonth = 0;
	    }
	
	    /// <summary>
	    /// Constructs a <c>DateTimeRule</c> by the day of week and its
	    /// oridinal number and the time rule. The date rule type for an instance
	    /// created by this constructor is <c>DOW</c>.
	    /// </summary>
	    ///
	    /// <param name="month_0">The rule month, for example, <c>Calendar.JANUARY</c>.</param>
	    /// <param name="weekInMonth_1">The ordinal number of the day of week. Negative number may beused for specifying a rule date counted from the end of therule month.</param>
	    /// <param name="dayOfWeek_2">The day of week, for example, <c>Calendar.SUNDAY</c>.</param>
	    /// <param name="millisInDay_3">The milliseconds in the rule date.</param>
	    /// <param name="timeType">The time type, <c>WALL_TIME</c> or<c>STANDARD_TIME</c> or <c>UTC_TIME</c>.</param>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public DateTimeRule(int month_0, int weekInMonth_1, int dayOfWeek_2,
	            int millisInDay_3, int timeType) {
	        dateRuleType = DOW;
	        this.month = month_0;
	        this.weekInMonth = weekInMonth_1;
	        this.dayOfWeek = dayOfWeek_2;
	
	        this.millisInDay = millisInDay_3;
	        this.timeRuleType = timeType;
	
	        // not used by this rule type
	        this.dayOfMonth = 0;
	    }
	
	    /// <summary>
	    /// Constructs a <c>DateTimeRule</c> by the first/last day of week on
	    /// or after/before the day of month and the time rule. The date rule type
	    /// for an instance created by this constructor is either
	    /// <c>DOM_GEQ_DOM</c> or <c>DOM_LEQ_DOM</c>.
	    /// </summary>
	    ///
	    /// <param name="month_0">The rule month, for example, <c>Calendar.JANUARY</c></param>
	    /// <param name="dayOfMonth_1">The day of month, 1-based.</param>
	    /// <param name="dayOfWeek_2">The day of week, for example, <c>Calendar.SUNDAY</c>.</param>
	    /// <param name="after">true if the rule date is on or after the day of month.</param>
	    /// <param name="millisInDay_3">The milliseconds in the rule date.</param>
	    /// <param name="timeType">The time type, <c>WALL_TIME</c> or<c>STANDARD_TIME</c> or <c>UTC_TIME</c>.</param>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public DateTimeRule(int month_0, int dayOfMonth_1, int dayOfWeek_2,
	            bool after, int millisInDay_3, int timeType) {
	        this.dateRuleType = (after) ? DOW_GEQ_DOM : DOW_LEQ_DOM;
	        this.month = month_0;
	        this.dayOfMonth = dayOfMonth_1;
	        this.dayOfWeek = dayOfWeek_2;
	
	        this.millisInDay = millisInDay_3;
	        this.timeRuleType = timeType;
	
	        // not used by this rule type
	        this.weekInMonth = 0;
	    }
	
	    /// <summary>
	    /// Gets the date rule type, such as <c>DOM</c>
	    /// </summary>
	    ///
	    /// <returns>The date rule type.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public int GetDateRuleType() {
	        return dateRuleType;
	    }
	
	    /// <summary>
	    /// Gets the rule month.
	    /// </summary>
	    ///
	    /// <returns>The rule month.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public int GetRuleMonth() {
	        return month;
	    }
	
	    /// <summary>
	    /// Gets the rule day of month. When the date rule type is <c>DOW</c>,
	    /// the value is always 0.
	    /// </summary>
	    ///
	    /// <returns>The rule day of month</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public int GetRuleDayOfMonth() {
	        return dayOfMonth;
	    }
	
	    /// <summary>
	    /// Gets the rule day of week. When the date rule type is <c>DOM</c>,
	    /// the value is always 0.
	    /// </summary>
	    ///
	    /// <returns>The rule day of week.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public int GetRuleDayOfWeek() {
	        return dayOfWeek;
	    }
	
	    /// <summary>
	    /// Gets the rule day of week ordinal number in the month. When the date rule
	    /// type is not <c>DOW</c>, the value is always 0.
	    /// </summary>
	    ///
	    /// <returns>The rule day of week ordinal number in the month.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public int GetRuleWeekInMonth() {
	        return weekInMonth;
	    }
	
	    /// <summary>
	    /// Gets the time rule type
	    /// </summary>
	    ///
	    /// <returns>The time rule type, either <c>WALL_TIME</c> or
	    /// <c>STANDARD_TIME</c> or <c>UTC_TIME</c>.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public int GetTimeRuleType() {
	        return timeRuleType;
	    }
	
	    /// <summary>
	    /// Gets the rule time in the rule day.
	    /// </summary>
	    ///
	    /// <returns>The time in the rule day in milliseconds.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public int GetRuleMillisInDay() {
	        return millisInDay;
	    }
	
	    private static readonly String[] DOWSTR = { "", "Sun", "Mon", "Tue", "Wed",
	            "Thu", "Fri", "Sat" };
	
	    private static readonly String[] MONSTR = { "Jan", "Feb", "Mar", "Apr", "May",
	            "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
	
	    /// <summary>
	    /// Returns a <c>String</c> representation of this
	    /// <c>DateTimeRule</c> object. This method is used for debugging
	    /// purpose only. The string representation can be changed in future version
	    /// of ICU without any notice.
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public override String ToString() {
	        String sDate = null;
	        String sTimeRuleType = null;
	
	        switch (dateRuleType) {
	        case DOM:
	            sDate = ILOG.J2CsMapping.Util.IlNumber.ToString(dayOfMonth);
	            break;
	        case DOW:
	            sDate = ILOG.J2CsMapping.Util.IlNumber.ToString(weekInMonth) + DOWSTR[dayOfWeek];
	            break;
	        case DOW_GEQ_DOM:
	            sDate = DOWSTR[dayOfWeek] + ">=" + ILOG.J2CsMapping.Util.IlNumber.ToString(dayOfMonth);
	            break;
	        case DOW_LEQ_DOM:
	            sDate = DOWSTR[dayOfWeek] + "<=" + ILOG.J2CsMapping.Util.IlNumber.ToString(dayOfMonth);
	            break;
	        }
	
	        switch (timeRuleType) {
	        case WALL_TIME:
	            sTimeRuleType = "WALL";
	            break;
	        case STANDARD_TIME:
	            sTimeRuleType = "STD";
	            break;
	        case UTC_TIME:
	            sTimeRuleType = "UTC";
	            break;
	        }
	
	        int time = millisInDay;
	        int millis = time % 1000;
	        time /= 1000;
	        int secs = time % 60;
	        time /= 60;
	        int mins = time % 60;
	        int hours = time / 60;
	
	        StringBuilder buf = new StringBuilder();
	        buf.Append("month=");
	        buf.Append(MONSTR[month]);
	        buf.Append(", date=");
	        buf.Append(sDate);
	        buf.Append(", time=");
	        buf.Append(hours);
	        buf.Append(":");
	        buf.Append(mins / 10);
	        buf.Append(mins % 10);
	        buf.Append(":");
	        buf.Append(secs / 10);
	        buf.Append(secs % 10);
	        buf.Append(".");
	        buf.Append(millis / 100);
	        buf.Append((millis / 10) % 10);
	        buf.Append(millis % 10);
	        buf.Append("(");
	        buf.Append(sTimeRuleType);
	        buf.Append(")");
	        return buf.ToString();
	    }
	}
}
