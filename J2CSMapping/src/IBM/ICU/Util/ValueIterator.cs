/*
 ******************************************************************************
 * Copyright (C) 1996-2004, International Business Machines Corporation and   *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// <p>
	/// Interface for enabling iteration over sets of <int, Object>, where int is the
	/// sorted integer index in ascending order and Object, its associated value.
	/// </p>
	/// <p>
	/// The ValueIterator allows iterations over integer indexes in the range of
	/// Integer.MIN_VALUE to Integer.MAX_VALUE inclusive. Implementations of
	/// ValueIterator should specify their own maximum subrange within the above
	/// range that is meaningful to its applications.
	/// </p>
	/// <p>
	/// Most implementations will be created by factory methods, such as the
	/// character name iterator in UCharacter.getNameIterator. See example below.
	/// </p>
	/// Example of use:<br>
	/// <pre>
	/// ValueIterator iterator = UCharacter.getNameIterator();
	/// ValueIterator.Element result = new ValueIterator.Element();
	/// iterator.setRange(UCharacter.MIN_VALUE, UCharacter.MAX_VALUE);
	/// while (iterator.next(result)) {
	/// System.out.println(&quot;Codepoint \\u&quot; + Integer.toHexString(result.integer)
	/// + &quot; has the character name &quot; + (String) result.value);
	/// }
	/// </pre>
	/// </summary>
	///
	/// @stable ICU 2.6
	public interface ValueIterator {
	    // public inner class ---------------------------------------------
	
	    /// <summary>
	    /// <p>
	    /// Gets the next result for this iteration and returns true if we are not at
	    /// the end of the iteration, false otherwise.
	    /// </p>
	    /// <p>
	    /// If the return boolean is a false, the contents of elements will not be
	    /// updated.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="element">for storing the result index and value</param>
	    /// <returns>true if we are not at the end of the iteration, false otherwise.</returns>
	    /// <seealso cref="null"/>
	    /// @stable ICU 2.6
	    bool Next(ValueIterator_Constants.Element element);
	
	    /// <summary>
	    /// <p>
	    /// Resets the iterator to start iterating from the integer index
	    /// Integer.MIN_VALUE or X if a setRange(X, Y) has been called previously.
	    /// </p>
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    void Reset();
	
	    /// <summary>
	    /// <p>
	    /// Restricts the range of integers to iterate and resets the iteration to
	    /// begin at the index argument start.
	    /// </p>
	    /// <p>
	    /// If setRange(start, end) is not performed before next(element) is called,
	    /// the iteration will start from the integer index Integer.MIN_VALUE and end
	    /// at Integer.MAX_VALUE.
	    /// </p>
	    /// <p>
	    /// If this range is set outside the meaningful range specified by the
	    /// implementation, next(element) will always return false.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="start">first integer in the range to iterate</param>
	    /// <param name="limit">one more than the last integer in the range</param>
	    /// <exception cref="IllegalArgumentException">thrown when attempting to set an illegal range. E.g limit<= start</exception>
	    /// @stable ICU 2.6
	    void SetRange(int start, int limit);
	}
}
