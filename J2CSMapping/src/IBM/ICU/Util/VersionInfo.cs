/*
 *******************************************************************************
 * Copyright (C) 1996-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	/// <summary>
	/// Class to store version numbers of the form major.minor.milli.micro.
	/// </summary>
	///
	/// @stable ICU 2.6
	public sealed class VersionInfo {
	    // public data members -------------------------------------------------
	
	    /// <summary>
	    /// Unicode 1.0 version
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public static readonly VersionInfo UNICODE_1_0;
	
	    /// <summary>
	    /// Unicode 1.0.1 version
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public static readonly VersionInfo UNICODE_1_0_1;
	
	    /// <summary>
	    /// Unicode 1.1.0 version
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public static readonly VersionInfo UNICODE_1_1_0;
	
	    /// <summary>
	    /// Unicode 1.1.5 version
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public static readonly VersionInfo UNICODE_1_1_5;
	
	    /// <summary>
	    /// Unicode 2.0 version
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public static readonly VersionInfo UNICODE_2_0;
	
	    /// <summary>
	    /// Unicode 2.1.2 version
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public static readonly VersionInfo UNICODE_2_1_2;
	
	    /// <summary>
	    /// Unicode 2.1.5 version
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public static readonly VersionInfo UNICODE_2_1_5;
	
	    /// <summary>
	    /// Unicode 2.1.8 version
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public static readonly VersionInfo UNICODE_2_1_8;
	
	    /// <summary>
	    /// Unicode 2.1.9 version
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public static readonly VersionInfo UNICODE_2_1_9;
	
	    /// <summary>
	    /// Unicode 3.0 version
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public static readonly VersionInfo UNICODE_3_0;
	
	    /// <summary>
	    /// Unicode 3.0.1 version
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public static readonly VersionInfo UNICODE_3_0_1;
	
	    /// <summary>
	    /// Unicode 3.1.0 version
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public static readonly VersionInfo UNICODE_3_1_0;
	
	    /// <summary>
	    /// Unicode 3.1.1 version
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public static readonly VersionInfo UNICODE_3_1_1;
	
	    /// <summary>
	    /// Unicode 3.2 version
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public static readonly VersionInfo UNICODE_3_2;
	
	    /// <summary>
	    /// Unicode 4.0 version
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    public static readonly VersionInfo UNICODE_4_0;
	
	    /// <summary>
	    /// Unicode 4.0.1 version
	    /// </summary>
	    ///
	    /// @stable ICU 3.8
	    public static readonly VersionInfo UNICODE_4_0_1;
	
	    /// <summary>
	    /// Unicode 4.1 version
	    /// </summary>
	    ///
	    /// @stable ICU 3.8
	    public static readonly VersionInfo UNICODE_4_1;
	
	    /// <summary>
	    /// Unicode 5.0 version
	    /// </summary>
	    ///
	    /// @stable ICU 3.8
	    public static readonly VersionInfo UNICODE_5_0;
	
	    /// <summary>
	    /// ICU4J current release version
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public static readonly VersionInfo ICU_VERSION;
	
	    /// <exclude/>
	    /// <summary>
	    /// Data version string for ICU's internal data
	    /// </summary>
	    ///
	    public const String ICU_DATA_VERSION = "38b";
	
	    /// <summary>
	    /// ICU4J collator runtime version
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public static readonly VersionInfo UCOL_RUNTIME_VERSION;
	
	    /// <summary>
	    /// ICU4J collator builder version
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public static readonly VersionInfo UCOL_BUILDER_VERSION;
	
	    /// <summary>
	    /// ICU4J collator tailorings version
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public static readonly VersionInfo UCOL_TAILORINGS_VERSION;
	
	    // public methods ------------------------------------------------------
	
	    /// <summary>
	    /// Returns an instance of VersionInfo with the argument version.
	    /// </summary>
	    ///
	    /// <param name="version">version String in the format of "major.minor.milli.micro" or"major.minor.milli" or "major.minor" or "major", where major,minor, milli, micro are non-negative numbers <= 255. If thetrailing version numbers are not specified they are taken as0s. E.g. Version "3.1" is equivalent to "3.1.0.0".</param>
	    /// <returns>an instance of VersionInfo with the argument version.</returns>
	    /// <exception cref=" throws an IllegalArgumentException when the argument version">is not in the right format</exception>
	    /// @stable ICU 2.6
	    public static VersionInfo GetInstance(String version) {
	        int length = version.Length;
	        int[] array = { 0, 0, 0, 0 };
	        int count = 0;
	        int index = 0;
	
	        while (count < 4 && index < length) {
	            char c = version[index];
	            if (c == '.') {
	                count++;
	            } else {
	                c -= '0';
	                if (c < 0 || c > 9) {
	                    throw new ArgumentException(INVALID_VERSION_NUMBER_);
	                }
	                array[count] *= 10;
	                array[count] += c;
	            }
	            index++;
	        }
	        if (index != length) {
	            throw new ArgumentException(
	                    "Invalid version number: String '" + version
	                            + "' exceeds version format");
	        }
	        for (int i = 0; i < 4; i++) {
	            if (array[i] < 0 || array[i] > 255) {
	                throw new ArgumentException(INVALID_VERSION_NUMBER_);
	            }
	        }
	
	        return GetInstance(array[0], array[1], array[2], array[3]);
	    }
	
	    /// <summary>
	    /// Returns an instance of VersionInfo with the argument version.
	    /// </summary>
	    ///
	    /// <param name="major">major version, non-negative number <= 255.</param>
	    /// <param name="minor">minor version, non-negative number <= 255.</param>
	    /// <param name="milli">milli version, non-negative number <= 255.</param>
	    /// <param name="micro">micro version, non-negative number <= 255.</param>
	    /// <exception cref=" throws an IllegalArgumentException when either arguments are">negative or > 255</exception>
	    /// @stable ICU 2.6
	    public static VersionInfo GetInstance(int major, int minor, int milli,
	            int micro) {
	        // checks if it is in the hashmap
	        // else
	        if (major < 0 || major > 255 || minor < 0 || minor > 255 || milli < 0
	                || milli > 255 || micro < 0 || micro > 255) {
	            throw new ArgumentException(INVALID_VERSION_NUMBER_);
	        }
	        int version = GetInt(major, minor, milli, micro);
	        Int32 key = ((int)(version));
	        Object result = ILOG.J2CsMapping.Collections.Collections.Get(MAP_,key);
	        if (result == null) {
	            result = new VersionInfo(version);
	            ILOG.J2CsMapping.Collections.Collections.Put(MAP_,key,result);
	        }
	        return (VersionInfo) result;
	    }
	
	    /// <summary>
	    /// Returns an instance of VersionInfo with the argument version. Equivalent
	    /// to getInstance(major, minor, milli, 0).
	    /// </summary>
	    ///
	    /// <param name="major">major version, non-negative number <= 255.</param>
	    /// <param name="minor">minor version, non-negative number <= 255.</param>
	    /// <param name="milli">milli version, non-negative number <= 255.</param>
	    /// <exception cref=" throws an IllegalArgumentException when either arguments are">negative or > 255</exception>
	    /// @stable ICU 2.6
	    public static VersionInfo GetInstance(int major, int minor, int milli) {
	        return GetInstance(major, minor, milli, 0);
	    }
	
	    /// <summary>
	    /// Returns an instance of VersionInfo with the argument version. Equivalent
	    /// to getInstance(major, minor, 0, 0).
	    /// </summary>
	    ///
	    /// <param name="major">major version, non-negative number <= 255.</param>
	    /// <param name="minor">minor version, non-negative number <= 255.</param>
	    /// <exception cref=" throws an IllegalArgumentException when either arguments are">negative or > 255</exception>
	    /// @stable ICU 2.6
	    public static VersionInfo GetInstance(int major, int minor) {
	        return GetInstance(major, minor, 0, 0);
	    }
	
	    /// <summary>
	    /// Returns an instance of VersionInfo with the argument version. Equivalent
	    /// to getInstance(major, 0, 0, 0).
	    /// </summary>
	    ///
	    /// <param name="major">major version, non-negative number <= 255.</param>
	    /// <exception cref=" throws an IllegalArgumentException when either arguments are">negative or > 255</exception>
	    /// @stable ICU 2.6
	    public static VersionInfo GetInstance(int major) {
	        return GetInstance(major, 0, 0, 0);
	    }
	
	    private static VersionInfo javaVersion;
	
	    /// <exclude/>
	    public static VersionInfo JavaVersion() {
	        if (javaVersion == null) {
	            String s = System.Environment.GetEnvironmentVariable("java.version");
	            // clean string
	            // preserve only digits, separated by single '.'
	            // ignore over 4 digit sequences
	            // does not test < 255, very odd...
	
	            char[] chars = s.ToCharArray();
	            int r = 0, w = 0, count = 0;
	            bool numeric = false; // ignore leading non-numerics
	            while (r < chars.Length) {
	                char c = chars[r++];
	                if (c < '0' || c > '9') {
	                    if (numeric) {
	                        if (count == 3) {
	                            // only four digit strings allowed
	                            break;
	                        }
	                        numeric = false;
	                        chars[w++] = '.';
	                        ++count;
	                    }
	                } else {
	                    numeric = true;
	                    chars[w++] = c;
	                }
	            }
	            while (w > 0 && chars[w - 1] == '.') {
	                --w;
	            }
	
	            String vs = new String(chars, 0, w);
	
	            javaVersion = VersionInfo.GetInstance(vs);
	        }
	        return javaVersion;
	    }
	
	    /// <summary>
	    /// Returns the String representative of VersionInfo in the format of
	    /// "major.minor.milli.micro"
	    /// </summary>
	    ///
	    /// <returns>String representative of VersionInfo</returns>
	    /// @stable ICU 2.6
	    public override String ToString() {
	        StringBuilder result = new StringBuilder(7);
	        result.Append(GetMajor());
	        result.Append('.');
	        result.Append(GetMinor());
	        result.Append('.');
	        result.Append(GetMilli());
	        result.Append('.');
	        result.Append(GetMicro());
	        return result.ToString();
	    }
	
	    /// <summary>
	    /// Returns the major version number
	    /// </summary>
	    ///
	    /// <returns>the major version number</returns>
	    /// @stable ICU 2.6
	    public int GetMajor() {
	        return (m_version_ >> 24) & LAST_BYTE_MASK_;
	    }
	
	    /// <summary>
	    /// Returns the minor version number
	    /// </summary>
	    ///
	    /// <returns>the minor version number</returns>
	    /// @stable ICU 2.6
	    public int GetMinor() {
	        return (m_version_ >> 16) & LAST_BYTE_MASK_;
	    }
	
	    /// <summary>
	    /// Returns the milli version number
	    /// </summary>
	    ///
	    /// <returns>the milli version number</returns>
	    /// @stable ICU 2.6
	    public int GetMilli() {
	        return (m_version_ >> 8) & LAST_BYTE_MASK_;
	    }
	
	    /// <summary>
	    /// Returns the micro version number
	    /// </summary>
	    ///
	    /// <returns>the micro version number</returns>
	    /// @stable ICU 2.6
	    public int GetMicro() {
	        return m_version_ & LAST_BYTE_MASK_;
	    }
	
	    /// <summary>
	    /// Checks if this version information is equals to the argument version
	    /// </summary>
	    ///
	    /// <param name="other">object to be compared</param>
	    /// <returns>true if other is equals to this object's version information,
	    /// false otherwise</returns>
	    /// @stable ICU 2.6
	    public override bool Equals(Object other) {
	        return other == (Object) this;
	    }
	
	    /// <summary>
	    /// Compares other with this VersionInfo.
	    /// </summary>
	    ///
	    /// <param name="other">VersionInfo to be compared</param>
	    /// <returns>0 if the argument is a VersionInfo object that has version
	    /// information equals to this object. Less than 0 if the argument is
	    /// a VersionInfo object that has version information greater than
	    /// this object. Greater than 0 if the argument is a VersionInfo
	    /// object that has version information less than this object.</returns>
	    /// @stable ICU 2.6
	    public int CompareTo(VersionInfo other) {
	        return m_version_ - other.m_version_;
	    }
	
	    // private data members ----------------------------------------------
	
	    /// <summary>
	    /// Version number stored as a byte for each of the major, minor, milli and
	    /// micro numbers in the 32 bit int. Most significant for the major and the
	    /// least significant contains the micro numbers.
	    /// </summary>
	    ///
	    private int m_version_;
	
	    /// <summary>
	    /// Map of singletons
	    /// </summary>
	    ///
	    private static readonly Hashtable MAP_ = new Hashtable();
	
	    /// <summary>
	    /// Last byte mask
	    /// </summary>
	    ///
	    private const int LAST_BYTE_MASK_ = 0xFF;
	
	    /// <summary>
	    /// Error statement string
	    /// </summary>
	    ///
	    private const String INVALID_VERSION_NUMBER_ = "Invalid version number: Version number may be negative or greater than 255";
	
	    // static declaration ------------------------------------------------
	
	    /// <summary>
	    /// Constructor with int
	    /// </summary>
	    ///
	    /// <param name="compactversion">a 32 bit int with each byte representing a number</param>
	    private VersionInfo(int compactversion) {
	        m_version_ = compactversion;
	    }
	
	    /// <summary>
	    /// Gets the int from the version numbers
	    /// </summary>
	    ///
	    /// <param name="major">non-negative version number</param>
	    /// <param name="minor">non-negativeversion number</param>
	    /// <param name="milli">non-negativeversion number</param>
	    /// <param name="micro">non-negativeversion number</param>
	    private static int GetInt(int major, int minor, int milli, int micro) {
	        return (major << 24) | (minor << 16) | (milli << 8) | micro;
	    }
	
	    static VersionInfo() {
	            UNICODE_1_0 = GetInstance(1, 0, 0, 0);
	            UNICODE_1_0_1 = GetInstance(1, 0, 1, 0);
	            UNICODE_1_1_0 = GetInstance(1, 1, 0, 0);
	            UNICODE_1_1_5 = GetInstance(1, 1, 5, 0);
	            UNICODE_2_0 = GetInstance(2, 0, 0, 0);
	            UNICODE_2_1_2 = GetInstance(2, 1, 2, 0);
	            UNICODE_2_1_5 = GetInstance(2, 1, 5, 0);
	            UNICODE_2_1_8 = GetInstance(2, 1, 8, 0);
	            UNICODE_2_1_9 = GetInstance(2, 1, 9, 0);
	            UNICODE_3_0 = GetInstance(3, 0, 0, 0);
	            UNICODE_3_0_1 = GetInstance(3, 0, 1, 0);
	            UNICODE_3_1_0 = GetInstance(3, 1, 0, 0);
	            UNICODE_3_1_1 = GetInstance(3, 1, 1, 0);
	            UNICODE_3_2 = GetInstance(3, 2, 0, 0);
	            UNICODE_4_0 = GetInstance(4, 0, 0, 0);
	            UNICODE_4_0_1 = GetInstance(4, 0, 1, 0);
	            UNICODE_4_1 = GetInstance(4, 1, 0, 0);
	            UNICODE_5_0 = GetInstance(4, 1, 0, 0);
	            ICU_VERSION = GetInstance(3, 8, 1, 0);
	            UCOL_RUNTIME_VERSION = GetInstance(6);
	            UCOL_BUILDER_VERSION = GetInstance(7);
	            UCOL_TAILORINGS_VERSION = GetInstance(1);
	        }
	}
}
