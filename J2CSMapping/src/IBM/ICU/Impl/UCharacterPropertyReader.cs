// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 1996-2006, International Business Machines Corporation and    
/// others. All Rights Reserved.                                                
/// </summary>
///
namespace IBM.ICU.Impl {
	
	using ILOG.J2CsMapping.IO;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// <p>
	/// Internal reader class for ICU data file uprops.icu containing Unicode
	/// codepoint data.
	/// </p>
	/// <p>
	/// This class simply reads uprops.icu, authenticates that it is a valid ICU data
	/// file and split its contents up into blocks of data for use in <a
	/// href=UCharacterProperty.html>com.ibm.icu.impl.UCharacterProperty</a>.
	/// </p>
	/// <p>
	/// uprops.icu which is in big-endian format is jared together with this package.
	/// </p>
	/// Unicode character properties file format see
	/// (ICU4C)/source/tools/genprops/store.c
	/// </summary>
	///
	internal sealed class UCharacterPropertyReader : ICUBinary.Authenticate {
	    // public methods ----------------------------------------------------
	
	    public bool IsDataVersionAcceptable(byte[] version) {
	        return version[0] == DATA_FORMAT_VERSION_[0]
	                && version[2] == DATA_FORMAT_VERSION_[2]
	                && version[3] == DATA_FORMAT_VERSION_[3];
	    }
	
	    // protected constructor ---------------------------------------------
	
	    /// <summary>
	    /// <p>
	    /// Protected constructor.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="inputStream">ICU uprop.dat file input stream</param>
	    /// <exception cref="IOException">throw if data file fails authentication</exception>
	    /// @draft 2.1
	    protected internal UCharacterPropertyReader(Stream inputStream) {
	        m_unicodeVersion_ = IBM.ICU.Impl.ICUBinary.ReadHeader(inputStream, DATA_FORMAT_ID_,
	                this);
	        m_dataInputStream_ = new DataInputStream(inputStream);
	    }
	
	    // protected methods -------------------------------------------------
	
	    /// <summary>
	    /// <p>
	    /// Reads uprops.icu, parse it into blocks of data to be stored in
	    /// UCharacterProperty.
	    /// </P
	    /// </summary>
	    ///
	    /// <param name="ucharppty">UCharacterProperty instance</param>
	    /// <exception cref="IOException">thrown when data reading fails</exception>
	    /// @draft 2.1
	    protected internal void Read(UCharacterProperty ucharppty) {
	        // read the indexes
	        int count = INDEX_SIZE_;
	        m_propertyOffset_ = m_dataInputStream_.ReadInt();
	        count--;
	        m_exceptionOffset_ = m_dataInputStream_.ReadInt();
	        count--;
	        m_caseOffset_ = m_dataInputStream_.ReadInt();
	        count--;
	        m_additionalOffset_ = m_dataInputStream_.ReadInt();
	        count--;
	        m_additionalVectorsOffset_ = m_dataInputStream_.ReadInt();
	        count--;
	        m_additionalColumnsCount_ = m_dataInputStream_.ReadInt();
	        count--;
	        m_reservedOffset_ = m_dataInputStream_.ReadInt();
	        count--;
	        m_dataInputStream_.SkipBytes(3 << 2);
	        count -= 3;
	        ucharppty.m_maxBlockScriptValue_ = m_dataInputStream_.ReadInt();
	        count--; // 10
	        ucharppty.m_maxJTGValue_ = m_dataInputStream_.ReadInt();
	        count--; // 11
	        m_dataInputStream_.SkipBytes(count << 2);
	
	        // read the trie index block
	        // m_props_index_ in terms of ints
	        ucharppty.m_trie_ = new CharTrie(m_dataInputStream_, null);
	
	        // skip the 32 bit properties block
	        int size = m_exceptionOffset_ - m_propertyOffset_;
	        m_dataInputStream_.SkipBytes(size * 4);
	
	        // reads the 32 bit exceptions block
	        size = m_caseOffset_ - m_exceptionOffset_;
	        m_dataInputStream_.SkipBytes(size * 4);
	
	        // reads the 32 bit case block
	        size = (m_additionalOffset_ - m_caseOffset_) << 1;
	        m_dataInputStream_.SkipBytes(size * 2);
	
	        if (m_additionalColumnsCount_ > 0) {
	            // reads the additional property block
	            ucharppty.m_additionalTrie_ = new CharTrie(m_dataInputStream_, null);
	
	            // additional properties
	            size = m_reservedOffset_ - m_additionalVectorsOffset_;
	            ucharppty.m_additionalVectors_ = new int[size];
	            for (int i = 0; i < size; i++) {
	                ucharppty.m_additionalVectors_[i] = m_dataInputStream_
	                        .ReadInt();
	            }
	        }
	
	        //m_dataInputStream_.Close();
	        ucharppty.m_additionalColumnsCount_ = m_additionalColumnsCount_;
	        ucharppty.m_unicodeVersion_ = IBM.ICU.Util.VersionInfo.GetInstance(
	                (int) m_unicodeVersion_[0], (int) m_unicodeVersion_[1],
	                (int) m_unicodeVersion_[2], (int) m_unicodeVersion_[3]);
	    }
	
	    // private variables -------------------------------------------------
	
	    /// <summary>
	    /// Index size
	    /// </summary>
	    ///
	    private const int INDEX_SIZE_ = 16;
	
	    /// <summary>
	    /// ICU data file input stream
	    /// </summary>
	    ///
	    private DataInputStream m_dataInputStream_;
	
	    /// <summary>
	    /// Offset information in the indexes.
	    /// </summary>
	    ///
	    private int m_propertyOffset_;
	
	    private int m_exceptionOffset_;
	
	    private int m_caseOffset_;
	
	    private int m_additionalOffset_;
	
	    private int m_additionalVectorsOffset_;
	
	    private int m_additionalColumnsCount_;
	
	    private int m_reservedOffset_;
	
	    private byte[] m_unicodeVersion_;
	
	    /// <summary>
	    /// Data format "UPro".
	    /// </summary>
	    ///
	    private static readonly byte[] DATA_FORMAT_ID_ = { (byte) 0x55, (byte) 0x50,
	            (byte) 0x72, (byte) 0x6F };
	
	    /// <summary>
	    /// Format version; this code works with all versions with the same major version number and the same Trie bit distribution.
	    /// </summary>
	    ///
	    private static readonly byte[] DATA_FORMAT_VERSION_ = { (byte) 0x4, (byte) 0,
	            (byte) IBM.ICU.Impl.Trie.INDEX_STAGE_1_SHIFT_,
	            (byte) IBM.ICU.Impl.Trie.INDEX_STAGE_2_SHIFT_ };
	}
}
