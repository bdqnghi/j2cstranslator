// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2001-2007, International Business Machines Corporation and    
/// others. All Rights Reserved.                                                
/// </summary>
///
namespace IBM.ICU.Impl {
	
	using IBM.ICU.Util;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Security;
	
	public sealed class ICUDebug {
	    public ICUDebug() {
	        help = debug
	                && (paras.Equals("") || paras.IndexOf("help") != -1);
	    }
	
	    private static String paras;
	    private static bool debug = paras != null;
	
	    private static bool help;
	
	    public static readonly String javaVersionString = System.Environment.GetEnvironmentVariable("java.version");
	
	    public static readonly bool isJDK14OrHigher;
	
	    public static readonly VersionInfo javaVersion;
	
	    public static VersionInfo GetInstanceLenient(String s) {
	        // clean string
	        // preserve only digits, separated by single '.'
	        // ignore over 4 digit sequences
	        // does not test < 255, very odd...
	
	        char[] chars = s.ToCharArray();
	        int r = 0, w = 0, count = 0;
	        bool numeric = false; // ignore leading non-numerics
	        while (r < chars.Length) {
	            char c = chars[r++];
	            if (c < '0' || c > '9') {
	                if (numeric) {
	                    if (count == 3) {
	                        // only four digit strings allowed
	                        break;
	                    }
	                    numeric = false;
	                    chars[w++] = '.';
	                    ++count;
	                }
	            } else {
	                numeric = true;
	                chars[w++] = c;
	            }
	        }
	        while (w > 0 && chars[w - 1] == '.') {
	            --w;
	        }
	
	        String vs = new String(chars, 0, w);
	
	        return IBM.ICU.Util.VersionInfo.GetInstance(vs);
	    }
	
	    public static bool Enabled() {
	        return debug;
	    }
	
	    public static bool Enabled(String arg) {
	        if (debug) {
	            bool result = paras.IndexOf(arg) != -1;
	            if (help)
	                System.Console.Out.WriteLine("\nICUDebug.enabled(" + arg + ") = "
	                        + result);
	            return result;
	        }
	        return false;
	    }
	
	    public static String Value(String arg) {
	        String result = "false";
	        if (debug) {
	            int index = paras.IndexOf(arg);
	            if (index != -1) {
	                index += arg.Length;
	                if (paras.Length > index && paras[index] == '=') {
	                    index += 1;
	                    int limit = ILOG.J2CsMapping.Util.StringUtil.IndexOf(paras,",",index);
	                    result = paras.Substring(index,((limit == -1) ? paras.Length : limit)-(index));
	                } else {
	                    result = "true";
	                }
	            }
	
	            if (help)
	                System.Console.Out.WriteLine("\nICUDebug.value(" + arg + ") = " + result);
	        }
	        return result;
	    }
	
	    static ICUDebug() {
	            try {
	                paras = System.Environment.GetEnvironmentVariable("ICUDebug");
	            } catch (SecurityException e) {
	            }
	            if (debug) {
	                System.Console.Out.WriteLine("\nICUDebug=" + paras);
	            }
	            /*javaVersion = GetInstanceLenient(javaVersionString);
	            VersionInfo java14Version = IBM.ICU.Util.VersionInfo
	                    .GetInstance("1.4.0");
	            isJDK14OrHigher = javaVersion.CompareTo(java14Version) >= 0;*/
	        }
	
	    /*
	     * static public void main(String[] args) { // test String[] tests = {
	     * "1.3.0", "1.3.0_02", "1.3.1ea", "1.4.1b43", "___41___5",
	     * "x1.4.51xx89ea.7f" }; for (int i = 0; i < tests.length; ++i) {
	     * System.out.println(tests[i] + " => " + getInstanceLenient(tests[i])); } }
	     */
	}
}
