/*
 *******************************************************************************
 * Copyright (C) 1996-2004, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl {
	
	using IBM.ICU.Text;
	using ILOG.J2CsMapping.Text;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// This class is a wrapper around UCharacterIterator and implements the
	/// CharacterIterator protocol
	/// </summary>
	///
	public class UCharacterIteratorWrapper : ICharacterIterator {
	
	    public UCharacterIteratorWrapper(UCharacterIterator iter) {
	        this.iterator = iter;
	    }
	
	    private UCharacterIterator iterator;
	
	    /// <summary>
	    /// Sets the position to getBeginIndex() and returns the character at that
	    /// position.
	    /// </summary>
	    ///
	    /// <returns>the first character in the text, or DONE if the text is empty</returns>
	    /// <seealso cref="M:IBM.ICU.Impl.UCharacterIteratorWrapper.GetBeginIndex"/>
	    public virtual char First() {
	        // UCharacterIterator always iterates from 0 to length
	        iterator.SetToStart();
	        return (char) iterator.Current();
	    }
	
	    /// <summary>
	    /// Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty)
	    /// and returns the character at that position.
	    /// </summary>
	    ///
	    /// <returns>the last character in the text, or DONE if the text is empty</returns>
	    /// <seealso cref="M:IBM.ICU.Impl.UCharacterIteratorWrapper.GetEndIndex"/>
	    public virtual char Last() {
	        iterator.SetToLimit();
	        return (char) iterator.Previous();
	    }
	
	    /// <summary>
	    /// Gets the character at the current position (as returned by getIndex()).
	    /// </summary>
	    ///
	    /// <returns>the character at the current position or DONE if the current
	    /// position is off the end of the text.</returns>
	    /// <seealso cref="M:IBM.ICU.Impl.UCharacterIteratorWrapper.GetIndex"/>
	    public virtual char Current() {
	        return (char) iterator.Current();
	    }
	
	    /// <summary>
	    /// Increments the iterator's index by one and returns the character at the
	    /// new index. If the resulting index is greater or equal to getEndIndex(),
	    /// the current index is reset to getEndIndex() and a value of DONE is
	    /// returned.
	    /// </summary>
	    ///
	    /// <returns>the character at the new position or DONE if the new position is
	    /// off the end of the text range.</returns>
	    public virtual char Next() {
	        // pre-increment
	        iterator.Next();
	        return (char) iterator.Current();
	    }
	
	    /// <summary>
	    /// Decrements the iterator's index by one and returns the character at the
	    /// new index. If the current index is getBeginIndex(), the index remains at
	    /// getBeginIndex() and a value of DONE is returned.
	    /// </summary>
	    ///
	    /// <returns>the character at the new position or DONE if the current position
	    /// is equal to getBeginIndex().</returns>
	    public virtual char Previous() {
	        // pre-decrement
	        return (char) iterator.Previous();
	    }
	
	    /// <summary>
	    /// Sets the position to the specified position in the text and returns that
	    /// character.
	    /// </summary>
	    ///
	    /// <param name="position">the position within the text. Valid values range fromgetBeginIndex() to getEndIndex(). An IllegalArgumentExceptionis thrown if an invalid value is supplied.</param>
	    /// <returns>the character at the specified position or DONE if the specified
	    /// position is equal to getEndIndex()</returns>
	    public virtual char SetIndex(int position) {
	        iterator.SetIndex(position);
	        return (char) iterator.Current();
	    }
	
	    /// <summary>
	    /// Returns the start index of the text.
	    /// </summary>
	    ///
	    /// <returns>the index at which the text begins.</returns>
	    public virtual int GetBeginIndex() {
	        // UCharacterIterator always starts from 0
	        return 0;
	    }
	
	    /// <summary>
	    /// Returns the end index of the text. This index is the index of the first
	    /// character following the end of the text.
	    /// </summary>
	    ///
	    /// <returns>the index after the last character in the text</returns>
	    public virtual int GetEndIndex() {
	        return iterator.GetLength();
	    }
	
	    /// <summary>
	    /// Returns the current index.
	    /// </summary>
	    ///
	    /// <returns>the current index.</returns>
	    public virtual int GetIndex() {
	        return iterator.GetIndex();
	    }
	
	    /// <summary>
	    /// Create a copy of this iterator
	    /// </summary>
	    ///
	    /// <returns>A copy of this</returns>
	    public virtual Object Clone() {
	        try {
	            UCharacterIteratorWrapper result = (UCharacterIteratorWrapper) base.MemberwiseClone();
	            result.iterator = (UCharacterIterator) this.iterator.Clone();
	            return result;
	        } catch (Exception e) {
	            return null; // only invoked if bad underlying character iterator
	        }
	    }
	
	}
}
