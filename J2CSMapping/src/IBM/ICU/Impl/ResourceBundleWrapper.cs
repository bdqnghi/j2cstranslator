/*
 ******************************************************************************
 * Copyright (C) 2004-2006, International Business Machines Corporation and        *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl {
	
	using IBM.ICU.Util;
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Reflection;
	using System.Resources;
	using System.Runtime.CompilerServices;
     using ILOG.J2CsMapping.Util;
	
	/// <summary>
	/// just a wrapper for Java ListResourceBundles and
	/// </summary>
	///
	public class ResourceBundleWrapper : UResourceBundle {
	    public sealed class Anonymous_C0 : 
	            Object {
	        private readonly Assembly cl;
	
	        private readonly String resName;
	
	        
	        /// <param name="cl_0"></param>
	        /// <param name="resName_1"></param>
	        public Anonymous_C0(Assembly cl_0, String resName_1) {
	            this.cl = cl_0;
	            this.resName = resName_1;
	        }
	
	        public Object Run() {
	            if (cl != null) {
	                return ILOG.J2CsMapping.IO.IOUtility.GetResourceAsStream(cl,resName);
	            } else {
	                return ILOG.J2CsMapping.IO.IOUtility
                            .GetResourceAsStream(null, resName);
	            }
	        }
	    }
	
	    private ResourceBundle bundle;
	
	    private String localeID;
	
	    private String baseName;
	
	    private List<String> keys;
	
	    private int loadingStatus;

        private ResourceBundleWrapper(ResourceBundle bundle_0)
        {
	        this.bundle = null;
	        this.localeID = null;
	        this.baseName = null;
	        this.keys = null;
	        this.loadingStatus = -1;
	        this.bundle = bundle_0;
	    }
	
	    public override void SetLoadingStatus(int newStatus) {
	        loadingStatus = newStatus;
	    }
	
	    public override Object HandleGetObject(String key) {
	        ResourceBundleWrapper current = this;
	        Object obj = null;
	        while (current != null) {
	            try {
	                obj = current.bundle.GetObject(key);
	                break;
	            } catch (MissingManifestResourceException ex) {
	                current = (ResourceBundleWrapper) current.GetParent();
	            }
	        }
	        if (obj == null) {
	            throw new MissingManifestResourceException("Can't find resource for bundle " + baseName + ", key "
	                                        + key);
	        }
	        return obj;
	    }
	
	    public override IIterator<String> GetKeys() {
	        return new ILOG.J2CsMapping.Collections.Generics.IteratorAdapter<String>(keys.GetEnumerator());
	    }
	
	    private void InitKeysVector() {
	        ResourceBundleWrapper current = this;
	        keys = new List<String>();
	        while (current != null) {
	            IIterator<String> e = current.bundle.GetKeys();
	            while (e.HasNext()) {
	                String elem = (String) e.Next();
	                if (!keys.Contains(elem)) {
	                    keys.Add(elem);
	                }
	            }
	            current = (ResourceBundleWrapper) current.GetParent();
	        }
	    }
	
	    protected internal override String GetLocaleID() {
	        return localeID;
	    }
	
	    protected internal override String GetBaseName() {
	        return bundle.GetType().FullName.Replace('.', '/');
	    }
	
	    public override ULocale GetULocale() {
	        return new ULocale(localeID);
	    }
	
	    public override UResourceBundle GetParent() {
	        return (UResourceBundle) parent;
	    }
	
	    // Flag for enabling/disabling debugging code
	    private static readonly bool DEBUG = IBM.ICU.Impl.ICUDebug
	            .Enabled("resourceBundleWrapper");
	
	    // This method is for super class's instantiateBundle method
	    public static UResourceBundle GetBundleInstance(String baseName_0,
	            String localeID_1, Assembly root, bool disableFallback) {
	        UResourceBundle b = InstantiateBundle(baseName_0, localeID_1, root,
	                disableFallback);
	        if (b == null) {
	            String separator = "_";
	            if (baseName_0.IndexOf('/') >= 0) {
	                separator = "/";
	            }
	            throw new MissingManifestResourceException("Could not find the bundle "
	                                + baseName_0 + separator + localeID_1);
	        }
	        return b;
	    }
	
	    // recursively build bundle and override the super-class method
	    [MethodImpl(MethodImplOptions.Synchronized)]
	    protected static internal UResourceBundle InstantiateBundle(
	            String baseName_0, String localeID_1, Assembly root,
	            bool disableFallback) {
	        if (root == null) {
	            // we're on the bootstrap
	            root = System.Reflection.Assembly.GetEntryAssembly();
	        }
	        Assembly cl_2 = root;
	        String name = baseName_0;
	        ULocale defaultLocale = IBM.ICU.Util.ULocale.GetDefault();
	        if (localeID_1.Length != 0) {
	            name = name + "_" + localeID_1;
	        }
	
	        ResourceBundleWrapper b = (ResourceBundleWrapper) IBM.ICU.Util.UResourceBundle.LoadFromCache(cl_2,
	                name, defaultLocale);
	        if (b == null) {
	            ResourceBundleWrapper parent = null;
	            int i = localeID_1.LastIndexOf('_');
	
	            if (i != -1) {
	                String locName = localeID_1.Substring(0,(i)-(0));
	                parent = (ResourceBundleWrapper) IBM.ICU.Util.UResourceBundle.LoadFromCache(cl_2, baseName_0
	                        + "_" + locName, defaultLocale);
	                if (parent == null) {
	                    parent = (ResourceBundleWrapper) InstantiateBundle(
	                            baseName_0, locName, cl_2, disableFallback);
	                }
	            } else if (localeID_1.Length > 0) {
	                parent = (ResourceBundleWrapper) IBM.ICU.Util.UResourceBundle.LoadFromCache(cl_2, baseName_0,
	                        defaultLocale);
	                if (parent == null) {
	                    parent = (ResourceBundleWrapper) InstantiateBundle(
	                            baseName_0, "", cl_2, disableFallback);
	                }
	            }
	            try {
	                Type cls = cl_2.GetType(name);
                    ResourceBundle bx = (ResourceBundle)Activator.CreateInstance(cls);
	                b = new ResourceBundleWrapper(bx);
	                if (parent != null) {
	                    b.SetParent(parent);
	                }
	                b.baseName = baseName_0;
	                b.localeID = localeID_1;
	
	            } catch (TypeLoadException e) {
	
	                String resName_3 = name.Replace('.', '/') + ".properties";
	                Stream stream = (Stream) new ResourceBundleWrapper.Anonymous_C0 (cl_2, resName_3).Run();
	                if (stream != null) {
	                    // make sure it is buffered
	                    stream = new BufferedStream(stream);
	                    try {
	                        /*b = new ResourceBundleWrapper(
	                                new PropertyResourceBundle(stream));*/
	                        if (parent != null) {
	                            b.SetParent(parent);
	                        }
	                        b.baseName = baseName_0;
	                        b.localeID = localeID_1;
	                    } catch (Exception ex) {
	                        // throw away exception
	                    } finally {
	                        try {
	                            stream.Close();
	                        } catch (Exception ex_4) {
	                            // throw away exception
	                        }
	                    }
	                }
	
	                // if a bogus locale is passed then the parent should be
	                // the default locale not the root locale!
	                if (b == null) {
	                    String defaultName = defaultLocale.ToString();
	                    if (localeID_1.Length > 0 && localeID_1.IndexOf('_') < 0
	                            && defaultName.IndexOf(localeID_1) == -1) {
	                        b = (ResourceBundleWrapper) IBM.ICU.Util.UResourceBundle.LoadFromCache(cl_2, baseName_0
	                                + "_" + defaultName, defaultLocale);
	                        if (b == null) {
	                            b = (ResourceBundleWrapper) InstantiateBundle(
	                                    baseName_0, defaultName, cl_2, disableFallback);
	                        }
	                    }
	                }
	                // if still could not find the bundle then return the parent
	                if (b == null) {
	                    b = parent;
	                }
	            } catch (Exception e_5) {
	                if (DEBUG)
	                    System.Console.Out.WriteLine("failure");
	                if (DEBUG)
	                    System.Console.Out.WriteLine(e_5);
	            }
	
	            IBM.ICU.Util.UResourceBundle.AddToCache(cl_2, name, defaultLocale, b);
	        }
	        if (b != null) {
	            b.InitKeysVector();
	        } else {
	            if (DEBUG)
	                System.Console.Out.WriteLine("Returning null for " + baseName_0 + "_"
	                        + localeID_1);
	        }
	
	        return b;
	    }
	}
}
