/*
 ****************************************************************************
 * Copyright (c) 2007 International Business Machines Corporation and others.
 * All rights reserved.
 ****************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl {
	
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	public class SimpleCache : ICUCache {
	
	    public SimpleCache() {
	        this.cacheRef = null;
	    }
	
	    public virtual Object Get(Object key) {
	        WeakReference xref = cacheRef;
	        if (xref != null) {
	            IDictionary map = (IDictionary) xref.Target;
	            if (map != null) {
	                return ILOG.J2CsMapping.Collections.Collections.Get(map,key);
	            }
	        }
	        return null;
	    }
	
	    public virtual void Put(Object key, Object value_ren) {
	        WeakReference xref = cacheRef;
	        IDictionary map = null;
	        if (xref != null) {
	            map = (IDictionary) xref.Target;
	        }
	        if (map == null) {
	            map = ILOG.J2CsMapping.Collections.Generics.Collections.SynchronizedMap(new Hashtable());
	            xref = new WeakReference(map);
	            cacheRef = xref;
	        }
	        ILOG.J2CsMapping.Collections.Collections.Put(map,key,value_ren);
	    }
	
	    public virtual void Clear() {
	        cacheRef = null;
	    }
	
	    private WeakReference cacheRef;
	}
}
