/*
 ******************************************************************************
 * Copyright (C) 2007, International Business Machines Corporation and   *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/8/10 10:24 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl.Duration {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Core implementation class for DurationFormatter.
	/// </summary>
	///
	internal class BasicDurationFormatter : DurationFormatter {
	    private PeriodFormatter formatter;
	
	    private PeriodBuilder builder;
	
	    private DateFormatter fallback;
	
	    private long fallbackLimit;
	
	    private String localeName;

        private IBM.ICU.Util.TimeZone timeZone;
	
	    /// <summary>
	    /// Creates a basic duration formatter with the given formatter, builder, and
	    /// fallback. It's up to the caller to ensure that the locales and timezones
	    /// of these are in sync.
	    /// </summary>
	    ///
	    public BasicDurationFormatter(PeriodFormatter formatter_0,
	            PeriodBuilder builder_1, DateFormatter fallback_2, long fallbackLimit_3) {
	        this.formatter = formatter_0;
	        this.builder = builder_1;
	        this.fallback = fallback_2;
	        this.fallbackLimit = (fallbackLimit_3 < 0) ? (long) (0) : (long) (fallbackLimit_3);
	    }
	
	    protected internal BasicDurationFormatter(PeriodFormatter formatter_0,
	            PeriodBuilder builder_1, DateFormatter fallback_2, long fallbackLimit_3,
                String localeName_4, IBM.ICU.Util.TimeZone timeZone_5)
        {
	        this.formatter = formatter_0;
	        this.builder = builder_1;
	        this.fallback = fallback_2;
	        this.fallbackLimit = fallbackLimit_3;
	        this.localeName = localeName_4;
	        this.timeZone = timeZone_5;
	    }
	
	    public virtual String FormatDurationFromNowTo(DateTime targetDate) {
	        long now = DateTime.Now.Millisecond;
	        long duration = now - (targetDate.Ticks/10000);
	        return FormatDurationFrom(duration, now);
	    }
	
	    public virtual String FormatDurationFromNow(long duration) {
	        return FormatDurationFrom(duration, DateTime.Now.Millisecond);
	    }
	
	    public virtual String FormatDurationFrom(long duration, long referenceDate) {
	        String s = DoFallback(duration, referenceDate);
	        if (s == null) {
	            Period p = DoBuild(duration, referenceDate);
	            s = DoFormat(p);
	        }
	        return s;
	    }
	
	    public virtual DurationFormatter WithLocale(String localeName_0) {
	        if (!localeName_0.Equals(this.localeName)) {
	            PeriodFormatter newFormatter = formatter.WithLocale(localeName_0);
	            PeriodBuilder newBuilder = builder.WithLocale(localeName_0);
	            DateFormatter newFallback = (fallback == null) ? null : fallback
	                    .WithLocale(localeName_0);
	            return new BasicDurationFormatter(newFormatter, newBuilder,
	                    newFallback, fallbackLimit, localeName_0, timeZone);
	        }
	        return this;
	    }

        public virtual DurationFormatter WithTimeZone(IBM.ICU.Util.TimeZone timeZone_0)
        {
	        if (!timeZone_0.Equals(this.timeZone)) {
	            PeriodBuilder newBuilder = builder.WithTimeZone(timeZone_0);
	            DateFormatter newFallback = (fallback == null) ? null : fallback
	                    .WithTimeZone(timeZone_0);
	            return new BasicDurationFormatter(formatter, newBuilder,
	                    newFallback, fallbackLimit, localeName, timeZone_0);
	        }
	        return this;
	    }
	
	    protected internal String DoFallback(long duration, long referenceDate) {
	        if (fallback != null && fallbackLimit > 0
	                && Math.Abs(duration) >= fallbackLimit) {
	            return fallback.Format(referenceDate + duration);
	        }
	        return null;
	    }
	
	    protected internal Period DoBuild(long duration, long referenceDate) {
	        return builder.CreateWithReferenceDate(duration, referenceDate);
	    }
	
	    protected internal String DoFormat(Period period) {
	        if (!period.IsSet()) {
	            throw new ArgumentException("period is not set");
	        }
	        return formatter.Format(period);
	    }
	}
}
