/*
 ******************************************************************************
 * Copyright (C) 2007, International Business Machines Corporation and   *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/8/10 10:24 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl.Duration {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Abstract factory interface used to create PeriodFormatters. PeriodFormatters
	/// are immutable once created.
	/// <p>
	/// Setters on the factory mutate the factory and return it, for chaining.
	/// </summary>
	///
	public interface PeriodFormatterFactory {
	
	    /// <summary>
	    /// Set the name of the locale that will be used when creating new
	    /// formatters.
	    /// </summary>
	    ///
	    /// <param name="localeName">the name of the Locale</param>
	    /// <returns>this PeriodFormatterFactory</returns>
	    PeriodFormatterFactory SetLocale(String localeName);
	
	    /// <summary>
	    /// Set whether limits will be displayed.
	    /// </summary>
	    ///
	    /// <param name="display">true if limits will be displayed</param>
	    /// <returns>this PeriodFormatterFactory</returns>
	    PeriodFormatterFactory SetDisplayLimit(bool display);
	
	    /// <summary>
	    /// Set whether past and future will be displayed.
	    /// </summary>
	    ///
	    /// <param name="display">true if past and future will be displayed</param>
	    /// <returns>this PeriodFormatterFactory</returns>
	    PeriodFormatterFactory SetDisplayPastFuture(bool display);
	
	    /// <summary>
	    /// Set how separators will be displayed.
	    /// </summary>
	    ///
	    /// <param name="variant">the variant indicating how separators will be displayed</param>
	    /// <returns>this PeriodFormatterFactory</returns>
	    PeriodFormatterFactory SetSeparatorVariant(int variant);
	
	    /// <summary>
	    /// Set the variant of the time unit names to use.
	    /// </summary>
	    ///
	    /// <param name="variant">the variant to use</param>
	    /// <returns>this PeriodFormatterFactory</returns>
	    PeriodFormatterFactory SetUnitVariant(int variant);
	
	    /// <summary>
	    /// Set the variant of the count to use.
	    /// </summary>
	    ///
	    /// <param name="variant">the variant to use</param>
	    /// <returns>this PeriodFormatterFactory</returns>
	    PeriodFormatterFactory SetCountVariant(int variant);
	
	    /// <summary>
	    /// Return a formatter based on this factory's current settings.
	    /// </summary>
	    ///
	    /// <returns>a PeriodFormatter</returns>
	    PeriodFormatter GetFormatter();
	}
}
