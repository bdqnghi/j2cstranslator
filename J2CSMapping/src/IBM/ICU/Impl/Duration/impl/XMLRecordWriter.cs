/*
 ******************************************************************************
 * Copyright (C) 2007, International Business Machines Corporation and   *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/8/10 10:24 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl.Duration.Impl {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	public class XMLRecordWriter : RecordWriter {
	    private TextWriter w;
	
	    private IList nameStack;
	
	    public XMLRecordWriter(TextWriter w_0) {
	        this.w = w_0;
	        this.nameStack = new ArrayList();
	    }
	
	    public virtual bool Open(String title) {
	        Newline();
	        WriteString("<" + title + ">");
	        ILOG.J2CsMapping.Collections.Generics.Collections.Add(nameStack,title);
	        return true;
	    }
	
	    public virtual bool Close() {
	        int ix = nameStack.Count - 1;
	        if (ix >= 0) {
	            String name = (String) ILOG.J2CsMapping.Collections.Collections.RemoveAt(nameStack,ix);
	            Newline();
	            WriteString("</" + name + ">");
	            return true;
	        }
	        return false;
	    }
	
	    public void Flush() {
	        try {
	            w.Flush();
	        } catch (IOException e) {
	        }
	    }
	
	    public virtual void Bool(String name, bool value_ren) {
	        InternalString(name, value_ren.ToString());
	    }
	
	    public virtual void BoolArray(String name, bool[] values) {
	        if (values != null) {
	            String[] stringValues = new String[values.Length];
	            for (int i = 0; i < values.Length; ++i) {
	                stringValues[i] = values[i].ToString();
	            }
	            StringArray(name, stringValues);
	        }
	    }
	
	    private static String Ctos(char value_ren) {
	        if (value_ren == '<') {
	            return "&lt;";
	        }
	        if (value_ren == '&') {
	            return "&amp;";
	        }
	        return value_ren.ToString();
	    }
	
	    public virtual void Character(String name, char value_ren) {
	        if (value_ren != '\uffff') {
	            InternalString(name, Ctos(value_ren));
	        }
	    }
	
	    public virtual void CharacterArray(String name, char[] values) {
	        if (values != null) {
	            String[] stringValues = new String[values.Length];
	            for (int i = 0; i < values.Length; ++i) {
	                char value_ren = values[i];
	                if (value_ren == '\uffff') {
	                    stringValues[i] = NULL_NAME;
	                } else {
	                    stringValues[i] = Ctos(value_ren);
	                }
	            }
	            InternalStringArray(name, stringValues);
	        }
	    }
	
	    public virtual void NamedIndex(String name, String[] names, int value_ren) {
	        if (value_ren >= 0) {
	            InternalString(name, names[value_ren]);
	        }
	    }
	
	    public virtual void NamedIndexArray(String name, String[] names, sbyte[] values) {
	        if (values != null) {
	            String[] stringValues = new String[values.Length];
	            for (int i = 0; i < values.Length; ++i) {
	                int value_ren = values[i];
	                if (value_ren < 0) {
	                    stringValues[i] = NULL_NAME;
	                } else {
	                    stringValues[i] = names[value_ren];
	                }
	            }
	            InternalStringArray(name, stringValues);
	        }
	    }
	
	    public static String Normalize(String str) {
	        if (str == null) {
	            return null;
	        }
	        StringBuilder sb = null;
	        bool inWhitespace = false;
	        char c = '\0';
	        bool special = false;
	        for (int i = 0; i < str.Length; ++i) {
	            c = str[i];
	            if (IBM.ICU.Lang.UCharacter.IsWhitespace(c)) {
	                if (sb == null && (inWhitespace || c != ' ')) {
	                    sb = new StringBuilder(str.Substring(0,(i)-(0)));
	                }
	                if (inWhitespace) {
	                    continue;
	                }
	                inWhitespace = true;
	                special = false;
	                c = ' ';
	            } else {
	                inWhitespace = false;
	                special = c == '<' || c == '&';
	                if (special && sb == null) {
	                    sb = new StringBuilder(str.Substring(0,(i)-(0)));
	                }
	            }
	            if (sb != null) {
	                if (special) {
	                    sb.Append((c == '<') ? "&lt;" : "&amp;");
	                } else {
	                    sb.Append(c);
	                }
	            }
	        }
	        if (sb != null) {
	            /*
	             * if (c == ' ') { int len = sb.length(); if (len == 0) { return
	             * " "; } if (len > 1 && c == ' ') { sb.deleteCharAt(len - 1); } }
	             */
	            return sb.ToString();
	        }
	        return str;
	    }
	
	    private void InternalString(String name, String normalizedValue) {
	        if (normalizedValue != null) {
	            Newline();
	            WriteString("<" + name + ">" + normalizedValue + "</" + name + ">");
	        }
	    }
	
	    private void InternalStringArray(String name, String[] normalizedValues) {
	        if (normalizedValues != null) {
	            Push(name + "List");
	            for (int i = 0; i < normalizedValues.Length; ++i) {
	                String value_ren = normalizedValues[i];
	                if (value_ren == null) {
	                    value_ren = NULL_NAME;
	                }
	                String(name, value_ren);
	            }
	            Pop();
	        }
	    }
	
	    public virtual void String(String name, String value_ren) {
	        InternalString(name, Normalize(value_ren));
	    }
	
	    public virtual void StringArray(String name, String[] values) {
	        if (values != null) {
	            Push(name + "List");
	            for (int i = 0; i < values.Length; ++i) {
	                String value_ren = Normalize(values[i]);
	                if (value_ren == null) {
	                    value_ren = NULL_NAME;
	                }
	                InternalString(name, value_ren);
	            }
	            Pop();
	        }
	    }
	
	    public virtual void StringTable(String name, String[][] values) {
	        if (values != null) {
	            Push(name + "Table");
	            for (int i = 0; i < values.Length; ++i) {
	                String[] rowValues = values[i];
	                if (rowValues == null) {
	                    InternalString(name + "List", NULL_NAME);
	                } else {
	                    StringArray(name, rowValues);
	                }
	            }
	            Pop();
	        }
	    }
	
	    private void Push(String name) {
	        Newline();
	        WriteString("<" + name + ">");
	        ILOG.J2CsMapping.Collections.Generics.Collections.Add(nameStack,name);
	    }
	
	    private void Pop() {
	        int ix = nameStack.Count - 1;
	        String name = (String) ILOG.J2CsMapping.Collections.Collections.RemoveAt(nameStack,ix);
	        Newline();
	        WriteString("</" + name + ">");
	    }
	
	    private void Newline() {
	        WriteString("\n");
	        for (int i = 0; i < nameStack.Count; ++i) {
	            WriteString(INDENT);
	        }
	    }
	
	    private void WriteString(String str) {
	        if (w != null) {
	            try {
	                w.Write(str);
	            } catch (IOException e) {
	                // if there's a problem, record it and stop writing
	                System.Console.Error.WriteLine(e.Message);
	                w = null;
	            }
	        }
	    }
	
	    internal const String NULL_NAME = "Null";
	
	    private const String INDENT = "    ";
	}
}
