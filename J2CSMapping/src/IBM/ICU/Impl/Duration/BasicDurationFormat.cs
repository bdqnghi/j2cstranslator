//##header J2SE15
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/8/10 10:24 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /*
 *******************************************************************************
 * Copyright (C) 2007, International Business Machines Corporation and         *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
namespace IBM.ICU.Impl.Duration {
	
	using IBM.ICU.Text;
	using IBM.ICU.Util;
	//using Java2.Text2;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Text;
    using ILOG.J2CsMapping.Util;
	
	/// <exclude/>
	public class BasicDurationFormat : DurationFormat {
	
	    private const long serialVersionUID = -3146984141909457700L;
	
	    internal DurationFormatter formatter;
	
	    internal PeriodFormatter pformatter;
	
	    internal PeriodFormatterService pfs;
	
	    public static DurationFormat GetInstance(ULocale locale) {
	        return new BasicDurationFormat(locale);
	    }
	
	    // #if defined(FOUNDATION10) || defined(J2SE13) || defined(J2SE14)
	    // #else
	    private static bool checkXMLDuration = true;
	
	    // #endif
	
	    public override StringBuilder FormatObject(Object obj0, StringBuilder toAppend,
	            ILOG.J2CsMapping.Text.FieldPosition pos) {
	        if (obj0   is  Int64) {
	            String res = FormatDurationFromNow(((Int64) obj0));
	            return toAppend.Append(res);
	        } else if (obj0   is  DateTime) {
	            String res_0 = FormatDurationFromNowTo(((DateTime) obj0));
	            return toAppend.Append(res_0);
	        }
	        // #if defined(FOUNDATION10) || defined(J2SE13) || defined(J2SE14)
	        // #else
	        if (checkXMLDuration)
	            try {
	                /*if (obj0   is  Javax.Xml.Datatype.Duration) {
	                    String res_1 = FormatDuration(obj0);
	                    return toAppend.Append(res_1);
	                }*/
                    throw new NotImplementedException();
	            } catch (ReflectionTypeLoadException ncdfe) {
	                System.Console.Error.WriteLine("Skipping XML capability");
	                checkXMLDuration = false; // don't try again
	            }
	        // #endif
	        throw new ArgumentException(
	                "Cannot format given Object as a Duration");
	
	    }
	
	    public BasicDurationFormat() {
	        this.pfs = null;
	        pfs = IBM.ICU.Impl.Duration.BasicPeriodFormatterService.GetInstance();
	        formatter = pfs.NewDurationFormatterFactory().GetFormatter();
	        pformatter = pfs.NewPeriodFormatterFactory()
	                .SetDisplayPastFuture(false).GetFormatter();
	    }
	
	    public BasicDurationFormat(ULocale locale) : base(locale) {
	        this.pfs = null;
	        pfs = IBM.ICU.Impl.Duration.BasicPeriodFormatterService.GetInstance();
	        formatter = pfs.NewDurationFormatterFactory()
	                .SetLocale(locale.GetName()).GetFormatter();
	        pformatter = pfs.NewPeriodFormatterFactory()
	                .SetDisplayPastFuture(false).SetLocale(locale.GetName())
	                .GetFormatter();
	    }
	
	    /*
	     * (non-Javadoc)
	     * 
	     * @see com.ibm.icu.text.DurationFormat#formatDurationFrom(long, long)
	     */
	    public override String FormatDurationFrom(long duration, long referenceDate) {
	        return formatter.FormatDurationFrom(duration, referenceDate);
	    }
	
	    /*
	     * (non-Javadoc)
	     * 
	     * @see com.ibm.icu.text.DurationFormat#formatDurationFromNow(long)
	     */
	    public override String FormatDurationFromNow(long duration) {
	        return formatter.FormatDurationFromNow(duration);
	    }
	
	    /*
	     * (non-Javadoc)
	     * 
	     * @see
	     * com.ibm.icu.text.DurationFormat#formatDurationFromNowTo(java.util.Date)
	     */
	    public override String FormatDurationFromNowTo(DateTime targetDate) {
	        return formatter.FormatDurationFromNowTo(targetDate);
	    }
	
	    // #if defined(FOUNDATION10) || defined(J2SE13) || defined(J2SE14)
	    // #else
	    /// <summary>
	    /// JDK 1.5+ only
	    /// </summary>
	    ///
	    /// <param name="o"></param>
	    /// <returns></returns>
	    /// <seealso cref="null"/>
	    /// ://java.sun.com/j2se/1.5.0/docs/api/javax/xml/datatype/Duration.html
	    public String FormatDuration(Object obj) {
            throw new NotImplementedException();
            /*
	        Javax.Xml.Datatype.DatatypeConstants.Field[] inFields = {
	                Javax.Xml.Datatype.DatatypeConstants.YEARS,
	                Javax.Xml.Datatype.DatatypeConstants.MONTHS,
	                Javax.Xml.Datatype.DatatypeConstants.DAYS,
	                Javax.Xml.Datatype.DatatypeConstants.HOURS,
	                Javax.Xml.Datatype.DatatypeConstants.MINUTES,
	                Javax.Xml.Datatype.DatatypeConstants.SECONDS };
	        TimeUnit[] outFields = { IBM.ICU.Impl.Duration.TimeUnit.YEAR,
	                IBM.ICU.Impl.Duration.TimeUnit.MONTH,
	                IBM.ICU.Impl.Duration.TimeUnit.DAY,
	                IBM.ICU.Impl.Duration.TimeUnit.HOUR,
	                IBM.ICU.Impl.Duration.TimeUnit.MINUTE,
	                IBM.ICU.Impl.Duration.TimeUnit.SECOND };
	
	        Javax.Xml.Datatype.Duration inDuration = (Javax.Xml.Datatype.Duration) obj;
	        Period p = null;
	        Javax.Xml.Datatype.Duration duration = inDuration;
	        bool inPast = false;
	        if (inDuration.GetSign() < 0) {
	            duration = inDuration.Negate();
	            inPast = true;
	        }
	        // convert a Duration to a Period
	        bool sawNonZero = false; // did we have a set, non-zero field?
	        for (int i = 0; i < inFields.Length; i++) {
	            if (duration.IsSet(inFields[i])) {
	                object n = duration.GetField(inFields[i]);
	                if (System.Convert.ToInt32(n) == 0 && !sawNonZero) {
	                    continue; // ignore zero fields larger than the largest
	                              // nonzero field
	                } else {
	                    sawNonZero = true;
	                }
	                float floatVal = Convert.ToSingle(n);
	                // is there a 'secondary' unit to set?
	                TimeUnit alternateUnit = null;
	                float alternateVal = 0;
	
	                // see if there is a fractional part
	                if (outFields[i] == IBM.ICU.Impl.Duration.TimeUnit.SECOND) {
	                    double fullSeconds = floatVal;
	                    double intSeconds = Math.Floor(floatVal);
	                    double millis = (fullSeconds - intSeconds) * 1000.0d;
	                    if (millis > 0.0d) {
	                        alternateUnit = IBM.ICU.Impl.Duration.TimeUnit.MILLISECOND;
	                        alternateVal = (float) millis;
	                        floatVal = (float) intSeconds;
	                    }
	                }
	
	                if (p == null) {
	                    p = IBM.ICU.Impl.Duration.Period.At(floatVal, outFields[i]);
	                } else {
	                    p = p.And(floatVal, outFields[i]);
	                }
	
	                if (alternateUnit != null) {
	                    p = p.And(alternateVal, alternateUnit); // add in
	                                                            // MILLISECONDs
	                }
	            }
	        }
	
	        if (p == null) {
	            // no fields set = 0 seconds
	            return FormatDurationFromNow(0);
	        } else {
	            if (inPast) {// was negated, above.
	                p = p.InPast();
	            } else {
	                p = p.InFuture();
	            }
	        }
	
	        // now, format it.
	        return pformatter.Format(p);*/
	    }
	    // #endif
	}
}
