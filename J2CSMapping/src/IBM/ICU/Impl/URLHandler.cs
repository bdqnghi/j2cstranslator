/*
 ******************************************************************************
 * Copyright (C) 2005, International Business Machines Corporation and        *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl {
	
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	//using ILOG.J2CsMapping.IO.Jar;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Security;
	
	public abstract class URLHandler {
	    public const String PROPNAME = "urlhandler.props";
	
	    private static readonly IDictionary handlers;
	
	    private static readonly bool DEBUG = IBM.ICU.Impl.ICUDebug.Enabled("URLHandler");
	
	    public static URLHandler Get(Uri url) {
	        if (url == null) {
	            return null;
	        }
            /*
            String protocol = url.GetProtocol();
	
	        if (handlers != null) {
	            MethodInfo m = (MethodInfo) ILOG.J2CsMapping.Collections.Collections.Get(handlers,protocol);
	
	            if (m != null) {
	                try {
	                    URLHandler handler = (URLHandler) ILOG.J2CsMapping.Reflect.Helper.Invoke(m,null,new Object[] { url });
	
	                    if (handler != null) {
	                        return handler;
	                    }
	                } catch (MemberAccessException e) {
	                    if (DEBUG)
	                        System.Console.Error.WriteLine(e);
	                } catch (ArgumentException e_0) {
	                    if (DEBUG)
	                        System.Console.Error.WriteLine(e_0);
	                } catch (TargetInvocationException e_1) {
	                    if (DEBUG)
	                        System.Console.Error.WriteLine(e_1);
	                }
	            }
	        }
	    */
	        return GetDefault(url);
	    }
	
	    protected static internal URLHandler GetDefault(Uri url) {
	        /*String protocol = url.GetProtocol();
	
	        if (protocol.Equals("file")) {
	            return new URLHandler.FileURLHandler (url);
	        } else if (protocol.Equals("jar")) {
	            return new URLHandler.JarURLHandler (url);
	        } else {
	            return null;
	        }*/
            return null;
	    }
	
	    private class FileURLHandler : URLHandler {
	        internal FileInfo file;
	
	        internal String root;
	
	        internal FileURLHandler(Uri url) {
	           /* root = url.GetPath();
	            file = new FileInfo(root);
	
	            if (!file.Exists) {
	                if (IBM.ICU.Impl.URLHandler.DEBUG)
	                    System.Console.Error.WriteLine("file does not exist");
	                throw new ArgumentException();
	            }*/
	        }
	
	        public override void Guide(URLHandler.URLVisitor  v, bool recurse, bool strip) {
	            /*if (System.IO.Directory.Exists(file.DirectoryName)) {
	                Process(v, recurse, strip, "/", file.ListFiles());
	            } else {
	                v.Visit(file.Name);
	            }*/
	        }
	
	        public void Process(URLHandler.URLVisitor  v, bool recurse, bool strip,
	                String path, FileInfo[] files) {
	            /*for (int i = 0; i < files.Length; i++) {
	                FileInfo f = files[i];
	
	                if (System.IO.Directory.Exists(f.DirectoryName)) {
	                    if (recurse) {
	                        Process(v, recurse, strip, path + f.Name + '/',
	                                f.ListFiles());
	                    }
	                } else {
	                    v.Visit((strip) ? f.Name : path + f.Name);
	                }
	            }*/
	        }
	    }
	
	    /*private class JarURLHandler : URLHandler {
	        internal JarFile jarFile;
	
	        internal String prefix;
	
	        internal JarURLHandler(Uri url) {
	            try {
	                prefix = url.GetPath();
	
	                int ix = prefix.IndexOf("!/");
	
	                if (ix >= 0) {
	                    prefix = prefix.Substring(ix + 2); // truncate after "!/"
	                }
	
	                JarURLConnection conn = (JarURLConnection) WebRequest.Create(url);
	
	                jarFile = conn.GetJarFile();
	            } catch (Exception e) {
	                if (IBM.ICU.Impl.URLHandler.DEBUG)
	                    System.Console.Error.WriteLine("icurb jar error: " + e);
	                throw new ArgumentException("jar error: "
	                        + e.Message);
	            }
	        }
	
	        public override void Guide(URLHandler.URLVisitor  v, bool recurse, bool strip) {
	            try {
	                IIterator entries = jarFile.Entries();
	
	                while (entries.HasNext()) {
	                    JarEntry entry = (JarEntry) entries.Next();
	
	                    if (!entry.IsDirectory()) { // skip just directory paths
	                        String name = entry.GetName();
	
	                        if (name.StartsWith(prefix)) {
	                            name = name.Substring(prefix.Length);
	
	                            int ix = name.LastIndexOf('/');
	
	                            if (ix != -1) {
	                                if (!recurse) {
	                                    continue;
	                                }
	
	                                if (strip) {
	                                    name = name.Substring(ix + 1);
	                                }
	                            }
	
	                            v.Visit(name);
	                        }
	                    }
	                }
	            } catch (Exception e) {
	                if (IBM.ICU.Impl.URLHandler.DEBUG)
	                    System.Console.Error.WriteLine("icurb jar error: " + e);
	            }
	        }
	    }*/
	
	    public void Guide(URLHandler.URLVisitor  visitor, bool recurse) {
	        Guide(visitor, recurse, true);
	    }
	
	    public abstract void Guide(URLHandler.URLVisitor  visitor, bool recurse,
	            bool strip);
	
	    public interface URLVisitor {
	        void Visit(String str);
	    }
	
	    static URLHandler() {
	            IDictionary h = null;
	            try {
	                Stream mask0 = typeof(URLHandler).Assembly.GetFile(PROPNAME);
	                if (mask0 == null) {
	                    mask0 = ILOG.J2CsMapping.IO.IOUtility.GetResourceAsStream(System.Reflection.Assembly.GetEntryAssembly(),PROPNAME);
	                }
	                if (mask0 != null) {
	                    Type[] paras = { typeof(Uri) };
	                    TextReader br = new StreamReader(mask0);
	                    for (String line = br.ReadLine(); line != null; line = br
	                            .ReadLine()) {
	                        line = line.Trim();
	                        if (line.Length == 0 || line[0] == '#') {
	                            continue;
	                        }
	                        int ix = line.IndexOf('=');
	                        if (ix == -1) {
	                            if (DEBUG)
	                                System.Console.Error
	                                        .WriteLine("bad urlhandler line: '" + line
	                                                + "'");
	                            break;
	                        }
	                        String key = line.Substring(0,(ix)-(0)).Trim();
	                        String value_ren = line.Substring(ix + 1).Trim();
	                        try {
	                            Type cl = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(value_ren);
	                            MethodInfo m = ILOG.J2CsMapping.Reflect.Helper.GetMethod(cl,"get",paras);
	                            if (h == null) {
	                                h = new Hashtable();
	                            }
	                            ILOG.J2CsMapping.Collections.Collections.Put(h,key,m);
	                        } catch (TypeLoadException e) {
	                            if (DEBUG)
	                                System.Console.Error.WriteLine(e);
	                        } catch (AmbiguousMatchException e) {
	                            if (DEBUG)
	                                System.Console.Error.WriteLine(e);
	                        } catch (SecurityException e) {
	                            if (DEBUG)
	                                System.Console.Error.WriteLine(e);
	                        }
	                    }
	                }
	            } catch (Exception t) {
	                if (DEBUG)
	                    System.Console.Error.WriteLine(t);
	            }
	            handlers = h;
	        }
	}
}
