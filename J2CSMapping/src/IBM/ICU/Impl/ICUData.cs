/*
 *******************************************************************************
 * Copyright (C) 2004-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 *
 * Created on Feb 4, 2004
 *
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Reflection;
	using System.Resources;
	using System.Runtime.CompilerServices;
     using ILOG.J2CsMapping.IO;
	
	/// <summary>
	/// Provides access to ICU data files as InputStreams. Implements security
	/// checking.
	/// </summary>
	///
	public sealed class ICUData {
	    public sealed class Anonymous_C2 : Object {
	        private readonly String resourceName;
	
	        
	        /// <param name="resourceName_0"></param>
	        public Anonymous_C2(String resourceName_0) {
	            this.resourceName = resourceName_0;
	        }
	
	        public Object Run() {
                return null; // typeof(ICUData).GetResource(resourceName);
	        }
	    }
	
	    public sealed class Anonymous_C1 : Object {
	        private readonly Type root;
	
	        private readonly String resourceName;
	
	        
	        /// <param name="root_0"></param>
	        /// <param name="resourceName_1"></param>
	        public Anonymous_C1(Type root_0, String resourceName_1) {
	            this.root = root_0;
	            this.resourceName = resourceName_1;
	        }
	
	        public Object Run() {
                return IOUtility.GetResourceAsStream(root.Assembly, "Resources/", resourceName);
	        }
	    }
	
	    public sealed class Anonymous_C0 : Object {
	        private readonly Assembly loader;
	
	        private readonly String resourceName;
	
	        
	        /// <param name="loader_0"></param>
	        /// <param name="resourceName_1"></param>
	        public Anonymous_C0(Assembly loader_0, String resourceName_1) {
	            this.loader = loader_0;
	            this.resourceName = resourceName_1;
	        }
	
	        public Object Run() {
	            return ILOG.J2CsMapping.IO.IOUtility.GetResourceAsStream(loader,"Resources/", resourceName);
	        }
	    }
	
	    /*
	     * Return a URL to the ICU resource names resourceName. The resource name
	     * should either be an absolute path, or a path relative to com.ibm.icu.impl
	     * (e.g., most likely it is 'data/foo'). If required is true, throw an
	     * MissingResourceException instead of returning a null result.
	     */
	    public static bool Exists(String resourceName_0) {
	        Uri i = null;
	        if (new ILOG.J2CsMapping.Security.IlrSecurityManager() != null) {
	            i = (Uri) new ICUData.Anonymous_C2 (resourceName_0).Run();
	        } else {
                i = null; // typeof(ICUData).GetResource(resourceName_0);
	        }
	        return i != null;
	    }
	
	    private static Stream GetStream(Type root_0,
	            String resourceName_1, bool required) {
	        Stream i = null;
	
	        if (new ILOG.J2CsMapping.Security.IlrSecurityManager() != null) {
	            i = (Stream) new ICUData.Anonymous_C1 (root_0, resourceName_1).Run();
	        } else {
	            i = root_0.Assembly.GetFile(resourceName_1);
	        }
	
	        if (i == null && required) {
	            throw new MissingManifestResourceException("could not locate data "
	                                + resourceName_1);
	        }
	        return i;
	    }
	
	    private static Stream GetStream(Assembly loader_0,
	            String resourceName_1, bool required) {
	        Stream i = null;
	        if (new ILOG.J2CsMapping.Security.IlrSecurityManager() != null) {
	            i = (Stream) new ICUData.Anonymous_C0 (loader_0, resourceName_1).Run();
	        } else {
	            i = ILOG.J2CsMapping.IO.IOUtility.GetResourceAsStream(loader_0,resourceName_1);
	        }
	        if (i == null && required) {
	            throw new MissingManifestResourceException("could not locate data");
	        }
	        return i;
	    }
	
	    public static Stream GetStream(Assembly loader_0, String resourceName_1) {
	        return GetStream(loader_0, resourceName_1, false);
	    }
	
	    public static Stream GetRequiredStream(Assembly loader_0,
	            String resourceName_1) {
	        return GetStream(loader_0, resourceName_1, true);
	    }
	
	    /*
	     * Convenience override that calls getStream(ICUData.class, resourceName,
	     * false);
	     */
	    public static Stream GetStream(String resourceName_0) {
	        return GetStream(typeof(ICUData), resourceName_0, false);
	    }
	
	    /*
	     * Convenience method that calls getStream(ICUData.class, resourceName,
	     * true).
	     */
	    public static Stream GetRequiredStream(String resourceName_0) {
	        return GetStream(typeof(ICUData), resourceName_0, true);
	    }
	
	    /*
	     * Convenience override that calls getStream(root, resourceName, false);
	     */
	    public static Stream GetStream(Type root_0, String resourceName_1) {
	        return GetStream(root_0, resourceName_1, false);
	    }
	
	    /*
	     * Convenience method that calls getStream(root, resourceName, true).
	     */
	    public static Stream GetRequiredStream(Type root_0, String resourceName_1) {
	        return GetStream(root_0, resourceName_1, true);
	    }
	}
}
