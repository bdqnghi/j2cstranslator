/* 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/1/10 3:36 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace ILOG.J2CsMapping.Formatting
{

    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using System.IO;
    using System.Runtime.CompilerServices;
    using System.Runtime.Serialization;

    /// <summary>
    /// DateFormatSymbols holds the Strings used in the formating and parsing of
    /// dates and times.
    /// </summary>
    ///
    [Serializable]
    public class DateFormatSymbols : ICloneable
    {

        private const long serialVersionUID = -5987973545549424702L;

        private String localPatternChars;

        internal String[] ampms, eras, months, shortMonths, shortWeekdays, weekdays;

        internal String[][] zoneStrings;

        /// <summary>
        /// Constructs a new DateFormatSymbols containing the symbols for the default
        /// Locale.
        /// </summary>
        ///
        public DateFormatSymbols()
            : this(ILOG.J2CsMapping.Util.Locale.GetDefault())
        {
        }

        /// <summary>
        /// Constructs a new DateFormatSymbols containing the symbols for the
        /// specified Locale.
        /// </summary>
        ///
        /// <param name="locale">the Locale</param>
        public DateFormatSymbols(ILOG.J2CsMapping.Util.Locale locale)
        {
            IBM.ICU.Text.DateFormatSymbols icuSymbols = new IBM.ICU.Text.DateFormatSymbols(
                    locale);

            localPatternChars = icuSymbols.GetLocalPatternChars();
            ampms = icuSymbols.GetAmPmStrings();
            eras = icuSymbols.GetEras();
            months = icuSymbols.GetMonths();
            shortMonths = icuSymbols.GetShortMonths();
            shortWeekdays = icuSymbols.GetShortWeekdays();
            weekdays = icuSymbols.GetWeekdays();
            zoneStrings = icuSymbols.GetZoneStrings();
        }

        /// <summary>
        /// Answers a new DateFormatSymbols with the same symbols as this
        /// DateFormatSymbols.
        /// </summary>
        ///
        /// <returns>a shallow copy of this DateFormatSymbols</returns>
        /// <seealso cref="T:System.ICloneable"/>
        public virtual Object Clone()
        {
            try
            {
                DateFormatSymbols symbols = (DateFormatSymbols)base.MemberwiseClone();
                symbols.ampms = (String[])ampms.Clone();
                symbols.eras = (string[])eras.Clone();
                symbols.months = (string[])months.Clone();
                symbols.shortMonths = (string[])shortMonths.Clone();
                symbols.shortWeekdays = (string[])shortWeekdays.Clone();
                symbols.weekdays = (string[])weekdays.Clone();
                symbols.zoneStrings = new String[zoneStrings.Length][];
                for (int i = 0; i < zoneStrings.Length; i++)
                {
                    symbols.zoneStrings[i] = (string[])zoneStrings[i].Clone();
                }
                return symbols;
            }
            catch (Exception e)
            {
                return null;
            }
        }

        /// <summary>
        /// Compares the specified object to this DateFormatSymbols and answer if
        /// they are equal. The object must be an instance of DateFormatSymbols with
        /// the same symbols.
        /// </summary>
        ///
        /// <param name="object">the object to compare with this object</param>
        /// <returns>true if the specified object is equal to this DateFormatSymbols,
        /// false otherwise</returns>
        /// <seealso cref="M:ILOG.J2CsMapping.Text2.DateFormatSymbols.HashCode"/>
        public override bool Equals(Object obj0)
        {
            if ((Object)this == obj0)
            {
                return true;
            }
            if (!(obj0 is DateFormatSymbols))
            {
                return false;
            }
            DateFormatSymbols obj = (DateFormatSymbols)obj0;
            if (!localPatternChars.Equals(obj.localPatternChars))
            {
                return false;
            }
            if (!ILOG.J2CsMapping.Collections.Arrays.Equals(ampms, obj.ampms))
            {
                return false;
            }
            if (!ILOG.J2CsMapping.Collections.Arrays.Equals(eras, obj.eras))
            {
                return false;
            }
            if (!ILOG.J2CsMapping.Collections.Arrays.Equals(months, obj.months))
            {
                return false;
            }
            if (!ILOG.J2CsMapping.Collections.Arrays.Equals(shortMonths, obj.shortMonths))
            {
                return false;
            }
            if (!ILOG.J2CsMapping.Collections.Arrays.Equals(shortWeekdays, obj.shortWeekdays))
            {
                return false;
            }
            if (!ILOG.J2CsMapping.Collections.Arrays.Equals(weekdays, obj.weekdays))
            {
                return false;
            }
            if (zoneStrings.Length != obj.zoneStrings.Length)
            {
                return false;
            }
            /* foreach */
            foreach (String[] element in zoneStrings)
            {
                if (element.Length != element.Length)
                {
                    return false;
                }
                for (int j = 0; j < element.Length; j++)
                {
                    if (element[j] != element[j]
                            && !(element[j].Equals(element[j])))
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        /// <summary>
        /// Answers the array of Strings which represent AM and PM. Use the Calendar
        /// constants Calendar.AM and Calendar.PM to index into the array.
        /// </summary>
        ///
        /// <returns>an array of String</returns>
        public String[] GetAmPmStrings()
        {
            return (string[])ampms.Clone();
        }

        /// <summary>
        /// Answers the array of Strings which represent BC and AD. Use the Calendar
        /// constants GregorianCalendar.BC and GregorianCalendar.AD to index into the
        /// array.
        /// </summary>
        ///
        /// <returns>an array of String</returns>
        public String[] GetEras()
        {
            return (string[])eras.Clone();
        }

        /// <summary>
        /// Answers the pattern characters used by SimpleDateFormat to specify date
        /// and time fields.
        /// </summary>
        ///
        /// <returns>a String containing the pattern characters</returns>
        public String GetLocalPatternChars()
        {
            return localPatternChars;
        }

        /// <summary>
        /// Answers the array of Strings containing the full names of the months. Use
        /// the Calendar constants Calendar.JANUARY, etc. to index into the array.
        /// </summary>
        ///
        /// <returns>an array of String</returns>
        public String[] GetMonths()
        {
            return (string[])months.Clone();
        }

        /// <summary>
        /// Answers the array of Strings containing the abbreviated names of the
        /// months. Use the Calendar constants Calendar.JANUARY, etc. to index into
        /// the array.
        /// </summary>
        ///
        /// <returns>an array of String</returns>
        public String[] GetShortMonths()
        {
            return (string[])shortMonths.Clone();
        }

        /// <summary>
        /// Answers the array of Strings containing the abbreviated names of the days
        /// of the week. Use the Calendar constants Calendar.SUNDAY, etc. to index
        /// into the array.
        /// </summary>
        ///
        /// <returns>an array of String</returns>
        public String[] GetShortWeekdays()
        {
            return (string[])shortWeekdays.Clone();
        }

        /// <summary>
        /// Answers the array of Strings containing the full names of the days of the
        /// week. Use the Calendar constants Calendar.SUNDAY, etc. to index into the
        /// array.
        /// </summary>
        ///
        /// <returns>an array of String</returns>
        public String[] GetWeekdays()
        {
            return (string[])weekdays.Clone();
        }

        /// <summary>
        /// Answers the two-dimensional array of Strings containing the names of the
        /// timezones. Each element in the array is an array of five Strings, the
        /// first is a TimeZone ID, and second and third are the full and abbreviated
        /// timezone names for standard time, and the fourth and fifth are the full
        /// and abbreviated names for daylight time.
        /// </summary>
        ///
        /// <returns>a two-dimensional array of String</returns>
        public String[][] GetZoneStrings()
        {
            String[][] clone = new String[zoneStrings.Length][];
            for (int i = zoneStrings.Length; --i >= 0; )
            {
                clone[i] = (string[])zoneStrings[i].Clone();
            }
            return clone;
        }

        /// <summary>
        /// Answers an integer hash code for the receiver. Objects which are equal
        /// answer the same value for this method.
        /// </summary>
        ///
        /// <returns>the receiver's hash</returns>
        /// <seealso cref="M:ILOG.J2CsMapping.Text2.DateFormatSymbols.Equals(System.Object)"/>
        public override int GetHashCode()
        {
            int hashCode;
            hashCode = localPatternChars.GetHashCode();
            /* foreach */
            foreach (String element in ampms)
            {
                hashCode += element.GetHashCode();
            }
            /* foreach */
            foreach (String element_0 in eras)
            {
                hashCode += element_0.GetHashCode();
            }
            /* foreach */
            foreach (String element_1 in months)
            {
                hashCode += element_1.GetHashCode();
            }
            /* foreach */
            foreach (String element_2 in shortMonths)
            {
                hashCode += element_2.GetHashCode();
            }
            /* foreach */
            foreach (String element_3 in shortWeekdays)
            {
                hashCode += element_3.GetHashCode();
            }
            /* foreach */
            foreach (String element_4 in weekdays)
            {
                hashCode += element_4.GetHashCode();
            }
            /* foreach */
            foreach (String[] element_5 in zoneStrings)
            {
                for (int j = 0; j < element_5.Length; j++)
                {
                    if (element_5[j] != null)
                    {
                        hashCode += element_5[j].GetHashCode();
                    }
                }
            }
            return hashCode;
        }

        /// <summary>
        /// Sets the array of Strings which represent AM and PM. Use the Calendar
        /// constants Calendar.AM and Calendar.PM to index into the array.
        /// </summary>
        ///
        /// <param name="data">the array of Strings</param>
        public void SetAmPmStrings(String[] data)
        {
            ampms = (string[])data.Clone();
        }

        /// <summary>
        /// Sets the array of Strings which represent BC and AD. Use the Calendar
        /// constants GregorianCalendar.BC and GregorianCalendar.AD to index into the
        /// array.
        /// </summary>
        ///
        /// <param name="data">the array of Strings</param>
        public void SetEras(String[] data)
        {
            eras = (string[])data.Clone();
        }

        /// <summary>
        /// Sets the pattern characters used by SimpleDateFormat to specify date and
        /// time fields.
        /// </summary>
        ///
        /// <param name="data">the String containing the pattern characters</param>
        /// <exception cref="NullPointerException">when the data is null</exception>
        public void SetLocalPatternChars(String data)
        {
            if (data == null)
            {
                throw new NullReferenceException();
            }
            localPatternChars = data;
        }

        /// <summary>
        /// Sets the array of Strings containing the full names of the months. Use
        /// the Calendar constants Calendar.JANUARY, etc. to index into the array.
        /// </summary>
        ///
        /// <param name="data">the array of Strings</param>
        public void SetMonths(String[] data)
        {
            months = (string[])data.Clone();
        }

        /// <summary>
        /// Sets the array of Strings containing the abbreviated names of the months.
        /// Use the Calendar constants Calendar.JANUARY, etc. to index into the
        /// array.
        /// </summary>
        ///
        /// <param name="data">the array of Strings</param>
        public void SetShortMonths(String[] data)
        {
            shortMonths = (string[])data.Clone();
        }

        /// <summary>
        /// Sets the array of Strings containing the abbreviated names of the days of
        /// the week. Use the Calendar constants Calendar.SUNDAY, etc. to index into
        /// the array.
        /// </summary>
        ///
        /// <param name="data">the array of Strings</param>
        public void SetShortWeekdays(String[] data)
        {
            shortWeekdays = (string[])data.Clone();
        }

        /// <summary>
        /// Sets the array of Strings containing the full names of the days of the
        /// week. Use the Calendar constants Calendar.SUNDAY, etc. to index into the
        /// array.
        /// </summary>
        ///
        /// <param name="data">the array of Strings</param>
        public void SetWeekdays(String[] data)
        {
            weekdays = (string[])data.Clone();
        }

        /// <summary>
        /// Sets the two-dimensional array of Strings containing the names of the
        /// timezones. Each element in the array is an array of five Strings, the
        /// first is a TimeZone ID, and second and third are the full and abbreviated
        /// timezone names for standard time, and the fourth and fifth are the full
        /// and abbreviated names for daylight time.
        /// </summary>
        ///
        /// <param name="data">the two-dimensional array of Strings</param>
        public void SetZoneStrings(String[][] data)
        {
            zoneStrings = (string[][])data.Clone();
        }
    }
}
