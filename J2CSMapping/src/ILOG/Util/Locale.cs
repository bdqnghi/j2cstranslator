/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110104_01     
// 1/4/11 2:16 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace ILOG.J2CsMapping.Util
{

    using IBM.ICU.Util;
    using ILOG.J2CsMapping.Collections.Generics;
    using ILOG.J2CsMapping.IO;
    using ILOG.J2CsMapping.Security;
    using ILOG.J2CsMapping.Util;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;
    using System.Runtime.Serialization;
    using System.Text;

    /// <summary>
    /// Locale represents a language/country/variant combination. It is an identifier
    /// which dictates particular conventions for the presentation of information.
    /// The language codes are two letter lowercase codes as defined by ISO-639. The
    /// country codes are three letter uppercase codes as defined by ISO-3166. The
    /// variant codes are unspecified.
    /// </summary>
    ///
    /// <seealso cref="T:System.Resources.ResourceManager"/>
    [Serializable]
    public sealed class Locale : ICloneable
    {

        private static volatile Locale[] availableLocales;

        // Initialize a default which is used during static
        // initialization of the default for the platform.
        private static Locale defaultLocale = new Locale();

        /// <summary>
        /// Locale constant for en_CA.
        /// </summary>
        ///
        public static readonly Locale CANADA = new Locale("en", "CA"); //$NON-NLS-1$ //$NON-NLS-2$

        /// <summary>
        /// Locale constant for fr_CA.
        /// </summary>
        ///
        public static readonly Locale CANADA_FRENCH = new Locale("fr", "CA"); //$NON-NLS-1$ //$NON-NLS-2$

        /// <summary>
        /// Locale constant for zh_CN.
        /// </summary>
        ///
        public static readonly Locale CHINA = new Locale("zh", "CN"); //$NON-NLS-1$ //$NON-NLS-2$

        /// <summary>
        /// Locale constant for zh.
        /// </summary>
        ///
        public static readonly Locale CHINESE = new Locale("zh", ""); //$NON-NLS-1$//$NON-NLS-2$

        /// <summary>
        /// Locale constant for en.
        /// </summary>
        ///
        public static readonly Locale ENGLISH = new Locale("en", ""); //$NON-NLS-1$ //$NON-NLS-2$

        /// <summary>
        /// Locale constant for fr_FR.
        /// </summary>
        ///
        public static readonly Locale FRANCE = new Locale("fr", "FR"); //$NON-NLS-1$//$NON-NLS-2$

        /// <summary>
        /// Locale constant for fr.
        /// </summary>
        ///
        public static readonly Locale FRENCH = new Locale("fr", ""); //$NON-NLS-1$//$NON-NLS-2$

        /// <summary>
        /// Locale constant for de.
        /// </summary>
        ///
        public static readonly Locale GERMAN = new Locale("de", ""); //$NON-NLS-1$ //$NON-NLS-2$

        /// <summary>
        /// Locale constant for de_DE.
        /// </summary>
        ///
        public static readonly Locale GERMANY = new Locale("de", "DE"); //$NON-NLS-1$ //$NON-NLS-2$

        /// <summary>
        /// Locale constant for it.
        /// </summary>
        ///
        public static readonly Locale ITALIAN = new Locale("it", ""); //$NON-NLS-1$ //$NON-NLS-2$

        /// <summary>
        /// Locale constant for it_IT.
        /// </summary>
        ///
        public static readonly Locale ITALY = new Locale("it", "IT"); //$NON-NLS-1$ //$NON-NLS-2$

        /// <summary>
        /// Locale constant for ja_JP.
        /// </summary>
        ///
        public static readonly Locale JAPAN = new Locale("ja", "JP"); //$NON-NLS-1$//$NON-NLS-2$

        /// <summary>
        /// Locale constant for ja.
        /// </summary>
        ///
        public static readonly Locale JAPANESE = new Locale("ja", ""); //$NON-NLS-1$//$NON-NLS-2$

        /// <summary>
        /// Locale constant for ko_KR.
        /// </summary>
        ///
        public static readonly Locale KOREA = new Locale("ko", "KR"); //$NON-NLS-1$//$NON-NLS-2$

        /// <summary>
        /// Locale constant for ko.
        /// </summary>
        ///
        public static readonly Locale KOREAN = new Locale("ko", ""); //$NON-NLS-1$//$NON-NLS-2$

        /// <summary>
        /// Locale constant for zh_CN.
        /// </summary>
        ///
        public static readonly Locale PRC = new Locale("zh", "CN"); //$NON-NLS-1$//$NON-NLS-2$

        /// <summary>
        /// Locale constant for zh_CN.
        /// </summary>
        ///
        public static readonly Locale SIMPLIFIED_CHINESE = new Locale("zh", "CN"); //$NON-NLS-1$//$NON-NLS-2$

        /// <summary>
        /// Locale constant for zh_TW.
        /// </summary>
        ///
        public static readonly Locale TAIWAN = new Locale("zh", "TW"); //$NON-NLS-1$ //$NON-NLS-2$

        /// <summary>
        /// Locale constant for zh_TW.
        /// </summary>
        ///
        public static readonly Locale TRADITIONAL_CHINESE = new Locale("zh", "TW"); //$NON-NLS-1$ //$NON-NLS-2$

        /// <summary>
        /// Locale constant for en_GB.
        /// </summary>
        ///
        public static readonly Locale UK = new Locale("en", "GB"); //$NON-NLS-1$ //$NON-NLS-2$

        /// <summary>
        /// Locale constant for en_US.
        /// </summary>
        ///
        public static readonly Locale US = new Locale("en", "US"); //$NON-NLS-1$//$NON-NLS-2$

        //private static readonly PropertyPermission setLocalePermission = new PropertyPermission(
        //        "user.language", "write"); //$NON-NLS-1$//$NON-NLS-2$

        private String countryCode;

        private String languageCode;

        private String variantCode;

        private ULocale uLocale;

        /// <summary>
        /// Constructs a default which is used during static initialization of the
        /// default for the platform.
        /// </summary>
        ///
        private Locale()
        {
            languageCode = "en"; //$NON-NLS-1$
            countryCode = "US"; //$NON-NLS-1$
            variantCode = ""; //$NON-NLS-1$
        }

        /// <summary>
        /// Constructs a new Locale using the specified language.
        /// </summary>
        ///
        /// <param name="language"></param>
        public Locale(String language)
            : this(language, "", "")
        {
        }

        /// <summary>
        /// Constructs a new Locale using the specified language and country codes.
        /// </summary>
        ///
        /// <param name="language"></param>
        /// <param name="country"></param>
        public Locale(String language, String country)
            : this(language, country, "")
        {
        }

        /// <summary>
        /// Constructs a new Locale using the specified language, country, and
        /// variant codes.
        /// </summary>
        ///
        /// <param name="language"></param>
        /// <param name="country"></param>
        /// <param name="variant"></param>
        /// <exception cref="NullPointerException">if <c>language</c>, <c>country</c> or<c>variant</c> is <c>null</c>.</exception>
        public Locale(String language, String country, String variant)
        {
            if (language == null || country == null || variant == null)
            {
                throw new NullReferenceException();
            }
            if (language.Length == 0 && country.Length == 0)
            {
                languageCode = "";
                countryCode = "";
                variantCode = variant;
                return;
            }
            this.uLocale = new ULocale(language, country, variant);
            languageCode = uLocale.GetLanguage();
            // Map new language codes to the obsolete language
            // codes so the correct resource bundles will be used.
            if (languageCode.Equals("he"))
            {//$NON-NLS-1$
                languageCode = "iw"; //$NON-NLS-1$
            }
            else if (languageCode.Equals("id"))
            {//$NON-NLS-1$
                languageCode = "in"; //$NON-NLS-1$
            }
            else if (languageCode.Equals("yi"))
            {//$NON-NLS-1$
                languageCode = "ji"; //$NON-NLS-1$
            }

            // countryCode is defined in ASCII character set
            countryCode = (country.Length != 0) ? uLocale.GetCountry() : "";

            // Work around for be compatible with RI
            variantCode = variant;
        }

        /// <summary>
        /// Answers a new Locale with the same language, country and variant codes as
        /// this Locale.
        /// </summary>
        ///
        /// <returns>a shallow copy of this Locale</returns>
        /// <seealso cref="T:System.ICloneable"/>
        public Object Clone()
        {
            try
            {
                return base.MemberwiseClone();
            }
            catch (Exception e)
            {
                return null;
            }
        }

        /// <summary>
        /// Compares the specified object to this Locale and answer if they are
        /// equal. The object must be an instance of Locale and have the same
        /// language, country and variant.
        /// </summary>
        ///
        /// <param name="object">the object to compare with this object</param>
        /// <returns>true if the specified object is equal to this Locale, false
        /// otherwise</returns>
        /// <seealso cref="M:System.Collections.Locale.HashCode"/>
        public override bool Equals(Object obj0)
        {
            if (obj0 == (Object)this)
            {
                return true;
            }
            if (obj0 is Locale)
            {
                Locale o = (Locale)obj0;
                return languageCode.Equals(o.languageCode)
                        && countryCode.Equals(o.countryCode)
                        && variantCode.Equals(o.variantCode);
            }
            return false;
        }

        static internal Locale[] Find(String prefix)
        {
            int last = prefix.LastIndexOf('/');
            String thePackage = prefix.Substring(0, (last + 1) - (0));
            int length = prefix.Length;
            String classPrefix = prefix.Substring(last + 1, (length) - (last + 1));
            ILOG.J2CsMapping.Collections.Generics.ISet<String> result = new HashedSet<String>();
            ILOG.J2CsMapping.Util.StringTokenizer paths = new ILOG.J2CsMapping.Util.StringTokenizer(System.Environment.GetEnvironmentVariable("org.apache.harmony.boot.class.path"), System.Environment.GetEnvironmentVariable("path.separator")); //$NON-NLS-1$//$NON-NLS-2$
            while (paths.HasMoreTokens())
            {
                String nextToken = paths.NextToken();
                DirectoryInfo directory = new DirectoryInfo(nextToken);
                if (directory.Exists)
                {
                    if (System.IO.Directory.Exists(directory.Name))
                    {
                        String path;
                        try
                        {
                            path = directory.FullName;
                        }
                        catch (IOException e)
                        {
                            continue;
                        }
                        DirectoryInfo newDir;
                        if (path[path.Length - 1] == Path.PathSeparator)
                        {
                            newDir = new DirectoryInfo(path + thePackage);
                        }
                        else
                        {
                            newDir = new DirectoryInfo(path + Path.PathSeparator
                                    + thePackage);
                        }
                        if (System.IO.Directory.Exists(newDir.Name))
                        {
                            FileInfo[] list = newDir.GetFiles();
                            for (int i = 0; i < list.Length; i++)
                            {
                                FileInfo file = list[i];
                                String name = file.Name;
                                if (name.StartsWith(classPrefix)
                                        && name.EndsWith(".class"))
                                { //$NON-NLS-1$
                                    ILOG.J2CsMapping.Collections.Generics.Collections.Add(result, name.Substring(0, (name.Length - 6) - (0)));
                                }
                            }
                        }

                    }
                    else
                    {
                        // Handle ZIP/JAR files.
                        try
                        {
                            /*ZipPackage zip = new ZipPackage(directory);
                            IIterator<ZipPackagePart> entries = zip.Entries();
                            while (entries.HasNext()) {
                                ZipPackagePart e_0 = entries.Next();
                                String name_1 = e_0.GetName();
                                if (name_1.StartsWith(prefix)
                                        && name_1.EndsWith(".class")) {//$NON-NLS-1$
                                    ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,name_1.Substring(last + 1,(name_1.Length - 6)-(last + 1)));
                                }
                            }*/
                            //zip.Close();
                        }
                        catch (IOException e_2)
                        {
                            // Empty
                        }
                    }
                }
            }
            Locale[] locales = new Locale[result.Count];
            int i_3 = 0;
            /* foreach */
            foreach (String name_4 in result)
            {
                int index = name_4.IndexOf('_');
                int nextIndex = name_4.IndexOf('_', index + 1);
                if (nextIndex == -1)
                {
                    locales[i_3++] = new Locale(name_4.Substring(index + 1, (name_4.Length) - (index + 1)), ""); //$NON-NLS-1$
                }
                else
                {
                    String language = name_4.Substring(index + 1, (nextIndex) - (index + 1));
                    String variant;
                    if ((index = name_4.IndexOf('_', nextIndex + 1)) == -1)
                    {
                        variant = ""; //$NON-NLS-1$
                        index = name_4.Length;
                    }
                    else
                    {
                        variant = name_4.Substring(index + 1, (name_4.Length) - (index + 1));
                    }
                    String country = name_4.Substring(nextIndex + 1, (index) - (nextIndex + 1));
                    locales[i_3++] = new Locale(language, country, variant);
                }
            }
            return locales;
        }

        /// <summary>
        /// Gets the list of installed Locales.
        /// </summary>
        ///
        /// <returns>an array of Locale</returns>
        public static Locale[] GetAvailableLocales()
        {
            ULocale[] ulocales = IBM.ICU.Util.ULocale.GetAvailableLocales();
            Locale[] locales = new Locale[ulocales.Length];
            for (int i = 0; i < locales.Length; i++)
            {
                locales[i] = ulocales[i].ToLocale();
            }
            return locales;
        }

        /// <summary>
        /// Gets the country code for this Locale.
        /// </summary>
        ///
        /// <returns>a country code</returns>
        public String GetCountry()
        {
            return countryCode;
        }

        /// <summary>
        /// Gets the default Locale.
        /// </summary>
        ///
        /// <returns>the default Locale</returns>
        public static Locale GetDefault()
        {
            return defaultLocale;
        }

        /// <summary>
        /// Gets the full country name in the default Locale for the country code of
        /// this Locale. If there is no matching country name, the country code is
        /// returned.
        /// </summary>
        ///
        /// <returns>a country name</returns>
        public String GetDisplayCountry()
        {
            return GetDisplayCountry(GetDefault());
        }

        /// <summary>
        /// Gets the full country name in the specified Locale for the country code
        /// of this Locale. If there is no matching country name, the country code is
        /// returned.
        /// </summary>
        ///
        /// <param name="locale">the Locale</param>
        /// <returns>a country name</returns>
        public String GetDisplayCountry(Locale locale)
        {
            return IBM.ICU.Util.ULocale.ForLocale(this).GetDisplayCountry(
                    IBM.ICU.Util.ULocale.ForLocale(locale));
        }

        /// <summary>
        /// Gets the full language name in the default Locale for the language code
        /// of this Locale. If there is no matching language name, the language code
        /// is returned.
        /// </summary>
        ///
        /// <returns>a language name</returns>
        public String GetDisplayLanguage()
        {
            return GetDisplayLanguage(GetDefault());
        }

        /// <summary>
        /// Gets the full language name in the specified Locale for the language code
        /// of this Locale. If there is no matching language name, the language code
        /// is returned.
        /// </summary>
        ///
        /// <param name="locale">the Locale</param>
        /// <returns>a language name</returns>
        public String GetDisplayLanguage(Locale locale)
        {
            return IBM.ICU.Util.ULocale.ForLocale(this).GetDisplayLanguage(
                    IBM.ICU.Util.ULocale.ForLocale(locale));
        }

        /// <summary>
        /// Gets the full language, country, and variant names in the default Locale
        /// for the codes of this Locale.
        /// </summary>
        ///
        /// <returns>a Locale name</returns>
        public String GetDisplayName()
        {
            return GetDisplayName(GetDefault());
        }

        /// <summary>
        /// Gets the full language, country, and variant names in the specified
        /// Locale for the codes of this Locale.
        /// </summary>
        ///
        /// <param name="locale">the Locale</param>
        /// <returns>a Locale name</returns>
        public String GetDisplayName(Locale locale)
        {
            int count = 0;
            StringBuilder buffer = new StringBuilder();
            if (languageCode.Length > 0)
            {
                buffer.Append(GetDisplayLanguage(locale));
                count++;
            }
            if (countryCode.Length > 0)
            {
                if (count == 1)
                {
                    buffer.Append(" ("); //$NON-NLS-1$
                }
                buffer.Append(GetDisplayCountry(locale));
                count++;
            }
            if (variantCode.Length > 0)
            {
                if (count == 1)
                {
                    buffer.Append(" ("); //$NON-NLS-1$
                }
                else if (count == 2)
                {
                    buffer.Append(","); //$NON-NLS-1$
                }
                buffer.Append(GetDisplayVariant(locale));
                count++;
            }
            if (count > 1)
            {
                buffer.Append(")"); //$NON-NLS-1$
            }
            return buffer.ToString();
        }

        /// <summary>
        /// Gets the full variant name in the default Locale for the variant code of
        /// this Locale. If there is no matching variant name, the variant code is
        /// returned.
        /// </summary>
        ///
        /// <returns>a variant name</returns>
        public String GetDisplayVariant()
        {
            return GetDisplayVariant(GetDefault());
        }

        /// <summary>
        /// Gets the full variant name in the specified Locale for the variant code
        /// of this Locale. If there is no matching variant name, the variant code is
        /// returned.
        /// </summary>
        ///
        /// <param name="locale">the Locale</param>
        /// <returns>a variant name</returns>
        public String GetDisplayVariant(Locale locale)
        {
            return IBM.ICU.Util.ULocale.ForLocale(this).GetDisplayVariant(
                    IBM.ICU.Util.ULocale.ForLocale(locale));
        }

        /// <summary>
        /// Gets the three letter ISO country code which corresponds to the country
        /// code for this Locale.
        /// </summary>
        ///
        /// <returns>a three letter ISO language code</returns>
        /// <exception cref="MissingResourceException">when there is no matching three letter ISO country code</exception>
        public String GetISO3Country()
        {
            return IBM.ICU.Util.ULocale.ForLocale(this).GetISO3Country();
        }

        /// <summary>
        /// Gets the three letter ISO language code which corresponds to the language
        /// code for this Locale.
        /// </summary>
        ///
        /// <returns>a three letter ISO language code</returns>
        /// <exception cref="MissingResourceException">when there is no matching three letter ISO language code</exception>
        public String GetISO3Language()
        {
            return IBM.ICU.Util.ULocale.ForLocale(this).GetISO3Language();
        }

        /// <summary>
        /// Gets the list of two letter ISO country codes which can be used as the
        /// country code for a Locale.
        /// </summary>
        ///
        /// <returns>an array of String</returns>
        public static String[] GetISOCountries()
        {
            return IBM.ICU.Util.ULocale.GetISOCountries();
        }

        /// <summary>
        /// Gets the list of two letter ISO language codes which can be used as the
        /// language code for a Locale.
        /// </summary>
        ///
        /// <returns>an array of String</returns>
        public static String[] GetISOLanguages()
        {
            return IBM.ICU.Util.ULocale.GetISOLanguages();
        }

        /// <summary>
        /// Gets the language code for this Locale.
        /// </summary>
        ///
        /// <returns>a language code</returns>
        public String GetLanguage()
        {
            return languageCode;
        }

        /// <summary>
        /// Gets the variant code for this Locale.
        /// </summary>
        ///
        /// <returns>a variant code</returns>
        public String GetVariant()
        {
            return variantCode;
        }

        /// <summary>
        /// Answers an integer hash code for the receiver. Objects which are equal
        /// answer the same value for this method.
        /// </summary>
        ///
        /// <returns>the receiver's hash</returns>
        /// <seealso cref="M:System.Collections.Locale.Equals(System.Object)"/>
        [MethodImpl(MethodImplOptions.Synchronized)]
        public override int GetHashCode()
        {
            return countryCode.GetHashCode() + languageCode.GetHashCode()
                    + variantCode.GetHashCode();
        }

        /// <summary>
        /// Sets the default Locale to the specified Locale.
        /// </summary>
        ///
        /// <param name="locale">the new default Locale</param>
        /// <exception cref="SecurityException">when there is a security manager which does not allow thisoperation</exception>
        [MethodImpl(MethodImplOptions.Synchronized)]
        public static void SetDefault(Locale locale)
        {
            if (locale != null)
            {
                /*IlrSecurityManager security = new ILOG.J2CsMapping.Security.IlrSecurityManager();
                if (security != null) {
                    security.CheckPermission(setLocalePermission);
                }*/
                defaultLocale = locale;
            }
            else
            {
                throw new NullReferenceException();
            }
        }

        /// <summary>
        /// Answers the string representation of this Locale.
        /// </summary>
        ///
        /// <returns>the string representation of this Locale</returns>
        public sealed override String ToString()
        {
            StringBuilder result = new StringBuilder();
            result.Append(languageCode);
            if (countryCode.Length > 0)
            {
                result.Append('_');
                result.Append(countryCode);
            }
            if (variantCode.Length > 0 && result.Length > 0)
            {
                if (0 == countryCode.Length)
                {
                    result.Append("__"); //$NON-NLS-1$
                }
                else
                {
                    result.Append('_');
                }
                result.Append(variantCode);
            }
            return result.ToString();
        }

        /*private static readonly ObjectStreamField[] serialPersistentFields = {
                new ObjectStreamField("country", typeof(String)), //$NON-NLS-1$
                new ObjectStreamField("hashcode", typeof(Int32)), //$NON-NLS-1$
                new ObjectStreamField("language", typeof(String)), //$NON-NLS-1$
                new ObjectStreamField("variant", typeof(String)) }; //$NON-NLS-1$
	
        private void WriteObject(IlObjectOutputStream stream) {
            ObjectOutputStream.PutField fields = stream.PutFields();
            fields.Put("country", countryCode); //$NON-NLS-1$
            fields.Put("hashcode", -1); //$NON-NLS-1$
            fields.Put("language", languageCode); //$NON-NLS-1$
            fields.Put("variant", variantCode); //$NON-NLS-1$
            stream.WriteFields();
        }
	
        private void ReadObject(IlObjectInputStream stream) {
            ObjectInputStream.GetField fields = stream.ReadFields();
            countryCode = (String) fields.Get("country", ""); //$NON-NLS-1$//$NON-NLS-2$
            languageCode = (String) fields.Get("language", ""); //$NON-NLS-1$//$NON-NLS-2$
            variantCode = (String) fields.Get("variant", ""); //$NON-NLS-1$//$NON-NLS-2$
        }*/

        static Locale()
        {
            String language = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName;
            String region = "US";
            String variant = "";
            defaultLocale = new Locale(language, region, variant);
        }
    }
}
