/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 11/30/10 3:38 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace ILOG.J2CsMapping.RegEx {
	
	using ILOG.J2CsMapping.Collections;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
     using ILOG.J2CsMapping.Util;
     using ILOG.J2CsMapping.Collections.Generics;
     using System.Resources;
     using System.Reflection;
     using System.Globalization;
	
	/// <summary>
	/// This class represents character classes, i.e. 
	/// sets of character either predefined or user defined.
	/// Note, this class represent token, not node, so being 
	/// constructed by lexer.
	/// </summary>
	///
	abstract internal class AbstractCharClass : SpecialToken {
		public AbstractCharClass() {
			this.lowHighSurrogates = new BitSet(SURROGATE_CARDINALITY);
			this.charClassWithoutSurrogates = null;
			this.charClassWithSurrogates = null;
			this.mayContainSupplCodepoints = false;
		}
	
		protected internal bool alt;
	
		protected internal bool altSurrogates;
	
		//Character.MAX_SURROGATE - Character.MIN_SURROGATE + 1
		static internal int SURROGATE_CARDINALITY = 2048;
	
		internal BitSet lowHighSurrogates;
	
		internal AbstractCharClass charClassWithoutSurrogates;
	
		internal AbstractCharClass charClassWithSurrogates;
	
		static internal AbstractCharClass.PredefinedCharacterClasses  charClasses = new AbstractCharClass.PredefinedCharacterClasses ();
	
		/*
		 * Indicates if this class may contain supplementary Unicode codepoints.
		 * If this flag is specified it doesn't mean that this class contains
		 * supplementary characters but may contain.
		 */
		protected internal bool mayContainSupplCodepoints;
	
		/// <summary>
		/// Returns true if this char class contains character specified;
		/// </summary>
		///
		/// <param name="ch">character to check;</param>
		abstract public bool Contains(int ch);
	
		/// <summary>
		/// Returns BitSet representing this character class or <c>null</c>
		/// if this character class does not have character representation;
		/// </summary>
		///
		/// <returns>bitset</returns>
		protected internal virtual BitSet GetBits() {
			return null;
		}
	
		protected internal virtual BitSet GetLowHighSurrogates() {
			return lowHighSurrogates;
		}
	
		public bool HasLowHighSurrogates() {
			return (altSurrogates) ? lowHighSurrogates.NextClearBit(0) < SURROGATE_CARDINALITY
					: lowHighSurrogates.NextSetBit(0) < SURROGATE_CARDINALITY;
		}
	
		public bool MayContainSupplCodepoints() {
			return mayContainSupplCodepoints;
		}
	
		public override int GetType() {
			return ILOG.J2CsMapping.RegEx.SpecialToken.TOK_CHARCLASS;
		}
	
		public virtual AbstractCharClass GetInstance() {
			return this;
		}
	
		public AbstractCharClass GetSurrogates() {
	
			if (charClassWithSurrogates == null) {
				BitSet lHS = GetLowHighSurrogates();
	
				charClassWithSurrogates = new AbstractCharClass.Anonymous_C17 (lHS);
				charClassWithSurrogates.SetNegative(this.altSurrogates);
			}
	
			return charClassWithSurrogates;
		}
	
		public AbstractCharClass GetWithoutSurrogates() {
			if (charClassWithoutSurrogates == null) {
				BitSet lHS = GetLowHighSurrogates();
				AbstractCharClass thisClass = this;
	
				charClassWithoutSurrogates = new AbstractCharClass.Anonymous_C16 (lHS, thisClass);
				charClassWithoutSurrogates.SetNegative(IsNegative());
				charClassWithoutSurrogates.mayContainSupplCodepoints = mayContainSupplCodepoints;
			}
	
			return charClassWithoutSurrogates;
		}
	
		public virtual bool HasUCI() {
			return false;
		}
	
		/// <summary>
		/// Sets this CharClass to negative form, i.e. if they will add some
		/// characters and after that set this class to negative it will accept all
		/// the characters except previously set ones.
		/// Although this method will not alternate all the already set characters,
		/// just overall meaning of the class.
		/// </summary>
		///
		/// <seealso cref="M:ILOG.J2CsMapping.RegEx.AbstractCharClass.Contains(System.Int32)"/>
		/// <seealso cref="M:ILOG.J2CsMapping.RegEx.AbstractCharClass.Intersect(ILOG.J2CsMapping.RegEx.CharClass)"/>
		/// <seealso cref="M:ILOG.J2CsMapping.RegEx.AbstractCharClass.Union(ILOG.J2CsMapping.RegEx.CharClass)"/>
		public AbstractCharClass SetNegative(bool value_ren) {
			if (alt ^ value_ren) {
				alt = !alt;
				altSurrogates = !altSurrogates;
			}
			if (!mayContainSupplCodepoints) {
				mayContainSupplCodepoints = true;
			}
			return this;
		}
	
		public bool IsNegative() {
			return alt;
		}
	
		// -----------------------------------------------------------------
		// Static methods and predefined classes
		// -----------------------------------------------------------------
	
		public static bool Intersects(int ch1, int ch2) {
			return ch1 == ch2;
		}
	
		public static bool Intersects(AbstractCharClass cc, int ch) {
			return cc.Contains(ch);
		}
	
		public static bool Intersects(AbstractCharClass cc1,
				AbstractCharClass cc2) {
			if (cc1.GetBits() == null || cc2.GetBits() == null)
				return true;
			return cc1.GetBits().Intersects(cc2.GetBits());
		}
	
		public static AbstractCharClass GetPredefinedClass(String name,
				bool negative) {
			return ((AbstractCharClass.LazyCharClass ) charClasses.GetObject(name)).GetValue(negative);
		}
	
		public sealed class Anonymous_C17 : AbstractCharClass {
			private readonly BitSet lHS;
	
			public Anonymous_C17(BitSet lHS_0) {
				this.lHS = lHS_0;
			}
	
			public override bool Contains(int ch) {
                int index = ch - Character.MIN_SURROGATE;
	
				return ((index >= 0) && (index < ILOG.J2CsMapping.RegEx.AbstractCharClass.SURROGATE_CARDINALITY)) ? this.altSurrogates
						^ lHS.Get(index)
						: false;
			}
		}
	
		public sealed class Anonymous_C16 : AbstractCharClass {
			private readonly BitSet lHS;
			private readonly AbstractCharClass thisClass;
	
			public Anonymous_C16(BitSet lHS_0, AbstractCharClass thisClass_1) {
				this.lHS = lHS_0;
				this.thisClass = thisClass_1;
			}
	
			public override bool Contains(int ch) {
                int index = ch - Character.MIN_SURROGATE;
	
				bool containslHS = ((index >= 0) && (index < ILOG.J2CsMapping.RegEx.AbstractCharClass.SURROGATE_CARDINALITY)) ? this.altSurrogates
						^ lHS.Get(index)
						: false;
	
				return thisClass.Contains(ch) && !containslHS;
			}
		}
	
		abstract internal class LazyCharClass {
			public LazyCharClass() {
				this.posValue = null;
				this.negValue = null;
			}
	
			internal AbstractCharClass posValue;
	
			internal AbstractCharClass negValue;
	
			public AbstractCharClass GetValue(bool negative) {
				if (!negative && posValue == null) {
					posValue = ComputeValue();
				} else if (negative && negValue == null) {
					negValue = ComputeValue().SetNegative(true);
				}
				if (!negative)
					return posValue;
				return negValue;
			}
	
			public abstract AbstractCharClass ComputeValue();
		}
	
		internal class LazyDigit : AbstractCharClass.LazyCharClass  {
            public override AbstractCharClass ComputeValue()
            {
				return new CharClass().Add('0', '9');
			}
		}
	
		internal class LazyNonDigit : AbstractCharClass.LazyDigit  {
			public override  AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = base.ComputeValue().SetNegative(true);
	
				chCl.mayContainSupplCodepoints = true;
				return chCl;
			}
		}
	
		internal class LazySpace : AbstractCharClass.LazyCharClass  {
			public override AbstractCharClass ComputeValue() {
				/* 9-13 - \t\n\x0B\f\r; 32 - ' ' */
				return new CharClass().Add(9, 13).Add(32);
			}
		}
	
		internal class LazyNonSpace : AbstractCharClass.LazySpace  {
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = base.ComputeValue().SetNegative(true);
	
				chCl.mayContainSupplCodepoints = true;
				return chCl;
			}
		}
	
		internal class LazyWord : AbstractCharClass.LazyCharClass  {
			public override AbstractCharClass ComputeValue() {
				return new CharClass().Add('a', 'z').Add('A', 'Z').Add('0', '9')
						.Add('_');
			}
		}
	
		internal class LazyNonWord : AbstractCharClass.LazyWord  {
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = base.ComputeValue().SetNegative(true);
	
				chCl.mayContainSupplCodepoints = true;
				return chCl;
			}
		}
	
		internal class LazyLower : AbstractCharClass.LazyCharClass  {
			public override AbstractCharClass ComputeValue() {
				return new CharClass().Add('a', 'z');
			}
		}
	
		internal class LazyUpper : AbstractCharClass.LazyCharClass  {
			public override AbstractCharClass ComputeValue() {
				return new CharClass().Add('A', 'Z');
			}
		}
	
		internal class LazyASCII : AbstractCharClass.LazyCharClass  {
			public override AbstractCharClass ComputeValue() {
				return new CharClass().Add(0x00, 0x7F);
			}
		}
	
		internal class LazyAlpha : AbstractCharClass.LazyCharClass  {
			public override AbstractCharClass ComputeValue() {
				return new CharClass().Add('a', 'z').Add('A', 'Z');
			}
		}
	
		internal class LazyAlnum : AbstractCharClass.LazyAlpha  {
			public override AbstractCharClass ComputeValue() {
				return ((CharClass) base.ComputeValue()).Add('0', '9');
			}
		}
	
		internal class LazyPunct : AbstractCharClass.LazyCharClass  {
			public override AbstractCharClass ComputeValue() {
				/* Punctuation !"#$%&'()*+,-./:;<=>?@ [\]^_` {|}~ */
				return new CharClass().Add(0x21, 0x40).Add(0x5B, 0x60)
						.Add(0x7B, 0x7E);
			}
		}
	
		internal class LazyGraph : AbstractCharClass.LazyAlnum  {
			public override AbstractCharClass ComputeValue() {
				/* plus punctuation */
				return ((CharClass) base.ComputeValue()).Add(0x21, 0x40)
						.Add(0x5B, 0x60).Add(0x7B, 0x7E);
			}
		}
	
		internal class LazyPrint : AbstractCharClass.LazyGraph  {
			public  override AbstractCharClass ComputeValue() {
				return ((CharClass) base.ComputeValue()).Add(0x20);
			}
		}
	
		internal class LazyBlank : AbstractCharClass.LazyCharClass  {
			public  override AbstractCharClass ComputeValue() {
				return new CharClass().Add(' ').Add('\t');
			}
		}
	
		internal class LazyCntrl : AbstractCharClass.LazyCharClass  {
			public  override AbstractCharClass ComputeValue() {
				return new CharClass().Add(0x00, 0x1F).Add(0x7F);
			}
		}
	
		internal class LazyXDigit : AbstractCharClass.LazyCharClass  {
			public override AbstractCharClass ComputeValue() {
				return new CharClass().Add('0', '9').Add('a', 'f').Add('A', 'F');
			}
		}
	
		internal class LazyRange : AbstractCharClass.LazyCharClass  {
			internal int start, end;
	
			public LazyRange(int start_0, int end_1) {
				this.start = start_0;
				this.end = end_1;
			}
	
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = new CharClass().Add(start, end);
				return chCl;
			}
		}
	
		internal class LazySpecialsBlock : AbstractCharClass.LazyCharClass  {
			public override AbstractCharClass ComputeValue() {
				return new CharClass().Add(0xFEFF, 0xFEFF).Add(0xFFF0, 0xFFFD);
			}
		}
	
		internal class LazyCategoryScope : AbstractCharClass.LazyCharClass  {
			internal int category;
	
			internal bool mayContainSupplCodepoints;
	
			internal bool containsAllSurrogates;
	
			public LazyCategoryScope(int cat, bool mayContainSupplCodepoints_0) {
				this.mayContainSupplCodepoints = mayContainSupplCodepoints_0;
				this.category = cat;
			}
	
			public LazyCategoryScope(int cat, bool mayContainSupplCodepoints_0,
					bool containsAllSurrogates_1) {
				this.containsAllSurrogates = containsAllSurrogates_1;
				this.mayContainSupplCodepoints = mayContainSupplCodepoints_0;
				this.category = cat;
			}
	
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = new UnicodeCategoryScope(category);
				if (containsAllSurrogates) {
					chCl.lowHighSurrogates.Set(0, ILOG.J2CsMapping.RegEx.AbstractCharClass.SURROGATE_CARDINALITY);
				}
	
				chCl.mayContainSupplCodepoints = mayContainSupplCodepoints;
				return chCl;
			}
		}
	
		internal class LazyCategory : AbstractCharClass.LazyCharClass  {
			internal int category;
	
			internal bool mayContainSupplCodepoints;
	
			internal bool containsAllSurrogates;
	
			public LazyCategory(int cat, bool mayContainSupplCodepoints_0) {
				this.mayContainSupplCodepoints = mayContainSupplCodepoints_0;
				this.category = cat;
			}
	
			public LazyCategory(int cat, bool mayContainSupplCodepoints_0,
					bool containsAllSurrogates_1) {
				this.containsAllSurrogates = containsAllSurrogates_1;
				this.mayContainSupplCodepoints = mayContainSupplCodepoints_0;
				this.category = cat;
			}
	
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = new UnicodeCategory(category);
				if (containsAllSurrogates) {
					chCl.lowHighSurrogates.Set(0, ILOG.J2CsMapping.RegEx.AbstractCharClass.SURROGATE_CARDINALITY);
				}
				chCl.mayContainSupplCodepoints = mayContainSupplCodepoints;
				;
				return chCl;
			}
		}
	
		internal class LazyJavaLowerCase : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C15 : AbstractCharClass {
				public override bool Contains(int ch) {
                    return Character.IsLowerCase(ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaLowerCase.Anonymous_C15 ();
	
				chCl.mayContainSupplCodepoints = true;
				return chCl;
			}
		}
	
		internal class LazyJavaUpperCase : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C14 : AbstractCharClass {
				public override bool Contains(int ch) {
                    return Character.IsUpperCase(ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaUpperCase.Anonymous_C14 ();
	
				chCl.mayContainSupplCodepoints = true;
				return chCl;
			}
		}
	
		internal class LazyJavaWhitespace : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C13 : AbstractCharClass {
				public override bool Contains(int ch) {
                    return Character.IsWhitespace(ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				return new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaWhitespace.Anonymous_C13 ();
			}
		}
	
		internal class LazyJavaMirrored : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C12 : AbstractCharClass {
				public override bool Contains(int ch) {
                    return Character.IsMirrored(ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				return new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaMirrored.Anonymous_C12 ();
			}
		}
	
		internal class LazyJavaDefined : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C11 : AbstractCharClass {
				public override bool Contains(int ch) {
                    return Character.IsDefined(ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaDefined.Anonymous_C11 ();
				chCl.lowHighSurrogates.Set(0, ILOG.J2CsMapping.RegEx.AbstractCharClass.SURROGATE_CARDINALITY);
	
				chCl.mayContainSupplCodepoints = true;
				return chCl;
			}
		}
	
		internal class LazyJavaDigit : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C10 : AbstractCharClass {
				public override bool Contains(int ch) {
					return System.Char.IsDigit((char) ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaDigit.Anonymous_C10 ();
	
				chCl.mayContainSupplCodepoints = true;
				return chCl;
			}
		}
	
		internal class LazyJavaIdentifierIgnorable : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C9 : AbstractCharClass {
				public override bool Contains(int ch) {
                    return Character.IsIdentifierIgnorable(ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaIdentifierIgnorable.Anonymous_C9 ();
	
				chCl.mayContainSupplCodepoints = true;
				return chCl;
			}
		}
	
		internal class LazyJavaISOControl : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C8 : AbstractCharClass {
				public override bool Contains(int ch) {
                    return Character.IsISOControl(ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				return new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaISOControl.Anonymous_C8 ();
			}
		}
	
		internal class LazyJavaJavaIdentifierPart : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C7 : AbstractCharClass {
				public override bool Contains(int ch) {
                    return Character.IsJavaIdentifierPart(ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaJavaIdentifierPart.Anonymous_C7 ();
	
				chCl.mayContainSupplCodepoints = true;
				return chCl;
			}
		}
	
		internal class LazyJavaJavaIdentifierStart : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C6 : AbstractCharClass {
				public override bool Contains(int ch) {
                    return Character.IsJavaIdentifierStart(ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaJavaIdentifierStart.Anonymous_C6 ();
	
				chCl.mayContainSupplCodepoints = true;
				return chCl;
			}
		}
	
		internal class LazyJavaLetter : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C5 : AbstractCharClass {
				public override bool Contains(int ch) {
                    return Character.IsLetter(ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaLetter.Anonymous_C5 ();
	
				chCl.mayContainSupplCodepoints = true;
				return chCl;
			}
		}
	
		internal class LazyJavaLetterOrDigit : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C4 : AbstractCharClass {
				public override bool Contains(int ch) {
                    return Character.IsLetterOrDigit(ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaLetterOrDigit.Anonymous_C4 ();
	
				chCl.mayContainSupplCodepoints = true;
				return chCl;
			}
		}
	
		internal class LazyJavaSpaceChar : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C3 : AbstractCharClass {
				public override bool Contains(int ch) {
                    return Character.IsSpaceChar(ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				return new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaSpaceChar.Anonymous_C3 ();
			}
		}
	
		internal class LazyJavaTitleCase : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C2 : AbstractCharClass {
				public override bool Contains(int ch) {
                    return Character.IsTitleCase(ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				return new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaTitleCase.Anonymous_C2 ();
			}
		}
	
		internal class LazyJavaUnicodeIdentifierPart : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C1 : AbstractCharClass {
				public override bool Contains(int ch) {
                    return Character.IsUnicodeIdentifierPart(ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaUnicodeIdentifierPart.Anonymous_C1 ();
	
				chCl.mayContainSupplCodepoints = true;
				return chCl;
			}
		}
	
		internal class LazyJavaUnicodeIdentifierStart : AbstractCharClass.LazyCharClass  {
			public sealed class Anonymous_C0 : AbstractCharClass {
				public override bool Contains(int ch) {
                    return Character.IsUnicodeIdentifierStart(ch);
				}
			}
	
			public override AbstractCharClass ComputeValue() {
				AbstractCharClass chCl = new ILOG.J2CsMapping.RegEx.AbstractCharClass.LazyJavaUnicodeIdentifierStart.Anonymous_C0 ();
	
				chCl.mayContainSupplCodepoints = true;
				return chCl;
			}
		}
	
		/// <summary>
		/// character classes generated from 
		/// http://www.unicode.org/reports/tr18/
		/// http://www.unicode.org/Public/4.1.0/ucd/Blocks.txt
		/// </summary>
		///
		internal sealed class PredefinedCharacterClasses : ListResourceBundle {
			static internal AbstractCharClass.LazyCharClass  space = new AbstractCharClass.LazySpace ();
	
			static internal AbstractCharClass.LazyCharClass  digit = new AbstractCharClass.LazyDigit ();
	
			static internal readonly Object[][] contents = {
					new Object[] { "Lower", new AbstractCharClass.LazyLower () },
					new Object[] { "Upper", new AbstractCharClass.LazyUpper () },
					new Object[] { "ASCII", new AbstractCharClass.LazyASCII () },
					new Object[] { "Alpha", new AbstractCharClass.LazyAlpha () },
					new Object[] { "Digit", digit },
					new Object[] { "Alnum", new AbstractCharClass.LazyAlnum () },
					new Object[] { "Punct", new AbstractCharClass.LazyPunct () },
					new Object[] { "Graph", new AbstractCharClass.LazyGraph () },
					new Object[] { "Print", new AbstractCharClass.LazyPrint () },
					new Object[] { "Blank", new AbstractCharClass.LazyBlank () },
					new Object[] { "Cntrl", new AbstractCharClass.LazyCntrl () },
					new Object[] { "XDigit", new AbstractCharClass.LazyXDigit () },
					new Object[] { "javaLowerCase", new AbstractCharClass.LazyJavaLowerCase () },
					new Object[] { "javaUpperCase", new AbstractCharClass.LazyJavaUpperCase () },
					new Object[] { "javaWhitespace", new AbstractCharClass.LazyJavaWhitespace () },
					new Object[] { "javaMirrored", new AbstractCharClass.LazyJavaMirrored () },
					new Object[] { "javaDefined", new AbstractCharClass.LazyJavaDefined () },
					new Object[] { "javaDigit", new AbstractCharClass.LazyJavaDigit () },
					new Object[] { "javaIdentifierIgnorable",
							new AbstractCharClass.LazyJavaIdentifierIgnorable () },
					new Object[] { "javaISOControl", new AbstractCharClass.LazyJavaISOControl () },
					new Object[] { "javaJavaIdentifierPart",
							new AbstractCharClass.LazyJavaJavaIdentifierPart () },
					new Object[] { "javaJavaIdentifierStart",
							new AbstractCharClass.LazyJavaJavaIdentifierStart () },
					new Object[] { "javaLetter", new AbstractCharClass.LazyJavaLetter () },
					new Object[] { "javaLetterOrDigit", new AbstractCharClass.LazyJavaLetterOrDigit () },
					new Object[] { "javaSpaceChar", new AbstractCharClass.LazyJavaSpaceChar () },
					new Object[] { "javaTitleCase", new AbstractCharClass.LazyJavaTitleCase () },
					new Object[] { "javaUnicodeIdentifierPart",
							new AbstractCharClass.LazyJavaUnicodeIdentifierPart () },
					new Object[] { "javaUnicodeIdentifierStart",
							new AbstractCharClass.LazyJavaUnicodeIdentifierStart () },
					new Object[] { "Space", space },
					new Object[] { "w", new AbstractCharClass.LazyWord () },
					new Object[] { "W", new AbstractCharClass.LazyNonWord () },
					new Object[] { "s", space },
					new Object[] { "S", new AbstractCharClass.LazyNonSpace () },
					new Object[] { "d", digit },
					new Object[] { "D", new AbstractCharClass.LazyNonDigit () },
					new Object[] { "BasicLatin", new AbstractCharClass.LazyRange (0x0000, 0x007F) },
					new Object[] { "Latin-1Supplement",
							new AbstractCharClass.LazyRange (0x0080, 0x00FF) },
					new Object[] { "LatinExtended-A", new AbstractCharClass.LazyRange (0x0100, 0x017F) },
					new Object[] { "LatinExtended-B", new AbstractCharClass.LazyRange (0x0180, 0x024F) },
					new Object[] { "IPAExtensions", new AbstractCharClass.LazyRange (0x0250, 0x02AF) },
					new Object[] { "SpacingModifierLetters",
							new AbstractCharClass.LazyRange (0x02B0, 0x02FF) },
					new Object[] { "CombiningDiacriticalMarks",
							new AbstractCharClass.LazyRange (0x0300, 0x036F) },
					new Object[] { "Greek", new AbstractCharClass.LazyRange (0x0370, 0x03FF) },
					new Object[] { "Cyrillic", new AbstractCharClass.LazyRange (0x0400, 0x04FF) },
					new Object[] { "CyrillicSupplement",
							new AbstractCharClass.LazyRange (0x0500, 0x052F) },
					new Object[] { "Armenian", new AbstractCharClass.LazyRange (0x0530, 0x058F) },
					new Object[] { "Hebrew", new AbstractCharClass.LazyRange (0x0590, 0x05FF) },
					new Object[] { "Arabic", new AbstractCharClass.LazyRange (0x0600, 0x06FF) },
					new Object[] { "Syriac", new AbstractCharClass.LazyRange (0x0700, 0x074F) },
					new Object[] { "ArabicSupplement",
							new AbstractCharClass.LazyRange (0x0750, 0x077F) },
					new Object[] { "Thaana", new AbstractCharClass.LazyRange (0x0780, 0x07BF) },
					new Object[] { "Devanagari", new AbstractCharClass.LazyRange (0x0900, 0x097F) },
					new Object[] { "Bengali", new AbstractCharClass.LazyRange (0x0980, 0x09FF) },
					new Object[] { "Gurmukhi", new AbstractCharClass.LazyRange (0x0A00, 0x0A7F) },
					new Object[] { "Gujarati", new AbstractCharClass.LazyRange (0x0A80, 0x0AFF) },
					new Object[] { "Oriya", new AbstractCharClass.LazyRange (0x0B00, 0x0B7F) },
					new Object[] { "Tamil", new AbstractCharClass.LazyRange (0x0B80, 0x0BFF) },
					new Object[] { "Telugu", new AbstractCharClass.LazyRange (0x0C00, 0x0C7F) },
					new Object[] { "Kannada", new AbstractCharClass.LazyRange (0x0C80, 0x0CFF) },
					new Object[] { "Malayalam", new AbstractCharClass.LazyRange (0x0D00, 0x0D7F) },
					new Object[] { "Sinhala", new AbstractCharClass.LazyRange (0x0D80, 0x0DFF) },
					new Object[] { "Thai", new AbstractCharClass.LazyRange (0x0E00, 0x0E7F) },
					new Object[] { "Lao", new AbstractCharClass.LazyRange (0x0E80, 0x0EFF) },
					new Object[] { "Tibetan", new AbstractCharClass.LazyRange (0x0F00, 0x0FFF) },
					new Object[] { "Myanmar", new AbstractCharClass.LazyRange (0x1000, 0x109F) },
					new Object[] { "Georgian", new AbstractCharClass.LazyRange (0x10A0, 0x10FF) },
					new Object[] { "HangulJamo", new AbstractCharClass.LazyRange (0x1100, 0x11FF) },
					new Object[] { "Ethiopic", new AbstractCharClass.LazyRange (0x1200, 0x137F) },
					new Object[] { "EthiopicSupplement",
							new AbstractCharClass.LazyRange (0x1380, 0x139F) },
					new Object[] { "Cherokee", new AbstractCharClass.LazyRange (0x13A0, 0x13FF) },
					new Object[] { "UnifiedCanadianAboriginalSyllabics",
							new AbstractCharClass.LazyRange (0x1400, 0x167F) },
					new Object[] { "Ogham", new AbstractCharClass.LazyRange (0x1680, 0x169F) },
					new Object[] { "Runic", new AbstractCharClass.LazyRange (0x16A0, 0x16FF) },
					new Object[] { "Tagalog", new AbstractCharClass.LazyRange (0x1700, 0x171F) },
					new Object[] { "Hanunoo", new AbstractCharClass.LazyRange (0x1720, 0x173F) },
					new Object[] { "Buhid", new AbstractCharClass.LazyRange (0x1740, 0x175F) },
					new Object[] { "Tagbanwa", new AbstractCharClass.LazyRange (0x1760, 0x177F) },
					new Object[] { "Khmer", new AbstractCharClass.LazyRange (0x1780, 0x17FF) },
					new Object[] { "Mongolian", new AbstractCharClass.LazyRange (0x1800, 0x18AF) },
					new Object[] { "Limbu", new AbstractCharClass.LazyRange (0x1900, 0x194F) },
					new Object[] { "TaiLe", new AbstractCharClass.LazyRange (0x1950, 0x197F) },
					new Object[] { "NewTaiLue", new AbstractCharClass.LazyRange (0x1980, 0x19DF) },
					new Object[] { "KhmerSymbols", new AbstractCharClass.LazyRange (0x19E0, 0x19FF) },
					new Object[] { "Buginese", new AbstractCharClass.LazyRange (0x1A00, 0x1A1F) },
					new Object[] { "PhoneticExtensions",
							new AbstractCharClass.LazyRange (0x1D00, 0x1D7F) },
					new Object[] { "PhoneticExtensionsSupplement",
							new AbstractCharClass.LazyRange (0x1D80, 0x1DBF) },
					new Object[] { "CombiningDiacriticalMarksSupplement",
							new AbstractCharClass.LazyRange (0x1DC0, 0x1DFF) },
					new Object[] { "LatinExtendedAdditional",
							new AbstractCharClass.LazyRange (0x1E00, 0x1EFF) },
					new Object[] { "GreekExtended", new AbstractCharClass.LazyRange (0x1F00, 0x1FFF) },
					new Object[] { "GeneralPunctuation",
							new AbstractCharClass.LazyRange (0x2000, 0x206F) },
					new Object[] { "SuperscriptsandSubscripts",
							new AbstractCharClass.LazyRange (0x2070, 0x209F) },
					new Object[] { "CurrencySymbols", new AbstractCharClass.LazyRange (0x20A0, 0x20CF) },
					new Object[] { "CombiningMarksforSymbols",
							new AbstractCharClass.LazyRange (0x20D0, 0x20FF) },
					new Object[] { "LetterlikeSymbols",
							new AbstractCharClass.LazyRange (0x2100, 0x214F) },
					new Object[] { "NumberForms", new AbstractCharClass.LazyRange (0x2150, 0x218F) },
					new Object[] { "Arrows", new AbstractCharClass.LazyRange (0x2190, 0x21FF) },
					new Object[] { "MathematicalOperators",
							new AbstractCharClass.LazyRange (0x2200, 0x22FF) },
					new Object[] { "MiscellaneousTechnical",
							new AbstractCharClass.LazyRange (0x2300, 0x23FF) },
					new Object[] { "ControlPictures", new AbstractCharClass.LazyRange (0x2400, 0x243F) },
					new Object[] { "OpticalCharacterRecognition",
							new AbstractCharClass.LazyRange (0x2440, 0x245F) },
					new Object[] { "EnclosedAlphanumerics",
							new AbstractCharClass.LazyRange (0x2460, 0x24FF) },
					new Object[] { "BoxDrawing", new AbstractCharClass.LazyRange (0x2500, 0x257F) },
					new Object[] { "BlockElements", new AbstractCharClass.LazyRange (0x2580, 0x259F) },
					new Object[] { "GeometricShapes", new AbstractCharClass.LazyRange (0x25A0, 0x25FF) },
					new Object[] { "MiscellaneousSymbols",
							new AbstractCharClass.LazyRange (0x2600, 0x26FF) },
					new Object[] { "Dingbats", new AbstractCharClass.LazyRange (0x2700, 0x27BF) },
					new Object[] { "MiscellaneousMathematicalSymbols-A",
							new AbstractCharClass.LazyRange (0x27C0, 0x27EF) },
					new Object[] { "SupplementalArrows-A",
							new AbstractCharClass.LazyRange (0x27F0, 0x27FF) },
					new Object[] { "BraillePatterns", new AbstractCharClass.LazyRange (0x2800, 0x28FF) },
					new Object[] { "SupplementalArrows-B",
							new AbstractCharClass.LazyRange (0x2900, 0x297F) },
					new Object[] { "MiscellaneousMathematicalSymbols-B",
							new AbstractCharClass.LazyRange (0x2980, 0x29FF) },
					new Object[] { "SupplementalMathematicalOperators",
							new AbstractCharClass.LazyRange (0x2A00, 0x2AFF) },
					new Object[] { "MiscellaneousSymbolsandArrows",
							new AbstractCharClass.LazyRange (0x2B00, 0x2BFF) },
					new Object[] { "Glagolitic", new AbstractCharClass.LazyRange (0x2C00, 0x2C5F) },
					new Object[] { "Coptic", new AbstractCharClass.LazyRange (0x2C80, 0x2CFF) },
					new Object[] { "GeorgianSupplement",
							new AbstractCharClass.LazyRange (0x2D00, 0x2D2F) },
					new Object[] { "Tifinagh", new AbstractCharClass.LazyRange (0x2D30, 0x2D7F) },
					new Object[] { "EthiopicExtended",
							new AbstractCharClass.LazyRange (0x2D80, 0x2DDF) },
					new Object[] { "SupplementalPunctuation",
							new AbstractCharClass.LazyRange (0x2E00, 0x2E7F) },
					new Object[] { "CJKRadicalsSupplement",
							new AbstractCharClass.LazyRange (0x2E80, 0x2EFF) },
					new Object[] { "KangxiRadicals", new AbstractCharClass.LazyRange (0x2F00, 0x2FDF) },
					new Object[] { "IdeographicDescriptionCharacters",
							new AbstractCharClass.LazyRange (0x2FF0, 0x2FFF) },
					new Object[] { "CJKSymbolsandPunctuation",
							new AbstractCharClass.LazyRange (0x3000, 0x303F) },
					new Object[] { "Hiragana", new AbstractCharClass.LazyRange (0x3040, 0x309F) },
					new Object[] { "Katakana", new AbstractCharClass.LazyRange (0x30A0, 0x30FF) },
					new Object[] { "Bopomofo", new AbstractCharClass.LazyRange (0x3100, 0x312F) },
					new Object[] { "HangulCompatibilityJamo",
							new AbstractCharClass.LazyRange (0x3130, 0x318F) },
					new Object[] { "Kanbun", new AbstractCharClass.LazyRange (0x3190, 0x319F) },
					new Object[] { "BopomofoExtended",
							new AbstractCharClass.LazyRange (0x31A0, 0x31BF) },
					new Object[] { "CJKStrokes", new AbstractCharClass.LazyRange (0x31C0, 0x31EF) },
					new Object[] { "KatakanaPhoneticExtensions",
							new AbstractCharClass.LazyRange (0x31F0, 0x31FF) },
					new Object[] { "EnclosedCJKLettersandMonths",
							new AbstractCharClass.LazyRange (0x3200, 0x32FF) },
					new Object[] { "CJKCompatibility",
							new AbstractCharClass.LazyRange (0x3300, 0x33FF) },
					new Object[] { "CJKUnifiedIdeographsExtensionA",
							new AbstractCharClass.LazyRange (0x3400, 0x4DB5) },
					new Object[] { "YijingHexagramSymbols",
							new AbstractCharClass.LazyRange (0x4DC0, 0x4DFF) },
					new Object[] { "CJKUnifiedIdeographs",
							new AbstractCharClass.LazyRange (0x4E00, 0x9FFF) },
					new Object[] { "YiSyllables", new AbstractCharClass.LazyRange (0xA000, 0xA48F) },
					new Object[] { "YiRadicals", new AbstractCharClass.LazyRange (0xA490, 0xA4CF) },
					new Object[] { "ModifierToneLetters",
							new AbstractCharClass.LazyRange (0xA700, 0xA71F) },
					new Object[] { "SylotiNagri", new AbstractCharClass.LazyRange (0xA800, 0xA82F) },
					new Object[] { "HangulSyllables", new AbstractCharClass.LazyRange (0xAC00, 0xD7A3) },
					new Object[] { "HighSurrogates", new AbstractCharClass.LazyRange (0xD800, 0xDB7F) },
					new Object[] { "HighPrivateUseSurrogates",
							new AbstractCharClass.LazyRange (0xDB80, 0xDBFF) },
					new Object[] { "LowSurrogates", new AbstractCharClass.LazyRange (0xDC00, 0xDFFF) },
					new Object[] { "PrivateUseArea", new AbstractCharClass.LazyRange (0xE000, 0xF8FF) },
					new Object[] { "CJKCompatibilityIdeographs",
							new AbstractCharClass.LazyRange (0xF900, 0xFAFF) },
					new Object[] { "AlphabeticPresentationForms",
							new AbstractCharClass.LazyRange (0xFB00, 0xFB4F) },
					new Object[] { "ArabicPresentationForms-A",
							new AbstractCharClass.LazyRange (0xFB50, 0xFDFF) },
					new Object[] { "VariationSelectors",
							new AbstractCharClass.LazyRange (0xFE00, 0xFE0F) },
					new Object[] { "VerticalForms", new AbstractCharClass.LazyRange (0xFE10, 0xFE1F) },
					new Object[] { "CombiningHalfMarks",
							new AbstractCharClass.LazyRange (0xFE20, 0xFE2F) },
					new Object[] { "CJKCompatibilityForms",
							new AbstractCharClass.LazyRange (0xFE30, 0xFE4F) },
					new Object[] { "SmallFormVariants",
							new AbstractCharClass.LazyRange (0xFE50, 0xFE6F) },
					new Object[] { "ArabicPresentationForms-B",
							new AbstractCharClass.LazyRange (0xFE70, 0xFEFF) },
					new Object[] { "HalfwidthandFullwidthForms",
							new AbstractCharClass.LazyRange (0xFF00, 0xFFEF) },
					new Object[] { "all", new AbstractCharClass.LazyRange (0x00, 0x10FFFF) },
					new Object[] { "Specials", new AbstractCharClass.LazySpecialsBlock () },
					new Object[] { "Cn",
							new AbstractCharClass.LazyCategory (Character.UNASSIGNED, true) },
					new Object[] { "IsL", new AbstractCharClass.LazyCategoryScope (0x3E, true) },
					new Object[] {
							"Lu",
							new AbstractCharClass.LazyCategory (Character.UPPERCASE_LETTER,
									true) },
					new Object[] {
							"Ll",
							new AbstractCharClass.LazyCategory (Character.LOWERCASE_LETTER,
									true) },
					new Object[] {
							"Lt",
							new AbstractCharClass.LazyCategory (Character.TITLECASE_LETTER,
									false) },
					new Object[] {
							"Lm",
							new AbstractCharClass.LazyCategory (Character.MODIFIER_LETTER,
									false) },
					new Object[] {
							"Lo",
							new AbstractCharClass.LazyCategory (Character.OTHER_LETTER, true) },
					new Object[] { "IsM", new AbstractCharClass.LazyCategoryScope (0x1C0, true) },
					new Object[] {
							"Mn",
							new AbstractCharClass.LazyCategory (Character.NON_SPACING_MARK,
									true) },
					new Object[] {
							"Me",
							new AbstractCharClass.LazyCategory (Character.ENCLOSING_MARK,
									false) },
					new Object[] {
							"Mc",
							new AbstractCharClass.LazyCategory (
									Character.COMBINING_SPACING_MARK,
									true) },
					new Object[] { "N", new AbstractCharClass.LazyCategoryScope (0xE00, true) },
					new Object[] {
							"Nd",
							new AbstractCharClass.LazyCategory (
									Character.DECIMAL_DIGIT_NUMBER, true) },
					new Object[] {
							"Nl",
							new AbstractCharClass.LazyCategory (Character.LETTER_NUMBER,
									true) },
					new Object[] {
							"No",
							new AbstractCharClass.LazyCategory (Character.OTHER_NUMBER, true) },
					new Object[] { "IsZ", new AbstractCharClass.LazyCategoryScope (0x7000, false) },
					new Object[] {
							"Zs",
							new AbstractCharClass.LazyCategory (Character.SPACE_SEPARATOR,
									false) },
					new Object[] {
							"Zl",
							new AbstractCharClass.LazyCategory (Character.LINE_SEPARATOR,
									false) },
					new Object[] {
							"Zp",
							new AbstractCharClass.LazyCategory (
									Character.PARAGRAPH_SEPARATOR, false) },
					new Object[] { "IsC",
							new AbstractCharClass.LazyCategoryScope (0xF0000, true, true) },
					new Object[] { "Cc",
							new AbstractCharClass.LazyCategory (Character.CONTROL, false) },
					new Object[] { "Cf",
							new AbstractCharClass.LazyCategory (Character.FORMAT, true) },
					new Object[] { "Co",
							new AbstractCharClass.LazyCategory (Character.PRIVATE_USE, true) },
					new Object[] {
							"Cs",
							new AbstractCharClass.LazyCategory (Character.SURROGATE, false,
									true) },
					new Object[] {
							"IsP",
							new AbstractCharClass.LazyCategoryScope (
									(1 << Character.DASH_PUNCTUATION)
											| (1 << Character.START_PUNCTUATION)
											| (1 << Character.END_PUNCTUATION)
											| (1 << Character.CONNECTOR_PUNCTUATION)
											| (1 << Character.OTHER_PUNCTUATION)
											| (1 << Character.INITIAL_QUOTE_PUNCTUATION)
											| (1 << Character.FINAL_QUOTE_PUNCTUATION),
									true) },
					new Object[] {
							"Pd",
							new AbstractCharClass.LazyCategory (Character.DASH_PUNCTUATION ,
									false) },
					new Object[] {
							"Ps",
							new AbstractCharClass.LazyCategory (Character.START_PUNCTUATION ,
									false) },
					new Object[] {
							"Pe",
							new AbstractCharClass.LazyCategory (Character.END_PUNCTUATION ,
									false) },
					new Object[] {
							"Pc",
							new AbstractCharClass.LazyCategory (
									Character.CONNECTOR_PUNCTUATION ,
									false) },
					new Object[] {
							"Po",
							new AbstractCharClass.LazyCategory (Character.OTHER_PUNCTUATION ,
									true) },
					new Object[] { "IsS", new AbstractCharClass.LazyCategoryScope (0x7E000000, true) },
					new Object[] { "Sm",
							new AbstractCharClass.LazyCategory (Character.MATH_SYMBOL , true) },
					new Object[] {
							"Sc",
							new AbstractCharClass.LazyCategory (Character.CURRENCY_SYMBOL ,
									false) },
					new Object[] {
							"Sk",
							new AbstractCharClass.LazyCategory (Character.MODIFIER_SYMBOL ,
									false) },
					new Object[] {
							"So",
							new AbstractCharClass.LazyCategory (Character.OTHER_SYMBOL , true) },
					new Object[] {
							"Pi",
							new AbstractCharClass.LazyCategory (
									Character.INITIAL_QUOTE_PUNCTUATION ,
									false) },
					new Object[] {
							"Pf",
							new AbstractCharClass.LazyCategory (
									Character.FINAL_QUOTE_PUNCTUATION ,
									false) } };
	
			public override Object[][] GetContents() {
				return contents;
			}
		}
	}
}
