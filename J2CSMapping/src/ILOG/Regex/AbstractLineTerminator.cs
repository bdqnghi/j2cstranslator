/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 11/30/10 3:38 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace ILOG.J2CsMapping.RegEx {
	
	using ILOG.J2CsMapping.Text;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Line terminator factory
	/// </summary>
	///
	abstract internal class AbstractLineTerminator {
		public sealed class Anonymous_C1 : AbstractLineTerminator {
			public override bool IsLineTerminator(int ch) {
				return ch == '\n';
			}
	
			public override bool IsAfterLineTerminator(int ch, int ch2) {
				return ch == '\n';
			}
		}
	
		public sealed class Anonymous_C0 : AbstractLineTerminator {
			public override bool IsLineTerminator(int ch) {
				return (ch == '\n' || ch == '\r' || ch == '\u0085' || (ch | 1) == '\u2029');
			}
	
			public override bool IsAfterLineTerminator(int ch, int ch2) {
				return (ch == '\n' || ch == '\u0085' || (ch | 1) == '\u2029')
						|| (ch == '\r' && ch2 != '\n');
			}
		}
	
		static internal AbstractLineTerminator unixLT = null;
	
		static internal AbstractLineTerminator unicodeLT = null;
	
		public abstract bool IsLineTerminator(int ch);
	
		public abstract bool IsAfterLineTerminator(int ch1, int ch2);
	
		public static AbstractLineTerminator GetInstance(int flag) {
			if ((flag & Pattern.UNIX_LINES) != 0) {
				if (unixLT != null)
					return unixLT;
				unixLT = new AbstractLineTerminator.Anonymous_C1 ();
				return unixLT;
			} else {
				if (unicodeLT != null)
					return unicodeLT;
				unicodeLT = new AbstractLineTerminator.Anonymous_C0 ();
				return unicodeLT;
			}
		}
	}
}
