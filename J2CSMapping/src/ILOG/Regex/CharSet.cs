/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 11/30/10 3:38 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace ILOG.J2CsMapping.RegEx {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Represents node accepting single character.
	/// </summary>
	///
	internal class CharSet : LeafSet {
	
		private char ch;
	
		public CharSet(char ch_0) {
			this.ch = ((Char)0);
			this.ch = ch_0;
		}
	
		public override int CharCount() {
			return 1;
		}
	
		public override int Accepts(int strIndex, String testString) {
			return (this.ch == testString[strIndex]) ? 1 : -1;
		}
	
		public override int Find(int strIndex, String testString,
				MatchResultImpl matchResult) {
			if (testString  is  String) {
				String testStr = (String) testString;
				int strLength = matchResult.GetRightBound();
	
				while (strIndex < strLength) {
					strIndex = testStr.IndexOf(ch, strIndex);
					if (strIndex < 0)
						return -1;
					if (next.Matches(strIndex + 1, testString, matchResult) >= 0) {
						return strIndex;
					}
					strIndex++;
				}
	
				return -1;
			}
	
			return base.Find(strIndex,testString,matchResult);
		}
	
		public override int FindBack(int strIndex, int lastIndex, String testString,
				MatchResultImpl matchResult) {
			if (testString  is  String) {
				String testStr = (String) testString;
	
				while (lastIndex >= strIndex) {
					lastIndex = testStr.LastIndexOf(ch, lastIndex);
					if (lastIndex < 0 || lastIndex < strIndex) {
						return -1;
					}
	
					if (next.Matches(lastIndex + 1, testString, matchResult) >= 0) {
						return lastIndex;
					}
	
					lastIndex--;
				}
	
				return -1;
			}
	
			return base.FindBack(strIndex,lastIndex,testString,matchResult);
		}

        public override String GetName()
        {
			return "" + ch; //$NON-NLS-1$
		}
	
		protected internal char GetChar() {
			return ch;
		}
	
		public override bool First(AbstractSet set) {
			if (set  is  CharSet) {
				return ((CharSet) set).GetChar() == ch;
			} else if (set  is  RangeSet) {
				return ((RangeSet) set).Accepts(0, System.Char.ToString(ch)) > 0;
			} else if (set  is  SupplRangeSet) {
				return ((SupplRangeSet) set).Contains(ch);
			} else if (set  is  SupplCharSet) {
				return false;
			}
	
			return true;
		}
	}}
