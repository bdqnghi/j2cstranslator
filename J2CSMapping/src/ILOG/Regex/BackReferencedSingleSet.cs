/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 11/30/10 3:38 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace ILOG.J2CsMapping.RegEx {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Group node over subexpression w/o alternations. 
	/// This node is used if current group is referenced
	/// via backreference.
	/// </summary>
	///
	
	internal class BackReferencedSingleSet : SingleSet {
	
		/*
		 * This class is needed only for overwriting find()
		 * and findBack() methods of SingleSet class, which is being 
		 * back referenced. The following example explains the need
		 * for such substitution:  
		 * Let's consider the pattern ".*(.)\\1".
		 * Leading .* works as follows: finds line terminator and runs findBack 
		 * from that point. findBack method in its turn (in contrast to matches) 
		 * sets group boundaries on the back trace. Thus at the point we 
		 * try to match back reference(\\1) groups are not yet set.
		 *
		 * To fix this problem we replace backreferenced groups with instances of 
		 * this class, which will use matches instead of find; this will affect 
		 * performance, but ensure correctness of the match.
		 */
	
		public BackReferencedSingleSet(AbstractSet child, FSet fSet) : base(child, fSet) {
		}
	
		public BackReferencedSingleSet(SingleSet node) : base(node.kid, ((FSet)node.fSet)) {
		}
	
		public override int Find(int stringIndex, String testString,
				MatchResultImpl matchResult) {
			int res = 0;
			int lastIndex = matchResult.GetRightBound();
			int startSearch = stringIndex;
	
			for (; startSearch <= lastIndex; startSearch++) {
				int saveStart = matchResult.GetStart(groupIndex);
	
				matchResult.SetStart(groupIndex, startSearch);
				res = kid.Matches(startSearch, testString, matchResult);
				if (res >= 0) {
					res = startSearch;
					break;
				} else {
					matchResult.SetStart(groupIndex, saveStart);
				}
			}
	
			return res;
		}
	
		public override int FindBack(int stringIndex, int lastIndex,
				String testString, MatchResultImpl matchResult) {
			int res = 0;
			int startSearch = lastIndex;
	
			for (; startSearch >= stringIndex; startSearch--) {
				int saveStart = matchResult.GetStart(groupIndex);
	
				matchResult.SetStart(groupIndex, startSearch);
				res = kid.Matches(startSearch, testString, matchResult);
				if (res >= 0) {
					res = startSearch;
					break;
				} else {
					matchResult.SetStart(groupIndex, saveStart);
				}
			}
	
			return res;
		}
	
		/// <summary>
		/// This method is used for replacement backreferenced
		/// sets.
		/// </summary>
		///
		/// <param name="prev">- node who references to this node</param>
		public override JointSet ProcessBackRefReplacement() {
			return null;
		}
	}
}
