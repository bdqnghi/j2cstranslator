/* 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/1/10 3:36 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace ILOG.J2CsMapping.Text
{
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
    using ILOG.J2CsMapping.Formatting;
	
	/// <summary>
	/// FieldPosition is used to identify fields in formatted Strings.
	/// </summary>
	///
	public class FieldPosition {
	
		private int myField, beginIndex, endIndex;
	
		private Format.Field myAttribute;
	
		/// <summary>
		/// Constructs a new FieldPosition on the specified field.
		/// </summary>
		///
		/// <param name="field">the field to identify</param>
		public FieldPosition(int field) {
			myField = field;
		}
	
		/// <summary>
		/// Constructs a new FieldPosition on the specified Field attribute.
		/// </summary>
		///
		/// <param name="attribute">the field attribute to identify</param>
		public FieldPosition(Format.Field attribute) {
			myAttribute = attribute;
			myField = -1;
		}
	
		/// <summary>
		/// Constructs a new FieldPosition on the specified Field attribute and field
		/// id.
		/// </summary>
		///
		/// <param name="attribute">the field attribute to identify</param>
		/// <param name="field">the field to identify</param>
		public FieldPosition(Format.Field attribute, int field) {
			myAttribute = attribute;
			myField = field;
		}
	
		internal void Clear() {
			beginIndex = endIndex = 0;
		}
	
		/// <summary>
		/// Compares the specified object to this FieldPosition and answer if they
		/// are equal. The object must be an instance of FieldPosition with the same
		/// field, begin index and end index.
		/// </summary>
		///
		/// <param name="object">the object to compare with this object</param>
		/// <returns>true if the specified object is equal to this fieldPosition,
		/// false otherwise</returns>
		/// <seealso cref="M:ILOG.J2CsMapping.Text2.FieldPosition.HashCode"/>
		public override bool Equals(Object obj0) {
			if (!(obj0   is  FieldPosition)) {
				return false;
			}
			FieldPosition pos = (FieldPosition) obj0;
			return myField == pos.myField && myAttribute == pos.myAttribute
					&& beginIndex == pos.beginIndex && endIndex == pos.endIndex;
		}
	
		/// <summary>
		/// Answers the index of the beginning of the field.
		/// </summary>
		///
		/// <returns>the first index of the field</returns>
		public int GetBeginIndex() {
			return beginIndex;
		}
	
		/// <summary>
		/// Answers the index one past the end of the field.
		/// </summary>
		///
		/// <returns>one past the index of the last character in the field</returns>
		public int GetEndIndex() {
			return endIndex;
		}
	
		/// <summary>
		/// Answers the field which is being identified.
		/// </summary>
		///
		/// <returns>the field</returns>
		public int GetField() {
			return myField;
		}
	
		/// <summary>
		/// Answers the attribute which is being identified.
		/// </summary>
		///
		/// <returns>the field</returns>
		public Format.Field GetFieldAttribute() {
			return myAttribute;
		}
	
		/// <summary>
		/// Answers an integer hash code for the receiver. Objects which are equal
		/// answer the same value for this method.
		/// </summary>
		///
		/// <returns>the receiver's hash</returns>
		/// <seealso cref="M:ILOG.J2CsMapping.Text2.FieldPosition.Equals(System.Object)"/>
		public override int GetHashCode() {
			int attributeHash = (myAttribute == null) ? 0 : myAttribute.GetHashCode();
			return attributeHash + myField * 10 + beginIndex * 100 + endIndex;
		}
	
		/// <summary>
		/// Sets the index of the beginning of the field.
		/// </summary>
		///
		/// <param name="index">the index of the first character in the field</param>
		public void SetBeginIndex(int index) {
			beginIndex = index;
		}
	
		/// <summary>
		/// Sets the index of the end of the field.
		/// </summary>
		///
		/// <param name="index">one past the index of the last character in the field</param>
		public void SetEndIndex(int index) {
			endIndex = index;
		}
	
		/// <summary>
		/// Answers the string representation of this FieldPosition.
		/// </summary>
		///
		/// <returns>the string representation of this FieldPosition</returns>
		public override String ToString() {
			return GetType().FullName + "[attribute=" + myAttribute + ", field=" //$NON-NLS-1$ //$NON-NLS-2$
					+ myField + ", beginIndex=" + beginIndex + ", endIndex=" //$NON-NLS-1$ //$NON-NLS-2$
					+ endIndex + "]"; //$NON-NLS-1$
		}
	}
}
