/*
 *******************************************************************************
 * Copyright (C) 2004-2007, International Business Machines Corporation and         *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 10:46 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Charset {
	
	using IBM.ICU.Text;
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Reflection;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	/// <summary>
	/// To use, override the abstract and the protected methods as necessary. Tests
	/// boilerplate invariants: <br>
	/// a.equals(a) <br>
	/// !a.equals(null) <br>
	/// if a.equals(b) then <br>
	/// (1) a.hashCode() == b.hashCode // note: the reverse is not necessarily true. <br>
	/// (2) a functions in all aspects as equivalent to b <br>
	/// (3) b.equals(a) <br>
	/// if b = clone(a) <br>
	/// (1) b.equals(a), and the above checks <br>
	/// (2) if mutable(a), then a.clone() != a // note: the reverse is not
	/// necessarily true.
	/// </summary>
	///
	public abstract class TestBoilerplate : TestFmwk {
	
	    public void TestMain() {
	        IList list = new LinkedList();
	        while (_addTestObject(list)) {
	        }
	        Object[] testArray = ILOG.J2CsMapping.Collections.Collections.ToArray(list);
	        for (int i = 0; i < testArray.Length; ++i) {
	            // logln("Testing " + i);
	            Object a = testArray[i];
	            int aHash = a.GetHashCode();
	            if (a.Equals(null)) {
	                Errln("Equality/Null invariant fails: " + i);
	            }
	            if (!a.Equals(a)) {
	                Errln("Self-Equality invariant fails: " + i);
	            }
	            Object b;
	            if (_canClone(a)) {
	                b = _clone(a);
	                if (b == a) {
	                    if (_isMutable(a)) {
	                        Errln("Clone/Mutability invariant fails: " + i);
	                    }
	                } else {
	                    if (!a.Equals(b)) {
	                        Errln("Clone/Equality invariant fails: " + i);
	                    }
	                }
	                _checkEquals(i, -1, a, aHash, b);
	            }
	            for (int j = i; j < testArray.Length; ++j) {
	                b = testArray[j];
	                if (a.Equals(b))
	                    _checkEquals(i, j, a, aHash, b);
	            }
	        }
	    }
	
	    private void _checkEquals(int i, int j, Object a, int aHash, Object b) {
	        int bHash = b.GetHashCode();
	        if (!b.Equals(a))
	            Errln("Equality/Symmetry", i, j);
	        if (aHash != bHash)
	            Errln("Equality/Hash", i, j);
	        if (a != b && !_hasSameBehavior(a, b)) {
	            Errln("Equality/Equivalence", i, j);
	        }
	    }
	
	    private void Errln(String title, int i, int j) {
	        if (j < 0)
	            Errln("Clone/" + title + "invariant fails: " + i);
	        else
	            Errln(title + "invariant fails: " + i + "," + j);
	    }
	
	    /// <summary>
	    /// Must be overridden to check whether a and be behave the same
	    /// </summary>
	    ///
	    protected abstract internal bool _hasSameBehavior(Object a, Object b);
	
	    /// <summary>
	    /// This method will be called multiple times until false is returned. The
	    /// results should be a mixture of different objects of the same type: some
	    /// equal and most not equal. The subclasser controls how many are produced
	    /// (recommend about 100, based on the size of the objects and how costly
	    /// they are to run this test on. The running time grows with the square of
	    /// the count. NOTE: this method will only be called if the objects test as
	    /// equal.
	    /// </summary>
	    ///
	    protected abstract internal bool _addTestObject(IList c);
	
	    /// <summary>
	    /// Override if the tested objects are mutable. <br>
	    /// Since Java doesn't tell us, we need a function to tell if so. The default
	    /// is true, so must be overridden if not.
	    /// </summary>
	    ///
	    protected internal bool _isMutable(Object a) {
	        return true;
	    }
	
	    /// <summary>
	    /// Override if the tested objects can be cloned.
	    /// </summary>
	    ///
	    protected internal bool _canClone(Object a) {
	        return true;
	    }
	
	    /// <summary>
	    /// Produce a clone of the object. Tries two methods (a) clone (b)
	    /// constructor Must be overridden if _canClone returns true and the above
	    /// methods don't work.
	    /// </summary>
	    ///
	    /// <param name="a"></param>
	    /// <returns>clone</returns>
	    protected internal Object _clone(Object a) {
	        Type aClass = a.GetType();
	        try {
	            MethodInfo cloner = ILOG.J2CsMapping.Reflect.Helper.GetMethod(aClass,"clone",(Type[]) null);
	            return ILOG.J2CsMapping.Reflect.Helper.Invoke(cloner,a,(Object[]) null);
	        } catch (AmbiguousMatchException e) {
	            ConstructorInfo constructor = ILOG.J2CsMapping.Reflect.Helper.GetConstructor(aClass,new Type[] { aClass });
	            return ILOG.J2CsMapping.Reflect.Helper.Invoke(constructor,new Object[] { a });
	        }
	    }
	
	    /* Utilities */
	    public static bool VerifySetsIdentical(AbstractTestLog here,
	            UnicodeSet set1, UnicodeSet set2) {
	        if (set1.Equals(set2))
	            return true;
	        here.Errln("Sets differ:");
	        here.Errln("UnicodeMap - HashMap");
	        here.Errln(new UnicodeSet(set1).RemoveAll(set2).ToPattern(true));
	        here.Errln("HashMap - UnicodeMap");
	        here.Errln(new UnicodeSet(set2).RemoveAll(set1).ToPattern(true));
	        return false;
	    }
	
	    public static bool VerifySetsIdentical(AbstractTestLog here,
	            ILOG.J2CsMapping.Collections.ISet values1, ILOG.J2CsMapping.Collections.ISet values2) {
	        if (values1.Equals(values2))
	            return true;
	        ILOG.J2CsMapping.Collections.ISet temp;
	        here.Errln("Values differ:");
	        here.Errln("UnicodeMap - HashMap");
	        temp = new SortedSet(values1);
	        temp.RemoveAll(values2);
	        here.Errln(Show(temp));
	        here.Errln("HashMap - UnicodeMap");
	        temp = new SortedSet(values2);
	        temp.RemoveAll(values1);
	        here.Errln(Show(temp));
	        return false;
	    }
	
	    public static String Show(IDictionary m) {
	        StringBuilder buffer = new StringBuilder();
	        for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(new ILOG.J2CsMapping.Collections.ListSet(m.Keys).GetEnumerator()); it.HasNext();) {
	            Object key = it.Next();
	            buffer.Append(key + "=>" + ILOG.J2CsMapping.Collections.Collections.Get(m,key) + "\r\n");
	        }
	        return buffer.ToString();
	    }
	
	    public static UnicodeSet GetSet(IDictionary m, Object value_ren) {
	        UnicodeSet result = new UnicodeSet();
	        for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(new ILOG.J2CsMapping.Collections.ListSet(m.Keys).GetEnumerator()); it.HasNext();) {
	            Object key = it.Next();
	            Object val = ILOG.J2CsMapping.Collections.Collections.Get(m,key);
	            if (!val.Equals(value_ren))
	                continue;
	            result.Add(((Int32) key));
	        }
	        return result;
	    }
	
	    public static String Show(ICollection c) {
	        StringBuilder buffer = new StringBuilder();
	        for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(c.GetEnumerator()); it.HasNext();) {
	            buffer.Append(it.Next() + "\r\n");
	        }
	        return buffer.ToString();
	    }
	
	}
}
