/*
 *******************************************************************************
 * Copyright (C) 1996-2005, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Charset {
	
	using IBM.ICU.Util;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	/// <summary>
	/// A pseudo <c>Calendar</c> that is useful for testing new calendars. A
	/// <c>TestCase</c> object is used to hold the field and millisecond values
	/// that the calendar should have at one particular instant in time. The
	/// applyFields and applyTime methods are used to apply these settings to the
	/// calendar object being tested, and the equals and fieldsEqual methods are used
	/// to ensure that the calendar has ended up in the right state.
	/// </summary>
	///
	public class TestCase {
	
	    // ------------------------------------------------------------------
	    // Pseudo-Calendar fields and methods
	    // ------------------------------------------------------------------
	
	    protected internal int[] fields;
	
	    protected internal bool[] isSet;
	
	    protected internal long time;
	
	    protected internal void Set(int field, int value_ren) {
	        fields[field] = value_ren;
	        isSet[field] = true;
	    }
	
	    protected internal int Get(int field) {
	        return fields[field];
	    }
	
	    protected internal bool IsSet(int field) {
	        return isSet[field];
	    }
	
	    protected internal void SetTime(DateTime d) {
	        time = (d.Ticks/10000);
	    }
	
	    public DateTime GetTime() {
	        return new DateTime((time)*10000);
	    }
	
	    /// <summary>
	    /// Return a String representation of this test case's time.
	    /// </summary>
	    ///
	    public override String ToString() {
	        return DowToString(Get(IBM.ICU.Util.Calendar.DAY_OF_WEEK)) + " "
	                + Get(IBM.ICU.Util.Calendar.YEAR) + "/" + (Get(IBM.ICU.Util.Calendar.MONTH) + 1) + "/"
	                + Get(IBM.ICU.Util.Calendar.DATE);
	    }
	
	    private static readonly String[] DOW_NAMES = { "Sun", "Mon", "Tue", "Wed",
	            "Thu", "Fri", "Sat" };
	
	    public static String DowToString(int dow) {
	        --dow;
	        return (dow < 0 || dow > 6) ? ("<DOW " + dow + ">") : DOW_NAMES[dow];
	    }
	
	    /// <summary>
	    /// Initialize a TestCase object using a julian day number and the
	    /// corresponding fields for the calendar being tested.
	    /// </summary>
	    ///
	    /// <param name="era">The ERA field of tested calendar on the given julian day</param>
	    /// <param name="year">The YEAR field of tested calendar on the given julian day</param>
	    /// <param name="month">The MONTH (1-based) field of tested calendar on the givenjulian day</param>
	    /// <param name="day">The DAY_OF_MONTH field of tested calendar on the given julianday</param>
	    /// <param name="dayOfWeek">The DAY_OF_WEEK field of tested calendar on the given julianday</param>
	    /// <param name="hour">The HOUR field of tested calendar on the given julian day</param>
	    /// <param name="min">The MINUTE field of tested calendar on the given julian day</param>
	    /// <param name="sec">The SECOND field of tested calendar on the given julian day</param>
	    public TestCase(double julian, int era, int year, int month, int day,
	            int dayOfWeek, int hour, int min, int sec) {
	        this.fields = new int[32];
	                this.isSet = new bool[32];
	        SetTime(ILOG.J2CsMapping.Util.DateUtil.DateFromJavaMillis((JULIAN_EPOCH + (long) (ONE_DAY * julian))));
	
	        Set(IBM.ICU.Util.Calendar.ERA, era);
	        Set(IBM.ICU.Util.Calendar.YEAR, year);
	        Set(IBM.ICU.Util.Calendar.MONTH, month - 1);
	        Set(IBM.ICU.Util.Calendar.DATE, day);
	        Set(IBM.ICU.Util.Calendar.DAY_OF_WEEK, dayOfWeek);
	        Set(IBM.ICU.Util.Calendar.HOUR, hour);
	        Set(IBM.ICU.Util.Calendar.MINUTE, min);
	        Set(IBM.ICU.Util.Calendar.SECOND, sec);
	    }
	
	    /// <summary>
	    /// Initialize a TestCase object using a Gregorian year/month/day and the
	    /// corresponding fields for the calendar being tested.
	    /// </summary>
	    ///
	    /// <param name="gregYear">The Gregorian year of the date to be tested</param>
	    /// <param name="gregMonth">The Gregorian month of the date to be tested</param>
	    /// <param name="gregDay">The Gregorian day of the month of the date to be tested</param>
	    /// <param name="era">The ERA field of tested calendar on the given gregorian date</param>
	    /// <param name="year">The YEAR field of tested calendar on the given gregorian date</param>
	    /// <param name="month">The MONTH (0-based) field of tested calendar on the givengregorian date</param>
	    /// <param name="day">The DAY_OF_MONTH field of tested calendar on the givengregorian date</param>
	    /// <param name="dayOfWeek">The DAY_OF_WEEK field of tested calendar on the givengregorian date</param>
	    /// <param name="hour">The HOUR field of tested calendar on the given gregorian date</param>
	    /// <param name="min">The MINUTE field of tested calendar on the given gregoriandate</param>
	    /// <param name="sec">The SECOND field of tested calendar on the given gregoriandate</param>
	    public TestCase(int gregYear, int gregMonth, int gregDay, int era,
	            int year, int month, int day, int dayOfWeek, int hour, int min,
	            int sec) {
	        this.fields = new int[32];
	                this.isSet = new bool[32];
	        GregorianCalendar greg = new GregorianCalendar(UTC, ILOG.J2CsMapping.Util.Locale.GetDefault());
	        greg.Clear();
	        greg.Set(gregYear, gregMonth - 1, gregDay);
	        SetTime(greg.GetTime());
	
	        Set(IBM.ICU.Util.Calendar.ERA, era);
	        Set(IBM.ICU.Util.Calendar.YEAR, year);
	        Set(IBM.ICU.Util.Calendar.MONTH, month - 1);
	        Set(IBM.ICU.Util.Calendar.DATE, day);
	        Set(IBM.ICU.Util.Calendar.DAY_OF_WEEK, dayOfWeek);
	        Set(IBM.ICU.Util.Calendar.HOUR, hour);
	        Set(IBM.ICU.Util.Calendar.MINUTE, min);
	        Set(IBM.ICU.Util.Calendar.SECOND, sec);
	    }
	
	    /// <summary>
	    /// For subclasses.
	    /// </summary>
	    ///
	    protected internal TestCase() {
	        this.fields = new int[32];
	        this.isSet = new bool[32];
	    }
	
	    /// <summary>
	    /// Apply this test case's field values to another calendar by calling its
	    /// set method for each field. This is useful in combination with the equal
	    /// method.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Charset.Calendar.Equals(System.Object)"/>
	    public void ApplyFields(Calendar c) {
	        for (int i = 0; i < c.GetFieldCount(); i++) {
	            if (IsSet(i)) {
	                c.Set(i, Get(i));
	            }
	        }
	    }
	
	    /// <summary>
	    /// Apply this test case's time in milliseconds to another calendar by
	    /// calling its setTime method. This is useful in combination with
	    /// fieldsEqual
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Charset.TestCase.FieldsEqual(null, null)"/>
	    public void ApplyTime(Calendar c) {
	        c.SetTime(new DateTime((time)*10000));
	    }
	
	    /// <summary>
	    /// Determine whether the fields of this calendar are the same as that of the
	    /// other calendar. This method is useful for determining whether the other
	    /// calendar's computeFields method works properly. For example:
	    /// <pre>
	    /// Calendar testCalendar = ...
	    /// TestCase case = ...
	    /// case.applyTime(testCalendar);
	    /// if (!case.fieldsEqual(testCalendar)) {
	    /// // Error!
	    /// }
	    /// </pre>
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Charset.TestCase.ApplyTime(null)"/>
	    public bool FieldsEqual(Calendar c, TestLog log) {
	        for (int i = 0; i < c.GetFieldCount(); i++) {
	            if (IsSet(i) && Get(i) != c.Get(i)) {
	                StringBuilder buf = new StringBuilder();
	                buf.Append("Fail: " + IBM.ICU.Charset.CalendarTest.FieldName(i) + " = "
	                        + c.Get(i) + ", expected " + Get(i));
	                for (int j = 0; j < c.GetFieldCount(); ++j) {
	                    if (IsSet(j)) {
	                        if (Get(j) == c.Get(j)) {
	                            buf.Append("\n  ok: " + IBM.ICU.Charset.CalendarTest.FieldName(j)
	                                    + " = " + c.Get(j));
	                        } else {
	                            buf.Append("\n  fail: " + IBM.ICU.Charset.CalendarTest.FieldName(j)
	                                    + " = " + c.Get(j) + ", expected " + Get(j));
	                        }
	                    }
	                }
	                log.Errln(buf.ToString());
	                return false;
	            }
	        }
	
	        return true;
	    }
	
	    /// <summary>
	    /// Determine whether time in milliseconds of this calendar is the same as
	    /// that of the other calendar. This method is useful for determining whether
	    /// the other calendar's computeTime method works properly. For example:
	    /// <pre>
	    /// Calendar testCalendar = ...
	    /// TestCase case = ...
	    /// case.applyFields(testCalendar);
	    /// if (!case.equals(testCalendar)) {
	    /// // Error!
	    /// }
	    /// </pre>
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Charset.TestCase.ApplyFields(null)"/>
	    public override bool Equals(Object obj) {
	        return time == (((Calendar) obj).GetTime().Ticks/10000);
	    }
	
	    protected internal const int ONE_SECOND = 1000;
	
	    protected internal const int ONE_MINUTE = 60 * ONE_SECOND;
	
	    protected internal const int ONE_HOUR = 60 * ONE_MINUTE;
	
	    protected internal const long ONE_DAY = 24 * ONE_HOUR;
	
	    protected internal const long JULIAN_EPOCH = -210866760000000L; // 1/1/4713 BC
	                                                                  // 12:00
	
	    public static readonly SimpleTimeZone UTC = new SimpleTimeZone(0, "GMT");
	}
}
