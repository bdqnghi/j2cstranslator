//##header J2SE15
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 10:46 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /*
 **********************************************************************
 * Copyright (c) 2006-2007, International Business Machines
 * Corporation and others.  All Rights Reserved.
 **********************************************************************
 * Created on 2006-4-21
 */
namespace IBM.ICU.Charset {
	
	using IBM.ICU.Impl;
	using IBM.ICU.Util;
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Resources;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Represents a collection of test data described in a UResourceBoundle file.
	/// The root of the UResourceBoundle file is a table resource, and it has one
	/// Info and one TestData sub-resources. The Info describes the data module
	/// itself. The TestData, which is a table resource, has a collection of test
	/// data.
	/// The test data is a named table resource which has Info, Settings, Headers,
	/// and Cases sub-resources.
	/// <pre>
	/// DataModule:table(nofallback){ 
	/// Info:table {} 
	/// TestData:table {
	/// entry_name:table{
	/// Info:table{}
	/// Settings:array{}
	/// Headers:array{}
	/// Cases:array{}
	/// }
	/// } 
	/// }
	/// </pre>
	/// The test data is expected to be fed to test code by following sequence
	/// for each setting in Setting{ prepare the setting for each test data in Cases{
	/// perform the test } }
	/// For detail of the specification, please refer to the code. The code is
	/// initially ported from "icu4c/source/tools/ctestfw/unicode/tstdtmod.h" and
	/// should be maintained parallelly.
	/// </summary>
	///
	internal class ResourceModule : TestDataModule {
	    internal const String INFO = "Info";
	
	    // private static final String DESCRIPTION = "Description";
	    // private static final String LONG_DESCRIPTION = "LongDescription";
	    private const String TEST_DATA = "TestData";
	
	    internal const String SETTINGS = "Settings";
	
	    internal const String HEADER = "Headers";
	
	    internal const String DATA = "Cases";
	
	    internal UResourceBundle res;
	
	    internal UResourceBundle info;
	
	    internal UResourceBundle defaultHeader;
	
	    internal UResourceBundle testData;
	
	    internal ResourceModule(String baseName, String localeName) {
	
	        res = (UResourceBundle) IBM.ICU.Util.UResourceBundle.GetBundleInstance(baseName,
	                localeName);
	        info = GetFromTable(res, INFO, IBM.ICU.Util.UResourceBundle.TABLE);
	        testData = GetFromTable(res, TEST_DATA, IBM.ICU.Util.UResourceBundle.TABLE);
	
	        try {
	            // unfortunately, actually, data can be either ARRAY or STRING
	            defaultHeader = GetFromTable(info, HEADER, new int[] {
	                    IBM.ICU.Util.UResourceBundle.ARRAY, IBM.ICU.Util.UResourceBundle.STRING });
	        } catch (MissingManifestResourceException e) {
	            defaultHeader = null;
	        }
	    }
	
	    public virtual String GetName() {
	        return res.GetKey();
	    }
	
	    public virtual TestDataModule_Constants.DataMap GetInfo() {
	        return new ResourceModule.UTableResource (info);
	    }
	
	    public virtual TestDataModule_Constants.TestData GetTestData(String testName) {
	        return new ResourceModule.UResourceTestData (this, defaultHeader, testData.Get(testName));
	    }
	
	    public virtual IIterator GetTestDataIterator() {
	        return new ResourceModule.Anonymous_C2 (this, testData);
	    }
	
	    public sealed class Anonymous_C2 : ResourceModule.IteratorAdapter {
	            private readonly ResourceModule outer_ResourceModule;
	    
	            
	            /// <param name="paramouter_ResourceModule"></param>
	            /// <param name="theRes"></param>
	            public Anonymous_C2(ResourceModule paramouter_ResourceModule,
	                    UResourceBundle theRes) : base(theRes) {
	                this.outer_ResourceModule = paramouter_ResourceModule;
	            }
	    
	            protected internal override Object PrepareNext(UResourceBundle nextRes) {
                    return new ResourceModule.UResourceTestData(outer_ResourceModule, outer_ResourceModule.defaultHeader, nextRes);
	            }
	        }
	
	    /// <summary>
	    /// To make UResourceBundleIterator works like Iterator and return various
	    /// data-driven test object for next() call
	    /// </summary>
	    ///
	    abstract internal class IteratorAdapter : IIterator {
	        private UResourceBundle res;
	
	        private UResourceBundleIterator itr;
	
	        private Object preparedNextElement;
	
	        // fix a strange behavior for UResourceBundleIterator for
	        // UResourceBundle.STRING. It support hasNext(), but does
	        // not support next() now.
	        //
	        // Use the iterated resource itself as the result from next() call
	        private bool isStrRes;
	
	        private bool isStrResPrepared; // for STRING resouce, we only
	                                                  // prepare once
	
	        internal IteratorAdapter(UResourceBundle theRes) {
	            this.preparedNextElement = null;
	            this.isStrRes = false;
	            this.isStrResPrepared = false;
	            IBM.ICU.Charset.ResourceModule.Assert_not(theRes == null);
	            res = theRes;
	            itr = ((ICUResourceBundle) res).GetIterator();
	            isStrRes = res.GetType() == IBM.ICU.Util.UResourceBundle.STRING;
	        }
	
	        public virtual void Remove() {
	            // do nothing
	        }
	
	        public bool HasNextForStrRes() {
	            IBM.ICU.Charset.ResourceModule.Assert_is(isStrRes);
	            IBM.ICU.Charset.ResourceModule.Assert_not(!isStrResPrepared && preparedNextElement != null);
	            if (isStrResPrepared && preparedNextElement != null)
	                return true;
	            if (isStrResPrepared && preparedNextElement == null)
	                return false; // only prepare once
	            IBM.ICU.Charset.ResourceModule.Assert_is(!isStrResPrepared && preparedNextElement == null);
	
	            try {
	                preparedNextElement = PrepareNext(res);
	                IBM.ICU.Charset.ResourceModule.Assert_not(preparedNextElement == null,
	                        "prepareNext() should not return null");
	                isStrResPrepared = true; // toggle the tag
	                return true;
	            } catch (TestDataModule_Constants.DataModuleFormatError e) {
	                // #if defined(FOUNDATION10) || defined(J2SE13)
	                // ## throw new RuntimeException(e.getMessage());
	                // #else
	                throw new Exception(e.Message, e);
	                // #endif
	            }
	        }
	
	        public virtual bool HasNext() {
	            if (isStrRes)
	                return HasNextForStrRes();
	
	            if (preparedNextElement != null)
	                return true;
	            UResourceBundle t = null;
	            if (itr.HasNext()) {
	                // Notice, other RuntimeException may be throwed
	                t = itr.Next();
	            } else {
	                return false;
	            }
	
	            try {
	                preparedNextElement = PrepareNext(t);
	                IBM.ICU.Charset.ResourceModule.Assert_not(preparedNextElement == null,
	                        "prepareNext() should not return null");
	                return true;
	            } catch (TestDataModule_Constants.DataModuleFormatError e) {
	                // Sadly, we throw RuntimeException also
	                // #if defined(FOUNDATION10) || defined(J2SE13)
	                // ## throw new RuntimeException(e.getMessage());
	                // #else
	                throw new Exception(e.Message, e);
	                // #endif
	            }
	        }
	
	        public virtual Object Next() {
	            if (HasNext()) {
	                Object t = preparedNextElement;
	                preparedNextElement = null;
	                return t;
	            } else {
	                throw new InvalidOperationException();
	            }
	        }
	
	        /// <summary>
	        /// To prepare data-driven test object for next() call, should not return
	        /// null
	        /// </summary>
	        ///
	        abstract protected internal Object PrepareNext(UResourceBundle nextRes);
	    
		#region AddedByTranslator
	
		object ILOG.J2CsMapping.Collections.IIterator.Next()
	            {
	                return this.Next();
	            }
	
		#endregion
	
	}
	
	    /// <summary>
	    /// Avoid use Java 1.4 language new assert keyword
	    /// </summary>
	    ///
	    static internal void Assert_is(bool eq, String msg) {
	        if (!eq)
	            throw new Exception("test code itself has error: " + msg);
	    }
	
	    static internal void Assert_is(bool eq) {
	        if (!eq)
	            throw new Exception("test code itself has error.");
	    }
	
	    static internal void Assert_not(bool eq, String msg) {
	        Assert_is(!eq, msg);
	    }
	
	    static internal void Assert_not(bool eq) {
	        Assert_is(!eq);
	    }
	
	    /// <summary>
	    /// Internal helper function to get resource with following add-on
	    /// 1. Assert the returned resource is never null. 2. Check the type of
	    /// resource.
	    /// The UResourceTypeMismatchException for various get() method is a
	    /// RuntimeException which can be silently bypassed. This behavior is a
	    /// trouble. One purpose of the class is to enforce format checking for
	    /// resource file. We don't want to the exceptions are silently bypassed and
	    /// spreaded to our customer's code.
	    /// Notice, the MissingResourceException for get() method is also a
	    /// RuntimeException. The caller functions should avoid sepread the execption
	    /// silently also. The behavior is modified because some resource are
	    /// optional and can be missed.
	    /// </summary>
	    ///
	    static internal UResourceBundle GetFromTable(UResourceBundle res_0, String key,
	            int expResType) {
	        return GetFromTable(res_0, key, new int[] { expResType });
	    }
	
	    static internal UResourceBundle GetFromTable(UResourceBundle res_0, String key,
	            int[] expResTypes) {
	        Assert_is(res_0 != null && key != null
	                && res_0.GetType() == IBM.ICU.Util.UResourceBundle.TABLE);
	        UResourceBundle t = res_0.Get(key);
	
	        Assert_not(t == null);
	        int type = t.GetType();
	        System.Array.Sort(expResTypes);
	        if (System.Array.BinarySearch(expResTypes, type) >= 0) {
	            return t;
	        } else {
	            // #if defined(FOUNDATION10) || defined(J2SE13)
	            // ## throw new DataModuleFormatError("Actual type " + t.getType() +
	            // " != expected types " + expResTypes + ".");
	            // #else
	            throw new TestDataModule_Constants.DataModuleFormatError(new UResourceTypeMismatchException(
	                    "Actual type " + t.GetType() + " != expected types "
	                            + expResTypes + "."));
	            // #endif
	        }
	    }
	
	    /// <summary>
	    /// Unfortunately, UResourceBundle is unable to treat one string as string
	    /// array. This function return a String[] from UResourceBundle, regardless
	    /// it is an array or a string
	    /// </summary>
	    ///
	    static internal String[] GetStringArrayHelper(UResourceBundle res_0, String key) {
	        UResourceBundle t = GetFromTable(res_0, key, new int[] {
	                IBM.ICU.Util.UResourceBundle.ARRAY, IBM.ICU.Util.UResourceBundle.STRING });
	        return GetStringArrayHelper(t);
	    }
	
	    static internal String[] GetStringArrayHelper(UResourceBundle res_0) {
	        try {
	            int type = res_0.GetType();
	            switch (type) {
	            case IBM.ICU.Util.UResourceBundle.ARRAY:
	                return res_0.GetStringArray();
	            case IBM.ICU.Util.UResourceBundle.STRING:
	                return new String[] { res_0.GetString() };
	            default:
	                throw new UResourceTypeMismatchException(
	                        "Only accept ARRAY and STRING types.");
	            }
	        } catch (UResourceTypeMismatchException e) {
	            // #if defined(FOUNDATION10) || defined(J2SE13)
	            // ## throw new DataModuleFormatError(e.getMessage());
	            // #else
	            throw new TestDataModule_Constants.DataModuleFormatError(e);
	            // #endif
	        }
	    }
	
	    public static void Main(String[] args) {
	        try {
	            TestDataModule m = new ResourceModule(
	                    "com/ibm/icu/dev/data/testdata/", "DataDrivenCollationTest");
	            System.Console.Out.WriteLine("hello: " + m.GetName());
	            m.GetInfo();
	            m.GetTestDataIterator();
	        } catch (TestDataModule_Constants.DataModuleFormatError e) {
	            // TODO Auto-generated catch block
	            System.Console.Out.WriteLine("???");
	            Console.Error.WriteLine(e.StackTrace);
	        }
	    }
	
	    public class UResourceTestData : TestDataModule_Constants.TestData {
	            private ResourceModule outer_ResourceModule;
	    
	            public sealed class Anonymous_C1 : ResourceModule.IteratorAdapter  {
	                
	                /// <param name="theRes"></param>
	                public Anonymous_C1(UResourceBundle theRes) : base(theRes) {
	                }
	    
	                protected internal override Object PrepareNext(UResourceBundle nextRes) {
	                    return new ResourceModule.UTableResource(nextRes);
	                }
	            }
	    
	            public sealed class Anonymous_C0 : ResourceModule.IteratorAdapter {
	                            private readonly ResourceModule.UResourceTestData outer_UResourceTestData;
	                
	                            
	                            /// <param name="paramouter_UResourceTestData"></param>
	                            /// <param name="theRes"></param>
	                            public Anonymous_C0(ResourceModule.UResourceTestData paramouter_UResourceTestData,
	                                    UResourceBundle theRes) : base(theRes) {
	                                this.outer_UResourceTestData = paramouter_UResourceTestData;
	                            }
	                
	                            protected internal override Object PrepareNext(UResourceBundle nextRes) {
	                                return new ResourceModule.UArrayResource(outer_UResourceTestData.header, nextRes);
	                            }
	                        }
	    
	            private UResourceBundle res;
	    
	            private UResourceBundle info;
	    
	            private UResourceBundle settings;
	    
	            internal UResourceBundle header;
	    
	            private UResourceBundle data;
	    
	            internal UResourceTestData(ResourceModule module, UResourceBundle defaultHeader_0, UResourceBundle theRes) {
	    
	                outer_ResourceModule = module;
	                IBM.ICU.Charset.ResourceModule.Assert_is(theRes != null
	                        && theRes.GetType() == IBM.ICU.Util.UResourceBundle.TABLE);
	                res = theRes;
	                // unfortunately, actually, data can be either ARRAY or STRING
	                data = IBM.ICU.Charset.ResourceModule.GetFromTable(res, IBM.ICU.Charset.ResourceModule.DATA, new int[] { IBM.ICU.Util.UResourceBundle.ARRAY,
	                        IBM.ICU.Util.UResourceBundle.STRING });
	    
	                try {
	                    // unfortunately, actually, data can be either ARRAY or STRING
	                    header = IBM.ICU.Charset.ResourceModule.GetFromTable(res, IBM.ICU.Charset.ResourceModule.HEADER, new int[] {
	                            IBM.ICU.Util.UResourceBundle.ARRAY, IBM.ICU.Util.UResourceBundle.STRING });
	                } catch (MissingManifestResourceException e) {
	                    if (defaultHeader_0 == null) {
	                        throw new TestDataModule_Constants.DataModuleFormatError(
	                                "Unable to find a header for test data '"
	                                        + res.GetKey()
	                                        + "' and no default header exist.");
	                    } else {
	                        header = defaultHeader_0;
	                    }
	                }
	                try {
	                    settings = IBM.ICU.Charset.ResourceModule.GetFromTable(res, IBM.ICU.Charset.ResourceModule.SETTINGS, IBM.ICU.Util.UResourceBundle.ARRAY);
	                    info = IBM.ICU.Charset.ResourceModule.GetFromTable(res, IBM.ICU.Charset.ResourceModule.INFO, IBM.ICU.Util.UResourceBundle.TABLE);
	                } catch (MissingManifestResourceException e_1) {
	                    // do nothing, left them null;
	                    settings = data;
	                }
	            }
	    
	            public virtual String GetName() {
	                return res.GetKey();
	            }
	    
	            public virtual TestDataModule_Constants.DataMap GetInfo() {
	                return (info == null) ? null : new ResourceModule.UTableResource(info);
	            }
	    
	            public virtual IIterator GetSettingsIterator() {
	                IBM.ICU.Charset.ResourceModule.Assert_is(settings.GetType() == IBM.ICU.Util.UResourceBundle.ARRAY);
	                return new IBM.ICU.Charset.ResourceModule.UResourceTestData.Anonymous_C1 (settings);
	            }
	    
	            public virtual IIterator GetDataIterator() {
	                // unfortunately,
	                IBM.ICU.Charset.ResourceModule.Assert_is(data.GetType() == IBM.ICU.Util.UResourceBundle.ARRAY
	                        || data.GetType() == IBM.ICU.Util.UResourceBundle.STRING);
	                return new IBM.ICU.Charset.ResourceModule.UResourceTestData.Anonymous_C0 (this, data);
	            }
	        }
	
	    internal class UTableResource : TestDataModule_Constants.DataMap {
	        private UResourceBundle res;
	
	        internal UTableResource(UResourceBundle theRes) {
	            res = theRes;
	        }
	
	        public virtual String GetString(String key) {
	            String t;
	            try {
	                t = res.GetString(key);
	            } catch (MissingManifestResourceException e) {
	                t = null;
	            }
	            return t;
	        }
	
	        public virtual Object GetObject(String key) {
	
	            return res.Get(key);
	        }
	    }
	
	    internal class UArrayResource : TestDataModule_Constants.DataMap {
	        private IDictionary theMap;
	
	        internal UArrayResource(UResourceBundle theHeader, UResourceBundle theData) {
	            IBM.ICU.Charset.ResourceModule.Assert_is(theHeader != null && theData != null);
	            String[] header_0;
	
	            header_0 = IBM.ICU.Charset.ResourceModule.GetStringArrayHelper(theHeader);
	            if (theData.GetSize() != header_0.Length)
	                throw new TestDataModule_Constants.DataModuleFormatError(
	                        "The count of Header and Data is mismatch.");
	            theMap = new Hashtable();
	            for (int i = 0; i < header_0.Length; i++) {
	                if (theData.GetType() == IBM.ICU.Util.UResourceBundle.ARRAY) {
	                    ILOG.J2CsMapping.Collections.Collections.Put(theMap,header_0[i],theData.Get(i));
	                } else if (theData.GetType() == IBM.ICU.Util.UResourceBundle.STRING) {
	                    ILOG.J2CsMapping.Collections.Collections.Put(theMap,header_0[i],theData.GetString());
	                } else {
	                    throw new TestDataModule_Constants.DataModuleFormatError(
	                            "Did not get the expected data!");
	                }
	            }
	
	        }
	
	        public virtual String GetString(String key) {
	            Object o = ILOG.J2CsMapping.Collections.Collections.Get(theMap,key);
	            UResourceBundle rb;
	            if (o  is  UResourceBundle) {
	                // unpack ResourceBundle strings
	                rb = (UResourceBundle) o;
	                return rb.GetString();
	            }
	            return (String) o;
	        }
	
	        public virtual Object GetObject(String key) {
	            return ILOG.J2CsMapping.Collections.Collections.Get(theMap,key);
	        }
	    }
	}
}
