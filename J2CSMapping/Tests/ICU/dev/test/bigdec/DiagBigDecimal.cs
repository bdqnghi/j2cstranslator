//##header J2SE15
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/16/10 2:46 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /* Generated from 'DiagBigDecimal.nrx' 27 Mar 2000 22:38:44 [v1.162] */
/* Options: Binary Comments Crossref Format Java Logo Trace1 Verbose3 */
namespace IBM.ICU.Dev.Test.BigDec
{

    using IBM.ICU.Dev.Test;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;
    using IBM.ICU.Charset;
    using NUnit.Framework;

    /* ------------------------------------------------------------------ */
    /* Decimal diagnostic tests mfc */
    /* Copyright (c) IBM Corporation 1996-2007. All Rights Reserved. */
    /* ------------------------------------------------------------------ */
    /* DiagBigDecimal */
    /*                                                                    */
    /* A class that tests the BigDecimal and MathContext classes. */
    /*                                                                    */
    /* The tests here are derived from or cover the same paths as: */
    /* -- ANSI X3-274 testcases */
    /* -- Java JCK testcases */
    /* -- NetRexx testcases */
    /* -- VM/CMS S/370 REXX implementation testcases [1981+] */
    /* -- IBM Vienna Laboratory Rexx compiler testcases [1988+] */
    /* -- New testcases */
    /*                                                                    */
    /* The authoritative sources for how the underlying technology */
    /* (arithmetic) should work are: */
    /* -- for digits=0 (fixed point): java.math.BigDecimal */
    /* -- for digits>0 (floating point): ANSI X3.274-1996 + errata */
    /*                                                                    */
    /* ------------------------------------------------------------------ */
    /* Change list */
    /* 1997.09.05 Initial implementation, from DiagRexx [NetRexx tests] */
    /* 1998.05.02 0.07 changes (e.g., compareTo) */
    /* 1998.06.06 Rounding modes and format additions */
    /* 1998.06.25 Rename from DiagDecimal; make stand-alone [add */
    /* DiagException as a Minor class] */
    /* 1998.06.27 Start adding testcases for DIGITS=0/FORM=PLAIN cases */
    /* Reorganize for faster trace compilation */
    /* 1998.06.28 new: valueof, scale, movePointX, unscaledValue, etc. */
    /* 1998.07.07 Scaled divide */
    /* 1998.07.08 setScale */
    /* 1998.07.15 new scaffolding (Minor Test class) -- see diagabs */
    /* 1998.12.14 add toBigDecimal and BigDecimal(java.math.BigDecimal) */
    /* 1999.02.04 number preparation rounds instead of digits+1 trunc */
    /* 1999.02.09 format method now only has two signatures */
    /* 1999.02.27 no longer use Rexx class or RexxIO class */
    /* 1999.03.05 add MathContext tests */
    /* 1999.03.05 update for 0.96 [no null settings, etc.] */
    /* drop sundry constructors; no blanks; char[] gets ints */
    /* drop sundry converters, add Exact converters */
    /* 1999.05.27 additional tests for scaled arithmetic */
    /* 1999.06.29 additional tests for exponent overflows */
    /* 1999.07.03 add 'continue' option */
    /* 1999.07.10 additional tests for scaled arithmetic */
    /* 1999.07.18 randomly-generated tests added for base operators */
    /* 1999.10.28 weird intValueExact bad cases */
    /* 1999.12.21 multiplication fast path failure and edge cases */
    /* 2000.01.01 copyright update */
    /* 2000.03.26 cosmetic updates; add extra format() testcases */
    /* 2000.03.27 1.00 move to com.ibm.icu.math package; open source release; */
    /* change to javadoc comments */
    /* ------------------------------------------------------------------ */

    // note BINARY for conversions checking

    /// <summary>
    /// The <c>DiagBigDecimal</c> class forms a standalone test suite for the
    /// <c>com.ibm.icu.math.BigDecimal</c> and
    /// <c>com.ibm.icu.math.MathContext</c> classes (or, by changing the
    /// <c>package</c> statement, other classes of the same names and
    /// definition in other packages). It may also be used as a constructed object to
    /// embed the tests in an external test harness.
    /// <p>
    /// The tests are collected into <i>groups</i>, each corresponding to a tested
    /// method or a more general grouping. By default, when run from the static<see cref="M:IBM.ICU.Dev.Test.BigDec.DiagBigDecimal.Main(null)"/> method, the run will end if any test fails
    /// in a group. The <c>continue</c> argument may be specified to force the
    /// tests to run to completion.
    /// <p>
    /// Two minor (inner) classes are used; <see cref="T:IBM.ICU.Dev.Test.BigDec.DiagException"/> is
    /// used to signal the failure of a test group, and <see cref="T:IBM.ICU.Dev.Test.BigDec.Test"/>,
    /// a dependent minor class, is used to register tests so that a summary of
    /// failures (or success) can be presented as each group is completed.
    /// </summary>
    ///
    /// <seealso cref="T:IBM.ICU.Dev.Test.BigDec.BigDecimal"/>
    /// <seealso cref="T:IBM.ICU.Dev.Test.BigDec.MathContext"/>
    [TestFixture]
    public class DiagBigDecimal : TestFmwk
    {
        // private static final java.lang.String $0 = "DiagBigDecimal.nrx";

        /* properties shared */
        internal ArrayList Tests; // scaffolding

        /* properties private */
        private int totalcount; // counts tests run

        /* properties constant private */

        /* Count of test groups */
        private const int testcount = 38;

        private static readonly IBM.ICU.Math.BigDecimal zero = IBM.ICU.Math.BigDecimal.ZERO;

        private static readonly IBM.ICU.Math.BigDecimal one = IBM.ICU.Math.BigDecimal.ONE;

        private static readonly IBM.ICU.Math.BigDecimal two = new IBM.ICU.Math.BigDecimal(
                2);

        private static readonly IBM.ICU.Math.BigDecimal ten = IBM.ICU.Math.BigDecimal.TEN;

        private static readonly IBM.ICU.Math.BigDecimal tenlong = new IBM.ICU.Math.BigDecimal(
                (long)1234554321); // 10-digiter

        /* Some context objects -- [some of these are checked later] */
        private static readonly IBM.ICU.Math.MathContext mcdef = IBM.ICU.Math.MathContext.DEFAULT;

        private static readonly IBM.ICU.Math.MathContext mc3 = new IBM.ICU.Math.MathContext(
                3);

        private static readonly IBM.ICU.Math.MathContext mc6 = new IBM.ICU.Math.MathContext(
                6);

        private static readonly IBM.ICU.Math.MathContext mc9 = new IBM.ICU.Math.MathContext(
                9);

        private static readonly IBM.ICU.Math.MathContext mc50 = new IBM.ICU.Math.MathContext(
                50);

        private static readonly IBM.ICU.Math.MathContext mcs = new IBM.ICU.Math.MathContext(
                9, IBM.ICU.Math.MathContext.SCIENTIFIC);

        private static readonly IBM.ICU.Math.MathContext mce = new IBM.ICU.Math.MathContext(
                9, IBM.ICU.Math.MathContext.ENGINEERING);

        private static readonly IBM.ICU.Math.MathContext mcld = new IBM.ICU.Math.MathContext(
                9, IBM.ICU.Math.MathContext.SCIENTIFIC, true); // lost digits

        private static readonly IBM.ICU.Math.MathContext mcld0 = new IBM.ICU.Math.MathContext(
                0, IBM.ICU.Math.MathContext.SCIENTIFIC, true); // lost digits,
        // digits=0

        private static readonly IBM.ICU.Math.MathContext mcfd = new IBM.ICU.Math.MathContext(
                0, IBM.ICU.Math.MathContext.PLAIN); // fixed decimal style

        /* boundary primitive values */
        private const sbyte bmin = -128;

        private const sbyte bmax = 127;

        private const byte bzer = 0;

        private const sbyte bneg = -1;

        private const byte bpos = 1;

        private const int imin = -2147483648;

        private const int imax = 2147483647;

        private const int izer = 0;

        private const int ineg = -1;

        private const int ipos = 1;

        private const long lmin = -9223372036854775808L;

        private const long lmax = 9223372036854775807L;

        private const long lzer = (long)0;

        private const long lneg = (long)-1;

        private const long lpos = (long)1;

        private const short smin = -32768;

        private const short smax = 32767;

        private const short szer = (short)0;

        private const short sneg = (short)(-1);

        private const short spos = (short)1;

        /// <summary>
        /// Constructs a <c>DiagBigDecimal</c> test suite.
        /// <p>
        /// Invoke its <see cref="M:IBM.ICU.Dev.Test.BigDec.DiagBigDecimal.Diagrun(System.Boolean)"/> method to run the tests.
        /// </summary>
        ///

        public DiagBigDecimal()
            : base()
        {
            this.Tests = new ArrayList(100);
            this.totalcount = 0;
        }

        static internal readonly bool isJDK15OrLater = true; /*IBM.ICU.Util.VersionInfo.JavaVersion().CompareTo(
                IBM.ICU.Util.VersionInfo.GetInstance(1, 5)) >= 0;*/

        /// <summary>
        /// Run the tests in the test suite.
        /// </summary>
        ///
        /// <param name="isContinue">The <c>boolean</c> which determines whether to stoprunning after a group fails. If 1 (true) then the tests shouldbe run to completion if possible; if 0 (false) then the runwill end if a group fails.</param>
        /// <returns>an <c>int</c> which is 0 if all tests were successful, >0
        /// (the count of failures) if some failures were detected, or <0 if
        /// an unexpected Exception was signalled.</returns>

        public int Diagrun(bool isContinue)
        {
            int fails;
            int num = 0;
            DiagBigDecimal.DiagException de = null;
            Exception e = null;
            System.String rest = null;

            fails = 0; // count of failures
            try
            {
                num = 1;
            num:
                {
                    for (; num <= testcount; num++)
                    { // [testcount is constant
                        // set above]
                        try
                        {
                            Dotest(num);
                        }
                        catch (DiagBigDecimal.DiagException _1)
                        {
                            de = _1;
                            Say();
                            Errln("**** Failed:" + " " + de.Message + " " + "****");
                            Say();
                            fails = fails + de.failcount;
                            if ((!isContinue))
                                goto gotonum;
                        }
                    }
                }
            gotonum:
                ;
            }
            catch (Exception _2)
            {
                e = _2; // any other exception is total failure; just show trace and
                // quit
                Say();
                Errln("**** Failed: unexpected exception ****");
                Console.Error.WriteLine(e.StackTrace);
                return -1;
            }/* num */

            if (fails == 0)
                Say("--- All OK ---" + " "
                        + Right("[" + totalcount + " " + "tests]", 15));
            else
            {
                if (isContinue)
                {
                    if (fails > 1)
                        rest = "tests";
                    else
                        rest = "test";
                    Say("--- All run ---" + " "
                            + Right("[" + totalcount + " " + "tests,", 14) + " "
                            + "failed" + " " + fails + " " + rest + "]");

                }
            }

            return fails;
        }

        /* Run test by number -- method for development/private switching */

        private void Dotest(int num)
        {
            {/* select */
                switch (num)
                {
                    /* -------------------------------------------------------------- */
                    /* MathContext */
                    /* -------------------------------------------------------------- */
                    case 1:
                        Diagmathcontext();
                        break;

                    /* -------------------------------------------------------------- */
                    /* Constructors */
                    /* -------------------------------------------------------------- */
                    case 2:
                        Diagconstructors();
                        break;

                    /* -------------------------------------------------------------- */
                    /* Operator methods */
                    /* -------------------------------------------------------------- */
                    case 3:
                        Diagabs();
                        break;
                    case 4:
                        Diagadd();
                        break;
                    case 5:
                        Diagcompareto();
                        break;
                    case 6:
                        Diagdivide();
                        break;
                    case 7:
                        DiagdivideInteger();
                        break;
                    case 8:
                        Diagmax();
                        break;
                    case 9:
                        Diagmin();
                        break;
                    case 10:
                        Diagmultiply();
                        break;
                    case 11:
                        Diagnegate();
                        break;
                    case 12:
                        Diagplus();
                        break;
                    case 13:
                        Diagpow();
                        break;
                    case 14:
                        Diagremainder();
                        break;
                    case 15:
                        Diagsubtract();
                        break;
                    case 16:
                        Diagmath();
                        break; // general math

                    /* -------------------------------------------------------------- */
                    /* Other methods */
                    /* -------------------------------------------------------------- */
                    case 17:
                        DiagbyteValue();
                        break;
                    case 18:
                        DiagcomparetoObj();
                        break;
                    case 19:
                        Diagdoublevalue();
                        break;
                    case 20:
                        Diagequals();
                        break;
                    case 21:
                        Diagfloatvalue();
                        break;
                    case 22:
                        Diagformat();
                        break;
                    case 23:
                        Diaghashcode();
                        break;
                    case 24:
                        Diagintvalue();
                        break;
                    case 25:
                        Diaglongvalue();
                        break;
                    case 26:
                        Diagmovepointleft();
                        break;
                    case 27:
                        Diagmovepointright();
                        break;
                    case 28:
                        Diagscale();
                        break;
                    case 29:
                        Diagsetscale();
                        break;
                    case 30:
                        Diagshortvalue();
                        break;
                    case 31:
                        Diagsignum();
                        break;
                    case 32:
                        Diagtobigdecimal();
                        break;
                    case 33:
                        Diagtobiginteger();
                        break;
                    case 34:
                        Diagtochararray();
                        break;
                    case 35:
                        Diagtostring();
                        break;
                    case 36:
                        Diagunscaledvalue();
                        break;
                    case 37:
                        Diagvalueof();
                        break;

                    /* -------------------------------------------------------------- */
                    /* Mutation test [must be the last test] */
                    /* -------------------------------------------------------------- */
                    case 38:
                        Diagmutation();
                        break;
                    // if any more, increase testcount above
                    default:
                        {
                            Say("*** dotest case not found:" + " " + num + " " + "***");
                        }
                        break;
                }
            }
            return;
        }

        /*--------------------------------------------------------------------*/
        /* Diagnostic group methods */
        /*--------------------------------------------------------------------*/

        /// <summary>
        /// Test constructors (and <see cref="M:IBM.ICU.Dev.Test.BigDec.DiagBigDecimal.ToString"/> for equalities). 
        /// </summary>
        ///
        [Test]
        public void Diagconstructors()
        {
            bool flag = false;
            System.String num;
            Int64 bip;
            Int64 biz;
            Int64 bin;
            IBM.ICU.Math.BigDecimal bda;
            IBM.ICU.Math.BigDecimal bdb;
            IBM.ICU.Math.BigDecimal bmc;
            IBM.ICU.Math.BigDecimal bmd;
            IBM.ICU.Math.BigDecimal bme;
            Exception e = null;
            char[] ca;
            double dzer;
            double dpos;
            double dneg;
            double dpos5;
            double dneg5;
            double dmin;
            double dmax;
            double d;
            System.String[] badstrings;
            int i = 0;

            // constants [statically-called constructors]
            (new DiagBigDecimal.Test(this, "con001")).ok = (IBM.ICU.Math.BigDecimal.ZERO.ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "con002")).ok = (IBM.ICU.Math.BigDecimal.ONE.ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "con003")).ok = (IBM.ICU.Math.BigDecimal.TEN.ToString())
                    .Equals("10");
            (new DiagBigDecimal.Test(this, "con004")).ok = (IBM.ICU.Math.BigDecimal.ZERO
                    .IntValueExact()) == 0;
            (new DiagBigDecimal.Test(this, "con005")).ok = (IBM.ICU.Math.BigDecimal.ONE
                    .IntValueExact()) == 1;
            (new DiagBigDecimal.Test(this, "con006")).ok = (IBM.ICU.Math.BigDecimal.TEN
                    .IntValueExact()) == 10;

            // [java.math.] BigDecimal
            // #if defined(FOUNDATION10) || defined(J2SE13)
            // #else
            (new DiagBigDecimal.Test(this, "cbd001")).ok = ((new IBM.ICU.Math.BigDecimal(
                    Decimal.Parse("0"))).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "cbd002")).ok = ((new IBM.ICU.Math.BigDecimal(
                    Decimal.Parse("1"))).ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "cbd003")).ok = ((new IBM.ICU.Math.BigDecimal(
                    Decimal.Parse("10"))).ToString()).Equals("10");
            (new DiagBigDecimal.Test(this, "cbd004")).ok = ((new IBM.ICU.Math.BigDecimal(
                    Decimal.Parse("1000"))).ToString()).Equals("1000");
            (new DiagBigDecimal.Test(this, "cbd005")).ok = ((new IBM.ICU.Math.BigDecimal(
                    Decimal.Parse("10.0"))).ToString()).Equals("10.0");
            (new DiagBigDecimal.Test(this, "cbd006")).ok = ((new IBM.ICU.Math.BigDecimal(
                    Decimal.Parse("10.1"))).ToString()).Equals("10.1");
            (new DiagBigDecimal.Test(this, "cbd007")).ok = ((new IBM.ICU.Math.BigDecimal(
                    Decimal.Parse("-1.1"))).ToString()).Equals("-1.1");
            (new DiagBigDecimal.Test(this, "cbd008")).ok = ((new IBM.ICU.Math.BigDecimal(
                    Decimal.Parse("-9.0"))).ToString()).Equals("-9.0");
            (new DiagBigDecimal.Test(this, "cbd009")).ok = ((new IBM.ICU.Math.BigDecimal(
                    Decimal.Parse("0.9"))).ToString()).Equals("0.9");

            num = "123456789.123456789";
            (new DiagBigDecimal.Test(this, "cbd010")).ok = ((new IBM.ICU.Math.BigDecimal(
                    Decimal.Parse(num))).ToString()).Equals(num);
            num = "123456789.000000000";
            (new DiagBigDecimal.Test(this, "cbd011")).ok = ((new IBM.ICU.Math.BigDecimal(
                    Decimal.Parse(num))).ToString()).Equals(num);
            num = "123456789000000000";
            (new DiagBigDecimal.Test(this, "cbd012")).ok = ((new IBM.ICU.Math.BigDecimal(
                    Decimal.Parse(num))).ToString()).Equals(num);
            num = "0.00000123456789";
            (new DiagBigDecimal.Test(this, "cbd013")).ok = ((new IBM.ICU.Math.BigDecimal(
                    Decimal.Parse(num))).ToString()).Equals(num);
            num = "0.000000123456789";

            // ignore format change issues with 1.5
            if (!isJDK15OrLater)
                (new DiagBigDecimal.Test(this, "cbd014")).ok = ((new IBM.ICU.Math.BigDecimal(
                        Decimal.Parse(num))).ToString()).Equals(num);

           /* try
            {
                new IBM.ICU.Math.BigDecimal((Decimal)default(Decimal));
                flag = false;
            }
            catch (NullReferenceException _3)
            {
                flag = true;
            }/* checknull *
            (new DiagBigDecimal.Test(this, "cbi015")).ok = flag;*/
            // #endif

            // BigInteger
            //bip = Int64.Parse("987654321987654321987654321"); // biggie +ve
            biz = Int64.Parse("0"); // biggie 0
           // bin = Int64.Parse("-12345678998765432112345678"); // biggie -ve
           // (new DiagBigDecimal.Test(this, "cbi001")).ok = ((new IBM.ICU.Math.BigDecimal(bip))
             //       .ToString()).Equals(bip.ToString());
            (new DiagBigDecimal.Test(this, "cbi002")).ok = ((new IBM.ICU.Math.BigDecimal(biz))
                    .ToString()).Equals("0");
            //(new DiagBigDecimal.Test(this, "cbi003")).ok = ((new IBM.ICU.Math.BigDecimal(bin))
              //      .ToString()).Equals(bin.ToString());
           /* try
            {
                new IBM.ICU.Math.BigDecimal((Int64)default(Int64));
                flag = false;
            }
            catch (NullReferenceException _4)
            {
                flag = true;
            }/* checknull *
            (new DiagBigDecimal.Test(this, "cbi004")).ok = flag;*/

            // BigInteger with scale
            bip = Int64.Parse("123456789"); // bigish
            bda = new IBM.ICU.Math.BigDecimal(bip);
            bdb = new IBM.ICU.Math.BigDecimal(bip, 5);
            bmc = new IBM.ICU.Math.BigDecimal(bip, 15);
            (new DiagBigDecimal.Test(this, "cbs001")).ok = (bda.ToString()).Equals("123456789");
            (new DiagBigDecimal.Test(this, "cbs002")).ok = (bdb.ToString()).Equals("1234.56789");
            (new DiagBigDecimal.Test(this, "cbs003")).ok = (bmc.ToString()).Equals("0.000000123456789");
           /* bip = Int64.Parse("123456789123456789123456789"); // biggie
            bda = new IBM.ICU.Math.BigDecimal(bip);
            bdb = new IBM.ICU.Math.BigDecimal(bip, 7);
            bmc = new IBM.ICU.Math.BigDecimal(bip, 13);
            bmd = new IBM.ICU.Math.BigDecimal(bip, 19);
            bme = new IBM.ICU.Math.BigDecimal(bip, 29);
            (new DiagBigDecimal.Test(this, "cbs011")).ok = (bda.ToString())
                    .Equals("123456789123456789123456789");
            (new DiagBigDecimal.Test(this, "cbs012")).ok = (bdb.ToString())
                    .Equals("12345678912345678912.3456789");
            (new DiagBigDecimal.Test(this, "cbs013")).ok = (bmc.ToString())
                    .Equals("12345678912345.6789123456789");
            (new DiagBigDecimal.Test(this, "cbs014")).ok = (bmd.ToString())
                    .Equals("12345678.9123456789123456789");
            (new DiagBigDecimal.Test(this, "cbs015")).ok = (bme.ToString())
                    .Equals("0.00123456789123456789123456789");*/
            /*try
            {
                new IBM.ICU.Math.BigDecimal((Int64)default(Int64), 1);
                flag = false;
            }
            catch (NullReferenceException _5)
            {
                flag = true;
            }/* checknull *
            (new DiagBigDecimal.Test(this, "cbs004")).ok = flag;*/
            try
            {
                new IBM.ICU.Math.BigDecimal(bip, -8);
                flag = false;
            }
            catch (Exception _6)
            {
                e = _6;
                flag = (e.Message).Equals("Negative scale: -8");
            }/* checkscale */
            (new DiagBigDecimal.Test(this, "cbs005")).ok = flag;

            // char[]
            // We just test it's there
            // Functionality is tested by BigDecimal(String).
            ca = ("123.45").ToCharArray();
            (new DiagBigDecimal.Test(this, "cca001")).ok = ((new IBM.ICU.Math.BigDecimal(ca))
                    .ToString()).Equals("123.45");
            try
            {
                new IBM.ICU.Math.BigDecimal((char[])null);
                flag = false;
            }
            catch (NullReferenceException _7)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "cca010")).ok = flag;

            // char[],int,int
            // We just test it's there, and that offsets work.
            // Functionality is tested by BigDecimal(String).
            ca = ("123.45").ToCharArray();
            (new DiagBigDecimal.Test(this, "cca101")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 0, 6))
                    .ToString()).Equals("123.45");
            (new DiagBigDecimal.Test(this, "cca102")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 1, 5))
                    .ToString()).Equals("23.45");
            (new DiagBigDecimal.Test(this, "cca103")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 2, 4))
                    .ToString()).Equals("3.45");
            (new DiagBigDecimal.Test(this, "cca104")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 3, 3))
                    .ToString()).Equals("0.45");
            (new DiagBigDecimal.Test(this, "cca105")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 4, 2))
                    .ToString()).Equals("45");
            (new DiagBigDecimal.Test(this, "cca106")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 5, 1))
                    .ToString()).Equals("5");

            (new DiagBigDecimal.Test(this, "cca110")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 0, 1))
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "cca111")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 1, 1))
                    .ToString()).Equals("2");
            (new DiagBigDecimal.Test(this, "cca112")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 2, 1))
                    .ToString()).Equals("3");
            (new DiagBigDecimal.Test(this, "cca113")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 4, 1))
                    .ToString()).Equals("4");

            (new DiagBigDecimal.Test(this, "cca120")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 0, 2))
                    .ToString()).Equals("12");
            (new DiagBigDecimal.Test(this, "cca121")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 1, 2))
                    .ToString()).Equals("23");
            (new DiagBigDecimal.Test(this, "cca122")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 2, 2))
                    .ToString()).Equals("3");
            (new DiagBigDecimal.Test(this, "cca123")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 3, 2))
                    .ToString()).Equals("0.4");

            (new DiagBigDecimal.Test(this, "cca130")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 0, 3))
                    .ToString()).Equals("123");
            (new DiagBigDecimal.Test(this, "cca131")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 1, 3))
                    .ToString()).Equals("23");
            (new DiagBigDecimal.Test(this, "cca132")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 2, 3))
                    .ToString()).Equals("3.4");

            (new DiagBigDecimal.Test(this, "cca140")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 0, 4))
                    .ToString()).Equals("123");
            (new DiagBigDecimal.Test(this, "cca141")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 1, 4))
                    .ToString()).Equals("23.4");

            (new DiagBigDecimal.Test(this, "cca150")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 0, 5))
                    .ToString()).Equals("123.4");

            // a couple of oddies
            ca = ("x23.4x").ToCharArray();
            (new DiagBigDecimal.Test(this, "cca160")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 1, 4))
                    .ToString()).Equals("23.4");
            (new DiagBigDecimal.Test(this, "cca161")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 1, 1))
                    .ToString()).Equals("2");
            (new DiagBigDecimal.Test(this, "cca162")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 4, 1))
                    .ToString()).Equals("4");

            ca = ("0123456789.9876543210").ToCharArray();
            (new DiagBigDecimal.Test(this, "cca163")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 0, 21))
                    .ToString()).Equals("123456789.9876543210");
            (new DiagBigDecimal.Test(this, "cca164")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 1, 20))
                    .ToString()).Equals("123456789.9876543210");
            (new DiagBigDecimal.Test(this, "cca165")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 2, 19))
                    .ToString()).Equals("23456789.9876543210");
            (new DiagBigDecimal.Test(this, "cca166")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 2, 18))
                    .ToString()).Equals("23456789.987654321");
            (new DiagBigDecimal.Test(this, "cca167")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 2, 17))
                    .ToString()).Equals("23456789.98765432");
            (new DiagBigDecimal.Test(this, "cca168")).ok = ((new IBM.ICU.Math.BigDecimal(ca, 2, 16))
                    .ToString()).Equals("23456789.9876543");

            try
            {
                new IBM.ICU.Math.BigDecimal((char[])null, 0, 1);
                flag = false;
            }
            catch (NullReferenceException _8)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "cca200")).ok = flag;

            try
            {
                new IBM.ICU.Math.BigDecimal("123".ToCharArray(), 0, 0);
                flag = false;
            }
            catch (FormatException _9)
            {
                flag = true;
            }/* checklen */
            (new DiagBigDecimal.Test(this, "cca201")).ok = flag;

            try
            {
                new IBM.ICU.Math.BigDecimal("123".ToCharArray(), 2, 4);
                flag = false;
            }
            catch (Exception _10)
            { // anything OK
                flag = true;
            }/* checkbound */
            (new DiagBigDecimal.Test(this, "cca202")).ok = flag;
            try
            {
                new IBM.ICU.Math.BigDecimal("123".ToCharArray(), -1, 2);
                flag = false;
            }
            catch (Exception _11)
            { // anything OK
                flag = true;
            }/* checkbound2 */
            (new DiagBigDecimal.Test(this, "cca203")).ok = flag;
            try
            {
                new IBM.ICU.Math.BigDecimal("123".ToCharArray(), 1, -2);
                flag = false;
            }
            catch (Exception _12)
            { // anything OK
                flag = true;
            }/* checkbound3 */
            (new DiagBigDecimal.Test(this, "cca204")).ok = flag;

            // #if defined(FOUNDATION10) || defined(J2SE13)
            // #else
            // double [deprecated]
            // Note that many of these differ from the valueOf(double) results.
            dzer = (double)0;
            dpos = (double)1;
            dpos = dpos / ((double)10);
            dneg = (double)-dpos;
            //(new DiagBigDecimal.Test(this, "cdo001")).ok = ((new IBM.ICU.Math.BigDecimal(dneg))
             //       .ToString())
              //      .Equals("-0.1000000000000000055511151231257827021181583404541015625");

            (new DiagBigDecimal.Test(this, "cdo002")).ok = ((new IBM.ICU.Math.BigDecimal(dzer))
                    .ToString()).Equals("0"); // NB, not '0.0'
            /*(new DiagBigDecimal.Test(this, "cdo003")).ok = ((new IBM.ICU.Math.BigDecimal(dpos))
                    .ToString())
                    .Equals("0.1000000000000000055511151231257827021181583404541015625");*/

            dpos5 = (double)0.5D;
            dneg5 = (double)-dpos5;
            (new DiagBigDecimal.Test(this, "cdo004")).ok = ((new IBM.ICU.Math.BigDecimal(dneg5))
                    .ToString()).Equals("-0.5");
            (new DiagBigDecimal.Test(this, "cdo005")).ok = ((new IBM.ICU.Math.BigDecimal(dpos5))
                    .ToString()).Equals("0.5");
            dmin = System.Double.MinValue;
            dmax = System.Double.MaxValue;
            if (!isJDK15OrLater) // for some reason we format using scientific
                // notation on 1.5 after 30 decimals or so
                (new DiagBigDecimal.Test(this, "cdo006")).ok = ((new IBM.ICU.Math.BigDecimal(dmin))
                        .ToString())
                        .Equals

           /* (new DiagBigDecimal.Test(this, "cdo007")).ok = ((new IBM.ICU.Math.BigDecimal(dmax))
                    .ToString())
                    .Equals("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368");
            */
            // nasties
            d = (double)9;
            d = d / ((double)10);
            /**(new DiagBigDecimal.Test(this, "cdo010")).ok = ((new IBM.ICU.Math.BigDecimal(d))
                    .ToString())
                    .Equals("0.90000000000000002220446049250313080847263336181640625");
            */
            d = d / ((double)10);
            /*(new DiagBigDecimal.Test(this, "cdo011")).ok = ((new IBM.ICU.Math.BigDecimal(d))
                    .ToString())
                    .Equals("0.0899999999999999966693309261245303787291049957275390625");
            */
            d = d / ((double)10);
            /*(new DiagBigDecimal.Test(this, "cdo012")).ok = ((new IBM.ICU.Math.BigDecimal(d))
                    .ToString())
                    .Equals("0.00899999999999999931998839741709161899052560329437255859375");

            d = d / ((double)10);
            (new DiagBigDecimal.Test(this, "cdo013")).ok = ((new IBM.ICU.Math.BigDecimal(d))
                    .ToString())
                    .Equals("0.00089999999999999997536692664112933925935067236423492431640625");

            d = d / ((double)10);
            (new DiagBigDecimal.Test(this, "cdo014")).ok = ((new IBM.ICU.Math.BigDecimal(d))
                    .ToString())
                    .Equals("0.00008999999999999999211568180168541175589780323207378387451171875");

            d = d / ((double)10);
            (new DiagBigDecimal.Test(this, "cdo015")).ok = ((new IBM.ICU.Math.BigDecimal(d))
                    .ToString())
                    .Equals("0.00000899999999999999853394182236510090433512232266366481781005859375");

            d = d / ((double)10);
            if (!isJDK15OrLater)
                (new DiagBigDecimal.Test(this, "cdo016")).ok = ((new IBM.ICU.Math.BigDecimal(d))
                        .ToString())
                        .Equals("0.000000899999999999999853394182236510090433512232266366481781005859375");

            d = d / ((double)10);
            if (!isJDK15OrLater)
                (new DiagBigDecimal.Test(this, "cdo017")).ok = ((new IBM.ICU.Math.BigDecimal(d))
                        .ToString())
                        .Equals("0.0000000899999999999999853394182236510090433512232266366481781005859375");

            d = d / ((double)10);
            if (!isJDK15OrLater)
                (new DiagBigDecimal.Test(this, "cdo018")).ok = ((new IBM.ICU.Math.BigDecimal(d))
                        .ToString())
                        .Equals("0.000000008999999999999997872197332322678764437995369007694534957408905029296875");*/
            // #endif

            try
            {
                new IBM.ICU.Math.BigDecimal(System.Double.PositiveInfinity);
                flag = false;
            }
            catch (Exception _13)
            {
                flag = true;
            }/* checkpin */
            (new DiagBigDecimal.Test(this, "cdo101")).ok = flag;
            try
            {
                new IBM.ICU.Math.BigDecimal(System.Double.NegativeInfinity);
                flag = false;
            }
            catch (Exception _14)
            {
                flag = true;
            }/* checknin */
            (new DiagBigDecimal.Test(this, "cdo102")).ok = flag;
            try
            {
                new IBM.ICU.Math.BigDecimal(System.Double.NaN);
                flag = false;
            }
            catch (Exception _15)
            {
                flag = true;
            }/* checknan */
            (new DiagBigDecimal.Test(this, "cdo103")).ok = flag;

            // int
            (new DiagBigDecimal.Test(this, "cin001")).ok = ((new IBM.ICU.Math.BigDecimal(imin))
                    .ToString()).Equals("-2147483648");
            (new DiagBigDecimal.Test(this, "cin002")).ok = ((new IBM.ICU.Math.BigDecimal(imax))
                    .ToString()).Equals("2147483647");
            (new DiagBigDecimal.Test(this, "cin003")).ok = ((new IBM.ICU.Math.BigDecimal(ineg))
                    .ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "cin004")).ok = ((new IBM.ICU.Math.BigDecimal(izer))
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "cin005")).ok = ((new IBM.ICU.Math.BigDecimal(ipos))
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "cin006")).ok = ((new IBM.ICU.Math.BigDecimal(10))
                    .ToString()).Equals("10");
            (new DiagBigDecimal.Test(this, "cin007")).ok = ((new IBM.ICU.Math.BigDecimal(9))
                    .ToString()).Equals("9");
            (new DiagBigDecimal.Test(this, "cin008")).ok = ((new IBM.ICU.Math.BigDecimal(5))
                    .ToString()).Equals("5");
            (new DiagBigDecimal.Test(this, "cin009")).ok = ((new IBM.ICU.Math.BigDecimal(2))
                    .ToString()).Equals("2");
            (new DiagBigDecimal.Test(this, "cin010")).ok = ((new IBM.ICU.Math.BigDecimal(-2))
                    .ToString()).Equals("-2");
            (new DiagBigDecimal.Test(this, "cin011")).ok = ((new IBM.ICU.Math.BigDecimal(-5))
                    .ToString()).Equals("-5");
            (new DiagBigDecimal.Test(this, "cin012")).ok = ((new IBM.ICU.Math.BigDecimal(-9))
                    .ToString()).Equals("-9");
            (new DiagBigDecimal.Test(this, "cin013")).ok = ((new IBM.ICU.Math.BigDecimal(-10))
                    .ToString()).Equals("-10");
            (new DiagBigDecimal.Test(this, "cin014")).ok = ((new IBM.ICU.Math.BigDecimal(-11))
                    .ToString()).Equals("-11");
            (new DiagBigDecimal.Test(this, "cin015")).ok = ((new IBM.ICU.Math.BigDecimal(-99))
                    .ToString()).Equals("-99");
            (new DiagBigDecimal.Test(this, "cin016")).ok = ((new IBM.ICU.Math.BigDecimal(-100))
                    .ToString()).Equals("-100");
            (new DiagBigDecimal.Test(this, "cin017")).ok = ((new IBM.ICU.Math.BigDecimal(-999))
                    .ToString()).Equals("-999");
            (new DiagBigDecimal.Test(this, "cin018")).ok = ((new IBM.ICU.Math.BigDecimal(-1000))
                    .ToString()).Equals("-1000");

            (new DiagBigDecimal.Test(this, "cin019")).ok = ((new IBM.ICU.Math.BigDecimal(11))
                    .ToString()).Equals("11");
            (new DiagBigDecimal.Test(this, "cin020")).ok = ((new IBM.ICU.Math.BigDecimal(99))
                    .ToString()).Equals("99");
            (new DiagBigDecimal.Test(this, "cin021")).ok = ((new IBM.ICU.Math.BigDecimal(100))
                    .ToString()).Equals("100");
            (new DiagBigDecimal.Test(this, "cin022")).ok = ((new IBM.ICU.Math.BigDecimal(999))
                    .ToString()).Equals("999");
            (new DiagBigDecimal.Test(this, "cin023")).ok = ((new IBM.ICU.Math.BigDecimal(1000))
                    .ToString()).Equals("1000");

            // long
            (new DiagBigDecimal.Test(this, "clo001")).ok = ((new IBM.ICU.Math.BigDecimal(lmin))
                    .ToString()).Equals("-9223372036854775808");
            (new DiagBigDecimal.Test(this, "clo002")).ok = ((new IBM.ICU.Math.BigDecimal(lmax))
                    .ToString()).Equals("9223372036854775807");
            (new DiagBigDecimal.Test(this, "clo003")).ok = ((new IBM.ICU.Math.BigDecimal(lneg))
                    .ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "clo004")).ok = ((new IBM.ICU.Math.BigDecimal(lzer))
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "clo005")).ok = ((new IBM.ICU.Math.BigDecimal(lpos))
                    .ToString()).Equals("1");

            // String [many more examples are elsewhere]
            // strings without E cannot generate E in result
            (new DiagBigDecimal.Test(this, "cst001")).ok = ((new IBM.ICU.Math.BigDecimal("12"))
                    .ToString()).Equals("12");
            (new DiagBigDecimal.Test(this, "cst002")).ok = ((new IBM.ICU.Math.BigDecimal("-76"))
                    .ToString()).Equals("-76");
            (new DiagBigDecimal.Test(this, "cst003")).ok = ((new IBM.ICU.Math.BigDecimal("12.76"))
                    .ToString()).Equals("12.76");
            (new DiagBigDecimal.Test(this, "cst004")).ok = ((new IBM.ICU.Math.BigDecimal("+12.76"))
                    .ToString()).Equals("12.76");
            (new DiagBigDecimal.Test(this, "cst005")).ok = ((new IBM.ICU.Math.BigDecimal("012.76"))
                    .ToString()).Equals("12.76");
            (new DiagBigDecimal.Test(this, "cst006")).ok = ((new IBM.ICU.Math.BigDecimal("+0.003"))
                    .ToString()).Equals("0.003");
            (new DiagBigDecimal.Test(this, "cst007")).ok = ((new IBM.ICU.Math.BigDecimal("17."))
                    .ToString()).Equals("17");
            (new DiagBigDecimal.Test(this, "cst008")).ok = ((new IBM.ICU.Math.BigDecimal(".5"))
                    .ToString()).Equals("0.5");
            (new DiagBigDecimal.Test(this, "cst009")).ok = ((new IBM.ICU.Math.BigDecimal("044"))
                    .ToString()).Equals("44");
            (new DiagBigDecimal.Test(this, "cst010")).ok = ((new IBM.ICU.Math.BigDecimal("0044"))
                    .ToString()).Equals("44");
            (new DiagBigDecimal.Test(this, "cst011")).ok = ((new IBM.ICU.Math.BigDecimal("0.0005"))
                    .ToString()).Equals("0.0005");
            (new DiagBigDecimal.Test(this, "cst012")).ok = ((new IBM.ICU.Math.BigDecimal("00.00005"))
                    .ToString()).Equals("0.00005");
            (new DiagBigDecimal.Test(this, "cst013")).ok = ((new IBM.ICU.Math.BigDecimal("0.000005"))
                    .ToString()).Equals("0.000005");
            (new DiagBigDecimal.Test(this, "cst014")).ok = ((new IBM.ICU.Math.BigDecimal("0.0000005"))
                    .ToString()).Equals("0.0000005"); // \NR
            (new DiagBigDecimal.Test(this, "cst015")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.00000005")).ToString()).Equals("0.00000005"); // \NR
            (new DiagBigDecimal.Test(this, "cst016")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "12345678.876543210")).ToString()).Equals("12345678.876543210");
            (new DiagBigDecimal.Test(this, "cst017")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "2345678.876543210")).ToString()).Equals("2345678.876543210");
            (new DiagBigDecimal.Test(this, "cst018")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "345678.876543210")).ToString()).Equals("345678.876543210");
            (new DiagBigDecimal.Test(this, "cst019")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0345678.87654321")).ToString()).Equals("345678.87654321");
            (new DiagBigDecimal.Test(this, "cst020")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "345678.8765432")).ToString()).Equals("345678.8765432");
            (new DiagBigDecimal.Test(this, "cst021")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "+345678.8765432")).ToString()).Equals("345678.8765432");
            (new DiagBigDecimal.Test(this, "cst022")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "+0345678.8765432")).ToString()).Equals("345678.8765432");
            (new DiagBigDecimal.Test(this, "cst023")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "+00345678.8765432")).ToString()).Equals("345678.8765432");
            (new DiagBigDecimal.Test(this, "cst024")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "-345678.8765432")).ToString()).Equals("-345678.8765432");
            (new DiagBigDecimal.Test(this, "cst025")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "-0345678.8765432")).ToString()).Equals("-345678.8765432");
            (new DiagBigDecimal.Test(this, "cst026")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "-00345678.8765432")).ToString()).Equals("-345678.8765432");

            // exotics --
            // not number ? (new DiagBigDecimal.Test(this, "cst035")).ok = ((new IBM.ICU.Math.BigDecimal(
            //        "\u0e57.\u0e50")).ToString()).Equals("7.0");
            // not number ?(new DiagBigDecimal.Test(this, "cst036")).ok = ((new IBM.ICU.Math.BigDecimal(
            //        "\u0b66.\u0b67")).ToString()).Equals("0.1");
            // not number ?(new DiagBigDecimal.Test(this, "cst037")).ok = ((new IBM.ICU.Math.BigDecimal(
             //       "\u0b66\u0b66")).ToString()).Equals("0");
            // not number ?(new DiagBigDecimal.Test(this, "cst038")).ok = ((new IBM.ICU.Math.BigDecimal(
            //        "\u0b6a\u0b66")).ToString()).Equals("40");

            // strings with E
            (new DiagBigDecimal.Test(this, "cst040")).ok = ((new IBM.ICU.Math.BigDecimal("1E+9"))
                    .ToString()).Equals("1E+9");
            (new DiagBigDecimal.Test(this, "cst041")).ok = ((new IBM.ICU.Math.BigDecimal("1e+09"))
                    .ToString()).Equals("1E+9");
            (new DiagBigDecimal.Test(this, "cst042")).ok = ((new IBM.ICU.Math.BigDecimal("1E+90"))
                    .ToString()).Equals("1E+90");
            (new DiagBigDecimal.Test(this, "cst043")).ok = ((new IBM.ICU.Math.BigDecimal("+1E+009"))
                    .ToString()).Equals("1E+9");
            (new DiagBigDecimal.Test(this, "cst044")).ok = ((new IBM.ICU.Math.BigDecimal("0E+9"))
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "cst045")).ok = ((new IBM.ICU.Math.BigDecimal("1E+9"))
                    .ToString()).Equals("1E+9");
            (new DiagBigDecimal.Test(this, "cst046")).ok = ((new IBM.ICU.Math.BigDecimal("1E+09"))
                    .ToString()).Equals("1E+9");
            (new DiagBigDecimal.Test(this, "cst047")).ok = ((new IBM.ICU.Math.BigDecimal("1e+90"))
                    .ToString()).Equals("1E+90");
            (new DiagBigDecimal.Test(this, "cst048")).ok = ((new IBM.ICU.Math.BigDecimal("1E+009"))
                    .ToString()).Equals("1E+9");
            (new DiagBigDecimal.Test(this, "cst049")).ok = ((new IBM.ICU.Math.BigDecimal("0E+9"))
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "cst050")).ok = ((new IBM.ICU.Math.BigDecimal("1E9"))
                    .ToString()).Equals("1E+9");
            (new DiagBigDecimal.Test(this, "cst051")).ok = ((new IBM.ICU.Math.BigDecimal("1e09"))
                    .ToString()).Equals("1E+9");
            (new DiagBigDecimal.Test(this, "cst052")).ok = ((new IBM.ICU.Math.BigDecimal("1E90"))
                    .ToString()).Equals("1E+90");
            (new DiagBigDecimal.Test(this, "cst053")).ok = ((new IBM.ICU.Math.BigDecimal("1E009"))
                    .ToString()).Equals("1E+9");
            (new DiagBigDecimal.Test(this, "cst054")).ok = ((new IBM.ICU.Math.BigDecimal("0E9"))
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "cst055")).ok = ((new IBM.ICU.Math.BigDecimal("0.000e+0"))
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "cst056")).ok = ((new IBM.ICU.Math.BigDecimal("0.000E-1"))
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "cst057")).ok = ((new IBM.ICU.Math.BigDecimal("4E+9"))
                    .ToString()).Equals("4E+9");
            (new DiagBigDecimal.Test(this, "cst058")).ok = ((new IBM.ICU.Math.BigDecimal("44E+9"))
                    .ToString()).Equals("4.4E+10");
            (new DiagBigDecimal.Test(this, "cst059")).ok = ((new IBM.ICU.Math.BigDecimal("0.73e-7"))
                    .ToString()).Equals("7.3E-8");
            (new DiagBigDecimal.Test(this, "cst060")).ok = ((new IBM.ICU.Math.BigDecimal("00E+9"))
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "cst061")).ok = ((new IBM.ICU.Math.BigDecimal("00E-9"))
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "cst062")).ok = ((new IBM.ICU.Math.BigDecimal("10E+9"))
                    .ToString()).Equals("1.0E+10");
            (new DiagBigDecimal.Test(this, "cst063")).ok = ((new IBM.ICU.Math.BigDecimal("10E+09"))
                    .ToString()).Equals("1.0E+10");
            (new DiagBigDecimal.Test(this, "cst064")).ok = ((new IBM.ICU.Math.BigDecimal("10e+90"))
                    .ToString()).Equals("1.0E+91");
            (new DiagBigDecimal.Test(this, "cst065")).ok = ((new IBM.ICU.Math.BigDecimal("10E+009"))
                    .ToString()).Equals("1.0E+10");
            (new DiagBigDecimal.Test(this, "cst066")).ok = ((new IBM.ICU.Math.BigDecimal("100e+9"))
                    .ToString()).Equals("1.00E+11");
            (new DiagBigDecimal.Test(this, "cst067")).ok = ((new IBM.ICU.Math.BigDecimal("100e+09"))
                    .ToString()).Equals("1.00E+11");
            (new DiagBigDecimal.Test(this, "cst068")).ok = ((new IBM.ICU.Math.BigDecimal("100E+90"))
                    .ToString()).Equals("1.00E+92");
            (new DiagBigDecimal.Test(this, "cst069")).ok = ((new IBM.ICU.Math.BigDecimal("100e+009"))
                    .ToString()).Equals("1.00E+11");

            (new DiagBigDecimal.Test(this, "cst070")).ok = ((new IBM.ICU.Math.BigDecimal("1.265"))
                    .ToString()).Equals("1.265");
            (new DiagBigDecimal.Test(this, "cst071")).ok = ((new IBM.ICU.Math.BigDecimal("1.265E-20"))
                    .ToString()).Equals("1.265E-20");
            (new DiagBigDecimal.Test(this, "cst072")).ok = ((new IBM.ICU.Math.BigDecimal("1.265E-8"))
                    .ToString()).Equals("1.265E-8");
            (new DiagBigDecimal.Test(this, "cst073")).ok = ((new IBM.ICU.Math.BigDecimal("1.265E-4"))
                    .ToString()).Equals("1.265E-4");
            (new DiagBigDecimal.Test(this, "cst074")).ok = ((new IBM.ICU.Math.BigDecimal("1.265E-3"))
                    .ToString()).Equals("1.265E-3");
            (new DiagBigDecimal.Test(this, "cst075")).ok = ((new IBM.ICU.Math.BigDecimal("1.265E-2"))
                    .ToString()).Equals("1.265E-2");
            (new DiagBigDecimal.Test(this, "cst076")).ok = ((new IBM.ICU.Math.BigDecimal("1.265E-1"))
                    .ToString()).Equals("1.265E-1");
            (new DiagBigDecimal.Test(this, "cst077")).ok = ((new IBM.ICU.Math.BigDecimal("1.265E-0"))
                    .ToString()).Equals("1.265");
            (new DiagBigDecimal.Test(this, "cst078")).ok = ((new IBM.ICU.Math.BigDecimal("1.265E+1"))
                    .ToString()).Equals("1.265E+1");
            (new DiagBigDecimal.Test(this, "cst079")).ok = ((new IBM.ICU.Math.BigDecimal("1.265E+2"))
                    .ToString()).Equals("1.265E+2");
            (new DiagBigDecimal.Test(this, "cst080")).ok = ((new IBM.ICU.Math.BigDecimal("1.265E+3"))
                    .ToString()).Equals("1.265E+3");
            (new DiagBigDecimal.Test(this, "cst081")).ok = ((new IBM.ICU.Math.BigDecimal("1.265E+4"))
                    .ToString()).Equals("1.265E+4");
            (new DiagBigDecimal.Test(this, "cst082")).ok = ((new IBM.ICU.Math.BigDecimal("1.265E+8"))
                    .ToString()).Equals("1.265E+8");
            (new DiagBigDecimal.Test(this, "cst083")).ok = ((new IBM.ICU.Math.BigDecimal("1.265E+20"))
                    .ToString()).Equals("1.265E+20");

            (new DiagBigDecimal.Test(this, "cst090")).ok = ((new IBM.ICU.Math.BigDecimal("12.65"))
                    .ToString()).Equals("12.65");
            (new DiagBigDecimal.Test(this, "cst091")).ok = ((new IBM.ICU.Math.BigDecimal("12.65E-20"))
                    .ToString()).Equals("1.265E-19");
            (new DiagBigDecimal.Test(this, "cst092")).ok = ((new IBM.ICU.Math.BigDecimal("12.65E-8"))
                    .ToString()).Equals("1.265E-7");
            (new DiagBigDecimal.Test(this, "cst093")).ok = ((new IBM.ICU.Math.BigDecimal("12.65E-4"))
                    .ToString()).Equals("1.265E-3");
            (new DiagBigDecimal.Test(this, "cst094")).ok = ((new IBM.ICU.Math.BigDecimal("12.65E-3"))
                    .ToString()).Equals("1.265E-2");
            (new DiagBigDecimal.Test(this, "cst095")).ok = ((new IBM.ICU.Math.BigDecimal("12.65E-2"))
                    .ToString()).Equals("1.265E-1");
            (new DiagBigDecimal.Test(this, "cst096")).ok = ((new IBM.ICU.Math.BigDecimal("12.65E-1"))
                    .ToString()).Equals("1.265");
            (new DiagBigDecimal.Test(this, "cst097")).ok = ((new IBM.ICU.Math.BigDecimal("12.65E-0"))
                    .ToString()).Equals("1.265E+1");
            (new DiagBigDecimal.Test(this, "cst098")).ok = ((new IBM.ICU.Math.BigDecimal("12.65E+1"))
                    .ToString()).Equals("1.265E+2");
            (new DiagBigDecimal.Test(this, "cst099")).ok = ((new IBM.ICU.Math.BigDecimal("12.65E+2"))
                    .ToString()).Equals("1.265E+3");
            (new DiagBigDecimal.Test(this, "cst100")).ok = ((new IBM.ICU.Math.BigDecimal("12.65E+3"))
                    .ToString()).Equals("1.265E+4");
            (new DiagBigDecimal.Test(this, "cst101")).ok = ((new IBM.ICU.Math.BigDecimal("12.65E+4"))
                    .ToString()).Equals("1.265E+5");
            (new DiagBigDecimal.Test(this, "cst102")).ok = ((new IBM.ICU.Math.BigDecimal("12.65E+8"))
                    .ToString()).Equals("1.265E+9");
            (new DiagBigDecimal.Test(this, "cst103")).ok = ((new IBM.ICU.Math.BigDecimal("12.65E+20"))
                    .ToString()).Equals("1.265E+21");

            (new DiagBigDecimal.Test(this, "cst110")).ok = ((new IBM.ICU.Math.BigDecimal("126.5"))
                    .ToString()).Equals("126.5");
            (new DiagBigDecimal.Test(this, "cst111")).ok = ((new IBM.ICU.Math.BigDecimal("126.5E-20"))
                    .ToString()).Equals("1.265E-18");
            (new DiagBigDecimal.Test(this, "cst112")).ok = ((new IBM.ICU.Math.BigDecimal("126.5E-8"))
                    .ToString()).Equals("1.265E-6");
            (new DiagBigDecimal.Test(this, "cst113")).ok = ((new IBM.ICU.Math.BigDecimal("126.5E-4"))
                    .ToString()).Equals("1.265E-2");
            (new DiagBigDecimal.Test(this, "cst114")).ok = ((new IBM.ICU.Math.BigDecimal("126.5E-3"))
                    .ToString()).Equals("1.265E-1");
            (new DiagBigDecimal.Test(this, "cst115")).ok = ((new IBM.ICU.Math.BigDecimal("126.5E-2"))
                    .ToString()).Equals("1.265");
            (new DiagBigDecimal.Test(this, "cst116")).ok = ((new IBM.ICU.Math.BigDecimal("126.5E-1"))
                    .ToString()).Equals("1.265E+1");
            (new DiagBigDecimal.Test(this, "cst117")).ok = ((new IBM.ICU.Math.BigDecimal("126.5E-0"))
                    .ToString()).Equals("1.265E+2");
            (new DiagBigDecimal.Test(this, "cst118")).ok = ((new IBM.ICU.Math.BigDecimal("126.5E+1"))
                    .ToString()).Equals("1.265E+3");
            (new DiagBigDecimal.Test(this, "cst119")).ok = ((new IBM.ICU.Math.BigDecimal("126.5E+2"))
                    .ToString()).Equals("1.265E+4");
            (new DiagBigDecimal.Test(this, "cst120")).ok = ((new IBM.ICU.Math.BigDecimal("126.5E+3"))
                    .ToString()).Equals("1.265E+5");
            (new DiagBigDecimal.Test(this, "cst121")).ok = ((new IBM.ICU.Math.BigDecimal("126.5E+4"))
                    .ToString()).Equals("1.265E+6");
            (new DiagBigDecimal.Test(this, "cst122")).ok = ((new IBM.ICU.Math.BigDecimal("126.5E+8"))
                    .ToString()).Equals("1.265E+10");
            (new DiagBigDecimal.Test(this, "cst123")).ok = ((new IBM.ICU.Math.BigDecimal("126.5E+20"))
                    .ToString()).Equals("1.265E+22");

            (new DiagBigDecimal.Test(this, "cst130")).ok = ((new IBM.ICU.Math.BigDecimal("1265"))
                    .ToString()).Equals("1265");
            (new DiagBigDecimal.Test(this, "cst131")).ok = ((new IBM.ICU.Math.BigDecimal("1265E-20"))
                    .ToString()).Equals("1.265E-17");
            (new DiagBigDecimal.Test(this, "cst132")).ok = ((new IBM.ICU.Math.BigDecimal("1265E-8"))
                    .ToString()).Equals("1.265E-5");
            (new DiagBigDecimal.Test(this, "cst133")).ok = ((new IBM.ICU.Math.BigDecimal("1265E-4"))
                    .ToString()).Equals("1.265E-1");
            (new DiagBigDecimal.Test(this, "cst134")).ok = ((new IBM.ICU.Math.BigDecimal("1265E-3"))
                    .ToString()).Equals("1.265");
            (new DiagBigDecimal.Test(this, "cst135")).ok = ((new IBM.ICU.Math.BigDecimal("1265E-2"))
                    .ToString()).Equals("1.265E+1");
            (new DiagBigDecimal.Test(this, "cst136")).ok = ((new IBM.ICU.Math.BigDecimal("1265E-1"))
                    .ToString()).Equals("1.265E+2");
            (new DiagBigDecimal.Test(this, "cst137")).ok = ((new IBM.ICU.Math.BigDecimal("1265E-0"))
                    .ToString()).Equals("1.265E+3");
            (new DiagBigDecimal.Test(this, "cst138")).ok = ((new IBM.ICU.Math.BigDecimal("1265E+1"))
                    .ToString()).Equals("1.265E+4");
            (new DiagBigDecimal.Test(this, "cst139")).ok = ((new IBM.ICU.Math.BigDecimal("1265E+2"))
                    .ToString()).Equals("1.265E+5");
            (new DiagBigDecimal.Test(this, "cst140")).ok = ((new IBM.ICU.Math.BigDecimal("1265E+3"))
                    .ToString()).Equals("1.265E+6");
            (new DiagBigDecimal.Test(this, "cst141")).ok = ((new IBM.ICU.Math.BigDecimal("1265E+4"))
                    .ToString()).Equals("1.265E+7");
            (new DiagBigDecimal.Test(this, "cst142")).ok = ((new IBM.ICU.Math.BigDecimal("1265E+8"))
                    .ToString()).Equals("1.265E+11");
            (new DiagBigDecimal.Test(this, "cst143")).ok = ((new IBM.ICU.Math.BigDecimal("1265E+20"))
                    .ToString()).Equals("1.265E+23");

            (new DiagBigDecimal.Test(this, "cst150")).ok = ((new IBM.ICU.Math.BigDecimal("0.1265"))
                    .ToString()).Equals("0.1265");
            (new DiagBigDecimal.Test(this, "cst151")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.1265E-20")).ToString()).Equals("1.265E-21");
            (new DiagBigDecimal.Test(this, "cst152")).ok = ((new IBM.ICU.Math.BigDecimal("0.1265E-8"))
                    .ToString()).Equals("1.265E-9");
            (new DiagBigDecimal.Test(this, "cst153")).ok = ((new IBM.ICU.Math.BigDecimal("0.1265E-4"))
                    .ToString()).Equals("1.265E-5");
            (new DiagBigDecimal.Test(this, "cst154")).ok = ((new IBM.ICU.Math.BigDecimal("0.1265E-3"))
                    .ToString()).Equals("1.265E-4");
            (new DiagBigDecimal.Test(this, "cst155")).ok = ((new IBM.ICU.Math.BigDecimal("0.1265E-2"))
                    .ToString()).Equals("1.265E-3");
            (new DiagBigDecimal.Test(this, "cst156")).ok = ((new IBM.ICU.Math.BigDecimal("0.1265E-1"))
                    .ToString()).Equals("1.265E-2");
            (new DiagBigDecimal.Test(this, "cst157")).ok = ((new IBM.ICU.Math.BigDecimal("0.1265E-0"))
                    .ToString()).Equals("1.265E-1");
            (new DiagBigDecimal.Test(this, "cst158")).ok = ((new IBM.ICU.Math.BigDecimal("0.1265E+1"))
                    .ToString()).Equals("1.265");
            (new DiagBigDecimal.Test(this, "cst159")).ok = ((new IBM.ICU.Math.BigDecimal("0.1265E+2"))
                    .ToString()).Equals("1.265E+1");
            (new DiagBigDecimal.Test(this, "cst160")).ok = ((new IBM.ICU.Math.BigDecimal("0.1265E+3"))
                    .ToString()).Equals("1.265E+2");
            (new DiagBigDecimal.Test(this, "cst161")).ok = ((new IBM.ICU.Math.BigDecimal("0.1265E+4"))
                    .ToString()).Equals("1.265E+3");
            (new DiagBigDecimal.Test(this, "cst162")).ok = ((new IBM.ICU.Math.BigDecimal("0.1265E+8"))
                    .ToString()).Equals("1.265E+7");
            (new DiagBigDecimal.Test(this, "cst163")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.1265E+20")).ToString()).Equals("1.265E+19");

            (new DiagBigDecimal.Test(this, "cst170")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.09e999999999")).ToString()).Equals("9E+999999997");
            (new DiagBigDecimal.Test(this, "cst171")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.9e999999999")).ToString()).Equals("9E+999999998");
            (new DiagBigDecimal.Test(this, "cst172")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "9e999999999")).ToString()).Equals("9E+999999999");
            (new DiagBigDecimal.Test(this, "cst173")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "9.9e999999999")).ToString()).Equals("9.9E+999999999");
            (new DiagBigDecimal.Test(this, "cst174")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "9.99e999999999")).ToString()).Equals("9.99E+999999999");
            (new DiagBigDecimal.Test(this, "cst175")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "9.99e-999999999")).ToString()).Equals("9.99E-999999999");
            (new DiagBigDecimal.Test(this, "cst176")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "9.9e-999999999")).ToString()).Equals("9.9E-999999999");
            (new DiagBigDecimal.Test(this, "cst177")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "9e-999999999")).ToString()).Equals("9E-999999999");
            (new DiagBigDecimal.Test(this, "cst179")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "99e-999999999")).ToString()).Equals("9.9E-999999998");
            (new DiagBigDecimal.Test(this, "cst180")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "999e-999999999")).ToString()).Equals("9.99E-999999997");

            // baddies --
            badstrings = new String[] { "1..2", ".", "..", "++1", "--1",
	                "-+1", "+-1", "12e", "12e++", "12f4", " +1", "+ 1", "12 ",
	                " + 1", " - 1 ", "x", "-1-", "12-", "3+", "", "1e-",
	                "7e1000000000", "", "e100", "\u0e5a", "\u0b65", "99e999999999",
	                "999e999999999", "0.9e-999999999", "0.09e-999999999",
	                "0.1e1000000000", "10e-1000000000", "0.9e9999999999",
	                "99e-9999999999", "111e9999999999",
	                "1111e-9999999999" + " " + "111e*123", "111e123-", "111e+12+",
	                "111e1-3-", "111e1*23", "111e1e+3", "1e1.0", "1e123e", "ten",
	                "ONE", "1e.1", "1e1.", "1ee", "e+1" }; // 200-203
            // 204-207
            // 208-211
            // 211-214
            // 215-219
            // 220-222
            // 223-224
            // 225-226
            // 227-228
            // 229-230
            // 231-232
            // 233-234
            // 235-237
            // 238-240
            // 241-244
            // 245-248

            // watch out for commas on continuation lines

            {
                int _16 = badstrings.Length;
                i = 0;
                for (; _16 > 0; _16--, i++)
                {
                    try
                    {
                        new IBM.ICU.Math.BigDecimal(badstrings[i]);
                        Say(">>> cst"
                                + (200 + i)
                                + ":"
                                + " "
                                + badstrings[i]
                                + " "
                                + (new IBM.ICU.Math.BigDecimal(badstrings[i]))
                                        .ToString());
                        flag = false;
                    }
                    catch (FormatException _17)
                    {
                        flag = true;
                    }
                    (new DiagBigDecimal.Test(this, "cst" + (200 + i))).ok = flag;
                }
            }/* i */

            try
            {
                new IBM.ICU.Math.BigDecimal((String)null);
                flag = false;
            }
            catch (NullReferenceException _18)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "cst301")).ok = flag;

            Summary("Constructors");
            return;
        }

        /// <summary>
        /// Mutation tests (checks that contents of constant objects are unchanged). 
        /// </summary>
        ///
        [Test]
        public void Diagmutation()
        {
            /* ---------------------------------------------------------------- */
            /* Final tests -- check constants haven't mutated */
            /* -- also that MC objects haven't mutated */
            /* ---------------------------------------------------------------- */
            (new DiagBigDecimal.Test(this, "cuc001")).ok = (IBM.ICU.Math.BigDecimal.ZERO.ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "cuc002")).ok = (IBM.ICU.Math.BigDecimal.ONE.ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "cuc003")).ok = (IBM.ICU.Math.BigDecimal.TEN.ToString())
                    .Equals("10");

            (new DiagBigDecimal.Test(this, "cuc010")).ok = IBM.ICU.Math.BigDecimal.ROUND_CEILING == IBM.ICU.Math.MathContext.ROUND_CEILING;
            (new DiagBigDecimal.Test(this, "cuc011")).ok = IBM.ICU.Math.BigDecimal.ROUND_DOWN == IBM.ICU.Math.MathContext.ROUND_DOWN;
            (new DiagBigDecimal.Test(this, "cuc012")).ok = IBM.ICU.Math.BigDecimal.ROUND_FLOOR == IBM.ICU.Math.MathContext.ROUND_FLOOR;
            (new DiagBigDecimal.Test(this, "cuc013")).ok = IBM.ICU.Math.BigDecimal.ROUND_HALF_DOWN == IBM.ICU.Math.MathContext.ROUND_HALF_DOWN;
            (new DiagBigDecimal.Test(this, "cuc014")).ok = IBM.ICU.Math.BigDecimal.ROUND_HALF_EVEN == IBM.ICU.Math.MathContext.ROUND_HALF_EVEN;
            (new DiagBigDecimal.Test(this, "cuc015")).ok = IBM.ICU.Math.BigDecimal.ROUND_HALF_UP == IBM.ICU.Math.MathContext.ROUND_HALF_UP;
            (new DiagBigDecimal.Test(this, "cuc016")).ok = IBM.ICU.Math.BigDecimal.ROUND_UNNECESSARY == IBM.ICU.Math.MathContext.ROUND_UNNECESSARY;
            (new DiagBigDecimal.Test(this, "cuc017")).ok = IBM.ICU.Math.BigDecimal.ROUND_UP == IBM.ICU.Math.MathContext.ROUND_UP;

            (new DiagBigDecimal.Test(this, "cuc020")).ok = (IBM.ICU.Math.MathContext.DEFAULT
                    .GetDigits()) == 9;
            (new DiagBigDecimal.Test(this, "cuc021")).ok = (IBM.ICU.Math.MathContext.DEFAULT
                    .GetForm()) == IBM.ICU.Math.MathContext.SCIENTIFIC;
            (new DiagBigDecimal.Test(this, "cuc022")).ok = ((IBM.ICU.Math.MathContext.DEFAULT
                    .GetLostDigits()) ? 1 : 0) == 0;
            (new DiagBigDecimal.Test(this, "cuc023")).ok = (IBM.ICU.Math.MathContext.DEFAULT
                    .GetRoundingMode()) == IBM.ICU.Math.MathContext.ROUND_HALF_UP;

            // mc9 =MathContext(9)
            // mcld =MathContext(9, SCIENTIFIC, 1)
            // mcfd =MathContext(0, PLAIN)
            (new DiagBigDecimal.Test(this, "cuc030")).ok = (mc9.GetDigits()) == 9;
            (new DiagBigDecimal.Test(this, "cuc031")).ok = (mc9.GetForm()) == IBM.ICU.Math.MathContext.SCIENTIFIC;
            (new DiagBigDecimal.Test(this, "cuc032")).ok = ((mc9.GetLostDigits()) ? 1 : 0) == 0;
            (new DiagBigDecimal.Test(this, "cuc033")).ok = (mc9.GetRoundingMode()) == IBM.ICU.Math.MathContext.ROUND_HALF_UP;
            (new DiagBigDecimal.Test(this, "cuc034")).ok = (mcld.GetDigits()) == 9;
            (new DiagBigDecimal.Test(this, "cuc035")).ok = (mcld.GetForm()) == IBM.ICU.Math.MathContext.SCIENTIFIC;
            (new DiagBigDecimal.Test(this, "cuc036")).ok = ((mcld.GetLostDigits()) ? 1 : 0) == 1;
            (new DiagBigDecimal.Test(this, "cuc037")).ok = (mcld.GetRoundingMode()) == IBM.ICU.Math.MathContext.ROUND_HALF_UP;
            (new DiagBigDecimal.Test(this, "cuc038")).ok = (mcfd.GetDigits()) == 0;
            (new DiagBigDecimal.Test(this, "cuc039")).ok = (mcfd.GetForm()) == IBM.ICU.Math.MathContext.PLAIN;
            (new DiagBigDecimal.Test(this, "cuc040")).ok = ((mcfd.GetLostDigits()) ? 1 : 0) == 0;
            (new DiagBigDecimal.Test(this, "cuc041")).ok = (mcfd.GetRoundingMode()) == IBM.ICU.Math.MathContext.ROUND_HALF_UP;

            Summary("No mutation");
        }

        /* ----------------------------------------------------------------- */
        /* Operator test methods */
        /* ----------------------------------------------------------------- */
        // The use of context in these tests are primarily to show that they
        // are correctly passed to the methods, except that we check that
        // each method checks for lostDigits.

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.Abs"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagabs()
        {
            bool flag = false;
            System.ArithmeticException ae = null;

            // most of the function of this is tested by add
            (new DiagBigDecimal.Test(this, "abs001")).ok = ((new IBM.ICU.Math.BigDecimal("2")).Abs()
                    .ToString()).Equals("2");
            (new DiagBigDecimal.Test(this, "abs002")).ok = ((new IBM.ICU.Math.BigDecimal("-2"))
                    .Abs().ToString()).Equals("2");
            (new DiagBigDecimal.Test(this, "abs003")).ok = ((new IBM.ICU.Math.BigDecimal("+0.000"))
                    .Abs().ToString()).Equals("0.000");
            (new DiagBigDecimal.Test(this, "abs004")).ok = ((new IBM.ICU.Math.BigDecimal("00.000"))
                    .Abs().ToString()).Equals("0.000");
            (new DiagBigDecimal.Test(this, "abs005")).ok = ((new IBM.ICU.Math.BigDecimal("-0.000"))
                    .Abs().ToString()).Equals("0.000");
            (new DiagBigDecimal.Test(this, "abs006")).ok = ((new IBM.ICU.Math.BigDecimal("+0.000"))
                    .Abs(mcdef).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "abs007")).ok = ((new IBM.ICU.Math.BigDecimal("00.000"))
                    .Abs(mcdef).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "abs008")).ok = ((new IBM.ICU.Math.BigDecimal("-0.000"))
                    .Abs(mcdef).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "abs009")).ok = ((new IBM.ICU.Math.BigDecimal("-2000000"))
                    .Abs().ToString()).Equals("2000000");
            (new DiagBigDecimal.Test(this, "abs010")).ok = ((new IBM.ICU.Math.BigDecimal("-2000000"))
                    .Abs(mcdef).ToString()).Equals("2000000");
            (new DiagBigDecimal.Test(this, "abs011")).ok = ((new IBM.ICU.Math.BigDecimal("-2000000"))
                    .Abs(mc6).ToString()).Equals("2.00000E+6");
            (new DiagBigDecimal.Test(this, "abs012")).ok = ((new IBM.ICU.Math.BigDecimal("2000000"))
                    .Abs(mc6).ToString()).Equals("2.00000E+6");
            (new DiagBigDecimal.Test(this, "abs013")).ok = ((new IBM.ICU.Math.BigDecimal("0.2"))
                    .Abs().ToString()).Equals("0.2");
            (new DiagBigDecimal.Test(this, "abs014")).ok = ((new IBM.ICU.Math.BigDecimal("-0.2"))
                    .Abs().ToString()).Equals("0.2");
            (new DiagBigDecimal.Test(this, "abs015")).ok = ((new IBM.ICU.Math.BigDecimal("0.01"))
                    .Abs().ToString()).Equals("0.01");
            (new DiagBigDecimal.Test(this, "abs016")).ok = ((new IBM.ICU.Math.BigDecimal("-0.01"))
                    .Abs().ToString()).Equals("0.01");
            try
            {
                tenlong.Abs(mcld);
                flag = false;
            }
            catch (System.ArithmeticException _19)
            {
                ae = _19;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "abs020")).ok = flag;
            // check lostdigits not raised if digits=0 [monadic method]
            try
            {
                tenlong.Abs(mcld0);
                flag = true;
            }
            catch (System.ArithmeticException _20)
            {
                ae = _20;
                flag = false;
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "abs021")).ok = flag;
            try
            {
                IBM.ICU.Math.BigDecimal.TEN
                        .Abs((IBM.ICU.Math.MathContext)null);
                flag = false;
            }
            catch (NullReferenceException _21)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "abs022")).ok = flag;

            Summary("abs");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.Add(IBM.ICU.Dev.Test.BigDec.BigDecimal)"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagadd()
        {
            bool flag = false;
            IBM.ICU.Math.BigDecimal alhs;
            IBM.ICU.Math.BigDecimal arhs;
            System.ArithmeticException ae = null;

            // [first group are 'quick confidence check']
            (new DiagBigDecimal.Test(this, "add001")).ok = ((new IBM.ICU.Math.BigDecimal(2)).Add(
                    new IBM.ICU.Math.BigDecimal(3), mcdef).ToString())
                    .Equals("5");
            (new DiagBigDecimal.Test(this, "add003")).ok = ((new IBM.ICU.Math.BigDecimal("5.75"))
                    .Add(new IBM.ICU.Math.BigDecimal("3.3"), mcdef).ToString())
                    .Equals("9.05");
            (new DiagBigDecimal.Test(this, "add004")).ok = ((new IBM.ICU.Math.BigDecimal("5")).Add(
                    new IBM.ICU.Math.BigDecimal("-3"), mcdef).ToString())
                    .Equals("2");
            (new DiagBigDecimal.Test(this, "add005")).ok = ((new IBM.ICU.Math.BigDecimal("-5")).Add(
                    new IBM.ICU.Math.BigDecimal("-3"), mcdef).ToString())
                    .Equals("-8");
            (new DiagBigDecimal.Test(this, "add006")).ok = ((new IBM.ICU.Math.BigDecimal("-7")).Add(
                    new IBM.ICU.Math.BigDecimal("2.5"), mcdef).ToString())
                    .Equals("-4.5");
            (new DiagBigDecimal.Test(this, "add007")).ok = ((new IBM.ICU.Math.BigDecimal("0.7"))
                    .Add(new IBM.ICU.Math.BigDecimal("0.3"), mcdef).ToString())
                    .Equals("1.0");
            (new DiagBigDecimal.Test(this, "add008")).ok = ((new IBM.ICU.Math.BigDecimal("1.25"))
                    .Add(new IBM.ICU.Math.BigDecimal("1.25"), mcdef).ToString())
                    .Equals("2.50");
            (new DiagBigDecimal.Test(this, "add009")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "1.23456789")).Add(
                    new IBM.ICU.Math.BigDecimal("1.00000000"), mcdef)
                    .ToString()).Equals("2.23456789");

            (new DiagBigDecimal.Test(this, "add010")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "1.23456789")).Add(
                    new IBM.ICU.Math.BigDecimal("1.00000011"), mcdef)
                    .ToString()).Equals("2.23456800");

            (new DiagBigDecimal.Test(this, "add011")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444444")).Add(new IBM.ICU.Math.BigDecimal(
                    "0.5555555555"), mcdef).ToString()).Equals("1.00000000");

            (new DiagBigDecimal.Test(this, "add012")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444440")).Add(new IBM.ICU.Math.BigDecimal(
                    "0.5555555555"), mcdef).ToString()).Equals("1.00000000");

            (new DiagBigDecimal.Test(this, "add013")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444444")).Add(new IBM.ICU.Math.BigDecimal(
                    "0.5555555550"), mcdef).ToString()).Equals("0.999999999");

            (new DiagBigDecimal.Test(this, "add014")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444444999")).Add(new IBM.ICU.Math.BigDecimal("0"),
                    mcdef).ToString()).Equals("0.444444444");

            (new DiagBigDecimal.Test(this, "add015")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444445000")).Add(new IBM.ICU.Math.BigDecimal("0"),
                    mcdef).ToString()).Equals("0.444444445");

            (new DiagBigDecimal.Test(this, "add016")).ok = ((new IBM.ICU.Math.BigDecimal("70")).Add(
                    new IBM.ICU.Math.BigDecimal("10000e+9"), mcdef).ToString())
                    .Equals("1.00000000E+13");

            (new DiagBigDecimal.Test(this, "add017")).ok = ((new IBM.ICU.Math.BigDecimal("700"))
                    .Add(new IBM.ICU.Math.BigDecimal("10000e+9"), mcdef)
                    .ToString()).Equals("1.00000000E+13");

            (new DiagBigDecimal.Test(this, "add018")).ok = ((new IBM.ICU.Math.BigDecimal("7000"))
                    .Add(new IBM.ICU.Math.BigDecimal("10000e+9"), mcdef)
                    .ToString()).Equals("1.00000000E+13");

            (new DiagBigDecimal.Test(this, "add019")).ok = ((new IBM.ICU.Math.BigDecimal("70000"))
                    .Add(new IBM.ICU.Math.BigDecimal("10000e+9"), mcdef)
                    .ToString()).Equals("1.00000001E+13");

            (new DiagBigDecimal.Test(this, "add020")).ok = ((new IBM.ICU.Math.BigDecimal("700000"))
                    .Add(new IBM.ICU.Math.BigDecimal("10000e+9"), mcdef)
                    .ToString()).Equals("1.00000007E+13");

            // [Now the same group with fixed arithmetic]
            (new DiagBigDecimal.Test(this, "add030")).ok = ((new IBM.ICU.Math.BigDecimal(2))
                    .Add(new IBM.ICU.Math.BigDecimal(3)).ToString())
                    .Equals("5");
            (new DiagBigDecimal.Test(this, "add031")).ok = ((new IBM.ICU.Math.BigDecimal("5.75"))
                    .Add(new IBM.ICU.Math.BigDecimal("3.3")).ToString())
                    .Equals("9.05");
            (new DiagBigDecimal.Test(this, "add032")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Add(new IBM.ICU.Math.BigDecimal("-3")).ToString())
                    .Equals("2");
            (new DiagBigDecimal.Test(this, "add033")).ok = ((new IBM.ICU.Math.BigDecimal("-5"))
                    .Add(new IBM.ICU.Math.BigDecimal("-3")).ToString())
                    .Equals("-8");
            (new DiagBigDecimal.Test(this, "add034")).ok = ((new IBM.ICU.Math.BigDecimal("-7"))
                    .Add(new IBM.ICU.Math.BigDecimal("2.5")).ToString())
                    .Equals("-4.5");
            (new DiagBigDecimal.Test(this, "add035")).ok = ((new IBM.ICU.Math.BigDecimal("0.7"))
                    .Add(new IBM.ICU.Math.BigDecimal("0.3")).ToString())
                    .Equals("1.0");
            (new DiagBigDecimal.Test(this, "add036")).ok = ((new IBM.ICU.Math.BigDecimal("1.25"))
                    .Add(new IBM.ICU.Math.BigDecimal("1.25")).ToString())
                    .Equals("2.50");
            (new DiagBigDecimal.Test(this, "add037")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "1.23456789"))
                    .Add(new IBM.ICU.Math.BigDecimal("1.00000000")).ToString())
                    .Equals("2.23456789");

            (new DiagBigDecimal.Test(this, "add038")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "1.23456789"))
                    .Add(new IBM.ICU.Math.BigDecimal("1.00000011")).ToString())
                    .Equals("2.23456800");

            (new DiagBigDecimal.Test(this, "add039")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444444")).Add(new IBM.ICU.Math.BigDecimal(
                    "0.5555555555")).ToString()).Equals("0.9999999999");

            (new DiagBigDecimal.Test(this, "add040")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444440")).Add(new IBM.ICU.Math.BigDecimal(
                    "0.5555555555")).ToString()).Equals("0.9999999995");

            (new DiagBigDecimal.Test(this, "add041")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444444")).Add(new IBM.ICU.Math.BigDecimal(
                    "0.5555555550")).ToString()).Equals("0.9999999994");

            (new DiagBigDecimal.Test(this, "add042")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444444999")).Add(new IBM.ICU.Math.BigDecimal("0"))
                    .ToString()).Equals("0.4444444444999");

            (new DiagBigDecimal.Test(this, "add043")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444445000")).Add(new IBM.ICU.Math.BigDecimal("0"))
                    .ToString()).Equals("0.4444444445000");

            (new DiagBigDecimal.Test(this, "add044")).ok = ((new IBM.ICU.Math.BigDecimal("70"))
                    .Add(new IBM.ICU.Math.BigDecimal("10000e+9")).ToString())
                    .Equals("10000000000070");

            (new DiagBigDecimal.Test(this, "add045")).ok = ((new IBM.ICU.Math.BigDecimal("700"))
                    .Add(new IBM.ICU.Math.BigDecimal("10000e+9")).ToString())
                    .Equals("10000000000700");

            (new DiagBigDecimal.Test(this, "add046")).ok = ((new IBM.ICU.Math.BigDecimal("7000"))
                    .Add(new IBM.ICU.Math.BigDecimal("10000e+9")).ToString())
                    .Equals("10000000007000");

            (new DiagBigDecimal.Test(this, "add047")).ok = ((new IBM.ICU.Math.BigDecimal("70000"))
                    .Add(new IBM.ICU.Math.BigDecimal("10000e+9")).ToString())
                    .Equals("10000000070000");

            (new DiagBigDecimal.Test(this, "add048")).ok = ((new IBM.ICU.Math.BigDecimal("700000"))
                    .Add(new IBM.ICU.Math.BigDecimal("10000e+9")).ToString())
                    .Equals("10000000700000");

            // symmetry:
            (new DiagBigDecimal.Test(this, "add049")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Add(new IBM.ICU.Math.BigDecimal("70"), mcdef).ToString())
                    .Equals("1.00000000E+13");

            (new DiagBigDecimal.Test(this, "add050")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Add(new IBM.ICU.Math.BigDecimal("700"), mcdef).ToString())
                    .Equals("1.00000000E+13");

            (new DiagBigDecimal.Test(this, "add051")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Add(new IBM.ICU.Math.BigDecimal("7000"), mcdef).ToString())
                    .Equals("1.00000000E+13");

            (new DiagBigDecimal.Test(this, "add052")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Add(new IBM.ICU.Math.BigDecimal("70000"), mcdef)
                    .ToString()).Equals("1.00000001E+13");

            (new DiagBigDecimal.Test(this, "add053")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Add(new IBM.ICU.Math.BigDecimal("700000"), mcdef)
                    .ToString()).Equals("1.00000007E+13");

            (new DiagBigDecimal.Test(this, "add054")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Add(new IBM.ICU.Math.BigDecimal("70")).ToString())
                    .Equals("10000000000070");

            (new DiagBigDecimal.Test(this, "add055")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Add(new IBM.ICU.Math.BigDecimal("700")).ToString())
                    .Equals("10000000000700");

            (new DiagBigDecimal.Test(this, "add056")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Add(new IBM.ICU.Math.BigDecimal("7000")).ToString())
                    .Equals("10000000007000");

            (new DiagBigDecimal.Test(this, "add057")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Add(new IBM.ICU.Math.BigDecimal("70000")).ToString())
                    .Equals("10000000070000");

            (new DiagBigDecimal.Test(this, "add058")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Add(new IBM.ICU.Math.BigDecimal("700000")).ToString())
                    .Equals("10000000700000");

            // some rounding effects
            (new DiagBigDecimal.Test(this, "add059")).ok = ((new IBM.ICU.Math.BigDecimal("0.9998"))
                    .Add(new IBM.ICU.Math.BigDecimal("0.0000")).ToString())
                    .Equals("0.9998");

            (new DiagBigDecimal.Test(this, "add060")).ok = ((new IBM.ICU.Math.BigDecimal("0.9998"))
                    .Add(new IBM.ICU.Math.BigDecimal("0.0001")).ToString())
                    .Equals("0.9999");

            (new DiagBigDecimal.Test(this, "add061")).ok = ((new IBM.ICU.Math.BigDecimal("0.9998"))
                    .Add(new IBM.ICU.Math.BigDecimal("0.0002")).ToString())
                    .Equals("1.0000");

            (new DiagBigDecimal.Test(this, "add062")).ok = ((new IBM.ICU.Math.BigDecimal("0.9998"))
                    .Add(new IBM.ICU.Math.BigDecimal("0.0003")).ToString())
                    .Equals("1.0001");

            // MC
            (new DiagBigDecimal.Test(this, "add070")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Add(new IBM.ICU.Math.BigDecimal("70000"), mcfd).ToString())
                    .Equals("10000000070000");

            (new DiagBigDecimal.Test(this, "add071")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Add(new IBM.ICU.Math.BigDecimal("70000"), mcdef)
                    .ToString()).Equals("1.00000001E+13");

            (new DiagBigDecimal.Test(this, "add072")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Add(new IBM.ICU.Math.BigDecimal("70000"), mc6).ToString())
                    .Equals("1.00000E+13");

            // zero preservation
            (new DiagBigDecimal.Test(this, "add080")).ok = (IBM.ICU.Math.BigDecimal.ONE.Add(
                    new IBM.ICU.Math.BigDecimal("0.0001"), mc6).ToString())
                    .Equals("1.0001");

            (new DiagBigDecimal.Test(this, "add081")).ok = (IBM.ICU.Math.BigDecimal.ONE.Add(
                    new IBM.ICU.Math.BigDecimal("0.00001"), mc6).ToString())
                    .Equals("1.00001");

            (new DiagBigDecimal.Test(this, "add082")).ok = (IBM.ICU.Math.BigDecimal.ONE.Add(
                    new IBM.ICU.Math.BigDecimal("0.000001"), mc6).ToString())
                    .Equals("1.00000");

            (new DiagBigDecimal.Test(this, "add083")).ok = (IBM.ICU.Math.BigDecimal.ONE.Add(
                    new IBM.ICU.Math.BigDecimal("0.0000001"), mc6).ToString())
                    .Equals("1.00000");

            (new DiagBigDecimal.Test(this, "add084")).ok = (IBM.ICU.Math.BigDecimal.ONE.Add(
                    new IBM.ICU.Math.BigDecimal("0.00000001"), mc6).ToString())
                    .Equals("1.00000");

            // more fixed, LHS swaps
            (new DiagBigDecimal.Test(this, "add090")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "-56267E-10")).Add(zero).ToString()).Equals("-0.0000056267");
            (new DiagBigDecimal.Test(this, "add091")).ok = ((new IBM.ICU.Math.BigDecimal("-56267E-6"))
                    .Add(zero).ToString()).Equals("-0.056267");
            (new DiagBigDecimal.Test(this, "add092")).ok = ((new IBM.ICU.Math.BigDecimal("-56267E-5"))
                    .Add(zero).ToString()).Equals("-0.56267");
            (new DiagBigDecimal.Test(this, "add093")).ok = ((new IBM.ICU.Math.BigDecimal("-56267E-4"))
                    .Add(zero).ToString()).Equals("-5.6267");
            (new DiagBigDecimal.Test(this, "add094")).ok = ((new IBM.ICU.Math.BigDecimal("-56267E-3"))
                    .Add(zero).ToString()).Equals("-56.267");
            (new DiagBigDecimal.Test(this, "add095")).ok = ((new IBM.ICU.Math.BigDecimal("-56267E-2"))
                    .Add(zero).ToString()).Equals("-562.67");
            (new DiagBigDecimal.Test(this, "add096")).ok = ((new IBM.ICU.Math.BigDecimal("-56267E-1"))
                    .Add(zero).ToString()).Equals("-5626.7");
            (new DiagBigDecimal.Test(this, "add097")).ok = ((new IBM.ICU.Math.BigDecimal("-56267E-0"))
                    .Add(zero).ToString()).Equals("-56267");
            (new DiagBigDecimal.Test(this, "add098")).ok = ((new IBM.ICU.Math.BigDecimal("-5E-10"))
                    .Add(zero).ToString()).Equals("-0.0000000005");
            (new DiagBigDecimal.Test(this, "add099")).ok = ((new IBM.ICU.Math.BigDecimal("-5E-5"))
                    .Add(zero).ToString()).Equals("-0.00005");
            (new DiagBigDecimal.Test(this, "add100")).ok = ((new IBM.ICU.Math.BigDecimal("-5E-1"))
                    .Add(zero).ToString()).Equals("-0.5");
            (new DiagBigDecimal.Test(this, "add101")).ok = ((new IBM.ICU.Math.BigDecimal("-5E-10"))
                    .Add(zero).ToString()).Equals("-0.0000000005");
            (new DiagBigDecimal.Test(this, "add102")).ok = ((new IBM.ICU.Math.BigDecimal("-5E-5"))
                    .Add(zero).ToString()).Equals("-0.00005");
            (new DiagBigDecimal.Test(this, "add103")).ok = ((new IBM.ICU.Math.BigDecimal("-5E-1"))
                    .Add(zero).ToString()).Equals("-0.5");
            (new DiagBigDecimal.Test(this, "add104")).ok = ((new IBM.ICU.Math.BigDecimal("-5E10"))
                    .Add(zero).ToString()).Equals("-50000000000");
            (new DiagBigDecimal.Test(this, "add105")).ok = ((new IBM.ICU.Math.BigDecimal("-5E5"))
                    .Add(zero).ToString()).Equals("-500000");
            (new DiagBigDecimal.Test(this, "add106")).ok = ((new IBM.ICU.Math.BigDecimal("-5E1"))
                    .Add(zero).ToString()).Equals("-50");
            (new DiagBigDecimal.Test(this, "add107")).ok = ((new IBM.ICU.Math.BigDecimal("-5E0"))
                    .Add(zero).ToString()).Equals("-5");

            // more fixed, RHS swaps
            (new DiagBigDecimal.Test(this, "add108")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-56267E-10")).ToString()).Equals("-0.0000056267");
            (new DiagBigDecimal.Test(this, "add109")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-56267E-6")).ToString()).Equals("-0.056267");
            (new DiagBigDecimal.Test(this, "add110")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-56267E-5")).ToString()).Equals("-0.56267");
            (new DiagBigDecimal.Test(this, "add111")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-56267E-4")).ToString()).Equals("-5.6267");
            (new DiagBigDecimal.Test(this, "add112")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-56267E-3")).ToString()).Equals("-56.267");
            (new DiagBigDecimal.Test(this, "add113")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-56267E-2")).ToString()).Equals("-562.67");
            (new DiagBigDecimal.Test(this, "add114")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-56267E-1")).ToString()).Equals("-5626.7");
            (new DiagBigDecimal.Test(this, "add115")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-56267E-0")).ToString()).Equals("-56267");
            (new DiagBigDecimal.Test(this, "add116")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-5E-10")).ToString()).Equals("-0.0000000005");
            (new DiagBigDecimal.Test(this, "add117")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-5E-5")).ToString()).Equals("-0.00005");
            (new DiagBigDecimal.Test(this, "add118")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-5E-1")).ToString()).Equals("-0.5");
            (new DiagBigDecimal.Test(this, "add129")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-5E-10")).ToString()).Equals("-0.0000000005");
            (new DiagBigDecimal.Test(this, "add130")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-5E-5")).ToString()).Equals("-0.00005");
            (new DiagBigDecimal.Test(this, "add131")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-5E-1")).ToString()).Equals("-0.5");
            (new DiagBigDecimal.Test(this, "add132")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-5E10")).ToString()).Equals("-50000000000");
            (new DiagBigDecimal.Test(this, "add133")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-5E5")).ToString()).Equals("-500000");
            (new DiagBigDecimal.Test(this, "add134")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-5E1")).ToString()).Equals("-50");
            (new DiagBigDecimal.Test(this, "add135")).ok = (zero.Add(new IBM.ICU.Math.BigDecimal(
                    "-5E0")).ToString()).Equals("-5");

            // [some of the next group are really constructor tests]
            (new DiagBigDecimal.Test(this, "add140")).ok = ((new IBM.ICU.Math.BigDecimal("00.0"))
                    .Add(new IBM.ICU.Math.BigDecimal("0.00"), mcdef).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "add141")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .Add(new IBM.ICU.Math.BigDecimal("00.0"), mcdef).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "add142")).ok = ((new IBM.ICU.Math.BigDecimal("3")).Add(
                    new IBM.ICU.Math.BigDecimal(".3"), mcdef).ToString())
                    .Equals("3.3");
            (new DiagBigDecimal.Test(this, "add143")).ok = ((new IBM.ICU.Math.BigDecimal("3.")).Add(
                    new IBM.ICU.Math.BigDecimal(".3"), mcdef).ToString())
                    .Equals("3.3");
            (new DiagBigDecimal.Test(this, "add144")).ok = ((new IBM.ICU.Math.BigDecimal("3.0"))
                    .Add(new IBM.ICU.Math.BigDecimal(".3"), mcdef).ToString())
                    .Equals("3.3");
            (new DiagBigDecimal.Test(this, "add145")).ok = ((new IBM.ICU.Math.BigDecimal("3.00"))
                    .Add(new IBM.ICU.Math.BigDecimal(".3"), mcdef).ToString())
                    .Equals("3.30");
            (new DiagBigDecimal.Test(this, "add146")).ok = ((new IBM.ICU.Math.BigDecimal("3")).Add(
                    new IBM.ICU.Math.BigDecimal("3"), mcdef).ToString())
                    .Equals("6");
            (new DiagBigDecimal.Test(this, "add147")).ok = ((new IBM.ICU.Math.BigDecimal("3")).Add(
                    new IBM.ICU.Math.BigDecimal("+3"), mcdef).ToString())
                    .Equals("6");
            (new DiagBigDecimal.Test(this, "add148")).ok = ((new IBM.ICU.Math.BigDecimal("3")).Add(
                    new IBM.ICU.Math.BigDecimal("-3"), mcdef).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "add149")).ok = ((new IBM.ICU.Math.BigDecimal("0.03"))
                    .Add(new IBM.ICU.Math.BigDecimal("-0.03"), mcdef)
                    .ToString()).Equals("0");

            (new DiagBigDecimal.Test(this, "add150")).ok = ((new IBM.ICU.Math.BigDecimal("00.0"))
                    .Add(new IBM.ICU.Math.BigDecimal("0.00")).ToString())
                    .Equals("0.00");
            (new DiagBigDecimal.Test(this, "add151")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .Add(new IBM.ICU.Math.BigDecimal("00.0")).ToString())
                    .Equals("0.00");
            (new DiagBigDecimal.Test(this, "add152")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Add(new IBM.ICU.Math.BigDecimal(".3")).ToString())
                    .Equals("3.3");
            (new DiagBigDecimal.Test(this, "add153")).ok = ((new IBM.ICU.Math.BigDecimal("3."))
                    .Add(new IBM.ICU.Math.BigDecimal(".3")).ToString())
                    .Equals("3.3");
            (new DiagBigDecimal.Test(this, "add154")).ok = ((new IBM.ICU.Math.BigDecimal("3.0"))
                    .Add(new IBM.ICU.Math.BigDecimal(".3")).ToString())
                    .Equals("3.3");
            (new DiagBigDecimal.Test(this, "add155")).ok = ((new IBM.ICU.Math.BigDecimal("3.00"))
                    .Add(new IBM.ICU.Math.BigDecimal(".3")).ToString())
                    .Equals("3.30");
            (new DiagBigDecimal.Test(this, "add156")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Add(new IBM.ICU.Math.BigDecimal("3")).ToString())
                    .Equals("6");
            (new DiagBigDecimal.Test(this, "add157")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Add(new IBM.ICU.Math.BigDecimal("+3")).ToString())
                    .Equals("6");
            (new DiagBigDecimal.Test(this, "add158")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Add(new IBM.ICU.Math.BigDecimal("-3")).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "add159")).ok = ((new IBM.ICU.Math.BigDecimal("0.3"))
                    .Add(new IBM.ICU.Math.BigDecimal("-0.3")).ToString())
                    .Equals("0.0");
            (new DiagBigDecimal.Test(this, "add160")).ok = ((new IBM.ICU.Math.BigDecimal("0.03"))
                    .Add(new IBM.ICU.Math.BigDecimal("-0.03")).ToString())
                    .Equals("0.00");
            (new DiagBigDecimal.Test(this, "add161")).ok = ((new IBM.ICU.Math.BigDecimal("7E+12"))
                    .Add(new IBM.ICU.Math.BigDecimal("-1"), mcfd).ToString())
                    .Equals("6999999999999");

            (new DiagBigDecimal.Test(this, "add162")).ok = ((new IBM.ICU.Math.BigDecimal("7E+12"))
                    .Add(new IBM.ICU.Math.BigDecimal("1.11"), mcfd).ToString())
                    .Equals("7000000000001.11");

            (new DiagBigDecimal.Test(this, "add163")).ok = ((new IBM.ICU.Math.BigDecimal("1.11"))
                    .Add(new IBM.ICU.Math.BigDecimal("7E+12"), mcfd).ToString())
                    .Equals("7000000000001.11");

            // input preparation tests
            alhs = new IBM.ICU.Math.BigDecimal("12345678900000");
            arhs = new IBM.ICU.Math.BigDecimal("9999999999999");
            (new DiagBigDecimal.Test(this, "add170")).ok = (alhs.Add(arhs, mc3).ToString())
                    .Equals("2.23E+13");
            (new DiagBigDecimal.Test(this, "add171")).ok = (arhs.Add(alhs, mc3).ToString())
                    .Equals("2.23E+13");
            (new DiagBigDecimal.Test(this, "add172")).ok = ((new IBM.ICU.Math.BigDecimal("12E+3"))
                    .Add(new IBM.ICU.Math.BigDecimal("3456"), mc3).ToString())
                    .Equals("1.55E+4");
            // next was 1.54E+4 under old [truncate to digits+1] rules
            (new DiagBigDecimal.Test(this, "add173")).ok = ((new IBM.ICU.Math.BigDecimal("12E+3"))
                    .Add(new IBM.ICU.Math.BigDecimal("3446"), mc3).ToString())
                    .Equals("1.55E+4");
            (new DiagBigDecimal.Test(this, "add174")).ok = ((new IBM.ICU.Math.BigDecimal("12E+3"))
                    .Add(new IBM.ICU.Math.BigDecimal("3454"), mc3).ToString())
                    .Equals("1.55E+4");
            (new DiagBigDecimal.Test(this, "add175")).ok = ((new IBM.ICU.Math.BigDecimal("12E+3"))
                    .Add(new IBM.ICU.Math.BigDecimal("3444"), mc3).ToString())
                    .Equals("1.54E+4");

            (new DiagBigDecimal.Test(this, "add176")).ok = ((new IBM.ICU.Math.BigDecimal("3456"))
                    .Add(new IBM.ICU.Math.BigDecimal("12E+3"), mc3).ToString())
                    .Equals("1.55E+4");
            // next was 1.54E+4 under old [truncate to digits+1] rules
            (new DiagBigDecimal.Test(this, "add177")).ok = ((new IBM.ICU.Math.BigDecimal("3446"))
                    .Add(new IBM.ICU.Math.BigDecimal("12E+3"), mc3).ToString())
                    .Equals("1.55E+4");
            (new DiagBigDecimal.Test(this, "add178")).ok = ((new IBM.ICU.Math.BigDecimal("3454"))
                    .Add(new IBM.ICU.Math.BigDecimal("12E+3"), mc3).ToString())
                    .Equals("1.55E+4");
            (new DiagBigDecimal.Test(this, "add179")).ok = ((new IBM.ICU.Math.BigDecimal("3444"))
                    .Add(new IBM.ICU.Math.BigDecimal("12E+3"), mc3).ToString())
                    .Equals("1.54E+4");

            try
            {
                ten.Add((IBM.ICU.Math.BigDecimal)null);
                flag = false;
            }
            catch (NullReferenceException _22)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "add200")).ok = flag;
            try
            {
                ten.Add(ten, (IBM.ICU.Math.MathContext)null);
                flag = false;
            }
            catch (NullReferenceException _23)
            {
                flag = true;
            }/* checknull2 */
            (new DiagBigDecimal.Test(this, "add201")).ok = flag;

            try
            {
                tenlong.Add(IBM.ICU.Math.BigDecimal.ZERO, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _24)
            {
                ae = _24;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "add202")).ok = flag;
            try
            {
                IBM.ICU.Math.BigDecimal.ZERO.Add(tenlong, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _25)
            {
                ae = _25;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "add203")).ok = flag;

            // check lostdigits not raised if digits=0 [dyadic method]
            try
            {
                tenlong.Add(IBM.ICU.Math.BigDecimal.ZERO, mcld0);
                flag = true;
            }
            catch (System.ArithmeticException _26)
            {
                ae = _26;
                flag = false;
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "add204")).ok = flag;
            try
            {
                IBM.ICU.Math.BigDecimal.ZERO.Add(tenlong, mcld0);
                flag = true;
            }
            catch (System.ArithmeticException _27)
            {
                ae = _27;
                flag = false;
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "add205")).ok = flag;

            Summary("add");
        }

        /* ----------------------------------------------------------------- */
        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.CompareTo(null)"/>method.
        /// </summary>
        ///
        [Test]
        public void Diagcompareto()
        {
            bool flag = false;
            System.ArithmeticException ae = null;
            // we assume add/subtract test function; this just
            // tests existence, exceptions, and possible results

            (new DiagBigDecimal.Test(this, "cpt001")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .CompareTo(new IBM.ICU.Math.BigDecimal("2"))) == 1;
            (new DiagBigDecimal.Test(this, "cpt002")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .CompareTo(new IBM.ICU.Math.BigDecimal("5"))) == 0;
            (new DiagBigDecimal.Test(this, "cpt003")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .CompareTo(new IBM.ICU.Math.BigDecimal("5.00"))) == 0;
            (new DiagBigDecimal.Test(this, "cpt004")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .CompareTo(new IBM.ICU.Math.BigDecimal("0.5"))) == 0;
            (new DiagBigDecimal.Test(this, "cpt005")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .CompareTo(new IBM.ICU.Math.BigDecimal("5"))) == (-1);
            (new DiagBigDecimal.Test(this, "cpt006")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .CompareTo(new IBM.ICU.Math.BigDecimal("5"), mcdef)) == (-1);
            (new DiagBigDecimal.Test(this, "cpt007")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .CompareTo(new IBM.ICU.Math.BigDecimal("5"), mc6)) == (-1);
            (new DiagBigDecimal.Test(this, "cpt008")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .CompareTo(new IBM.ICU.Math.BigDecimal("5"), mcfd)) == (-1);
            try
            {
                ten.CompareTo((IBM.ICU.Math.BigDecimal)null);
                flag = false;
            }
            catch (NullReferenceException _28)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "cpt100")).ok = flag;
            try
            {
                ten.CompareTo(ten, (IBM.ICU.Math.MathContext)null);
                flag = false;
            }
            catch (NullReferenceException _29)
            {
                flag = true;
            }/* checknull2 */
            (new DiagBigDecimal.Test(this, "cpt101")).ok = flag;

            try
            {
                tenlong.CompareTo(IBM.ICU.Math.BigDecimal.ONE, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _30)
            {
                ae = _30;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "cpt102")).ok = flag;
            try
            {
                IBM.ICU.Math.BigDecimal.ONE.CompareTo(tenlong, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _31)
            {
                ae = _31;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "cpt103")).ok = flag;

            Summary("compareTo");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.Divide(IBM.ICU.Dev.Test.BigDec.BigDecimal)"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagdivide()
        {
            bool flag = false;
            IBM.ICU.Math.MathContext rmcd;
            int rhu;
            int rd;
            int ru;
            Exception e = null;
            System.ArithmeticException ae = null;

            (new DiagBigDecimal.Test(this, "div301")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), mcdef).ToString())
                    .Equals("0.333333333");
            (new DiagBigDecimal.Test(this, "div302")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), mcdef).ToString())
                    .Equals("0.666666667");
            (new DiagBigDecimal.Test(this, "div303")).ok = ((new IBM.ICU.Math.BigDecimal("2.4"))
                    .Divide(new IBM.ICU.Math.BigDecimal("1"), mcdef).ToString())
                    .Equals("2.4");
            (new DiagBigDecimal.Test(this, "div304")).ok = ((new IBM.ICU.Math.BigDecimal("2.4"))
                    .Divide(new IBM.ICU.Math.BigDecimal("-1"), mcdef)
                    .ToString()).Equals("-2.4");
            (new DiagBigDecimal.Test(this, "div305")).ok = ((new IBM.ICU.Math.BigDecimal("-2.4"))
                    .Divide(new IBM.ICU.Math.BigDecimal("1"), mcdef).ToString())
                    .Equals("-2.4");
            (new DiagBigDecimal.Test(this, "div306")).ok = ((new IBM.ICU.Math.BigDecimal("-2.4"))
                    .Divide(new IBM.ICU.Math.BigDecimal("-1"), mcdef)
                    .ToString()).Equals("2.4");
            (new DiagBigDecimal.Test(this, "div307")).ok = ((new IBM.ICU.Math.BigDecimal("2.40"))
                    .Divide(new IBM.ICU.Math.BigDecimal("1"), mcdef).ToString())
                    .Equals("2.4");
            (new DiagBigDecimal.Test(this, "div308")).ok = ((new IBM.ICU.Math.BigDecimal("2.400"))
                    .Divide(new IBM.ICU.Math.BigDecimal("1"), mcdef).ToString())
                    .Equals("2.4");
            (new DiagBigDecimal.Test(this, "div309")).ok = ((new IBM.ICU.Math.BigDecimal("2.4"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2"), mcdef).ToString())
                    .Equals("1.2");
            (new DiagBigDecimal.Test(this, "div310")).ok = ((new IBM.ICU.Math.BigDecimal("2.400"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2"), mcdef).ToString())
                    .Equals("1.2");
            (new DiagBigDecimal.Test(this, "div311")).ok = ((new IBM.ICU.Math.BigDecimal("2."))
                    .Divide(new IBM.ICU.Math.BigDecimal("2"), mcdef).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "div312")).ok = ((new IBM.ICU.Math.BigDecimal("20"))
                    .Divide(new IBM.ICU.Math.BigDecimal("20"), mcdef)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "div313")).ok = ((new IBM.ICU.Math.BigDecimal("187"))
                    .Divide(new IBM.ICU.Math.BigDecimal("187"), mcdef)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "div314")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2"), mcdef).ToString())
                    .Equals("2.5");
            (new DiagBigDecimal.Test(this, "div315")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2.0"), mcdef)
                    .ToString()).Equals("2.5");
            (new DiagBigDecimal.Test(this, "div316")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2.000"), mcdef)
                    .ToString()).Equals("2.5");
            (new DiagBigDecimal.Test(this, "div317")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Divide(new IBM.ICU.Math.BigDecimal("0.200"), mcdef)
                    .ToString()).Equals("25");
            (new DiagBigDecimal.Test(this, "div318")).ok = ((new IBM.ICU.Math.BigDecimal("999999999"))
                    .Divide(new IBM.ICU.Math.BigDecimal("1"), mcdef).ToString())
                    .Equals("999999999");
            (new DiagBigDecimal.Test(this, "div319")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "999999999.4")).Divide(new IBM.ICU.Math.BigDecimal("1"),
                    mcdef).ToString()).Equals("999999999");
            (new DiagBigDecimal.Test(this, "div320")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "999999999.5")).Divide(new IBM.ICU.Math.BigDecimal("1"),
                    mcdef).ToString()).Equals("1E+9");
            (new DiagBigDecimal.Test(this, "div321")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "999999999.9")).Divide(new IBM.ICU.Math.BigDecimal("1"),
                    mcdef).ToString()).Equals("1E+9");
            (new DiagBigDecimal.Test(this, "div322")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "999999999.999")).Divide(new IBM.ICU.Math.BigDecimal("1"),
                    mcdef).ToString()).Equals("1E+9");
            (new DiagBigDecimal.Test(this, "div323")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.0000E-50")).Divide(new IBM.ICU.Math.BigDecimal("1"),
                    mcdef).ToString()).Equals("0");
            // MC
            (new DiagBigDecimal.Test(this, "div325")).ok = ((new IBM.ICU.Math.BigDecimal("999999999"))
                    .Divide(new IBM.ICU.Math.BigDecimal("1"), mcdef).ToString())
                    .Equals("999999999");
            (new DiagBigDecimal.Test(this, "div326")).ok = ((new IBM.ICU.Math.BigDecimal("999999999"))
                    .Divide(new IBM.ICU.Math.BigDecimal("1"), mc6).ToString())
                    .Equals("1E+9");
            (new DiagBigDecimal.Test(this, "div327")).ok = ((new IBM.ICU.Math.BigDecimal("9999999"))
                    .Divide(new IBM.ICU.Math.BigDecimal("1"), mc6).ToString())
                    .Equals("1E+7");
            (new DiagBigDecimal.Test(this, "div328")).ok = ((new IBM.ICU.Math.BigDecimal("999999"))
                    .Divide(new IBM.ICU.Math.BigDecimal("1"), mc6).ToString())
                    .Equals("999999");

            // check rounding explicitly [note: digits+1 truncation]
            rmcd = new IBM.ICU.Math.MathContext(2,
                    IBM.ICU.Math.MathContext.SCIENTIFIC, false,
                    IBM.ICU.Math.MathContext.ROUND_CEILING);
            (new DiagBigDecimal.Test(this, "div330")).ok = ((new IBM.ICU.Math.BigDecimal("1.50"))
                    .Divide(one, rmcd).ToString()).Equals("1.5");
            (new DiagBigDecimal.Test(this, "div331")).ok = ((new IBM.ICU.Math.BigDecimal("1.51"))
                    .Divide(one, rmcd).ToString()).Equals("1.6");
            (new DiagBigDecimal.Test(this, "div332")).ok = ((new IBM.ICU.Math.BigDecimal("1.55"))
                    .Divide(one, rmcd).ToString()).Equals("1.6");
            rmcd = new IBM.ICU.Math.MathContext(2,
                    IBM.ICU.Math.MathContext.SCIENTIFIC, false,
                    IBM.ICU.Math.MathContext.ROUND_DOWN);
            (new DiagBigDecimal.Test(this, "div333")).ok = ((new IBM.ICU.Math.BigDecimal("1.55"))
                    .Divide(one, rmcd).ToString()).Equals("1.5");
            (new DiagBigDecimal.Test(this, "div334")).ok = ((new IBM.ICU.Math.BigDecimal("1.59"))
                    .Divide(one, rmcd).ToString()).Equals("1.5");
            rmcd = new IBM.ICU.Math.MathContext(2,
                    IBM.ICU.Math.MathContext.SCIENTIFIC, false,
                    IBM.ICU.Math.MathContext.ROUND_FLOOR);
            (new DiagBigDecimal.Test(this, "div335")).ok = ((new IBM.ICU.Math.BigDecimal("1.55"))
                    .Divide(one, rmcd).ToString()).Equals("1.5");
            (new DiagBigDecimal.Test(this, "div336")).ok = ((new IBM.ICU.Math.BigDecimal("1.59"))
                    .Divide(one, rmcd).ToString()).Equals("1.5");
            rmcd = new IBM.ICU.Math.MathContext(2,
                    IBM.ICU.Math.MathContext.SCIENTIFIC, false,
                    IBM.ICU.Math.MathContext.ROUND_HALF_DOWN);
            (new DiagBigDecimal.Test(this, "div337")).ok = ((new IBM.ICU.Math.BigDecimal("1.45"))
                    .Divide(one, rmcd).ToString()).Equals("1.4");
            (new DiagBigDecimal.Test(this, "div338")).ok = ((new IBM.ICU.Math.BigDecimal("1.50"))
                    .Divide(one, rmcd).ToString()).Equals("1.5");
            (new DiagBigDecimal.Test(this, "div339")).ok = ((new IBM.ICU.Math.BigDecimal("1.55"))
                    .Divide(one, rmcd).ToString()).Equals("1.5");
            rmcd = new IBM.ICU.Math.MathContext(2,
                    IBM.ICU.Math.MathContext.SCIENTIFIC, false,
                    IBM.ICU.Math.MathContext.ROUND_HALF_EVEN);
            (new DiagBigDecimal.Test(this, "div340")).ok = ((new IBM.ICU.Math.BigDecimal("1.45"))
                    .Divide(one, rmcd).ToString()).Equals("1.4");
            (new DiagBigDecimal.Test(this, "div341")).ok = ((new IBM.ICU.Math.BigDecimal("1.50"))
                    .Divide(one, rmcd).ToString()).Equals("1.5");
            (new DiagBigDecimal.Test(this, "div342")).ok = ((new IBM.ICU.Math.BigDecimal("1.55"))
                    .Divide(one, rmcd).ToString()).Equals("1.6");
            rmcd = new IBM.ICU.Math.MathContext(2,
                    IBM.ICU.Math.MathContext.SCIENTIFIC, false,
                    IBM.ICU.Math.MathContext.ROUND_HALF_UP);
            (new DiagBigDecimal.Test(this, "div343")).ok = ((new IBM.ICU.Math.BigDecimal("1.45"))
                    .Divide(one, rmcd).ToString()).Equals("1.5");
            (new DiagBigDecimal.Test(this, "div344")).ok = ((new IBM.ICU.Math.BigDecimal("1.50"))
                    .Divide(one, rmcd).ToString()).Equals("1.5");
            (new DiagBigDecimal.Test(this, "div345")).ok = ((new IBM.ICU.Math.BigDecimal("1.55"))
                    .Divide(one, rmcd).ToString()).Equals("1.6");
            rmcd = new IBM.ICU.Math.MathContext(2,
                    IBM.ICU.Math.MathContext.SCIENTIFIC, false,
                    IBM.ICU.Math.MathContext.ROUND_UP);
            (new DiagBigDecimal.Test(this, "div346")).ok = ((new IBM.ICU.Math.BigDecimal("1.50"))
                    .Divide(one, rmcd).ToString()).Equals("1.5");
            (new DiagBigDecimal.Test(this, "div347")).ok = ((new IBM.ICU.Math.BigDecimal("1.51"))
                    .Divide(one, rmcd).ToString()).Equals("1.6");
            (new DiagBigDecimal.Test(this, "div348")).ok = ((new IBM.ICU.Math.BigDecimal("1.55"))
                    .Divide(one, rmcd).ToString()).Equals("1.6");

            // fixed point...
            (new DiagBigDecimal.Test(this, "div350")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3")).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "div351")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3")).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "div352")).ok = ((new IBM.ICU.Math.BigDecimal("2.4"))
                    .Divide(new IBM.ICU.Math.BigDecimal("1")).ToString())
                    .Equals("2.4");
            (new DiagBigDecimal.Test(this, "div353")).ok = ((new IBM.ICU.Math.BigDecimal("2.4"))
                    .Divide(new IBM.ICU.Math.BigDecimal("-1")).ToString())
                    .Equals("-2.4");
            (new DiagBigDecimal.Test(this, "div354")).ok = ((new IBM.ICU.Math.BigDecimal("-2.4"))
                    .Divide(new IBM.ICU.Math.BigDecimal("1")).ToString())
                    .Equals("-2.4");
            (new DiagBigDecimal.Test(this, "div355")).ok = ((new IBM.ICU.Math.BigDecimal("-2.4"))
                    .Divide(new IBM.ICU.Math.BigDecimal("-1")).ToString())
                    .Equals("2.4");
            (new DiagBigDecimal.Test(this, "div356")).ok = ((new IBM.ICU.Math.BigDecimal("2.40"))
                    .Divide(new IBM.ICU.Math.BigDecimal("1")).ToString())
                    .Equals("2.40");
            (new DiagBigDecimal.Test(this, "div357")).ok = ((new IBM.ICU.Math.BigDecimal("2.400"))
                    .Divide(new IBM.ICU.Math.BigDecimal("1")).ToString())
                    .Equals("2.400");
            (new DiagBigDecimal.Test(this, "div358")).ok = ((new IBM.ICU.Math.BigDecimal("2.4"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("1.2");
            (new DiagBigDecimal.Test(this, "div359")).ok = ((new IBM.ICU.Math.BigDecimal("2.400"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("1.200");
            (new DiagBigDecimal.Test(this, "div360")).ok = ((new IBM.ICU.Math.BigDecimal("2."))
                    .Divide(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "div361")).ok = ((new IBM.ICU.Math.BigDecimal("20"))
                    .Divide(new IBM.ICU.Math.BigDecimal("20")).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "div362")).ok = ((new IBM.ICU.Math.BigDecimal("187"))
                    .Divide(new IBM.ICU.Math.BigDecimal("187")).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "div363")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("3");
            (new DiagBigDecimal.Test(this, "div364")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2.0")).ToString())
                    .Equals("3");
            (new DiagBigDecimal.Test(this, "div365")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2.000")).ToString())
                    .Equals("3");
            (new DiagBigDecimal.Test(this, "div366")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Divide(new IBM.ICU.Math.BigDecimal("0.200")).ToString())
                    .Equals("25");
            (new DiagBigDecimal.Test(this, "div367")).ok = ((new IBM.ICU.Math.BigDecimal("5.0"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("2.5");
            (new DiagBigDecimal.Test(this, "div368")).ok = ((new IBM.ICU.Math.BigDecimal("5.0"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2.0")).ToString())
                    .Equals("2.5");
            (new DiagBigDecimal.Test(this, "div369")).ok = ((new IBM.ICU.Math.BigDecimal("5.0"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2.000")).ToString())
                    .Equals("2.5");
            (new DiagBigDecimal.Test(this, "div370")).ok = ((new IBM.ICU.Math.BigDecimal("5.0"))
                    .Divide(new IBM.ICU.Math.BigDecimal("0.200")).ToString())
                    .Equals("25.0");
            (new DiagBigDecimal.Test(this, "div371")).ok = ((new IBM.ICU.Math.BigDecimal("999999999"))
                    .Divide(new IBM.ICU.Math.BigDecimal("1")).ToString())
                    .Equals("999999999");
            (new DiagBigDecimal.Test(this, "div372")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "999999999.4")).Divide(new IBM.ICU.Math.BigDecimal("1"))
                    .ToString()).Equals("999999999.4");
            (new DiagBigDecimal.Test(this, "div373")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "999999999.5")).Divide(new IBM.ICU.Math.BigDecimal("1"))
                    .ToString()).Equals("999999999.5");
            (new DiagBigDecimal.Test(this, "div374")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "999999999.9")).Divide(new IBM.ICU.Math.BigDecimal("1"))
                    .ToString()).Equals("999999999.9");
            (new DiagBigDecimal.Test(this, "div375")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "999999999.999")).Divide(new IBM.ICU.Math.BigDecimal("1"))
                    .ToString()).Equals("999999999.999");
            (new DiagBigDecimal.Test(this, "div376")).ok = ((new IBM.ICU.Math.BigDecimal("0.0000E-5"))
                    .Divide(new IBM.ICU.Math.BigDecimal("1")).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "div377")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.000000000")).Divide(new IBM.ICU.Math.BigDecimal("1"))
                    .ToString()).Equals("0.000000000");

            // - Fixed point; explicit scales & rounds [old BigDecimal divides]
            rhu = IBM.ICU.Math.MathContext.ROUND_HALF_UP;
            rd = IBM.ICU.Math.MathContext.ROUND_DOWN;
            (new DiagBigDecimal.Test(this, "div001")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3")).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "div002")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), rhu).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "div003")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 0, rhu)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "div004")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 1, rhu)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "div005")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 2, rhu)
                    .ToString()).Equals("0.00");
            (new DiagBigDecimal.Test(this, "div006")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 3, rhu)
                    .ToString()).Equals("0.000");
            (new DiagBigDecimal.Test(this, "div007")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 4, rhu)
                    .ToString()).Equals("0.0000");
            (new DiagBigDecimal.Test(this, "div008")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3")).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "div009")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), rhu).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "div010")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 0, rhu)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "div011")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 1, rhu)
                    .ToString()).Equals("0.3");
            (new DiagBigDecimal.Test(this, "div012")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 2, rhu)
                    .ToString()).Equals("0.33");
            (new DiagBigDecimal.Test(this, "div013")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 3, rhu)
                    .ToString()).Equals("0.333");
            (new DiagBigDecimal.Test(this, "div014")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 4, rhu)
                    .ToString()).Equals("0.3333");
            (new DiagBigDecimal.Test(this, "div015")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3")).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "div016")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), rhu).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "div017")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 0, rhu)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "div018")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 1, rhu)
                    .ToString()).Equals("0.7");
            (new DiagBigDecimal.Test(this, "div019")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 2, rhu)
                    .ToString()).Equals("0.67");
            (new DiagBigDecimal.Test(this, "div020")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 3, rhu)
                    .ToString()).Equals("0.667");
            (new DiagBigDecimal.Test(this, "div021")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 4, rhu)
                    .ToString()).Equals("0.6667");

            (new DiagBigDecimal.Test(this, "div030")).ok = ((new IBM.ICU.Math.BigDecimal("1000"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2000"), 4, rhu)
                    .ToString()).Equals("0.5000");
            (new DiagBigDecimal.Test(this, "div031")).ok = ((new IBM.ICU.Math.BigDecimal("1000"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2000"), 3, rhu)
                    .ToString()).Equals("0.500");
            (new DiagBigDecimal.Test(this, "div032")).ok = ((new IBM.ICU.Math.BigDecimal("1000"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2000"), 2, rhu)
                    .ToString()).Equals("0.50");
            (new DiagBigDecimal.Test(this, "div033")).ok = ((new IBM.ICU.Math.BigDecimal("1000"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2000"), 1, rhu)
                    .ToString()).Equals("0.5");
            (new DiagBigDecimal.Test(this, "div034")).ok = ((new IBM.ICU.Math.BigDecimal("1000"))
                    .Divide(new IBM.ICU.Math.BigDecimal("2000"), 0, rhu)
                    .ToString()).Equals("1");

            (new DiagBigDecimal.Test(this, "div035")).ok = ((new IBM.ICU.Math.BigDecimal("100"))
                    .Divide(new IBM.ICU.Math.BigDecimal("5000"), 4, rhu)
                    .ToString()).Equals("0.0200");
            (new DiagBigDecimal.Test(this, "div036")).ok = ((new IBM.ICU.Math.BigDecimal("100"))
                    .Divide(new IBM.ICU.Math.BigDecimal("5000"), 3, rhu)
                    .ToString()).Equals("0.020");
            (new DiagBigDecimal.Test(this, "div037")).ok = ((new IBM.ICU.Math.BigDecimal("100"))
                    .Divide(new IBM.ICU.Math.BigDecimal("5000"), 2, rhu)
                    .ToString()).Equals("0.02");
            (new DiagBigDecimal.Test(this, "div038")).ok = ((new IBM.ICU.Math.BigDecimal("100"))
                    .Divide(new IBM.ICU.Math.BigDecimal("5000"), 1, rhu)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "div039")).ok = ((new IBM.ICU.Math.BigDecimal("100"))
                    .Divide(new IBM.ICU.Math.BigDecimal("5000"), 0, rhu)
                    .ToString()).Equals("0");

            (new DiagBigDecimal.Test(this, "div040")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "9.99999999")).Divide(new IBM.ICU.Math.BigDecimal(
                    "9.77777777"), 4, rhu).ToString()).Equals("1.0227");
            (new DiagBigDecimal.Test(this, "div041")).ok = ((new IBM.ICU.Math.BigDecimal("9.9999999"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.7777777"), 4, rhu)
                    .ToString()).Equals("1.0227");
            (new DiagBigDecimal.Test(this, "div042")).ok = ((new IBM.ICU.Math.BigDecimal("9.999999"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.777777"), 4, rhu)
                    .ToString()).Equals("1.0227");
            (new DiagBigDecimal.Test(this, "div043")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "9.77777777")).Divide(new IBM.ICU.Math.BigDecimal(
                    "9.99999999"), 4, rhu).ToString()).Equals("0.9778");
            (new DiagBigDecimal.Test(this, "div044")).ok = ((new IBM.ICU.Math.BigDecimal("9.7777777"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.9999999"), 4, rhu)
                    .ToString()).Equals("0.9778");
            (new DiagBigDecimal.Test(this, "div045")).ok = ((new IBM.ICU.Math.BigDecimal("9.777777"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.999999"), 4, rhu)
                    .ToString()).Equals("0.9778");
            (new DiagBigDecimal.Test(this, "div046")).ok = ((new IBM.ICU.Math.BigDecimal("9.77777"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.99999"), 4, rhu)
                    .ToString()).Equals("0.9778");
            (new DiagBigDecimal.Test(this, "div047")).ok = ((new IBM.ICU.Math.BigDecimal("9.7777"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.9999"), 4, rhu)
                    .ToString()).Equals("0.9778");
            (new DiagBigDecimal.Test(this, "div048")).ok = ((new IBM.ICU.Math.BigDecimal("9.777"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.999"), 4, rhu)
                    .ToString()).Equals("0.9778");
            (new DiagBigDecimal.Test(this, "div049")).ok = ((new IBM.ICU.Math.BigDecimal("9.77"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.99"), 4, rhu)
                    .ToString()).Equals("0.9780");
            (new DiagBigDecimal.Test(this, "div050")).ok = ((new IBM.ICU.Math.BigDecimal("9.7"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.9"), 4, rhu)
                    .ToString()).Equals("0.9798");
            (new DiagBigDecimal.Test(this, "div051")).ok = ((new IBM.ICU.Math.BigDecimal("9."))
                    .Divide(new IBM.ICU.Math.BigDecimal("9."), 4, rhu)
                    .ToString()).Equals("1.0000");

            (new DiagBigDecimal.Test(this, "div060")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "9.99999999")).Divide(new IBM.ICU.Math.BigDecimal(
                    "9.77777777"), rhu).ToString()).Equals("1.02272727");
            (new DiagBigDecimal.Test(this, "div061")).ok = ((new IBM.ICU.Math.BigDecimal("9.9999999"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.7777777"), rhu)
                    .ToString()).Equals("1.0227273");
            (new DiagBigDecimal.Test(this, "div062")).ok = ((new IBM.ICU.Math.BigDecimal("9.999999"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.777777"), rhu)
                    .ToString()).Equals("1.022727");
            (new DiagBigDecimal.Test(this, "div063")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "9.77777777")).Divide(new IBM.ICU.Math.BigDecimal(
                    "9.99999999"), rhu).ToString()).Equals("0.97777778");
            (new DiagBigDecimal.Test(this, "div064")).ok = ((new IBM.ICU.Math.BigDecimal("9.7777777"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.9999999"), rhu)
                    .ToString()).Equals("0.9777778");
            (new DiagBigDecimal.Test(this, "div065")).ok = ((new IBM.ICU.Math.BigDecimal("9.777777"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.999999"), rhu)
                    .ToString()).Equals("0.977778");
            (new DiagBigDecimal.Test(this, "div066")).ok = ((new IBM.ICU.Math.BigDecimal("9.77777"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.99999"), rhu)
                    .ToString()).Equals("0.97778");
            (new DiagBigDecimal.Test(this, "div067")).ok = ((new IBM.ICU.Math.BigDecimal("9.7777"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.9999"), rhu)
                    .ToString()).Equals("0.9778");
            (new DiagBigDecimal.Test(this, "div068")).ok = ((new IBM.ICU.Math.BigDecimal("9.777"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.999"), rhu)
                    .ToString()).Equals("0.978");
            (new DiagBigDecimal.Test(this, "div069")).ok = ((new IBM.ICU.Math.BigDecimal("9.77"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.99"), rhu)
                    .ToString()).Equals("0.98");
            (new DiagBigDecimal.Test(this, "div070")).ok = ((new IBM.ICU.Math.BigDecimal("9.7"))
                    .Divide(new IBM.ICU.Math.BigDecimal("9.9"), rhu).ToString())
                    .Equals("1.0");
            (new DiagBigDecimal.Test(this, "div071")).ok = ((new IBM.ICU.Math.BigDecimal("9."))
                    .Divide(new IBM.ICU.Math.BigDecimal("9."), rhu).ToString())
                    .Equals("1");

            rd = IBM.ICU.Math.MathContext.ROUND_DOWN; // test this is actually
            // being used
            (new DiagBigDecimal.Test(this, "div080")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 0, rd).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "div081")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 1, rd).ToString())
                    .Equals("0.6");
            (new DiagBigDecimal.Test(this, "div082")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 2, rd).ToString())
                    .Equals("0.66");
            (new DiagBigDecimal.Test(this, "div083")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 3, rd).ToString())
                    .Equals("0.666");
            (new DiagBigDecimal.Test(this, "div084")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Divide(new IBM.ICU.Math.BigDecimal("3"), 4, rd).ToString())
                    .Equals("0.6666");

            ru = IBM.ICU.Math.MathContext.ROUND_UNNECESSARY; // check for some 0
            // residues
            (new DiagBigDecimal.Test(this, "div090")).ok = ((new IBM.ICU.Math.BigDecimal("1000"))
                    .Divide(new IBM.ICU.Math.BigDecimal("5"), 4, ru).ToString())
                    .Equals("200.0000");
            (new DiagBigDecimal.Test(this, "div091")).ok = ((new IBM.ICU.Math.BigDecimal("1000"))
                    .Divide(new IBM.ICU.Math.BigDecimal("50"), 4, ru)
                    .ToString()).Equals("20.0000");
            (new DiagBigDecimal.Test(this, "div092")).ok = ((new IBM.ICU.Math.BigDecimal("1000"))
                    .Divide(new IBM.ICU.Math.BigDecimal("500"), 4, ru)
                    .ToString()).Equals("2.0000");
            (new DiagBigDecimal.Test(this, "div093")).ok = ((new IBM.ICU.Math.BigDecimal("1000"))
                    .Divide(new IBM.ICU.Math.BigDecimal("5000"), 4, ru)
                    .ToString()).Equals("0.2000");
            (new DiagBigDecimal.Test(this, "div094")).ok = ((new IBM.ICU.Math.BigDecimal("1000"))
                    .Divide(new IBM.ICU.Math.BigDecimal("5000"), 3, ru)
                    .ToString()).Equals("0.200");
            (new DiagBigDecimal.Test(this, "div095")).ok = ((new IBM.ICU.Math.BigDecimal("1000"))
                    .Divide(new IBM.ICU.Math.BigDecimal("5000"), 2, ru)
                    .ToString()).Equals("0.20");
            (new DiagBigDecimal.Test(this, "div096")).ok = ((new IBM.ICU.Math.BigDecimal("1000"))
                    .Divide(new IBM.ICU.Math.BigDecimal("5000"), 1, ru)
                    .ToString()).Equals("0.2");

            // check rounding explicitly
            (new DiagBigDecimal.Test(this, "div101")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 2, IBM.ICU.Math.MathContext.ROUND_CEILING)
                    .ToString()).Equals("0.06");
            (new DiagBigDecimal.Test(this, "div102")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 1, IBM.ICU.Math.MathContext.ROUND_CEILING)
                    .ToString()).Equals("0.1");
            (new DiagBigDecimal.Test(this, "div103")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 0, IBM.ICU.Math.MathContext.ROUND_CEILING)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "div104")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 2, IBM.ICU.Math.MathContext.ROUND_DOWN)
                    .ToString()).Equals("0.05");
            (new DiagBigDecimal.Test(this, "div105")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 1, IBM.ICU.Math.MathContext.ROUND_DOWN)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "div106")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 0, IBM.ICU.Math.MathContext.ROUND_DOWN)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "div107")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 2, IBM.ICU.Math.MathContext.ROUND_FLOOR)
                    .ToString()).Equals("0.05");
            (new DiagBigDecimal.Test(this, "div108")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 1, IBM.ICU.Math.MathContext.ROUND_FLOOR)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "div109")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 0, IBM.ICU.Math.MathContext.ROUND_FLOOR)
                    .ToString()).Equals("0");

            (new DiagBigDecimal.Test(this, "div110")).ok = ((new IBM.ICU.Math.BigDecimal("0.045"))
                    .Divide(one, 2, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("0.04");
            (new DiagBigDecimal.Test(this, "div111")).ok = ((new IBM.ICU.Math.BigDecimal("0.045"))
                    .Divide(one, 1, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "div112")).ok = ((new IBM.ICU.Math.BigDecimal("0.045"))
                    .Divide(one, 0, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "div113")).ok = ((new IBM.ICU.Math.BigDecimal("0.050"))
                    .Divide(one, 2, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("0.05");
            (new DiagBigDecimal.Test(this, "div114")).ok = ((new IBM.ICU.Math.BigDecimal("0.050"))
                    .Divide(one, 1, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "div115")).ok = ((new IBM.ICU.Math.BigDecimal("0.050"))
                    .Divide(one, 0, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "div116")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 2, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("0.05");
            (new DiagBigDecimal.Test(this, "div117")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 1, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("0.1");
            (new DiagBigDecimal.Test(this, "div118")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 0, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("0");

            (new DiagBigDecimal.Test(this, "div120")).ok = ((new IBM.ICU.Math.BigDecimal("0.045"))
                    .Divide(one, 2, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0.04");
            (new DiagBigDecimal.Test(this, "div121")).ok = ((new IBM.ICU.Math.BigDecimal("0.045"))
                    .Divide(one, 1, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "div122")).ok = ((new IBM.ICU.Math.BigDecimal("0.045"))
                    .Divide(one, 0, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "div123")).ok = ((new IBM.ICU.Math.BigDecimal("0.050"))
                    .Divide(one, 2, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0.05");
            (new DiagBigDecimal.Test(this, "div124")).ok = ((new IBM.ICU.Math.BigDecimal("0.050"))
                    .Divide(one, 1, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "div125")).ok = ((new IBM.ICU.Math.BigDecimal("0.050"))
                    .Divide(one, 0, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "div126")).ok = ((new IBM.ICU.Math.BigDecimal("0.150"))
                    .Divide(one, 2, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0.15");
            (new DiagBigDecimal.Test(this, "div127")).ok = ((new IBM.ICU.Math.BigDecimal("0.150"))
                    .Divide(one, 1, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0.2");
            (new DiagBigDecimal.Test(this, "div128")).ok = ((new IBM.ICU.Math.BigDecimal("0.150"))
                    .Divide(one, 0, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "div129")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 2, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0.06");
            (new DiagBigDecimal.Test(this, "div130")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 1, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0.1");
            (new DiagBigDecimal.Test(this, "div131")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 0, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0");

            (new DiagBigDecimal.Test(this, "div140")).ok = ((new IBM.ICU.Math.BigDecimal("0.045"))
                    .Divide(one, 2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0.05");
            (new DiagBigDecimal.Test(this, "div141")).ok = ((new IBM.ICU.Math.BigDecimal("0.045"))
                    .Divide(one, 1, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "div142")).ok = ((new IBM.ICU.Math.BigDecimal("0.045"))
                    .Divide(one, 0, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "div143")).ok = ((new IBM.ICU.Math.BigDecimal("0.050"))
                    .Divide(one, 2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0.05");
            (new DiagBigDecimal.Test(this, "div144")).ok = ((new IBM.ICU.Math.BigDecimal("0.050"))
                    .Divide(one, 1, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0.1");
            (new DiagBigDecimal.Test(this, "div145")).ok = ((new IBM.ICU.Math.BigDecimal("0.050"))
                    .Divide(one, 0, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "div146")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0.06");
            (new DiagBigDecimal.Test(this, "div147")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 1, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0.1");
            (new DiagBigDecimal.Test(this, "div148")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 0, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0");

            (new DiagBigDecimal.Test(this, "div150")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 2, IBM.ICU.Math.MathContext.ROUND_UP)
                    .ToString()).Equals("0.06");
            (new DiagBigDecimal.Test(this, "div151")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 1, IBM.ICU.Math.MathContext.ROUND_UP)
                    .ToString()).Equals("0.1");
            (new DiagBigDecimal.Test(this, "div52.")).ok = ((new IBM.ICU.Math.BigDecimal("0.055"))
                    .Divide(one, 0, IBM.ICU.Math.MathContext.ROUND_UP)
                    .ToString()).Equals("1");

            // - error conditions ---
            try
            {
                ten.Divide((IBM.ICU.Math.BigDecimal)null);
                flag = false;
            }
            catch (NullReferenceException _32)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "div201")).ok = flag;
            try
            {
                ten.Divide(ten, (IBM.ICU.Math.MathContext)null);
                flag = false;
            }
            catch (NullReferenceException _33)
            {
                flag = true;
            }/* checknull2 */
            (new DiagBigDecimal.Test(this, "div202")).ok = flag;

            try
            {
                (new IBM.ICU.Math.BigDecimal("1")).Divide(
                        new IBM.ICU.Math.BigDecimal("3"), -8, 0);
                flag = false;
            }
            catch (Exception _34)
            {
                e = _34;
                flag = flag & (e.Message).Equals("Negative scale: -8");
            }/* checkscale */
            (new DiagBigDecimal.Test(this, "div203")).ok = flag;

            try
            {
                (new IBM.ICU.Math.BigDecimal("1000")).Divide(
                        new IBM.ICU.Math.BigDecimal("5000"), 0,
                        IBM.ICU.Math.MathContext.ROUND_UNNECESSARY);
                flag = false;
            }
            catch (System.ArithmeticException _35)
            {
                ae = _35;
                flag = (ae.Message).Equals("Rounding necessary");
            }/* rounn */
            (new DiagBigDecimal.Test(this, "div204")).ok = flag;
            try
            {
                (new IBM.ICU.Math.BigDecimal("1001")).Divide(
                        new IBM.ICU.Math.BigDecimal("10"), 0,
                        IBM.ICU.Math.MathContext.ROUND_UNNECESSARY);
                flag = false;
            }
            catch (System.ArithmeticException _36)
            {
                ae = _36;
                flag = (ae.Message).Equals("Rounding necessary");
            }/* rounn */
            (new DiagBigDecimal.Test(this, "div205")).ok = flag;
            try
            {
                (new IBM.ICU.Math.BigDecimal("1001")).Divide(
                        new IBM.ICU.Math.BigDecimal("100"), 1,
                        IBM.ICU.Math.MathContext.ROUND_UNNECESSARY);
                flag = false;
            }
            catch (System.ArithmeticException _37)
            {
                ae = _37;
                flag = (ae.Message).Equals("Rounding necessary");
            }/* rounn */
            (new DiagBigDecimal.Test(this, "div206")).ok = flag;
            try
            {
                (new IBM.ICU.Math.BigDecimal("10001")).Divide(
                        new IBM.ICU.Math.BigDecimal("10000"), 1,
                        IBM.ICU.Math.MathContext.ROUND_UNNECESSARY);
                flag = false;
            }
            catch (System.ArithmeticException _38)
            {
                ae = _38;
                flag = (ae.Message).Equals("Rounding necessary");
            }/* rounn */
            (new DiagBigDecimal.Test(this, "div207")).ok = flag;
            try
            {
                (new IBM.ICU.Math.BigDecimal("1.0001")).Divide(
                        new IBM.ICU.Math.BigDecimal("1"), 1,
                        IBM.ICU.Math.MathContext.ROUND_UNNECESSARY);
                flag = false;
            }
            catch (System.ArithmeticException _39)
            {
                ae = _39;
                flag = (ae.Message).Equals("Rounding necessary");
            }/* rounn */
            (new DiagBigDecimal.Test(this, "div208")).ok = flag;

            try
            {
                (new IBM.ICU.Math.BigDecimal("5"))
                        .Divide(new IBM.ICU.Math.BigDecimal("0.00"));
                flag = false;
            }
            catch (System.ArithmeticException _40)
            {
                ae = _40;
                flag = (ae.Message).Equals("Divide by 0");
            }/* div0 */
            (new DiagBigDecimal.Test(this, "div209")).ok = flag;

            try
            {
                tenlong.Divide(IBM.ICU.Math.BigDecimal.ONE, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _41)
            {
                ae = _41;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "div210")).ok = flag;
            try
            {
                IBM.ICU.Math.BigDecimal.ONE.Divide(tenlong, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _42)
            {
                ae = _42;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "div211")).ok = flag;

            Summary("divide");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.DivideInteger(IBM.ICU.Dev.Test.BigDec.BigDecimal)"/> method. 
        /// </summary>
        ///
        [Test]
        public void DiagdivideInteger()
        {
            bool flag = false;
            System.ArithmeticException ae = null;

            (new DiagBigDecimal.Test(this, "dvI001")).ok = ((new IBM.ICU.Math.BigDecimal("101.3"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("1"), mcdef)
                    .ToString()).Equals("101");
            (new DiagBigDecimal.Test(this, "dvI002")).ok = ((new IBM.ICU.Math.BigDecimal("101.0"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("1"), mcdef)
                    .ToString()).Equals("101");
            (new DiagBigDecimal.Test(this, "dvI003")).ok = ((new IBM.ICU.Math.BigDecimal("101.3"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("3"), mcdef)
                    .ToString()).Equals("33");
            (new DiagBigDecimal.Test(this, "dvI004")).ok = ((new IBM.ICU.Math.BigDecimal("101.0"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("3"), mcdef)
                    .ToString()).Equals("33");
            (new DiagBigDecimal.Test(this, "dvI005")).ok = ((new IBM.ICU.Math.BigDecimal("2.4"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("1"), mcdef)
                    .ToString()).Equals("2");
            (new DiagBigDecimal.Test(this, "dvI006")).ok = ((new IBM.ICU.Math.BigDecimal("2.400"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("1"), mcdef)
                    .ToString()).Equals("2");
            (new DiagBigDecimal.Test(this, "dvI007")).ok = ((new IBM.ICU.Math.BigDecimal("18"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("18"), mcdef)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "dvI008")).ok = ((new IBM.ICU.Math.BigDecimal("1120"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("1000"), mcdef)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "dvI009")).ok = ((new IBM.ICU.Math.BigDecimal("2.4"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "dvI010")).ok = ((new IBM.ICU.Math.BigDecimal("2.400"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "dvI011")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("2.000"), mcdef)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "dvI012")).ok = ((new IBM.ICU.Math.BigDecimal("8.005"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("7"), mcdef)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "dvI013")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("2");
            (new DiagBigDecimal.Test(this, "dvI014")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "dvI015")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("0");
            // MC
            (new DiagBigDecimal.Test(this, "dvI016")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("2"), mce)
                    .ToString()).Equals("2");
            (new DiagBigDecimal.Test(this, "dvI017")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("2"), mc6)
                    .ToString()).Equals("2");

            // Fixed --
            (new DiagBigDecimal.Test(this, "dvI021")).ok = ((new IBM.ICU.Math.BigDecimal("101.3"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("1")).ToString())
                    .Equals("101");
            (new DiagBigDecimal.Test(this, "dvI022")).ok = ((new IBM.ICU.Math.BigDecimal("101.0"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("1")).ToString())
                    .Equals("101");
            (new DiagBigDecimal.Test(this, "dvI023")).ok = ((new IBM.ICU.Math.BigDecimal("101.3"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("3")).ToString())
                    .Equals("33");
            (new DiagBigDecimal.Test(this, "dvI024")).ok = ((new IBM.ICU.Math.BigDecimal("101.0"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("3")).ToString())
                    .Equals("33");
            (new DiagBigDecimal.Test(this, "dvI025")).ok = ((new IBM.ICU.Math.BigDecimal("2.4"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("1")).ToString())
                    .Equals("2");
            (new DiagBigDecimal.Test(this, "dvI026")).ok = ((new IBM.ICU.Math.BigDecimal("2.400"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("1")).ToString())
                    .Equals("2");
            (new DiagBigDecimal.Test(this, "dvI027")).ok = ((new IBM.ICU.Math.BigDecimal("18"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("18"))
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "dvI028")).ok = ((new IBM.ICU.Math.BigDecimal("1120"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("1000"))
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "dvI029")).ok = ((new IBM.ICU.Math.BigDecimal("2.4"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "dvI030")).ok = ((new IBM.ICU.Math.BigDecimal("2.400"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "dvI031")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("2.000"))
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "dvI032")).ok = ((new IBM.ICU.Math.BigDecimal("8.005"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("7")).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "dvI033")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("2");
            (new DiagBigDecimal.Test(this, "dvI034")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "dvI035")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .DivideInteger(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("0");

            try
            {
                ten.DivideInteger((IBM.ICU.Math.BigDecimal)null);
                flag = false;
            }
            catch (NullReferenceException _43)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "dvI101")).ok = flag;
            try
            {
                ten.DivideInteger(ten, (IBM.ICU.Math.MathContext)null);
                flag = false;
            }
            catch (NullReferenceException _44)
            {
                flag = true;
            }/* checknull2 */
            (new DiagBigDecimal.Test(this, "dvI102")).ok = flag;

            try
            {
                IBM.ICU.Math.BigDecimal.ONE.DivideInteger(tenlong, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _45)
            {
                ae = _45;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "dvI103")).ok = flag;

            try
            {
                tenlong.DivideInteger(IBM.ICU.Math.BigDecimal.ONE, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _46)
            {
                ae = _46;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "dvI104")).ok = flag;

            Summary("divideInteger");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.Max(IBM.ICU.Dev.Test.BigDec.BigDecimal)"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagmax()
        {
            bool flag = false;
            System.ArithmeticException ae = null;

            // we assume add/subtract test function; this and min just
            // test existence and test the truth table
            (new DiagBigDecimal.Test(this, "max001")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Max(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("5");
            (new DiagBigDecimal.Test(this, "max002")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Max(new IBM.ICU.Math.BigDecimal("5")).ToString())
                    .Equals("5");
            (new DiagBigDecimal.Test(this, "max003")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Max(new IBM.ICU.Math.BigDecimal("7")).ToString())
                    .Equals("7");
            (new DiagBigDecimal.Test(this, "max004")).ok = ((new IBM.ICU.Math.BigDecimal("2")).Max(
                    new IBM.ICU.Math.BigDecimal("7"), mcdef).ToString())
                    .Equals("7");
            (new DiagBigDecimal.Test(this, "max005")).ok = ((new IBM.ICU.Math.BigDecimal("2")).Max(
                    new IBM.ICU.Math.BigDecimal("7"), mc6).ToString())
                    .Equals("7");
            (new DiagBigDecimal.Test(this, "max006")).ok = ((new IBM.ICU.Math.BigDecimal("2E+3"))
                    .Max(new IBM.ICU.Math.BigDecimal("7")).ToString())
                    .Equals("2000");
            (new DiagBigDecimal.Test(this, "max007")).ok = ((new IBM.ICU.Math.BigDecimal("2E+3"))
                    .Max(new IBM.ICU.Math.BigDecimal("7"), mc3).ToString())
                    .Equals("2E+3");
            (new DiagBigDecimal.Test(this, "max008")).ok = ((new IBM.ICU.Math.BigDecimal("7"))
                    .Max(new IBM.ICU.Math.BigDecimal("2E+3")).ToString())
                    .Equals("2000");
            (new DiagBigDecimal.Test(this, "max009")).ok = ((new IBM.ICU.Math.BigDecimal("7")).Max(
                    new IBM.ICU.Math.BigDecimal("2E+3"), mc3).ToString())
                    .Equals("2E+3");
            try
            {
                ten.Max((IBM.ICU.Math.BigDecimal)null);
                flag = false;
            }
            catch (NullReferenceException _47)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "max010")).ok = flag;
            try
            {
                ten.Max(ten, (IBM.ICU.Math.MathContext)null);
                flag = false;
            }
            catch (NullReferenceException _48)
            {
                flag = true;
            }/* checknull2 */
            (new DiagBigDecimal.Test(this, "max011")).ok = flag;
            try
            {
                tenlong.Max(IBM.ICU.Math.BigDecimal.ONE, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _49)
            {
                ae = _49;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "max012")).ok = flag;
            try
            {
                IBM.ICU.Math.BigDecimal.ONE.Max(tenlong, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _50)
            {
                ae = _50;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "max013")).ok = flag;
            Summary("max");
        }

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.Min(IBM.ICU.Dev.Test.BigDec.BigDecimal)"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagmin()
        {
            bool flag = false;
            IBM.ICU.Math.BigDecimal minx = null;
            System.ArithmeticException ae = null;
            // we assume add/subtract test function; this and max just
            // test existence and test the truth table

            (new DiagBigDecimal.Test(this, "min001")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Min(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("2");
            (new DiagBigDecimal.Test(this, "min002")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Min(new IBM.ICU.Math.BigDecimal("5")).ToString())
                    .Equals("5");
            (new DiagBigDecimal.Test(this, "min003")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Min(new IBM.ICU.Math.BigDecimal("7")).ToString())
                    .Equals("2");
            (new DiagBigDecimal.Test(this, "min004")).ok = ((new IBM.ICU.Math.BigDecimal("2")).Min(
                    new IBM.ICU.Math.BigDecimal("7"), mcdef).ToString())
                    .Equals("2");
            (new DiagBigDecimal.Test(this, "min005")).ok = ((new IBM.ICU.Math.BigDecimal("1")).Min(
                    new IBM.ICU.Math.BigDecimal("7"), mc6).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "min006")).ok = ((new IBM.ICU.Math.BigDecimal("-2E+3"))
                    .Min(new IBM.ICU.Math.BigDecimal("7")).ToString())
                    .Equals("-2000");
            (new DiagBigDecimal.Test(this, "min007")).ok = ((new IBM.ICU.Math.BigDecimal("-2E+3"))
                    .Min(new IBM.ICU.Math.BigDecimal("7"), mc3).ToString())
                    .Equals("-2E+3");
            (new DiagBigDecimal.Test(this, "min008")).ok = ((new IBM.ICU.Math.BigDecimal("7"))
                    .Min(new IBM.ICU.Math.BigDecimal("-2E+3")).ToString())
                    .Equals("-2000");
            (new DiagBigDecimal.Test(this, "min009")).ok = ((new IBM.ICU.Math.BigDecimal("7")).Min(
                    new IBM.ICU.Math.BigDecimal("-2E+3"), mc3).ToString())
                    .Equals("-2E+3");
            try
            {
                minx = ten;
                minx.Min((IBM.ICU.Math.BigDecimal)null);
                flag = false;
            }
            catch (NullReferenceException _51)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "min010")).ok = flag;
            try
            {
                minx = ten;
                minx.Min(ten, (IBM.ICU.Math.MathContext)null);
                flag = false;
            }
            catch (NullReferenceException _52)
            {
                flag = true;
            }/* checknull2 */
            (new DiagBigDecimal.Test(this, "min011")).ok = flag;

            try
            {
                tenlong.Min(IBM.ICU.Math.BigDecimal.ONE, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _53)
            {
                ae = _53;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "min012")).ok = flag;
            try
            {
                (new IBM.ICU.Math.BigDecimal(9)).Min(tenlong, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _54)
            {
                ae = _54;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "min013")).ok = flag;
            Summary("min");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.Multiply(IBM.ICU.Dev.Test.BigDec.BigDecimal)"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagmultiply()
        {
            bool flag = false;
            IBM.ICU.Math.BigDecimal l9;
            IBM.ICU.Math.BigDecimal l77e;
            IBM.ICU.Math.BigDecimal l12345;
            IBM.ICU.Math.BigDecimal edge;
            IBM.ICU.Math.BigDecimal tenedge;
            IBM.ICU.Math.BigDecimal hunedge;
            IBM.ICU.Math.BigDecimal opo;
            IBM.ICU.Math.BigDecimal d1 = null;
            IBM.ICU.Math.BigDecimal d2 = null;
            System.ArithmeticException oe = null;
            System.ArithmeticException ae = null;

            (new DiagBigDecimal.Test(this, "mul001")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("3"), mcdef)
                    .ToString()).Equals("6");
            (new DiagBigDecimal.Test(this, "mul002")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("1"), mcdef)
                    .ToString()).Equals("5");
            (new DiagBigDecimal.Test(this, "mul003")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("10");
            (new DiagBigDecimal.Test(this, "mul004")).ok = ((new IBM.ICU.Math.BigDecimal("1.20"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("2.40");
            (new DiagBigDecimal.Test(this, "mul005")).ok = ((new IBM.ICU.Math.BigDecimal("1.20"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("0"), mcdef)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "mul006")).ok = ((new IBM.ICU.Math.BigDecimal("1.20"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("-2"), mcdef)
                    .ToString()).Equals("-2.40");
            (new DiagBigDecimal.Test(this, "mul007")).ok = ((new IBM.ICU.Math.BigDecimal("-1.20"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("-2.40");
            (new DiagBigDecimal.Test(this, "mul008")).ok = ((new IBM.ICU.Math.BigDecimal("-1.20"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("0"), mcdef)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "mul009")).ok = ((new IBM.ICU.Math.BigDecimal("-1.20"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("-2"), mcdef)
                    .ToString()).Equals("2.40");
            (new DiagBigDecimal.Test(this, "mul010")).ok = ((new IBM.ICU.Math.BigDecimal("5.09"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("7.1"), mcdef)
                    .ToString()).Equals("36.139");
            (new DiagBigDecimal.Test(this, "mul011")).ok = ((new IBM.ICU.Math.BigDecimal("2.5"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("4"), mcdef)
                    .ToString()).Equals("10.0");
            (new DiagBigDecimal.Test(this, "mul012")).ok = ((new IBM.ICU.Math.BigDecimal("2.50"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("4"), mcdef)
                    .ToString()).Equals("10.00");
            (new DiagBigDecimal.Test(this, "mul013")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "1.23456789")).Multiply(new IBM.ICU.Math.BigDecimal(
                    "1.00000000"), mcdef).ToString()).Equals("1.23456789");

            (new DiagBigDecimal.Test(this, "mul014")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "9.999999999")).Multiply(new IBM.ICU.Math.BigDecimal(
                    "9.999999999"), mcdef).ToString()).Equals("100.000000");

            (new DiagBigDecimal.Test(this, "mul015")).ok = ((new IBM.ICU.Math.BigDecimal("2.50"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("4"), mcdef)
                    .ToString()).Equals("10.00");
            (new DiagBigDecimal.Test(this, "mul016")).ok = ((new IBM.ICU.Math.BigDecimal("2.50"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("4"), mc6).ToString())
                    .Equals("10.00");
            (new DiagBigDecimal.Test(this, "mul017")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "9.999999999")).Multiply(new IBM.ICU.Math.BigDecimal(
                    "9.999999999"), mc6).ToString()).Equals("100.000");

            (new DiagBigDecimal.Test(this, "mul020")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("3")).ToString())
                    .Equals("6");
            (new DiagBigDecimal.Test(this, "mul021")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("1")).ToString())
                    .Equals("5");
            (new DiagBigDecimal.Test(this, "mul022")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("10");
            (new DiagBigDecimal.Test(this, "mul023")).ok = ((new IBM.ICU.Math.BigDecimal("1.20"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("2.40");
            (new DiagBigDecimal.Test(this, "mul024")).ok = ((new IBM.ICU.Math.BigDecimal("1.20"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("0")).ToString())
                    .Equals("0.00");
            (new DiagBigDecimal.Test(this, "mul025")).ok = ((new IBM.ICU.Math.BigDecimal("1.20"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("-2")).ToString())
                    .Equals("-2.40");
            (new DiagBigDecimal.Test(this, "mul026")).ok = ((new IBM.ICU.Math.BigDecimal("-1.20"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("-2.40");
            (new DiagBigDecimal.Test(this, "mul027")).ok = ((new IBM.ICU.Math.BigDecimal("-1.20"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("0")).ToString())
                    .Equals("0.00");
            (new DiagBigDecimal.Test(this, "mul028")).ok = ((new IBM.ICU.Math.BigDecimal("-1.20"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("-2")).ToString())
                    .Equals("2.40");
            (new DiagBigDecimal.Test(this, "mul029")).ok = ((new IBM.ICU.Math.BigDecimal("5.09"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("7.1")).ToString())
                    .Equals("36.139");
            (new DiagBigDecimal.Test(this, "mul030")).ok = ((new IBM.ICU.Math.BigDecimal("2.5"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("4")).ToString())
                    .Equals("10.0");
            (new DiagBigDecimal.Test(this, "mul031")).ok = ((new IBM.ICU.Math.BigDecimal("2.50"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("4")).ToString())
                    .Equals("10.00");
            (new DiagBigDecimal.Test(this, "mul032")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "1.23456789")).Multiply(new IBM.ICU.Math.BigDecimal(
                    "1.00000000")).ToString()).Equals("1.2345678900000000");

            (new DiagBigDecimal.Test(this, "mul033")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "1234.56789")).Multiply(new IBM.ICU.Math.BigDecimal(
                    "-1000.00000")).ToString()).Equals("-1234567.8900000000");

            (new DiagBigDecimal.Test(this, "mul034")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "-1234.56789")).Multiply(new IBM.ICU.Math.BigDecimal(
                    "1000.00000")).ToString()).Equals("-1234567.8900000000");

            (new DiagBigDecimal.Test(this, "mul035")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "9.999999999")).Multiply(new IBM.ICU.Math.BigDecimal(
                    "9.999999999")).ToString()).Equals("99.999999980000000001");

            (new DiagBigDecimal.Test(this, "mul036")).ok = ((new IBM.ICU.Math.BigDecimal("5.00"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("1E-3")).ToString())
                    .Equals("0.00500");
            (new DiagBigDecimal.Test(this, "mul037")).ok = ((new IBM.ICU.Math.BigDecimal("00.00"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("0.000")).ToString())
                    .Equals("0.00000");
            (new DiagBigDecimal.Test(this, "mul038")).ok = ((new IBM.ICU.Math.BigDecimal("00.00"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("0E-3")).ToString())
                    .Equals("0.00"); // rhs is '0'
            // 1999.12.21: next one is a edge case if intermediate longs are used
            (new DiagBigDecimal.Test(this, "mul039")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "999999999999")).Multiply(new IBM.ICU.Math.BigDecimal(
                    "9765625")).ToString()).Equals("9765624999990234375");

            l9 = new IBM.ICU.Math.BigDecimal("123456789E+10");
            l77e = new IBM.ICU.Math.BigDecimal("77E-20");
            (new DiagBigDecimal.Test(this, "mul040")).ok = (l9.Multiply(new IBM.ICU.Math.BigDecimal(
                    "3456757")).ToString()).Equals("4267601195732730000000000");
            (new DiagBigDecimal.Test(this, "mul041")).ok = (l9.Multiply(new IBM.ICU.Math.BigDecimal(
                    "3456757"), mc3).ToString()).Equals("4.26E+24");
            (new DiagBigDecimal.Test(this, "mul042")).ok = (l9.Multiply(l77e).ToString())
                    .Equals("0.95061727530000000000");
            (new DiagBigDecimal.Test(this, "mul043")).ok = (l9.Multiply(l77e, mc3).ToString())
                    .Equals("0.947");
            (new DiagBigDecimal.Test(this, "mul044")).ok = (l77e.Multiply(l9, mc3).ToString())
                    .Equals("0.947");

            l12345 = new IBM.ICU.Math.BigDecimal("123.45");
            (new DiagBigDecimal.Test(this, "mul050")).ok = (l12345.Multiply(
                    new IBM.ICU.Math.BigDecimal("1e11"), mcdef).ToString())
                    .Equals("1.2345E+13");
            (new DiagBigDecimal.Test(this, "mul051")).ok = (l12345.Multiply(
                    new IBM.ICU.Math.BigDecimal("1e11"), mcs).ToString())
                    .Equals("1.2345E+13");
            (new DiagBigDecimal.Test(this, "mul052")).ok = (l12345.Multiply(
                    new IBM.ICU.Math.BigDecimal("1e+9"), mce).ToString())
                    .Equals("123.45E+9");
            (new DiagBigDecimal.Test(this, "mul053")).ok = (l12345.Multiply(
                    new IBM.ICU.Math.BigDecimal("1e10"), mce).ToString())
                    .Equals("1.2345E+12");
            (new DiagBigDecimal.Test(this, "mul054")).ok = (l12345.Multiply(
                    new IBM.ICU.Math.BigDecimal("1e11"), mce).ToString())
                    .Equals("12.345E+12");
            (new DiagBigDecimal.Test(this, "mul055")).ok = (l12345.Multiply(
                    new IBM.ICU.Math.BigDecimal("1e12"), mce).ToString())
                    .Equals("123.45E+12");
            (new DiagBigDecimal.Test(this, "mul056")).ok = (l12345.Multiply(
                    new IBM.ICU.Math.BigDecimal("1e13"), mce).ToString())
                    .Equals("1.2345E+15");

            // test some cases that are close to exponent overflow
            (new DiagBigDecimal.Test(this, "mul060")).ok = (one.Multiply(
                    new IBM.ICU.Math.BigDecimal("9e999999999"), mcs).ToString())
                    .Equals("9E+999999999");
            (new DiagBigDecimal.Test(this, "mul061")).ok = (one.Multiply(
                    new IBM.ICU.Math.BigDecimal("9.9e999999999"), mcs)
                    .ToString()).Equals("9.9E+999999999");
            (new DiagBigDecimal.Test(this, "mul062")).ok = (one.Multiply(
                    new IBM.ICU.Math.BigDecimal("9.99e999999999"), mcs)
                    .ToString()).Equals("9.99E+999999999");
            (new DiagBigDecimal.Test(this, "mul063")).ok = (ten.Multiply(
                    new IBM.ICU.Math.BigDecimal("9e999999999"), mce).ToString())
                    .Equals("90E+999999999");
            (new DiagBigDecimal.Test(this, "mul064")).ok = (ten.Multiply(
                    new IBM.ICU.Math.BigDecimal("9.9e999999999"), mce)
                    .ToString()).Equals("99.0E+999999999");
            edge = new IBM.ICU.Math.BigDecimal("9.999e999999999");
            tenedge = ten.Multiply(edge, mce);
            (new DiagBigDecimal.Test(this, "mul065")).ok = (tenedge.ToString())
                    .Equals("99.990E+999999999");
            hunedge = ten.Multiply(tenedge, mce);
            (new DiagBigDecimal.Test(this, "mul066")).ok = (hunedge.ToString())
                    .Equals("999.900E+999999999");
            opo = new IBM.ICU.Math.BigDecimal("0.1"); // one tenth
            (new DiagBigDecimal.Test(this, "mul067")).ok = (opo.Multiply(
                    new IBM.ICU.Math.BigDecimal("9e-999999998"), mcs)
                    .ToString()).Equals("9E-999999999");
            (new DiagBigDecimal.Test(this, "mul068")).ok = (opo.Multiply(
                    new IBM.ICU.Math.BigDecimal("99e-999999998"), mcs)
                    .ToString()).Equals("9.9E-999999998");
            (new DiagBigDecimal.Test(this, "mul069")).ok = (opo.Multiply(
                    new IBM.ICU.Math.BigDecimal("999e-999999998"), mcs)
                    .ToString()).Equals("9.99E-999999997");

            (new DiagBigDecimal.Test(this, "mul070")).ok = (opo.Multiply(
                    new IBM.ICU.Math.BigDecimal("9e-999999998"), mce)
                    .ToString()).Equals("9E-999999999");
            (new DiagBigDecimal.Test(this, "mul071")).ok = (opo.Multiply(
                    new IBM.ICU.Math.BigDecimal("99e-999999998"), mce)
                    .ToString()).Equals("99E-999999999");
            (new DiagBigDecimal.Test(this, "mul072")).ok = (opo.Multiply(
                    new IBM.ICU.Math.BigDecimal("999e-999999998"), mce)
                    .ToString()).Equals("999E-999999999");
            (new DiagBigDecimal.Test(this, "mul073")).ok = (opo.Multiply(
                    new IBM.ICU.Math.BigDecimal("999e-999999997"), mce)
                    .ToString()).Equals("9.99E-999999996");
            (new DiagBigDecimal.Test(this, "mul074")).ok = (opo.Multiply(
                    new IBM.ICU.Math.BigDecimal("9999e-999999997"), mce)
                    .ToString()).Equals("99.99E-999999996");
            (new DiagBigDecimal.Test(this, "mul074")).ok = (opo.Multiply(
                    new IBM.ICU.Math.BigDecimal("99999e-999999997"), mce)
                    .ToString()).Equals("999.99E-999999996");

            // test some intermediate lengths
            (new DiagBigDecimal.Test(this, "mul080")).ok = (opo.Multiply(
                    new IBM.ICU.Math.BigDecimal("123456789"), mcs).ToString())
                    .Equals("12345678.9");
            (new DiagBigDecimal.Test(this, "mul081")).ok = (opo.Multiply(
                    new IBM.ICU.Math.BigDecimal("12345678901234"), mcs)
                    .ToString()).Equals("1.23456789E+12");
            (new DiagBigDecimal.Test(this, "mul082")).ok = (opo.Multiply(
                    new IBM.ICU.Math.BigDecimal("123456789123456789"), mcs)
                    .ToString()).Equals("1.23456789E+16");
            (new DiagBigDecimal.Test(this, "mul083")).ok = (opo.Multiply(
                    new IBM.ICU.Math.BigDecimal("123456789"), mcfd).ToString())
                    .Equals("12345678.9");
            (new DiagBigDecimal.Test(this, "mul084")).ok = (opo.Multiply(
                    new IBM.ICU.Math.BigDecimal("12345678901234"), mcfd)
                    .ToString()).Equals("1234567890123.4");
            (new DiagBigDecimal.Test(this, "mul085")).ok = (opo.Multiply(
                    new IBM.ICU.Math.BigDecimal("123456789123456789"), mcfd)
                    .ToString()).Equals("12345678912345678.9");

            (new DiagBigDecimal.Test(this, "mul090")).ok = ((new IBM.ICU.Math.BigDecimal("123456789"))
                    .Multiply(opo, mcs).ToString()).Equals("12345678.9");
            (new DiagBigDecimal.Test(this, "mul091")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "12345678901234")).Multiply(opo, mcs).ToString())
                    .Equals("1.23456789E+12");
            (new DiagBigDecimal.Test(this, "mul092")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "123456789123456789")).Multiply(opo, mcs).ToString())
                    .Equals("1.23456789E+16");
            (new DiagBigDecimal.Test(this, "mul093")).ok = ((new IBM.ICU.Math.BigDecimal("123456789"))
                    .Multiply(opo, mcfd).ToString()).Equals("12345678.9");
            (new DiagBigDecimal.Test(this, "mul094")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "12345678901234")).Multiply(opo, mcfd).ToString())
                    .Equals("1234567890123.4");
            (new DiagBigDecimal.Test(this, "mul095")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "123456789123456789")).Multiply(opo, mcfd).ToString())
                    .Equals("12345678912345678.9");

            // test some more edge cases and carries
            (new DiagBigDecimal.Test(this, "mul101")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("9")).ToString())
                    .Equals("81");
            (new DiagBigDecimal.Test(this, "mul102")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("90")).ToString())
                    .Equals("810");
            (new DiagBigDecimal.Test(this, "mul103")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("900")).ToString())
                    .Equals("8100");
            (new DiagBigDecimal.Test(this, "mul104")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("9000")).ToString())
                    .Equals("81000");
            (new DiagBigDecimal.Test(this, "mul105")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("90000")).ToString())
                    .Equals("810000");
            (new DiagBigDecimal.Test(this, "mul106")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("900000")).ToString())
                    .Equals("8100000");
            (new DiagBigDecimal.Test(this, "mul107")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("9000000"))
                    .ToString()).Equals("81000000");
            (new DiagBigDecimal.Test(this, "mul108")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("90000000"))
                    .ToString()).Equals("810000000");
            (new DiagBigDecimal.Test(this, "mul109")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("900000000"))
                    .ToString()).Equals("8100000000");
            (new DiagBigDecimal.Test(this, "mul110")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("9000000000"))
                    .ToString()).Equals("81000000000");
            (new DiagBigDecimal.Test(this, "mul111")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("90000000000"))
                    .ToString()).Equals("810000000000");
            (new DiagBigDecimal.Test(this, "mul112")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("900000000000"))
                    .ToString()).Equals("8100000000000");
            (new DiagBigDecimal.Test(this, "mul113")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("9000000000000"))
                    .ToString()).Equals("81000000000000");
            (new DiagBigDecimal.Test(this, "mul114")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("90000000000000"))
                    .ToString()).Equals("810000000000000");
            (new DiagBigDecimal.Test(this, "mul115")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("900000000000000"))
                    .ToString()).Equals("8100000000000000");
            (new DiagBigDecimal.Test(this, "mul116")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("9000000000000000"))
                    .ToString()).Equals("81000000000000000");
            (new DiagBigDecimal.Test(this, "mul117")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("90000000000000000"))
                    .ToString()).Equals("810000000000000000");
            (new DiagBigDecimal.Test(this, "mul118")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("900000000000000000"))
                    .ToString()).Equals("8100000000000000000");
            (new DiagBigDecimal.Test(this, "mul119")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("9000000000000000000"))
                    .ToString()).Equals("81000000000000000000");
            (new DiagBigDecimal.Test(this, "mul120")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal(
                            "90000000000000000000")).ToString())
                    .Equals("810000000000000000000");
            (new DiagBigDecimal.Test(this, "mul121")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal(
                            "900000000000000000000")).ToString())
                    .Equals("8100000000000000000000");
            (new DiagBigDecimal.Test(this, "mul122")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal(
                            "9000000000000000000000")).ToString())
                    .Equals("81000000000000000000000");
            (new DiagBigDecimal.Test(this, "mul123")).ok = ((new IBM.ICU.Math.BigDecimal("9"))
                    .Multiply(new IBM.ICU.Math.BigDecimal(
                            "90000000000000000000000")).ToString())
                    .Equals("810000000000000000000000");
            // test some more edge cases without carries
            (new DiagBigDecimal.Test(this, "mul131")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("3")).ToString())
                    .Equals("9");
            (new DiagBigDecimal.Test(this, "mul132")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("30")).ToString())
                    .Equals("90");
            (new DiagBigDecimal.Test(this, "mul133")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("300")).ToString())
                    .Equals("900");
            (new DiagBigDecimal.Test(this, "mul134")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("3000")).ToString())
                    .Equals("9000");
            (new DiagBigDecimal.Test(this, "mul135")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("30000")).ToString())
                    .Equals("90000");
            (new DiagBigDecimal.Test(this, "mul136")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("300000")).ToString())
                    .Equals("900000");
            (new DiagBigDecimal.Test(this, "mul137")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("3000000"))
                    .ToString()).Equals("9000000");
            (new DiagBigDecimal.Test(this, "mul138")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("30000000"))
                    .ToString()).Equals("90000000");
            (new DiagBigDecimal.Test(this, "mul139")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("300000000"))
                    .ToString()).Equals("900000000");
            (new DiagBigDecimal.Test(this, "mul140")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("3000000000"))
                    .ToString()).Equals("9000000000");
            (new DiagBigDecimal.Test(this, "mul141")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("30000000000"))
                    .ToString()).Equals("90000000000");
            (new DiagBigDecimal.Test(this, "mul142")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("300000000000"))
                    .ToString()).Equals("900000000000");
            (new DiagBigDecimal.Test(this, "mul143")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("3000000000000"))
                    .ToString()).Equals("9000000000000");
            (new DiagBigDecimal.Test(this, "mul144")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("30000000000000"))
                    .ToString()).Equals("90000000000000");
            (new DiagBigDecimal.Test(this, "mul145")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("300000000000000"))
                    .ToString()).Equals("900000000000000");
            (new DiagBigDecimal.Test(this, "mul146")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("3000000000000000"))
                    .ToString()).Equals("9000000000000000");
            (new DiagBigDecimal.Test(this, "mul147")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("30000000000000000"))
                    .ToString()).Equals("90000000000000000");
            (new DiagBigDecimal.Test(this, "mul148")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("300000000000000000"))
                    .ToString()).Equals("900000000000000000");
            (new DiagBigDecimal.Test(this, "mul149")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal("3000000000000000000"))
                    .ToString()).Equals("9000000000000000000");
            (new DiagBigDecimal.Test(this, "mul150")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal(
                            "30000000000000000000")).ToString())
                    .Equals("90000000000000000000");
            (new DiagBigDecimal.Test(this, "mul151")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal(
                            "300000000000000000000")).ToString())
                    .Equals("900000000000000000000");
            (new DiagBigDecimal.Test(this, "mul152")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal(
                            "3000000000000000000000")).ToString())
                    .Equals("9000000000000000000000");
            (new DiagBigDecimal.Test(this, "mul153")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Multiply(new IBM.ICU.Math.BigDecimal(
                            "30000000000000000000000")).ToString())
                    .Equals("90000000000000000000000");

            try
            {
                ten.Multiply((IBM.ICU.Math.BigDecimal)null);
                flag = false;
            }
            catch (NullReferenceException _55)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "mul200")).ok = flag;
            try
            {
                ten.Multiply(ten, (IBM.ICU.Math.MathContext)null);
                flag = false;
            }
            catch (NullReferenceException _56)
            {
                flag = true;
            }/* checknull2 */
            (new DiagBigDecimal.Test(this, "mul201")).ok = flag;

            try
            {
                d1 = new IBM.ICU.Math.BigDecimal("-1.23456789012345E-0");
                d2 = new IBM.ICU.Math.BigDecimal("9E+999999999");
                d1.Multiply(d2, mcdef); // marginal overflow
                flag = false;
            }
            catch (System.ArithmeticException _57)
            {
                oe = _57;
                flag = (oe.Message).Equals("Exponent Overflow: 1000000000");
            }/* checkover */
            (new DiagBigDecimal.Test(this, "mul202")).ok = flag;
            try
            {
                d1 = new IBM.ICU.Math.BigDecimal("112");
                d2 = new IBM.ICU.Math.BigDecimal("9E+999999999");
                d1.Multiply(d2, mce); // marginal overflow, engineering
                flag = false;
            }
            catch (System.ArithmeticException _58)
            {
                oe = _58;
                flag = (oe.Message).Equals("Exponent Overflow: 1000000002");
            }/* checkover */
            (new DiagBigDecimal.Test(this, "mul203")).ok = flag;

            try
            {
                d1 = new IBM.ICU.Math.BigDecimal("0.9");
                d2 = new IBM.ICU.Math.BigDecimal("1E-999999999");
                d1.Multiply(d2, mcdef); // marginal negative overflow
                flag = false;
            }
            catch (System.ArithmeticException _59)
            {
                oe = _59;
                flag = (oe.Message).Equals("Exponent Overflow: -1000000000");
            }/* checkover */
            (new DiagBigDecimal.Test(this, "mul204")).ok = flag;
            try
            {
                d1 = new IBM.ICU.Math.BigDecimal("0.9");
                d2 = new IBM.ICU.Math.BigDecimal("1E-999999999");
                d1.Multiply(d2, mce); // marginal negative overflow,
                // engineering
                flag = false;
            }
            catch (System.ArithmeticException _60)
            {
                oe = _60;
                flag = (oe.Message).Equals("Exponent Overflow: -1000000002");
            }/* checkover */
            (new DiagBigDecimal.Test(this, "mul205")).ok = flag;

            try
            {
                tenlong.Multiply(IBM.ICU.Math.BigDecimal.ONE, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _61)
            {
                ae = _61;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "mul206")).ok = flag;
            try
            {
                IBM.ICU.Math.BigDecimal.TEN.Multiply(tenlong, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _62)
            {
                ae = _62;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "mul207")).ok = flag;

            Summary("multiply");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.Negate"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagnegate()
        {
            bool flag = false;
            System.ArithmeticException ae = null;

            (new DiagBigDecimal.Test(this, "neg001")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Negate().ToString()).Equals("-2");
            (new DiagBigDecimal.Test(this, "neg002")).ok = ((new IBM.ICU.Math.BigDecimal("-2"))
                    .Negate().ToString()).Equals("2");
            (new DiagBigDecimal.Test(this, "neg003")).ok = ((new IBM.ICU.Math.BigDecimal("2.00"))
                    .Negate(mcdef).ToString()).Equals("-2.00");
            (new DiagBigDecimal.Test(this, "neg004")).ok = ((new IBM.ICU.Math.BigDecimal("-2.00"))
                    .Negate(mcdef).ToString()).Equals("2.00");
            (new DiagBigDecimal.Test(this, "neg005")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Negate(mcdef).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "neg006")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .Negate(mcdef).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "neg007")).ok = ((new IBM.ICU.Math.BigDecimal("00.0"))
                    .Negate(mcdef).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "neg008")).ok = ((new IBM.ICU.Math.BigDecimal("00"))
                    .Negate(mcdef).ToString()).Equals("0");

            (new DiagBigDecimal.Test(this, "neg010")).ok = ((new IBM.ICU.Math.BigDecimal("2.00"))
                    .Negate().ToString()).Equals("-2.00");
            (new DiagBigDecimal.Test(this, "neg011")).ok = ((new IBM.ICU.Math.BigDecimal("-2.00"))
                    .Negate().ToString()).Equals("2.00");
            (new DiagBigDecimal.Test(this, "neg012")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Negate().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "neg013")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .Negate().ToString()).Equals("0.00");
            (new DiagBigDecimal.Test(this, "neg014")).ok = ((new IBM.ICU.Math.BigDecimal("00.0"))
                    .Negate().ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "neg015")).ok = ((new IBM.ICU.Math.BigDecimal("00.00"))
                    .Negate().ToString()).Equals("0.00");
            (new DiagBigDecimal.Test(this, "neg016")).ok = ((new IBM.ICU.Math.BigDecimal("00"))
                    .Negate().ToString()).Equals("0");

            (new DiagBigDecimal.Test(this, "neg020")).ok = ((new IBM.ICU.Math.BigDecimal("-2000000"))
                    .Negate().ToString()).Equals("2000000");
            (new DiagBigDecimal.Test(this, "neg021")).ok = ((new IBM.ICU.Math.BigDecimal("-2000000"))
                    .Negate(mcdef).ToString()).Equals("2000000");
            (new DiagBigDecimal.Test(this, "neg022")).ok = ((new IBM.ICU.Math.BigDecimal("-2000000"))
                    .Negate(mc6).ToString()).Equals("2.00000E+6");
            (new DiagBigDecimal.Test(this, "neg023")).ok = ((new IBM.ICU.Math.BigDecimal("2000000"))
                    .Negate(mc6).ToString()).Equals("-2.00000E+6");

            try
            {
                ten.Negate((IBM.ICU.Math.MathContext)null);
                flag = false;
            }
            catch (NullReferenceException _63)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "neg100")).ok = flag;

            try
            {
                tenlong.Negate(mcld);
                flag = false;
            }
            catch (System.ArithmeticException _64)
            {
                ae = _64;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "neg101")).ok = flag;
            Summary("negate");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.Plus"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagplus()
        {
            bool flag = false;
            IBM.ICU.Math.MathContext mche1;
            System.ArithmeticException ae = null;

            (new DiagBigDecimal.Test(this, "plu001")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Plus(mcdef).ToString()).Equals("2");
            (new DiagBigDecimal.Test(this, "plu002")).ok = ((new IBM.ICU.Math.BigDecimal("-2"))
                    .Plus(mcdef).ToString()).Equals("-2");
            (new DiagBigDecimal.Test(this, "plu003")).ok = ((new IBM.ICU.Math.BigDecimal("2.00"))
                    .Plus(mcdef).ToString()).Equals("2.00");
            (new DiagBigDecimal.Test(this, "plu004")).ok = ((new IBM.ICU.Math.BigDecimal("-2.00"))
                    .Plus(mcdef).ToString()).Equals("-2.00");
            (new DiagBigDecimal.Test(this, "plu005")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Plus(mcdef).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "plu006")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .Plus(mcdef).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "plu007")).ok = ((new IBM.ICU.Math.BigDecimal("00.0"))
                    .Plus(mcdef).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "plu008")).ok = ((new IBM.ICU.Math.BigDecimal("00"))
                    .Plus(mcdef).ToString()).Equals("0");

            (new DiagBigDecimal.Test(this, "plu010")).ok = ((new IBM.ICU.Math.BigDecimal("2"))
                    .Plus().ToString()).Equals("2");
            (new DiagBigDecimal.Test(this, "plu011")).ok = ((new IBM.ICU.Math.BigDecimal("-2"))
                    .Plus().ToString()).Equals("-2");
            (new DiagBigDecimal.Test(this, "plu012")).ok = ((new IBM.ICU.Math.BigDecimal("2.00"))
                    .Plus().ToString()).Equals("2.00");
            (new DiagBigDecimal.Test(this, "plu013")).ok = ((new IBM.ICU.Math.BigDecimal("-2.00"))
                    .Plus().ToString()).Equals("-2.00");
            (new DiagBigDecimal.Test(this, "plu014")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Plus().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "plu015")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .Plus().ToString()).Equals("0.00");
            (new DiagBigDecimal.Test(this, "plu016")).ok = ((new IBM.ICU.Math.BigDecimal("00.0"))
                    .Plus().ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "plu017")).ok = ((new IBM.ICU.Math.BigDecimal("00.00"))
                    .Plus().ToString()).Equals("0.00");
            (new DiagBigDecimal.Test(this, "plu018")).ok = ((new IBM.ICU.Math.BigDecimal("00"))
                    .Plus().ToString()).Equals("0");

            (new DiagBigDecimal.Test(this, "plu020")).ok = ((new IBM.ICU.Math.BigDecimal("-2000000"))
                    .Plus().ToString()).Equals("-2000000");
            (new DiagBigDecimal.Test(this, "plu021")).ok = ((new IBM.ICU.Math.BigDecimal("-2000000"))
                    .Plus(mcdef).ToString()).Equals("-2000000");
            (new DiagBigDecimal.Test(this, "plu022")).ok = ((new IBM.ICU.Math.BigDecimal("-2000000"))
                    .Plus(mc6).ToString()).Equals("-2.00000E+6");
            (new DiagBigDecimal.Test(this, "plu023")).ok = ((new IBM.ICU.Math.BigDecimal("2000000"))
                    .Plus(mc6).ToString()).Equals("2.00000E+6");

            // try some exotic but silly rounding [format checks more varieties]
            // [this mostly ensures we can set up and pass the setting]
            mche1 = new IBM.ICU.Math.MathContext(1,
                    IBM.ICU.Math.MathContext.SCIENTIFIC, false,
                    IBM.ICU.Math.MathContext.ROUND_HALF_EVEN);
            (new DiagBigDecimal.Test(this, "plu030")).ok = ((new IBM.ICU.Math.BigDecimal("0.24"))
                    .Plus(mche1).ToString()).Equals("0.2");
            (new DiagBigDecimal.Test(this, "plu031")).ok = ((new IBM.ICU.Math.BigDecimal("0.25"))
                    .Plus(mche1).ToString()).Equals("0.2");
            (new DiagBigDecimal.Test(this, "plu032")).ok = ((new IBM.ICU.Math.BigDecimal("0.26"))
                    .Plus(mche1).ToString()).Equals("0.3");
            (new DiagBigDecimal.Test(this, "plu033")).ok = ((new IBM.ICU.Math.BigDecimal("0.14"))
                    .Plus(mche1).ToString()).Equals("0.1");
            (new DiagBigDecimal.Test(this, "plu034")).ok = ((new IBM.ICU.Math.BigDecimal("0.15"))
                    .Plus(mche1).ToString()).Equals("0.2");
            (new DiagBigDecimal.Test(this, "plu035")).ok = ((new IBM.ICU.Math.BigDecimal("0.16"))
                    .Plus(mche1).ToString()).Equals("0.2");

            (new DiagBigDecimal.Test(this, "plu040")).ok = ((new IBM.ICU.Math.BigDecimal("0.251"))
                    .Plus(mche1).ToString()).Equals("0.3");
            (new DiagBigDecimal.Test(this, "plu041")).ok = ((new IBM.ICU.Math.BigDecimal("0.151"))
                    .Plus(mche1).ToString()).Equals("0.2");

            (new DiagBigDecimal.Test(this, "plu050")).ok = ((new IBM.ICU.Math.BigDecimal("-0.24"))
                    .Plus(mche1).ToString()).Equals("-0.2");
            (new DiagBigDecimal.Test(this, "plu051")).ok = ((new IBM.ICU.Math.BigDecimal("-0.25"))
                    .Plus(mche1).ToString()).Equals("-0.2");
            (new DiagBigDecimal.Test(this, "plu052")).ok = ((new IBM.ICU.Math.BigDecimal("-0.26"))
                    .Plus(mche1).ToString()).Equals("-0.3");
            (new DiagBigDecimal.Test(this, "plu053")).ok = ((new IBM.ICU.Math.BigDecimal("-0.14"))
                    .Plus(mche1).ToString()).Equals("-0.1");
            (new DiagBigDecimal.Test(this, "plu054")).ok = ((new IBM.ICU.Math.BigDecimal("-0.15"))
                    .Plus(mche1).ToString()).Equals("-0.2");
            (new DiagBigDecimal.Test(this, "plu055")).ok = ((new IBM.ICU.Math.BigDecimal("-0.16"))
                    .Plus(mche1).ToString()).Equals("-0.2");

            // more fixed, potential LHS swaps if done by add 0
            (new DiagBigDecimal.Test(this, "plu060")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "-56267E-10")).Plus().ToString()).Equals("-0.0000056267");
            (new DiagBigDecimal.Test(this, "plu061")).ok = ((new IBM.ICU.Math.BigDecimal("-56267E-5"))
                    .Plus().ToString()).Equals("-0.56267");
            (new DiagBigDecimal.Test(this, "plu062")).ok = ((new IBM.ICU.Math.BigDecimal("-56267E-2"))
                    .Plus().ToString()).Equals("-562.67");
            (new DiagBigDecimal.Test(this, "plu063")).ok = ((new IBM.ICU.Math.BigDecimal("-56267E-1"))
                    .Plus().ToString()).Equals("-5626.7");
            (new DiagBigDecimal.Test(this, "plu065")).ok = ((new IBM.ICU.Math.BigDecimal("-56267E-0"))
                    .Plus().ToString()).Equals("-56267");

            try
            {
                ten.Plus((IBM.ICU.Math.MathContext)null);
                flag = false;
            }
            catch (NullReferenceException _65)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "plu100")).ok = flag;

            try
            {
                tenlong.Plus(mcld);
                flag = false;
            }
            catch (System.ArithmeticException _66)
            {
                ae = _66;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "plu101")).ok = flag;
            Summary("plus");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.Pow(IBM.ICU.Dev.Test.BigDec.BigDecimal)"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagpow()
        {
            bool flag;
            IBM.ICU.Math.BigDecimal x;
            IBM.ICU.Math.BigDecimal temp;
            int n = 0;
            IBM.ICU.Math.BigDecimal vx;
            IBM.ICU.Math.BigDecimal vn;
            System.ArithmeticException ae = null;
            flag = true;
            (new DiagBigDecimal.Test(this, "pow001")).ok = "1".Equals((new IBM.ICU.Math.BigDecimal(
                    "0.3")).Pow(new IBM.ICU.Math.BigDecimal("0"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "pow002")).ok = "0.3"
                    .Equals((new IBM.ICU.Math.BigDecimal("0.3")).Pow(
                            new IBM.ICU.Math.BigDecimal("1"), mcdef).ToString());
            (new DiagBigDecimal.Test(this, "pow003")).ok = "0.3"
                    .Equals((new IBM.ICU.Math.BigDecimal("0.3")).Pow(
                            new IBM.ICU.Math.BigDecimal("1.00"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow004")).ok = "0.09"
                    .Equals((new IBM.ICU.Math.BigDecimal("0.3")).Pow(
                            new IBM.ICU.Math.BigDecimal("2.00"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow005")).ok = "0.09"
                    .Equals((new IBM.ICU.Math.BigDecimal("0.3")).Pow(
                            new IBM.ICU.Math.BigDecimal("2.000000000"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow006")).ok = ("1E-8")
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("-8"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow007")).ok = ("1E-7")
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("-7"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow008")).ok = "0.000001"
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("-6"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow009")).ok = "0.00001"
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("-5"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow010")).ok = "0.0001"
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("-4"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow011")).ok = "0.001"
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("-3"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow012")).ok = "0.01"
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("-2"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow013")).ok = "0.1"
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("-1"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow014")).ok = "1".Equals((new IBM.ICU.Math.BigDecimal(
                    "10")).Pow(new IBM.ICU.Math.BigDecimal("0"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "pow015")).ok = "10".Equals((new IBM.ICU.Math.BigDecimal(
                    "10")).Pow(new IBM.ICU.Math.BigDecimal("1"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "pow016")).ok = "100000000"
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("8"), mcdef).ToString());
            (new DiagBigDecimal.Test(this, "pow017")).ok = ("1E+9")
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("9"), mcdef).ToString());
            (new DiagBigDecimal.Test(this, "pow018")).ok = ("1E+99")
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("99"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow019")).ok = ("1E+999999999")
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("999999999"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow020")).ok = ("1E+999999998")
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("999999998"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow021")).ok = ("1E+999999997")
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("999999997"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow022")).ok = ("1E+333333333")
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("333333333"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow023")).ok = ("1E-333333333")
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("-333333333"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow024")).ok = ("1E-999999998")
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("-999999998"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow025")).ok = ("1E-999999999")
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("-999999999"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow026")).ok = "0.5"
                    .Equals((new IBM.ICU.Math.BigDecimal("2")).Pow(
                            new IBM.ICU.Math.BigDecimal("-1"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow027")).ok = "0.25"
                    .Equals((new IBM.ICU.Math.BigDecimal("2")).Pow(
                            new IBM.ICU.Math.BigDecimal("-2"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "pow028")).ok = "0.0625"
                    .Equals((new IBM.ICU.Math.BigDecimal("2")).Pow(
                            new IBM.ICU.Math.BigDecimal("-4"), mcdef)
                            .ToString());

            (new DiagBigDecimal.Test(this, "pow050")).ok = ((new IBM.ICU.Math.BigDecimal("0")).Pow(
                    new IBM.ICU.Math.BigDecimal("0"), mcdef).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "pow051")).ok = ((new IBM.ICU.Math.BigDecimal("0")).Pow(
                    new IBM.ICU.Math.BigDecimal("1"), mcdef).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "pow052")).ok = ((new IBM.ICU.Math.BigDecimal("0")).Pow(
                    new IBM.ICU.Math.BigDecimal("2"), mcdef).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "pow053")).ok = ((new IBM.ICU.Math.BigDecimal("1")).Pow(
                    new IBM.ICU.Math.BigDecimal("0"), mcdef).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "pow054")).ok = ((new IBM.ICU.Math.BigDecimal("1")).Pow(
                    new IBM.ICU.Math.BigDecimal("1"), mcdef).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "pow055")).ok = ((new IBM.ICU.Math.BigDecimal("1")).Pow(
                    new IBM.ICU.Math.BigDecimal("2"), mcdef).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "pow056")).ok = ((new IBM.ICU.Math.BigDecimal("0.3"))
                    .Pow(new IBM.ICU.Math.BigDecimal("0"), mcdef).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "pow057")).ok = ((new IBM.ICU.Math.BigDecimal("10")).Pow(
                    new IBM.ICU.Math.BigDecimal("999999999"), mcdef).ToString())
                    .Equals("1E+999999999");
            (new DiagBigDecimal.Test(this, "pow058")).ok = ((new IBM.ICU.Math.BigDecimal("10")).Pow(
                    new IBM.ICU.Math.BigDecimal("999999998"), mcdef).ToString())
                    .Equals("1E+999999998");
            (new DiagBigDecimal.Test(this, "pow059")).ok = ((new IBM.ICU.Math.BigDecimal("10")).Pow(
                    new IBM.ICU.Math.BigDecimal("999999997"), mcdef).ToString())
                    .Equals("1E+999999997");
            (new DiagBigDecimal.Test(this, "pow060")).ok = ((new IBM.ICU.Math.BigDecimal("10")).Pow(
                    new IBM.ICU.Math.BigDecimal("333333333"), mcdef).ToString())
                    .Equals("1E+333333333");
            (new DiagBigDecimal.Test(this, "pow061")).ok = ((new IBM.ICU.Math.BigDecimal("10")).Pow(
                    new IBM.ICU.Math.BigDecimal("77"), mcdef).ToString())
                    .Equals("1E+77");
            (new DiagBigDecimal.Test(this, "pow062")).ok = ((new IBM.ICU.Math.BigDecimal("10")).Pow(
                    new IBM.ICU.Math.BigDecimal("22"), mcdef).ToString())
                    .Equals("1E+22");
            (new DiagBigDecimal.Test(this, "pow063")).ok = ((new IBM.ICU.Math.BigDecimal("10")).Pow(
                    new IBM.ICU.Math.BigDecimal("-77"), mcdef).ToString())
                    .Equals("1E-77");
            (new DiagBigDecimal.Test(this, "pow064")).ok = ((new IBM.ICU.Math.BigDecimal("10")).Pow(
                    new IBM.ICU.Math.BigDecimal("-22"), mcdef).ToString())
                    .Equals("1E-22");
            (new DiagBigDecimal.Test(this, "pow065")).ok = ((new IBM.ICU.Math.BigDecimal("2")).Pow(
                    new IBM.ICU.Math.BigDecimal("-1"), mcdef).ToString())
                    .Equals("0.5");
            (new DiagBigDecimal.Test(this, "pow066")).ok = ((new IBM.ICU.Math.BigDecimal("2")).Pow(
                    new IBM.ICU.Math.BigDecimal("-2"), mcdef).ToString())
                    .Equals("0.25");
            (new DiagBigDecimal.Test(this, "pow067")).ok = ((new IBM.ICU.Math.BigDecimal("2")).Pow(
                    new IBM.ICU.Math.BigDecimal("-4"), mcdef).ToString())
                    .Equals("0.0625");
            (new DiagBigDecimal.Test(this, "pow068")).ok = ((new IBM.ICU.Math.BigDecimal("6.0"))
                    .Pow(new IBM.ICU.Math.BigDecimal("2"), mcdef).ToString())
                    .Equals("36");
            (new DiagBigDecimal.Test(this, "pow069")).ok = ((new IBM.ICU.Math.BigDecimal("-3")).Pow(
                    new IBM.ICU.Math.BigDecimal("2"), mcdef).ToString())
                    .Equals("9");/* from book */
            (new DiagBigDecimal.Test(this, "pow070")).ok = ((new IBM.ICU.Math.BigDecimal("2")).Pow(
                    new IBM.ICU.Math.BigDecimal("2"), mcdef).Pow(
                    new IBM.ICU.Math.BigDecimal("3"), mcdef).ToString())
                    .Equals("64");/* from book */

            // 1998.12.14 Next test removed as pow() no longer rounds RHS [as per
            // ANSI]
            // Test('pow071').ok=BigDecimal('2').pow(BigDecimal('2.000000001'),mcdef).toString
            // == '4'/* check input rounding */

            /* General tests from original Rexx diagnostics */
            x = new IBM.ICU.Math.BigDecimal("0.5");
            temp = IBM.ICU.Math.BigDecimal.ONE;
            flag = true;
            {
                n = 1;
                for (; n <= 10; n++)
                {
                    temp = temp.Multiply(x).Divide(IBM.ICU.Math.BigDecimal.ONE);
                    flag = flag
                            & (x.Pow(new IBM.ICU.Math.BigDecimal(n), mcdef)
                                    .ToString()).Equals(temp.ToString());
                }
            }/* n */
            (new DiagBigDecimal.Test(this, "pow080")).ok = flag;

            x = new IBM.ICU.Math.BigDecimal("2");
            temp = IBM.ICU.Math.BigDecimal.ONE;
            flag = true;
            {
                n = 1;
                for (; n <= 29; n++)
                {
                    temp = temp.Multiply(x).Divide(IBM.ICU.Math.BigDecimal.ONE);
                    flag = flag
                            & (x.Pow(new IBM.ICU.Math.BigDecimal(n), mcdef)
                                    .ToString()).Equals(temp.ToString());
                    flag = flag
                            & (x.Pow(new IBM.ICU.Math.BigDecimal((int)-n),
                                    mcdef).ToString())
                                    .Equals(IBM.ICU.Math.BigDecimal.ONE.Divide(
                                            temp, mcdef).ToString());
                    /* Note that rounding errors are possible for larger "n" */
                    /* due to the information content of the exponent */
                }
            }/* n */
            (new DiagBigDecimal.Test(this, "pow081")).ok = flag;

            /* The Vienna case. Checks both setup and 1/acc working precision */
            // Modified 1998.12.14 as RHS no longer rounded before use (must fit)
            // Modified 1990.02.04 as LHS is now rounded (instead of truncated to
            // guard)
            vx = new IBM.ICU.Math.BigDecimal("123456789E+10"); // lhs .. rounded
            // to 1.23E+18
            vn = new IBM.ICU.Math.BigDecimal("-1.23000e+2"); // rhs .. [was:
            // -1.23455e+2,
            // rounds to -123]
            (new DiagBigDecimal.Test(this, "pow090")).ok = (vx.Pow(vn, mc3).ToString())
                    .Equals("8.74E-2226");

            // - fixed point versions ---
            (new DiagBigDecimal.Test(this, "pow101")).ok = "1".Equals((new IBM.ICU.Math.BigDecimal(
                    "0.3")).Pow(new IBM.ICU.Math.BigDecimal("0")).ToString());
            (new DiagBigDecimal.Test(this, "pow102")).ok = "0.3"
                    .Equals((new IBM.ICU.Math.BigDecimal("0.3")).Pow(
                            new IBM.ICU.Math.BigDecimal("1")).ToString());
            (new DiagBigDecimal.Test(this, "pow103")).ok = "0.3"
                    .Equals((new IBM.ICU.Math.BigDecimal("0.3")).Pow(
                            new IBM.ICU.Math.BigDecimal("1.00")).ToString());
            (new DiagBigDecimal.Test(this, "pow104")).ok = "0.09"
                    .Equals((new IBM.ICU.Math.BigDecimal("0.3")).Pow(
                            new IBM.ICU.Math.BigDecimal("2")).ToString());
            (new DiagBigDecimal.Test(this, "pow105")).ok = "0.09"
                    .Equals((new IBM.ICU.Math.BigDecimal("0.3")).Pow(
                            new IBM.ICU.Math.BigDecimal("2.00")).ToString());
            (new DiagBigDecimal.Test(this, "pow106")).ok = "10".Equals((new IBM.ICU.Math.BigDecimal(
                    "10")).Pow(new IBM.ICU.Math.BigDecimal("1")).ToString());
            (new DiagBigDecimal.Test(this, "pow107")).ok = "100000000"
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("8")).ToString());
            (new DiagBigDecimal.Test(this, "pow108")).ok = "1000000000"
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("9")).ToString());
            (new DiagBigDecimal.Test(this, "pow109")).ok = "10000000000"
                    .Equals((new IBM.ICU.Math.BigDecimal("10")).Pow(
                            new IBM.ICU.Math.BigDecimal("10")).ToString());
            (new DiagBigDecimal.Test(this, "pow110")).ok = "1".Equals((new IBM.ICU.Math.BigDecimal(
                    "2")).Pow(new IBM.ICU.Math.BigDecimal("0")).ToString());
            (new DiagBigDecimal.Test(this, "pow111")).ok = "16".Equals((new IBM.ICU.Math.BigDecimal(
                    "2")).Pow(new IBM.ICU.Math.BigDecimal("4")).ToString());
            (new DiagBigDecimal.Test(this, "pow112")).ok = "256"
                    .Equals((new IBM.ICU.Math.BigDecimal("2")).Pow(
                            new IBM.ICU.Math.BigDecimal("8")).ToString());
            (new DiagBigDecimal.Test(this, "pow113")).ok = "1024"
                    .Equals((new IBM.ICU.Math.BigDecimal("2")).Pow(
                            new IBM.ICU.Math.BigDecimal("10")).ToString());
            (new DiagBigDecimal.Test(this, "pow114")).ok = "1.0510100501"
                    .Equals((new IBM.ICU.Math.BigDecimal("1.01")).Pow(
                            new IBM.ICU.Math.BigDecimal("5")).ToString());

            (new DiagBigDecimal.Test(this, "pow120")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Pow(new IBM.ICU.Math.BigDecimal("0")).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "pow121")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Pow(new IBM.ICU.Math.BigDecimal("1")).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "pow122")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Pow(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "pow123")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Pow(new IBM.ICU.Math.BigDecimal("0")).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "pow144")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Pow(new IBM.ICU.Math.BigDecimal("1")).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "pow125")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Pow(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "pow126")).ok = ((new IBM.ICU.Math.BigDecimal("0.3"))
                    .Pow(new IBM.ICU.Math.BigDecimal("0")).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "pow127")).ok = ((new IBM.ICU.Math.BigDecimal("10"))
                    .Pow(new IBM.ICU.Math.BigDecimal("7")).ToString())
                    .Equals("10000000");
            (new DiagBigDecimal.Test(this, "pow128")).ok = ((new IBM.ICU.Math.BigDecimal("6.0"))
                    .Pow(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("36.00");
            (new DiagBigDecimal.Test(this, "pow129")).ok = ((new IBM.ICU.Math.BigDecimal("6.00"))
                    .Pow(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("36.0000");
            (new DiagBigDecimal.Test(this, "pow130")).ok = ((new IBM.ICU.Math.BigDecimal("6.000"))
                    .Pow(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("36.000000");
            (new DiagBigDecimal.Test(this, "pow131")).ok = ((new IBM.ICU.Math.BigDecimal("-3"))
                    .Pow(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("9");
            (new DiagBigDecimal.Test(this, "pow132")).ok = ((new IBM.ICU.Math.BigDecimal("2")).Pow(
                    new IBM.ICU.Math.BigDecimal("2")).Pow(
                    new IBM.ICU.Math.BigDecimal("3")).ToString()).Equals("64");

            /* errors */
            try
            {
                ten.Pow((IBM.ICU.Math.BigDecimal)null);
                flag = false;
            }
            catch (NullReferenceException _67)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "pow150")).ok = flag;
            try
            {
                ten.Pow(ten, (IBM.ICU.Math.MathContext)null);
                flag = false;
            }
            catch (NullReferenceException _68)
            {
                flag = true;
            }/* checknull2 */
            (new DiagBigDecimal.Test(this, "pow151")).ok = flag;

            flag = true;
            try
            {
                tenlong.Pow(IBM.ICU.Math.BigDecimal.ONE, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _69)
            {
                ae = _69;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "pow152")).ok = flag;

            try
            {
                IBM.ICU.Math.BigDecimal.ONE.Pow(tenlong, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _70)
            {
                ae = _70;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "pow153")).ok = flag;

            try
            {
                IBM.ICU.Math.BigDecimal.ONE
                        .Pow(new IBM.ICU.Math.BigDecimal("-71"));
                flag = false;
            }
            catch (System.ArithmeticException _71)
            {
                ae = _71;
                flag = (ae.Message).Equals("Negative power: -71");
            }/* checkpos */
            (new DiagBigDecimal.Test(this, "pow154")).ok = flag;

            try
            {
                IBM.ICU.Math.BigDecimal.ONE.Pow(
                        new IBM.ICU.Math.BigDecimal("1234"), mc3);
                flag = false;
            }
            catch (System.ArithmeticException _72)
            {
                ae = _72;
                flag = (ae.Message).Equals("Too many digits: 1234");
            }/* checkwhole */
            (new DiagBigDecimal.Test(this, "pow155")).ok = flag;

            try
            {
                IBM.ICU.Math.BigDecimal.ONE.Pow(
                        new IBM.ICU.Math.BigDecimal("12.34e+2"), mc3);
                flag = false;
            }
            catch (System.ArithmeticException _73)
            {
                ae = _73;
                flag = (ae.Message).Equals("Too many digits: 1.234E+3");
            }/* checkwhole1 */
            (new DiagBigDecimal.Test(this, "pow156")).ok = flag;

            try
            {
                IBM.ICU.Math.BigDecimal.ONE.Pow(
                        new IBM.ICU.Math.BigDecimal("12.4"), mcdef);
                flag = false;
            }
            catch (System.ArithmeticException _74)
            {
                ae = _74;
                flag = (ae.Message).Equals("Decimal part non-zero: 12.4");
            }/* checkwhole2 */
            (new DiagBigDecimal.Test(this, "pow157")).ok = flag;

            try
            {
                IBM.ICU.Math.BigDecimal.ONE.Pow(
                        new IBM.ICU.Math.BigDecimal("1.01"), mcdef);
                flag = false;
            }
            catch (System.ArithmeticException _75)
            {
                ae = _75;
                flag = (ae.Message).Equals("Decimal part non-zero: 1.01");
            }/* checkwhole3 */
            (new DiagBigDecimal.Test(this, "pow158")).ok = flag;

            try
            {
                IBM.ICU.Math.BigDecimal.ONE.Pow(
                        new IBM.ICU.Math.BigDecimal("1.000000001"), mcdef);
                flag = false;
            }
            catch (System.ArithmeticException _76)
            {
                ae = _76;
                flag = (ae.Message)
                        .Equals("Decimal part non-zero: 1.000000001");
            }/* checkwhole4 */
            (new DiagBigDecimal.Test(this, "pow159")).ok = flag;

            try
            {
                IBM.ICU.Math.BigDecimal.ONE.Pow(
                        new IBM.ICU.Math.BigDecimal("1.000000001"), mc3);
                flag = false;
            }
            catch (System.ArithmeticException _77)
            {
                ae = _77;
                flag = (ae.Message)
                        .Equals("Decimal part non-zero: 1.000000001");
            }/* checkwhole5 */
            (new DiagBigDecimal.Test(this, "pow160")).ok = flag;

            try
            {
                IBM.ICU.Math.BigDecimal.ONE.Pow(
                        new IBM.ICU.Math.BigDecimal("5.67E-987654321"), mc3);
                flag = false;
            }
            catch (System.ArithmeticException _78)
            {
                ae = _78;
                flag = (ae.Message)
                        .Equals("Decimal part non-zero: 5.67E-987654321");
            }/* checkwhole6 */
            (new DiagBigDecimal.Test(this, "pow161")).ok = flag;

            Summary("pow");
        }

        /*--------------------------------------------------------------------*/

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.Remainder(IBM.ICU.Dev.Test.BigDec.BigDecimal)"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagremainder()
        {
            bool flag = false;
            System.ArithmeticException ae = null;

            (new DiagBigDecimal.Test(this, "rem001")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("3"), mcdef)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "rem002")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("5"), mcdef)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "rem003")).ok = ((new IBM.ICU.Math.BigDecimal("13"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("10"), mcdef)
                    .ToString()).Equals("3");
            (new DiagBigDecimal.Test(this, "rem004")).ok = ((new IBM.ICU.Math.BigDecimal("13"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("50"), mcdef)
                    .ToString()).Equals("13");
            (new DiagBigDecimal.Test(this, "rem005")).ok = ((new IBM.ICU.Math.BigDecimal("13"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("100"), mcdef)
                    .ToString()).Equals("13");
            (new DiagBigDecimal.Test(this, "rem006")).ok = ((new IBM.ICU.Math.BigDecimal("13"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("1000"), mcdef)
                    .ToString()).Equals("13");
            (new DiagBigDecimal.Test(this, "rem007")).ok = ((new IBM.ICU.Math.BigDecimal(".13"))
                    .Remainder(one).ToString()).Equals("0.13");
            (new DiagBigDecimal.Test(this, "rem008")).ok = ((new IBM.ICU.Math.BigDecimal("0.133"))
                    .Remainder(one).ToString()).Equals("0.133");
            (new DiagBigDecimal.Test(this, "rem009")).ok = ((new IBM.ICU.Math.BigDecimal("0.1033"))
                    .Remainder(one).ToString()).Equals("0.1033");
            (new DiagBigDecimal.Test(this, "rem010")).ok = ((new IBM.ICU.Math.BigDecimal("1.033"))
                    .Remainder(one).ToString()).Equals("0.033");
            (new DiagBigDecimal.Test(this, "rem011")).ok = ((new IBM.ICU.Math.BigDecimal("10.33"))
                    .Remainder(one).ToString()).Equals("0.33");
            (new DiagBigDecimal.Test(this, "rem012")).ok = ((new IBM.ICU.Math.BigDecimal("10.33"))
                    .Remainder(IBM.ICU.Math.BigDecimal.TEN).ToString())
                    .Equals("0.33");
            (new DiagBigDecimal.Test(this, "rem013")).ok = ((new IBM.ICU.Math.BigDecimal("103.3"))
                    .Remainder(IBM.ICU.Math.BigDecimal.ONE).ToString())
                    .Equals("0.3");
            (new DiagBigDecimal.Test(this, "rem014")).ok = ((new IBM.ICU.Math.BigDecimal("133"))
                    .Remainder(IBM.ICU.Math.BigDecimal.TEN).ToString())
                    .Equals("3");
            (new DiagBigDecimal.Test(this, "rem015")).ok = ((new IBM.ICU.Math.BigDecimal("1033"))
                    .Remainder(IBM.ICU.Math.BigDecimal.TEN).ToString())
                    .Equals("3");
            (new DiagBigDecimal.Test(this, "rem016")).ok = ((new IBM.ICU.Math.BigDecimal("1033"))
                    .Remainder(new IBM.ICU.Math.BigDecimal(50), mcdef)
                    .ToString()).Equals("33");
            (new DiagBigDecimal.Test(this, "rem017")).ok = ((new IBM.ICU.Math.BigDecimal("101.0"))
                    .Remainder(new IBM.ICU.Math.BigDecimal(3), mcdef)
                    .ToString()).Equals("2.0");
            (new DiagBigDecimal.Test(this, "rem018")).ok = ((new IBM.ICU.Math.BigDecimal("102.0"))
                    .Remainder(new IBM.ICU.Math.BigDecimal(3), mcdef)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "rem019")).ok = ((new IBM.ICU.Math.BigDecimal("103.0"))
                    .Remainder(new IBM.ICU.Math.BigDecimal(3), mcdef)
                    .ToString()).Equals("1.0");
            (new DiagBigDecimal.Test(this, "rem020")).ok = ((new IBM.ICU.Math.BigDecimal("2.40"))
                    .Remainder(one).ToString()).Equals("0.40");
            (new DiagBigDecimal.Test(this, "rem021")).ok = ((new IBM.ICU.Math.BigDecimal("2.400"))
                    .Remainder(one).ToString()).Equals("0.400");
            (new DiagBigDecimal.Test(this, "rem022")).ok = ((new IBM.ICU.Math.BigDecimal("2.4"))
                    .Remainder(one).ToString()).Equals("0.4");
            (new DiagBigDecimal.Test(this, "rem023")).ok = ((new IBM.ICU.Math.BigDecimal("2.4"))
                    .Remainder(new IBM.ICU.Math.BigDecimal(2), mcdef)
                    .ToString()).Equals("0.4");
            (new DiagBigDecimal.Test(this, "rem024")).ok = ((new IBM.ICU.Math.BigDecimal("2.400"))
                    .Remainder(new IBM.ICU.Math.BigDecimal(2), mcdef)
                    .ToString()).Equals("0.400");
            (new DiagBigDecimal.Test(this, "rem025")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.3"), mcdef)
                    .ToString()).Equals("0.1");
            (new DiagBigDecimal.Test(this, "rem026")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.30"), mcdef)
                    .ToString()).Equals("0.10");
            (new DiagBigDecimal.Test(this, "rem027")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.300"), mcdef)
                    .ToString()).Equals("0.100");
            (new DiagBigDecimal.Test(this, "rem028")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.3000"), mcdef)
                    .ToString()).Equals("0.1000");
            (new DiagBigDecimal.Test(this, "rem029")).ok = ((new IBM.ICU.Math.BigDecimal("1.0"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.3"), mcdef)
                    .ToString()).Equals("0.1");
            (new DiagBigDecimal.Test(this, "rem030")).ok = ((new IBM.ICU.Math.BigDecimal("1.00"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.3"), mcdef)
                    .ToString()).Equals("0.10");
            (new DiagBigDecimal.Test(this, "rem031")).ok = ((new IBM.ICU.Math.BigDecimal("1.000"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.3"), mcdef)
                    .ToString()).Equals("0.100");
            (new DiagBigDecimal.Test(this, "rem032")).ok = ((new IBM.ICU.Math.BigDecimal("1.0000"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.3"), mcdef)
                    .ToString()).Equals("0.1000");
            (new DiagBigDecimal.Test(this, "rem033")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2.001"), mcdef)
                    .ToString()).Equals("0.5");

            (new DiagBigDecimal.Test(this, "rem040")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.5000001"), mcdef)
                    .ToString()).Equals("0.5");
            (new DiagBigDecimal.Test(this, "rem041")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.50000001"), mcdef)
                    .ToString()).Equals("0.5");
            (new DiagBigDecimal.Test(this, "rem042")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.500000001"),
                            mcdef).ToString()).Equals("0.5");
            (new DiagBigDecimal.Test(this, "rem043")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.5000000001"),
                            mcdef).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "rem044")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.50000000001"),
                            mcdef).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "rem045")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.4999999"), mcdef)
                    .ToString()).Equals("1E-7");
            (new DiagBigDecimal.Test(this, "rem046")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.49999999"), mcdef)
                    .ToString()).Equals("1E-8");
            (new DiagBigDecimal.Test(this, "rem047")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.499999999"),
                            mcdef).ToString()).Equals("1E-9");
            (new DiagBigDecimal.Test(this, "rem048")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.4999999999"),
                            mcdef).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "rem049")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.49999999999"),
                            mcdef).ToString()).Equals("0");

            (new DiagBigDecimal.Test(this, "rem050")).ok = ((new IBM.ICU.Math.BigDecimal("0.03"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("7"), mcdef)
                    .ToString()).Equals("0.03");
            (new DiagBigDecimal.Test(this, "rem051")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "rem052")).ok = ((new IBM.ICU.Math.BigDecimal("4.1"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("0.1");
            (new DiagBigDecimal.Test(this, "rem053")).ok = ((new IBM.ICU.Math.BigDecimal("4.01"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("0.01");
            (new DiagBigDecimal.Test(this, "rem054")).ok = ((new IBM.ICU.Math.BigDecimal("4.001"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("0.001");
            (new DiagBigDecimal.Test(this, "rem055")).ok = ((new IBM.ICU.Math.BigDecimal("4.0001"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("0.0001");
            (new DiagBigDecimal.Test(this, "rem056")).ok = ((new IBM.ICU.Math.BigDecimal("4.00001"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("0.00001");
            (new DiagBigDecimal.Test(this, "rem057")).ok = ((new IBM.ICU.Math.BigDecimal("4.000001"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("0.000001");
            (new DiagBigDecimal.Test(this, "rem058")).ok = ((new IBM.ICU.Math.BigDecimal("4.0000001"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2"), mcdef)
                    .ToString()).Equals("1E-7");

            (new DiagBigDecimal.Test(this, "rem060")).ok = ((new IBM.ICU.Math.BigDecimal("1.2"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.7345"), mcdef)
                    .ToString()).Equals("0.4655");
            (new DiagBigDecimal.Test(this, "rem061")).ok = ((new IBM.ICU.Math.BigDecimal("0.8"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("12"), mcdef)
                    .ToString()).Equals("0.8");
            (new DiagBigDecimal.Test(this, "rem062")).ok = ((new IBM.ICU.Math.BigDecimal("0.8"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.2"), mcdef)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "rem063")).ok = ((new IBM.ICU.Math.BigDecimal("0.8"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.3"), mcdef)
                    .ToString()).Equals("0.2");
            (new DiagBigDecimal.Test(this, "rem064")).ok = ((new IBM.ICU.Math.BigDecimal("0.800"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("12"), mcdef)
                    .ToString()).Equals("0.800");
            (new DiagBigDecimal.Test(this, "rem065")).ok = ((new IBM.ICU.Math.BigDecimal("0.800"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("1.7"), mcdef)
                    .ToString()).Equals("0.800");
            (new DiagBigDecimal.Test(this, "rem066")).ok = ((new IBM.ICU.Math.BigDecimal("2.400"))
                    .Remainder(new IBM.ICU.Math.BigDecimal(2), mcdef)
                    .ToString()).Equals("0.400");

            // MC --
            (new DiagBigDecimal.Test(this, "rem071")).ok = ((new IBM.ICU.Math.BigDecimal("2.400"))
                    .Remainder(new IBM.ICU.Math.BigDecimal(2), mc6).ToString())
                    .Equals("0.400");
            (new DiagBigDecimal.Test(this, "rem072")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "12345678900000")).Remainder(new IBM.ICU.Math.BigDecimal(
                    "12e+12"), mc3).ToString()).Equals("3E+11");

            // Fixed --
            (new DiagBigDecimal.Test(this, "rem101")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("3")).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "rem102")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("5")).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "rem103")).ok = ((new IBM.ICU.Math.BigDecimal("13"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("10")).ToString())
                    .Equals("3");
            (new DiagBigDecimal.Test(this, "rem104")).ok = ((new IBM.ICU.Math.BigDecimal("13"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("50")).ToString())
                    .Equals("13");
            (new DiagBigDecimal.Test(this, "rem105")).ok = ((new IBM.ICU.Math.BigDecimal("13"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("100")).ToString())
                    .Equals("13");
            (new DiagBigDecimal.Test(this, "rem106")).ok = ((new IBM.ICU.Math.BigDecimal("13"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("1000")).ToString())
                    .Equals("13");
            (new DiagBigDecimal.Test(this, "rem107")).ok = ((new IBM.ICU.Math.BigDecimal(".13"))
                    .Remainder(one).ToString()).Equals("0.13");
            (new DiagBigDecimal.Test(this, "rem108")).ok = ((new IBM.ICU.Math.BigDecimal("0.133"))
                    .Remainder(one).ToString()).Equals("0.133");
            (new DiagBigDecimal.Test(this, "rem109")).ok = ((new IBM.ICU.Math.BigDecimal("0.1033"))
                    .Remainder(one).ToString()).Equals("0.1033");
            (new DiagBigDecimal.Test(this, "rem110")).ok = ((new IBM.ICU.Math.BigDecimal("1.033"))
                    .Remainder(one).ToString()).Equals("0.033");
            (new DiagBigDecimal.Test(this, "rem111")).ok = ((new IBM.ICU.Math.BigDecimal("10.33"))
                    .Remainder(one).ToString()).Equals("0.33");
            (new DiagBigDecimal.Test(this, "rem112")).ok = ((new IBM.ICU.Math.BigDecimal("10.33"))
                    .Remainder(IBM.ICU.Math.BigDecimal.TEN).ToString())
                    .Equals("0.33");
            (new DiagBigDecimal.Test(this, "rem113")).ok = ((new IBM.ICU.Math.BigDecimal("103.3"))
                    .Remainder(IBM.ICU.Math.BigDecimal.ONE).ToString())
                    .Equals("0.3");
            (new DiagBigDecimal.Test(this, "rem114")).ok = ((new IBM.ICU.Math.BigDecimal("133"))
                    .Remainder(IBM.ICU.Math.BigDecimal.TEN).ToString())
                    .Equals("3");
            (new DiagBigDecimal.Test(this, "rem115")).ok = ((new IBM.ICU.Math.BigDecimal("1033"))
                    .Remainder(IBM.ICU.Math.BigDecimal.TEN).ToString())
                    .Equals("3");
            (new DiagBigDecimal.Test(this, "rem116")).ok = ((new IBM.ICU.Math.BigDecimal("1033"))
                    .Remainder(new IBM.ICU.Math.BigDecimal(50)).ToString())
                    .Equals("33");
            (new DiagBigDecimal.Test(this, "rem117")).ok = ((new IBM.ICU.Math.BigDecimal("101.0"))
                    .Remainder(new IBM.ICU.Math.BigDecimal(3)).ToString())
                    .Equals("2.0");
            (new DiagBigDecimal.Test(this, "rem118")).ok = ((new IBM.ICU.Math.BigDecimal("102.0"))
                    .Remainder(new IBM.ICU.Math.BigDecimal(3)).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "rem119")).ok = ((new IBM.ICU.Math.BigDecimal("103.0"))
                    .Remainder(new IBM.ICU.Math.BigDecimal(3)).ToString())
                    .Equals("1.0");
            (new DiagBigDecimal.Test(this, "rem120")).ok = ((new IBM.ICU.Math.BigDecimal("2.40"))
                    .Remainder(one).ToString()).Equals("0.40");
            (new DiagBigDecimal.Test(this, "rem121")).ok = ((new IBM.ICU.Math.BigDecimal("2.400"))
                    .Remainder(one).ToString()).Equals("0.400");
            (new DiagBigDecimal.Test(this, "rem122")).ok = ((new IBM.ICU.Math.BigDecimal("2.4"))
                    .Remainder(one).ToString()).Equals("0.4");
            (new DiagBigDecimal.Test(this, "rem123")).ok = ((new IBM.ICU.Math.BigDecimal("2.4"))
                    .Remainder(new IBM.ICU.Math.BigDecimal(2)).ToString())
                    .Equals("0.4");
            (new DiagBigDecimal.Test(this, "rem124")).ok = ((new IBM.ICU.Math.BigDecimal("2.400"))
                    .Remainder(new IBM.ICU.Math.BigDecimal(2)).ToString())
                    .Equals("0.400");
            (new DiagBigDecimal.Test(this, "rem125")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.3")).ToString())
                    .Equals("0.1");
            (new DiagBigDecimal.Test(this, "rem126")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.30")).ToString())
                    .Equals("0.10");
            (new DiagBigDecimal.Test(this, "rem127")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.300")).ToString())
                    .Equals("0.100");
            (new DiagBigDecimal.Test(this, "rem128")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.3000"))
                    .ToString()).Equals("0.1000");
            (new DiagBigDecimal.Test(this, "rem129")).ok = ((new IBM.ICU.Math.BigDecimal("1.0"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.3")).ToString())
                    .Equals("0.1");
            (new DiagBigDecimal.Test(this, "rem130")).ok = ((new IBM.ICU.Math.BigDecimal("1.00"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.3")).ToString())
                    .Equals("0.10");
            (new DiagBigDecimal.Test(this, "rem131")).ok = ((new IBM.ICU.Math.BigDecimal("1.000"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.3")).ToString())
                    .Equals("0.100");
            (new DiagBigDecimal.Test(this, "rem132")).ok = ((new IBM.ICU.Math.BigDecimal("1.0000"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.3")).ToString())
                    .Equals("0.1000");
            (new DiagBigDecimal.Test(this, "rem133")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2.001")).ToString())
                    .Equals("0.5");
            (new DiagBigDecimal.Test(this, "rem134")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.500000001"))
                    .ToString()).Equals("0.5");
            (new DiagBigDecimal.Test(this, "rem135")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.5000000001"))
                    .ToString()).Equals("0.5");
            (new DiagBigDecimal.Test(this, "rem136")).ok = ((new IBM.ICU.Math.BigDecimal("0.03"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("7")).ToString())
                    .Equals("0.03");
            (new DiagBigDecimal.Test(this, "rem137")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("1");
            (new DiagBigDecimal.Test(this, "rem138")).ok = ((new IBM.ICU.Math.BigDecimal("4.1"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("0.1");
            (new DiagBigDecimal.Test(this, "rem139")).ok = ((new IBM.ICU.Math.BigDecimal("4.01"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("0.01");
            (new DiagBigDecimal.Test(this, "rem140")).ok = ((new IBM.ICU.Math.BigDecimal("4.001"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("0.001");
            (new DiagBigDecimal.Test(this, "rem141")).ok = ((new IBM.ICU.Math.BigDecimal("4.0001"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("0.0001");
            (new DiagBigDecimal.Test(this, "rem142")).ok = ((new IBM.ICU.Math.BigDecimal("4.00001"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("0.00001");
            (new DiagBigDecimal.Test(this, "rem143")).ok = ((new IBM.ICU.Math.BigDecimal("4.000001"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("0.000001");
            (new DiagBigDecimal.Test(this, "rem144")).ok = ((new IBM.ICU.Math.BigDecimal("4.0000001"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("2")).ToString())
                    .Equals("0.0000001"); // 1E-7, plain
            (new DiagBigDecimal.Test(this, "rem145")).ok = ((new IBM.ICU.Math.BigDecimal("1.2"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.7345"))
                    .ToString()).Equals("0.4655");
            (new DiagBigDecimal.Test(this, "rem146")).ok = ((new IBM.ICU.Math.BigDecimal("0.8"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("12")).ToString())
                    .Equals("0.8");
            (new DiagBigDecimal.Test(this, "rem147")).ok = ((new IBM.ICU.Math.BigDecimal("0.8"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.2")).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "rem148")).ok = ((new IBM.ICU.Math.BigDecimal("0.8"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("0.3")).ToString())
                    .Equals("0.2");
            (new DiagBigDecimal.Test(this, "rem149")).ok = ((new IBM.ICU.Math.BigDecimal("0.800"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("12")).ToString())
                    .Equals("0.800");
            (new DiagBigDecimal.Test(this, "rem150")).ok = ((new IBM.ICU.Math.BigDecimal("0.800"))
                    .Remainder(new IBM.ICU.Math.BigDecimal("1.7")).ToString())
                    .Equals("0.800");
            (new DiagBigDecimal.Test(this, "rem151")).ok = ((new IBM.ICU.Math.BigDecimal("2.400"))
                    .Remainder(new IBM.ICU.Math.BigDecimal(2), mcdef)
                    .ToString()).Equals("0.400");

            try
            {
                ten.Remainder((IBM.ICU.Math.BigDecimal)null);
                flag = false;
            }
            catch (NullReferenceException _79)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "rem200")).ok = flag;
            try
            {
                ten.Remainder(ten, (IBM.ICU.Math.MathContext)null);
                flag = false;
            }
            catch (NullReferenceException _80)
            {
                flag = true;
            }/* checknull2 */
            (new DiagBigDecimal.Test(this, "rem201")).ok = flag;

            try
            {
                IBM.ICU.Math.BigDecimal.ONE.Remainder(tenlong, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _81)
            {
                ae = _81;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "rem202")).ok = flag;

            try
            {
                tenlong.Remainder(one, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _82)
            {
                ae = _82;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "rem203")).ok = flag;

            Summary("remainder");
        }

        /*--------------------------------------------------------------------*/

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.Subtract(IBM.ICU.Dev.Test.BigDec.BigDecimal)"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagsubtract()
        {
            bool flag = false;
            IBM.ICU.Math.BigDecimal alhs;
            IBM.ICU.Math.BigDecimal arhs;
            System.ArithmeticException ae = null;

            // [first group are 'quick confidence check']
            (new DiagBigDecimal.Test(this, "sub301")).ok = ((new IBM.ICU.Math.BigDecimal(2))
                    .Subtract(new IBM.ICU.Math.BigDecimal(3), mcdef).ToString())
                    .Equals("-1");
            (new DiagBigDecimal.Test(this, "sub302")).ok = ((new IBM.ICU.Math.BigDecimal("5.75"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("3.3"), mcdef)
                    .ToString()).Equals("2.45");
            (new DiagBigDecimal.Test(this, "sub303")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-3"), mcdef)
                    .ToString()).Equals("8");
            (new DiagBigDecimal.Test(this, "sub304")).ok = ((new IBM.ICU.Math.BigDecimal("-5"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-3"), mcdef)
                    .ToString()).Equals("-2");
            (new DiagBigDecimal.Test(this, "sub305")).ok = ((new IBM.ICU.Math.BigDecimal("-7"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("2.5"), mcdef)
                    .ToString()).Equals("-9.5");
            (new DiagBigDecimal.Test(this, "sub306")).ok = ((new IBM.ICU.Math.BigDecimal("0.7"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("0.3"), mcdef)
                    .ToString()).Equals("0.4");
            (new DiagBigDecimal.Test(this, "sub307")).ok = ((new IBM.ICU.Math.BigDecimal("1.3"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("0.3"), mcdef)
                    .ToString()).Equals("1.0");
            (new DiagBigDecimal.Test(this, "sub308")).ok = ((new IBM.ICU.Math.BigDecimal("1.25"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("1.25"), mcdef)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "sub309")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "1.23456789")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "1.00000000"), mcdef).ToString()).Equals("0.23456789");

            (new DiagBigDecimal.Test(this, "sub310")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "1.23456789")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "1.00000089"), mcdef).ToString()).Equals("0.23456700");

            (new DiagBigDecimal.Test(this, "sub311")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.5555555559")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "0.0000000001"), mcdef).ToString()).Equals("0.555555556");

            (new DiagBigDecimal.Test(this, "sub312")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.5555555559")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "0.0000000005"), mcdef).ToString()).Equals("0.555555556");

            (new DiagBigDecimal.Test(this, "sub313")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444444")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "0.1111111111"), mcdef).ToString()).Equals("0.333333333");

            (new DiagBigDecimal.Test(this, "sub314")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "1.0000000000")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "0.00000001"), mcdef).ToString()).Equals("0.99999999");

            (new DiagBigDecimal.Test(this, "sub315")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444444999")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "0"), mcdef).ToString()).Equals("0.444444444");

            (new DiagBigDecimal.Test(this, "sub316")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444445000")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "0"), mcdef).ToString()).Equals("0.444444445");

            (new DiagBigDecimal.Test(this, "sub317")).ok = ((new IBM.ICU.Math.BigDecimal("70"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("10000e+9"), mcdef)
                    .ToString()).Equals("-1.00000000E+13");

            (new DiagBigDecimal.Test(this, "sub318")).ok = ((new IBM.ICU.Math.BigDecimal("700"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("10000e+9"), mcdef)
                    .ToString()).Equals("-1.00000000E+13");

            (new DiagBigDecimal.Test(this, "sub319")).ok = ((new IBM.ICU.Math.BigDecimal("7000"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("10000e+9"), mcdef)
                    .ToString()).Equals("-1.00000000E+13");

            (new DiagBigDecimal.Test(this, "sub320")).ok = ((new IBM.ICU.Math.BigDecimal("70000"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("10000e+9"), mcdef)
                    .ToString()).Equals("-9.9999999E+12");

            (new DiagBigDecimal.Test(this, "sub321")).ok = ((new IBM.ICU.Math.BigDecimal("700000"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("10000e+9"), mcdef)
                    .ToString()).Equals("-9.9999993E+12");

            // symmetry:
            (new DiagBigDecimal.Test(this, "sub322")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("70"), mcdef)
                    .ToString()).Equals("1.00000000E+13");

            (new DiagBigDecimal.Test(this, "sub323")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("700"), mcdef)
                    .ToString()).Equals("1.00000000E+13");

            (new DiagBigDecimal.Test(this, "sub324")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("7000"), mcdef)
                    .ToString()).Equals("1.00000000E+13");

            (new DiagBigDecimal.Test(this, "sub325")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("70000"), mcdef)
                    .ToString()).Equals("9.9999999E+12");

            (new DiagBigDecimal.Test(this, "sub326")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("700000"), mcdef)
                    .ToString()).Equals("9.9999993E+12");

            // [same with fixed point arithmetic]
            (new DiagBigDecimal.Test(this, "sub001")).ok = ((new IBM.ICU.Math.BigDecimal(2))
                    .Subtract(new IBM.ICU.Math.BigDecimal(3)).ToString())
                    .Equals("-1");
            (new DiagBigDecimal.Test(this, "sub002")).ok = ((new IBM.ICU.Math.BigDecimal("5.75"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("3.3")).ToString())
                    .Equals("2.45");
            (new DiagBigDecimal.Test(this, "sub003")).ok = ((new IBM.ICU.Math.BigDecimal("5"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-3")).ToString())
                    .Equals("8");
            (new DiagBigDecimal.Test(this, "sub004")).ok = ((new IBM.ICU.Math.BigDecimal("-5"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-3")).ToString())
                    .Equals("-2");
            (new DiagBigDecimal.Test(this, "sub005")).ok = ((new IBM.ICU.Math.BigDecimal("-7"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("2.5")).ToString())
                    .Equals("-9.5");
            (new DiagBigDecimal.Test(this, "sub006")).ok = ((new IBM.ICU.Math.BigDecimal("0.7"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("0.3")).ToString())
                    .Equals("0.4");
            (new DiagBigDecimal.Test(this, "sub007")).ok = ((new IBM.ICU.Math.BigDecimal("1.3"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("0.3")).ToString())
                    .Equals("1.0");
            (new DiagBigDecimal.Test(this, "sub008")).ok = ((new IBM.ICU.Math.BigDecimal("1.25"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("1.25")).ToString())
                    .Equals("0.00");
            (new DiagBigDecimal.Test(this, "sub009")).ok = ((new IBM.ICU.Math.BigDecimal("0.02"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("0.02")).ToString())
                    .Equals("0.00");

            (new DiagBigDecimal.Test(this, "sub010")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "1.23456789")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "1.00000000")).ToString()).Equals("0.23456789");

            (new DiagBigDecimal.Test(this, "sub011")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "1.23456789")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "1.00000089")).ToString()).Equals("0.23456700");

            (new DiagBigDecimal.Test(this, "sub012")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.5555555559")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "0.0000000001")).ToString()).Equals("0.5555555558");

            (new DiagBigDecimal.Test(this, "sub013")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.5555555559")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "0.0000000005")).ToString()).Equals("0.5555555554");

            (new DiagBigDecimal.Test(this, "sub014")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444444")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "0.1111111111")).ToString()).Equals("0.3333333333");

            (new DiagBigDecimal.Test(this, "sub015")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "1.0000000000")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "0.00000001")).ToString()).Equals("0.9999999900");

            (new DiagBigDecimal.Test(this, "sub016")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444444999")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "0")).ToString()).Equals("0.4444444444999");

            (new DiagBigDecimal.Test(this, "sub017")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "0.4444444445000")).Subtract(new IBM.ICU.Math.BigDecimal(
                    "0")).ToString()).Equals("0.4444444445000");

            (new DiagBigDecimal.Test(this, "sub018")).ok = ((new IBM.ICU.Math.BigDecimal("70"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .ToString()).Equals("-9999999999930");

            (new DiagBigDecimal.Test(this, "sub019")).ok = ((new IBM.ICU.Math.BigDecimal("700"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .ToString()).Equals("-9999999999300");

            (new DiagBigDecimal.Test(this, "sub020")).ok = ((new IBM.ICU.Math.BigDecimal("7000"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .ToString()).Equals("-9999999993000");

            (new DiagBigDecimal.Test(this, "sub021")).ok = ((new IBM.ICU.Math.BigDecimal("70000"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .ToString()).Equals("-9999999930000");

            (new DiagBigDecimal.Test(this, "sub022")).ok = ((new IBM.ICU.Math.BigDecimal("700000"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .ToString()).Equals("-9999999300000");

            // symmetry:
            (new DiagBigDecimal.Test(this, "sub023")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("70")).ToString())
                    .Equals("9999999999930");

            (new DiagBigDecimal.Test(this, "sub024")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("700")).ToString())
                    .Equals("9999999999300");

            (new DiagBigDecimal.Test(this, "sub025")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("7000")).ToString())
                    .Equals("9999999993000");

            (new DiagBigDecimal.Test(this, "sub026")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("70000")).ToString())
                    .Equals("9999999930000");

            (new DiagBigDecimal.Test(this, "sub027")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("700000")).ToString())
                    .Equals("9999999300000");

            // MC
            (new DiagBigDecimal.Test(this, "sub030")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("70000"), mcdef)
                    .ToString()).Equals("9.9999999E+12");

            (new DiagBigDecimal.Test(this, "sub031")).ok = ((new IBM.ICU.Math.BigDecimal("10000e+9"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("70000"), mc6)
                    .ToString()).Equals("1.00000E+13");

            // some of the next group are really constructor tests
            (new DiagBigDecimal.Test(this, "sub040")).ok = ((new IBM.ICU.Math.BigDecimal("00.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("0.0")).ToString())
                    .Equals("0.0");
            (new DiagBigDecimal.Test(this, "sub041")).ok = ((new IBM.ICU.Math.BigDecimal("00.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("0.00")).ToString())
                    .Equals("0.00");
            (new DiagBigDecimal.Test(this, "sub042")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("00.0")).ToString())
                    .Equals("0.00");
            (new DiagBigDecimal.Test(this, "sub043")).ok = ((new IBM.ICU.Math.BigDecimal("00.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("0.00"), mcdef)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "sub044")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("00.0"), mcdef)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "sub045")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".3"), mcdef)
                    .ToString()).Equals("2.7");
            (new DiagBigDecimal.Test(this, "sub046")).ok = ((new IBM.ICU.Math.BigDecimal("3."))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".3"), mcdef)
                    .ToString()).Equals("2.7");
            (new DiagBigDecimal.Test(this, "sub047")).ok = ((new IBM.ICU.Math.BigDecimal("3.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".3"), mcdef)
                    .ToString()).Equals("2.7");
            (new DiagBigDecimal.Test(this, "sub048")).ok = ((new IBM.ICU.Math.BigDecimal("3.00"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".3"), mcdef)
                    .ToString()).Equals("2.70");
            (new DiagBigDecimal.Test(this, "sub049")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("3"), mcdef)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "sub050")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("+3"), mcdef)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "sub051")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-3"), mcdef)
                    .ToString()).Equals("6");
            (new DiagBigDecimal.Test(this, "sub052")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".3")).ToString())
                    .Equals("2.7");
            (new DiagBigDecimal.Test(this, "sub053")).ok = ((new IBM.ICU.Math.BigDecimal("3."))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".3")).ToString())
                    .Equals("2.7");
            (new DiagBigDecimal.Test(this, "sub054")).ok = ((new IBM.ICU.Math.BigDecimal("3.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".3")).ToString())
                    .Equals("2.7");
            (new DiagBigDecimal.Test(this, "sub055")).ok = ((new IBM.ICU.Math.BigDecimal("3.00"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".3")).ToString())
                    .Equals("2.70");
            (new DiagBigDecimal.Test(this, "sub056")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("3")).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "sub057")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("+3")).ToString())
                    .Equals("0");
            (new DiagBigDecimal.Test(this, "sub058")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-3")).ToString())
                    .Equals("6");

            // the above all from add; massaged and extended. Now some new ones...
            // [particularly important for comparisons]
            // NB: -1E-7 below were non-exponents pre-ANSI
            (new DiagBigDecimal.Test(this, "sub080")).ok = ("-1E-7")
                    .Equals((new IBM.ICU.Math.BigDecimal("10.23456784"))
                            .Subtract(
                                    new IBM.ICU.Math.BigDecimal("10.23456789"),
                                    mcdef).ToString());
            (new DiagBigDecimal.Test(this, "sub081")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456785")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456789"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub082")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456786")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456789"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub083")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456787")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456789"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub084")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456788")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456789"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub085")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456789")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456789"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub086")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456790")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456789"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub087")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456791")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456789"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub088")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456792")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456789"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub089")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456793")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456789"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub090")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456794")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456789"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub091")).ok = ("-1E-7")
                    .Equals((new IBM.ICU.Math.BigDecimal("10.23456781"))
                            .Subtract(
                                    new IBM.ICU.Math.BigDecimal("10.23456786"),
                                    mcdef).ToString());
            (new DiagBigDecimal.Test(this, "sub092")).ok = ("-1E-7")
                    .Equals((new IBM.ICU.Math.BigDecimal("10.23456782"))
                            .Subtract(
                                    new IBM.ICU.Math.BigDecimal("10.23456786"),
                                    mcdef).ToString());
            (new DiagBigDecimal.Test(this, "sub093")).ok = ("-1E-7")
                    .Equals((new IBM.ICU.Math.BigDecimal("10.23456783"))
                            .Subtract(
                                    new IBM.ICU.Math.BigDecimal("10.23456786"),
                                    mcdef).ToString());
            (new DiagBigDecimal.Test(this, "sub094")).ok = ("-1E-7")
                    .Equals((new IBM.ICU.Math.BigDecimal("10.23456784"))
                            .Subtract(
                                    new IBM.ICU.Math.BigDecimal("10.23456786"),
                                    mcdef).ToString());
            (new DiagBigDecimal.Test(this, "sub095")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456785")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456786"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub096")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456786")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456786"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub097")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456787")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456786"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub098")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456788")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456786"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub099")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456789")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456786"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub100")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456790")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456786"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub101")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "10.23456791")).Subtract(
                    new IBM.ICU.Math.BigDecimal("10.23456786"), mcdef)
                    .ToString());
            (new DiagBigDecimal.Test(this, "sub102")).ok = "0"
                    .Equals(IBM.ICU.Math.BigDecimal.ONE.Subtract(
                            new IBM.ICU.Math.BigDecimal("0.999999999"), mcdef)
                            .ToString());
            (new DiagBigDecimal.Test(this, "sub103")).ok = "0".Equals((new IBM.ICU.Math.BigDecimal(
                    "0.999999999"))
                    .Subtract(IBM.ICU.Math.BigDecimal.ONE, mcdef).ToString());

            alhs = new IBM.ICU.Math.BigDecimal("12345678900000");
            arhs = new IBM.ICU.Math.BigDecimal("9999999999999");
            (new DiagBigDecimal.Test(this, "sub110")).ok = (alhs.Subtract(arhs, mc3).ToString())
                    .Equals("2.3E+12");
            (new DiagBigDecimal.Test(this, "sub111")).ok = (arhs.Subtract(alhs, mc3).ToString())
                    .Equals("-2.3E+12");
            (new DiagBigDecimal.Test(this, "sub112")).ok = (alhs.Subtract(arhs).ToString())
                    .Equals("2345678900001");
            (new DiagBigDecimal.Test(this, "sub113")).ok = (arhs.Subtract(alhs).ToString())
                    .Equals("-2345678900001");

            // additional scaled arithmetic tests [0.97 problem]
            (new DiagBigDecimal.Test(this, "sub120")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".1")).ToString())
                    .Equals("-0.1");
            (new DiagBigDecimal.Test(this, "sub121")).ok = ((new IBM.ICU.Math.BigDecimal("00"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".97983")).ToString())
                    .Equals("-0.97983");
            (new DiagBigDecimal.Test(this, "sub122")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".9")).ToString())
                    .Equals("-0.9");
            (new DiagBigDecimal.Test(this, "sub123")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("0.102")).ToString())
                    .Equals("-0.102");
            (new DiagBigDecimal.Test(this, "sub124")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".4")).ToString())
                    .Equals("-0.4");
            (new DiagBigDecimal.Test(this, "sub125")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".307")).ToString())
                    .Equals("-0.307");
            (new DiagBigDecimal.Test(this, "sub126")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".43822")).ToString())
                    .Equals("-0.43822");
            (new DiagBigDecimal.Test(this, "sub127")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".911")).ToString())
                    .Equals("-0.911");
            (new DiagBigDecimal.Test(this, "sub128")).ok = ((new IBM.ICU.Math.BigDecimal(".0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".02")).ToString())
                    .Equals("-0.02");
            (new DiagBigDecimal.Test(this, "sub129")).ok = ((new IBM.ICU.Math.BigDecimal("00"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".392")).ToString())
                    .Equals("-0.392");
            (new DiagBigDecimal.Test(this, "sub130")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".26")).ToString())
                    .Equals("-0.26");
            (new DiagBigDecimal.Test(this, "sub131")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("0.51")).ToString())
                    .Equals("-0.51");
            (new DiagBigDecimal.Test(this, "sub132")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".2234")).ToString())
                    .Equals("-0.2234");
            (new DiagBigDecimal.Test(this, "sub133")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".2")).ToString())
                    .Equals("-0.2");
            (new DiagBigDecimal.Test(this, "sub134")).ok = ((new IBM.ICU.Math.BigDecimal(".0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal(".0008")).ToString())
                    .Equals("-0.0008");
            // 0. on left
            (new DiagBigDecimal.Test(this, "sub140")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.1")).ToString())
                    .Equals("0.1");
            (new DiagBigDecimal.Test(this, "sub141")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.97983"))
                    .ToString()).Equals("0.97983");
            (new DiagBigDecimal.Test(this, "sub142")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.9")).ToString())
                    .Equals("0.9");
            (new DiagBigDecimal.Test(this, "sub143")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-0.102")).ToString())
                    .Equals("0.102");
            (new DiagBigDecimal.Test(this, "sub144")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.4")).ToString())
                    .Equals("0.4");
            (new DiagBigDecimal.Test(this, "sub145")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.307")).ToString())
                    .Equals("0.307");
            (new DiagBigDecimal.Test(this, "sub146")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.43822"))
                    .ToString()).Equals("0.43822");
            (new DiagBigDecimal.Test(this, "sub147")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.911")).ToString())
                    .Equals("0.911");
            (new DiagBigDecimal.Test(this, "sub148")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.02")).ToString())
                    .Equals("0.02");
            (new DiagBigDecimal.Test(this, "sub149")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.392")).ToString())
                    .Equals("0.392");
            (new DiagBigDecimal.Test(this, "sub150")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.26")).ToString())
                    .Equals("0.26");
            (new DiagBigDecimal.Test(this, "sub151")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-0.51")).ToString())
                    .Equals("0.51");
            (new DiagBigDecimal.Test(this, "sub152")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.2234")).ToString())
                    .Equals("0.2234");
            (new DiagBigDecimal.Test(this, "sub153")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.2")).ToString())
                    .Equals("0.2");
            (new DiagBigDecimal.Test(this, "sub154")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.0008")).ToString())
                    .Equals("0.0008");
            // negatives of same
            (new DiagBigDecimal.Test(this, "sub160")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.1")).ToString())
                    .Equals("0.1");
            (new DiagBigDecimal.Test(this, "sub161")).ok = ((new IBM.ICU.Math.BigDecimal("00"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.97983"))
                    .ToString()).Equals("0.97983");
            (new DiagBigDecimal.Test(this, "sub162")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.9")).ToString())
                    .Equals("0.9");
            (new DiagBigDecimal.Test(this, "sub163")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-0.102")).ToString())
                    .Equals("0.102");
            (new DiagBigDecimal.Test(this, "sub164")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.4")).ToString())
                    .Equals("0.4");
            (new DiagBigDecimal.Test(this, "sub165")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.307")).ToString())
                    .Equals("0.307");
            (new DiagBigDecimal.Test(this, "sub166")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.43822"))
                    .ToString()).Equals("0.43822");
            (new DiagBigDecimal.Test(this, "sub167")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.911")).ToString())
                    .Equals("0.911");
            (new DiagBigDecimal.Test(this, "sub168")).ok = ((new IBM.ICU.Math.BigDecimal(".0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.02")).ToString())
                    .Equals("0.02");
            (new DiagBigDecimal.Test(this, "sub169")).ok = ((new IBM.ICU.Math.BigDecimal("00"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.392")).ToString())
                    .Equals("0.392");
            (new DiagBigDecimal.Test(this, "sub170")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.26")).ToString())
                    .Equals("0.26");
            (new DiagBigDecimal.Test(this, "sub171")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-0.51")).ToString())
                    .Equals("0.51");
            (new DiagBigDecimal.Test(this, "sub172")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.2234")).ToString())
                    .Equals("0.2234");
            (new DiagBigDecimal.Test(this, "sub173")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.2")).ToString())
                    .Equals("0.2");
            (new DiagBigDecimal.Test(this, "sub174")).ok = ((new IBM.ICU.Math.BigDecimal(".0"))
                    .Subtract(new IBM.ICU.Math.BigDecimal("-.0008")).ToString())
                    .Equals("0.0008");

            // more fixed, LHS swaps [really same as testcases under add]
            (new DiagBigDecimal.Test(this, "sub180")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "-56267E-10")).Subtract(zero).ToString())
                    .Equals("-0.0000056267");
            (new DiagBigDecimal.Test(this, "sub181")).ok = ((new IBM.ICU.Math.BigDecimal("-56267E-5"))
                    .Subtract(zero).ToString()).Equals("-0.56267");
            (new DiagBigDecimal.Test(this, "sub182")).ok = ((new IBM.ICU.Math.BigDecimal("-56267E-2"))
                    .Subtract(zero).ToString()).Equals("-562.67");
            (new DiagBigDecimal.Test(this, "sub183")).ok = ((new IBM.ICU.Math.BigDecimal("-56267E-1"))
                    .Subtract(zero).ToString()).Equals("-5626.7");
            (new DiagBigDecimal.Test(this, "sub185")).ok = ((new IBM.ICU.Math.BigDecimal("-56267E-0"))
                    .Subtract(zero).ToString()).Equals("-56267");

            try
            {
                ten.Subtract((IBM.ICU.Math.BigDecimal)null);
                flag = false;
            }
            catch (NullReferenceException _83)
            {
                flag = true;
            }/* checknull */
            (new DiagBigDecimal.Test(this, "sub200")).ok = flag;
            try
            {
                ten.Subtract(ten, (IBM.ICU.Math.MathContext)null);
                flag = false;
            }
            catch (NullReferenceException _84)
            {
                flag = true;
            }/* checknull2 */
            (new DiagBigDecimal.Test(this, "sub201")).ok = flag;

            try
            {
                IBM.ICU.Math.BigDecimal.ONE.Subtract(tenlong, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _85)
            {
                ae = _85;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "sub202")).ok = flag;
            try
            {
                tenlong.Subtract(IBM.ICU.Math.BigDecimal.ONE, mcld);
                flag = false;
            }
            catch (System.ArithmeticException _86)
            {
                ae = _86;
                flag = (ae.Message).Equals("Too many digits:" + " "
                        + tenlong.ToString());
            }/* checkdigits */
            (new DiagBigDecimal.Test(this, "sub203")).ok = flag;
            Summary("subtract");
        }

        /* ----------------------------------------------------------------- */

        /* ----------------------------------------------------------------- */
        /* Other methods */
        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <c>BigDecimal.byteValue()</c> method. 
        /// </summary>
        ///
        [Test]
        public void DiagbyteValue()
        {
            bool flag = false;
            System.String v = null;
            System.ArithmeticException ae = null;
            System.String[] badstrings;
            int i = 0;
            System.String norm = null;

            (new DiagBigDecimal.Test(this, "byv001")).ok = ((((sbyte)-128))) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            "-128"))));
            (new DiagBigDecimal.Test(this, "byv002")).ok = ((0)) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            "0"))));
            (new DiagBigDecimal.Test(this, "byv003")).ok = ((1)) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            "1"))));
            (new DiagBigDecimal.Test(this, "byv004")).ok = ((99)) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            "99"))));
            (new DiagBigDecimal.Test(this, "byv005")).ok = ((127)) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            "127"))));
            (new DiagBigDecimal.Test(this, "byv006")).ok = ((-128)) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            "128"))));
            (new DiagBigDecimal.Test(this, "byv007")).ok = ((-127)) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            "129"))));
            (new DiagBigDecimal.Test(this, "byv008")).ok = ((127)) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            "-129"))));
            (new DiagBigDecimal.Test(this, "byv009")).ok = ((126)) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            "-130"))));
            (new DiagBigDecimal.Test(this, "byv010")).ok = ((bmax)) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            bmax))));
            (new DiagBigDecimal.Test(this, "byv011")).ok = ((bmin)) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            bmin))));
            (new DiagBigDecimal.Test(this, "byv012")).ok = ((bneg)) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            bneg))));
            (new DiagBigDecimal.Test(this, "byv013")).ok = ((bzer)) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            bzer))));
            (new DiagBigDecimal.Test(this, "byv014")).ok = ((bpos)) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            bpos))));
            (new DiagBigDecimal.Test(this, "byv015")).ok = ((bmin)) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            bmax + 1))));
            (new DiagBigDecimal.Test(this, "byv016")).ok = ((bmax)) == (Convert.ToByte((new IBM.ICU.Math.BigDecimal(
                            bmin - 1))));

            (new DiagBigDecimal.Test(this, "byv021")).ok = ((((sbyte)-128))) == ((new IBM.ICU.Math.BigDecimal(
                    "-128")).ByteValueExact());
            (new DiagBigDecimal.Test(this, "byv022")).ok = ((0)) == ((new IBM.ICU.Math.BigDecimal(
                    "0")).ByteValueExact());
            (new DiagBigDecimal.Test(this, "byv023")).ok = ((1)) == ((new IBM.ICU.Math.BigDecimal(
                    "1")).ByteValueExact());
            (new DiagBigDecimal.Test(this, "byv024")).ok = ((99)) == ((new IBM.ICU.Math.BigDecimal(
                    "99")).ByteValueExact());
            (new DiagBigDecimal.Test(this, "byv025")).ok = ((127)) == ((new IBM.ICU.Math.BigDecimal(
                    "127")).ByteValueExact());
            (new DiagBigDecimal.Test(this, "byv026")).ok = ((bmax)) == ((new IBM.ICU.Math.BigDecimal(
                    bmax)).ByteValueExact());
            (new DiagBigDecimal.Test(this, "byv027")).ok = ((bmin)) == ((new IBM.ICU.Math.BigDecimal(
                    bmin)).ByteValueExact());
            (new DiagBigDecimal.Test(this, "byv028")).ok = ((bneg)) == ((new IBM.ICU.Math.BigDecimal(
                    bneg)).ByteValueExact());
            (new DiagBigDecimal.Test(this, "byv029")).ok = ((bzer)) == ((new IBM.ICU.Math.BigDecimal(
                    bzer)).ByteValueExact());
            (new DiagBigDecimal.Test(this, "byv030")).ok = ((bpos)) == ((new IBM.ICU.Math.BigDecimal(
                    bpos)).ByteValueExact());
            try
            {
                v = "-129";
                (new IBM.ICU.Math.BigDecimal(v)).ByteValueExact();
                flag = false;
            }
            catch (System.ArithmeticException _87)
            {
                ae = _87;
                flag = (ae.Message).Equals("Conversion overflow:" + " " + v);
            }
            (new DiagBigDecimal.Test(this, "byv100")).ok = flag;
            try
            {
                v = "128";
                (new IBM.ICU.Math.BigDecimal(v)).ByteValueExact();
                flag = false;
            }
            catch (System.ArithmeticException _88)
            {
                ae = _88;
                flag = (ae.Message).Equals("Conversion overflow:" + " " + v);
            }
            (new DiagBigDecimal.Test(this, "byv101")).ok = flag;
            try
            {
                v = "1.5";
                (new IBM.ICU.Math.BigDecimal(v)).ByteValueExact();
                flag = false;
            }
            catch (System.ArithmeticException _89)
            {
                ae = _89;
                flag = (ae.Message).Equals("Decimal part non-zero:" + " " + v);
            }
            (new DiagBigDecimal.Test(this, "byv102")).ok = flag;

            badstrings = new String[] {
	                "1234",
	                (new IBM.ICU.Math.BigDecimal(bmax)).Add(one).ToString(),
	                (new IBM.ICU.Math.BigDecimal(bmin)).Subtract(one)
	                        .ToString(),
	                "170",
	                "270",
	                "370",
	                "470",
	                "570",
	                "670",
	                "770",
	                "870",
	                "970",
	                "-170",
	                "-270",
	                "-370",
	                "-470",
	                "-570",
	                "-670",
	                "-770",
	                "-870",
	                "-970",
	                (new IBM.ICU.Math.BigDecimal(bmin)).Multiply(two)
	                        .ToString(),
	                (new IBM.ICU.Math.BigDecimal(bmax)).Multiply(two)
	                        .ToString(),
	                (new IBM.ICU.Math.BigDecimal(bmin)).Multiply(ten)
	                        .ToString(),
	                (new IBM.ICU.Math.BigDecimal(bmax)).Multiply(ten)
	                        .ToString(), "-1234" }; // 220
            // 221
            // 222
            // 223
            // 224
            // 225
            // 226
            // 227
            // 228
            // 229
            // 230
            // 231
            // 232
            // 233
            // 234
            // 235
            // 236
            // 237
            // 238
            // 239
            // 240
            // 241
            // 242
            // 243
            // 244
            // 245
            {
                int _90 = badstrings.Length;
                i = 0;
                for (; _90 > 0; _90--, i++)
                {
                    try
                    {
                        v = badstrings[i];
                        (new IBM.ICU.Math.BigDecimal(v)).ByteValueExact();
                        flag = false;
                    }
                    catch (System.ArithmeticException _91)
                    {
                        ae = _91;
                        norm = (new IBM.ICU.Math.BigDecimal(v)).ToString();
                        flag = (ae.Message).Equals("Conversion overflow:"
                                + " " + norm);
                    }
                    (new DiagBigDecimal.Test(this, "byv" + (220 + i))).ok = flag;
                }
            }/* i */

            Summary("byteValue+");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.CompareTo(System.Object)"/>method.
        /// </summary>
        ///
        [Test]
        public void DiagcomparetoObj()
        {
            bool flag = false;
            IBM.ICU.Math.BigDecimal d;
            IBM.ICU.Math.BigDecimal long1;
            IBM.ICU.Math.BigDecimal long2;

            d = new IBM.ICU.Math.BigDecimal(17);
            (new DiagBigDecimal.Test(this, "cto001")).ok = (d
                    .CompareTo((Object)(new IBM.ICU.Math.BigDecimal(
                            66)))) == (-1);
            (new DiagBigDecimal.Test(this, "cto002")).ok = (d
                    .CompareTo((Object)((new IBM.ICU.Math.BigDecimal(
                            10)).Add(new IBM.ICU.Math.BigDecimal(7))))) == 0;
            (new DiagBigDecimal.Test(this, "cto003")).ok = (d
                    .CompareTo((Object)(new IBM.ICU.Math.BigDecimal(
                            10)))) == 1;
            long1 = new IBM.ICU.Math.BigDecimal("12345678903");
            long2 = new IBM.ICU.Math.BigDecimal("12345678900");
            (new DiagBigDecimal.Test(this, "cto004")).ok = (long1.CompareTo((Object)long2)) == 1;
            (new DiagBigDecimal.Test(this, "cto005")).ok = (long2.CompareTo((Object)long1)) == (-1);
            (new DiagBigDecimal.Test(this, "cto006")).ok = (long2.CompareTo((Object)long2)) == 0;
            try
            {
                d.CompareTo((Object)null);
                flag = false;
            }
            catch (NullReferenceException _92)
            {
                flag = true; // should get here
            }
            (new DiagBigDecimal.Test(this, "cto101")).ok = flag;
            try
            {
                d.CompareTo((Object)"foo");
                flag = false;
            }
            catch (InvalidCastException _93)
            {
                flag = true; // should get here
            }
            (new DiagBigDecimal.Test(this, "cto102")).ok = flag;
            Summary("compareTo(Obj)");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="null"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagdoublevalue()
        {
            System.String val;
            // 1999.03.07 Infinities no longer errors
            val = "-1";
            (new DiagBigDecimal.Test(this, "dov001")).ok = (Convert.ToDouble((new IBM.ICU.Math.BigDecimal(val)))) == ((((Double)Double.Parse(val))));
            val = "-0.1";
            (new DiagBigDecimal.Test(this, "dov002")).ok = (Convert.ToDouble((new IBM.ICU.Math.BigDecimal(val)))) == ((((Double)Double.Parse(val))));
            val = "0";
            (new DiagBigDecimal.Test(this, "dov003")).ok = (Convert.ToDouble((new IBM.ICU.Math.BigDecimal(val)))) == ((((Double)Double.Parse(val))));
            val = "0.1";
            (new DiagBigDecimal.Test(this, "dov004")).ok = (Convert.ToDouble((new IBM.ICU.Math.BigDecimal(val)))) == ((((Double)Double.Parse(val))));
            val = "1";
            (new DiagBigDecimal.Test(this, "dov005")).ok = (Convert.ToDouble((new IBM.ICU.Math.BigDecimal(val)))) == ((((Double)Double.Parse(val))));
            val = "1e1000";
            (new DiagBigDecimal.Test(this, "dov006")).ok = (Convert.ToDouble((new IBM.ICU.Math.BigDecimal(val)))) == System.Double.PositiveInfinity;
            val = "-1e1000";
            (new DiagBigDecimal.Test(this, "dov007")).ok = (Convert.ToDouble((new IBM.ICU.Math.BigDecimal(val)))) == System.Double.NegativeInfinity;
            Summary("doubleValue");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.Equals(System.Object)"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagequals()
        {
            IBM.ICU.Math.BigDecimal d;
            d = new IBM.ICU.Math.BigDecimal(17);
            (new DiagBigDecimal.Test(this, "equ001")).ok = (!(d.Equals((Object)null)));
            (new DiagBigDecimal.Test(this, "equ002")).ok = (!(d.Equals((Object)"foo")));
            (new DiagBigDecimal.Test(this, "equ003")).ok = (!(d
                    .Equals((Object)(new IBM.ICU.Math.BigDecimal(66)))));
            (new DiagBigDecimal.Test(this, "equ004")).ok = d.Equals((Object)d);
            (new DiagBigDecimal.Test(this, "equ005")).ok = d
                    .Equals((Object)((new IBM.ICU.Math.BigDecimal(10))
                            .Add(new IBM.ICU.Math.BigDecimal(7))));
            Summary("equals");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="null"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagfloatvalue()
        {
            System.String val;
            // 1999.03.07 Infinities no longer errors
            val = "-1";
            (new DiagBigDecimal.Test(this, "flv001")).ok = (Convert.ToSingle((new IBM.ICU.Math.BigDecimal(val)))) == ((((Single)Single.Parse(val))));
            val = "-0.1";
            (new DiagBigDecimal.Test(this, "flv002")).ok = (Convert.ToSingle((new IBM.ICU.Math.BigDecimal(val)))) == ((((Single)Single.Parse(val))));
            val = "0";
            (new DiagBigDecimal.Test(this, "flv003")).ok = (Convert.ToSingle((new IBM.ICU.Math.BigDecimal(val)))) == ((((Single)Single.Parse(val))));
            val = "0.1";
            (new DiagBigDecimal.Test(this, "flv004")).ok = (Convert.ToSingle((new IBM.ICU.Math.BigDecimal(val)))) == ((((Single)Single.Parse(val))));
            val = "1";
            (new DiagBigDecimal.Test(this, "flv005")).ok = (Convert.ToSingle((new IBM.ICU.Math.BigDecimal(val)))) == ((((Single)Single.Parse(val))));
            val = "1e200";
            (new DiagBigDecimal.Test(this, "flv006")).ok = (Convert.ToSingle((new IBM.ICU.Math.BigDecimal(val)))) == System.Single.PositiveInfinity;
            val = "-1e200";
            (new DiagBigDecimal.Test(this, "flv007")).ok = (Convert.ToSingle((new IBM.ICU.Math.BigDecimal(val)))) == System.Single.NegativeInfinity;
            val = "1e1000";
            (new DiagBigDecimal.Test(this, "flv008")).ok = (Convert.ToSingle((new IBM.ICU.Math.BigDecimal(val)))) == System.Single.PositiveInfinity;
            val = "-1e1000";
            (new DiagBigDecimal.Test(this, "flv009")).ok = (Convert.ToSingle((new IBM.ICU.Math.BigDecimal(val)))) == System.Single.NegativeInfinity;
            Summary("floatValue");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.Format(System.Int32, System.Int32)"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagformat()
        {
            bool flag = false;
            int eng;
            int sci;
            IBM.ICU.Math.BigDecimal d04;
            IBM.ICU.Math.BigDecimal d05;
            IBM.ICU.Math.BigDecimal d06;
            IBM.ICU.Math.BigDecimal d15;
            ArgumentException iae = null;
            IBM.ICU.Math.BigDecimal d050;
            IBM.ICU.Math.BigDecimal d150;
            IBM.ICU.Math.BigDecimal m050;
            IBM.ICU.Math.BigDecimal m150;
            IBM.ICU.Math.BigDecimal d051;
            IBM.ICU.Math.BigDecimal d151;
            IBM.ICU.Math.BigDecimal d000;
            IBM.ICU.Math.BigDecimal d500;
            System.ArithmeticException ae = null;
            // 1999.02.09 now only two signatures for format(), so some tests below
            // may now be redundant

            (new DiagBigDecimal.Test(this, "for001")).ok = ((new IBM.ICU.Math.BigDecimal("12.3"))
                    .Format(-1, -1)).Equals("12.3");
            (new DiagBigDecimal.Test(this, "for002")).ok = ((new IBM.ICU.Math.BigDecimal("-12.73"))
                    .Format(-1, -1)).Equals("-12.73");
            (new DiagBigDecimal.Test(this, "for003")).ok = ((new IBM.ICU.Math.BigDecimal("0.000"))
                    .Format(-1, -1)).Equals("0.000");
            (new DiagBigDecimal.Test(this, "for004")).ok = ((new IBM.ICU.Math.BigDecimal("3E+3"))
                    .Format(-1, -1)).Equals("3000");
            (new DiagBigDecimal.Test(this, "for005")).ok = ((new IBM.ICU.Math.BigDecimal("3"))
                    .Format(4, -1)).Equals("   3");
            (new DiagBigDecimal.Test(this, "for006")).ok = ((new IBM.ICU.Math.BigDecimal("1.73"))
                    .Format(4, 0)).Equals("   2");
            (new DiagBigDecimal.Test(this, "for007")).ok = ((new IBM.ICU.Math.BigDecimal("1.73"))
                    .Format(4, 1)).Equals("   1.7");
            (new DiagBigDecimal.Test(this, "for008")).ok = ((new IBM.ICU.Math.BigDecimal("1.75"))
                    .Format(4, 1)).Equals("   1.8");
            (new DiagBigDecimal.Test(this, "for009")).ok = ((new IBM.ICU.Math.BigDecimal("0.5"))
                    .Format(4, 1)).Equals("   0.5");
            (new DiagBigDecimal.Test(this, "for010")).ok = ((new IBM.ICU.Math.BigDecimal("0.05"))
                    .Format(4, 1)).Equals("   0.1");
            (new DiagBigDecimal.Test(this, "for011")).ok = ((new IBM.ICU.Math.BigDecimal("0.04"))
                    .Format(4, 1)).Equals("   0.0");
            (new DiagBigDecimal.Test(this, "for012")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Format(4, 0)).Equals("   0");
            (new DiagBigDecimal.Test(this, "for013")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Format(4, 1)).Equals("   0.0");
            (new DiagBigDecimal.Test(this, "for014")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Format(4, 2)).Equals("   0.00");
            (new DiagBigDecimal.Test(this, "for015")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Format(4, 3)).Equals("   0.000");
            (new DiagBigDecimal.Test(this, "for016")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .Format(4, 4)).Equals("   0.0000");
            (new DiagBigDecimal.Test(this, "for017")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .Format(4, 0)).Equals("   0");
            (new DiagBigDecimal.Test(this, "for018")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .Format(4, 1)).Equals("   0.0");
            (new DiagBigDecimal.Test(this, "for019")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .Format(4, 2)).Equals("   0.01");
            (new DiagBigDecimal.Test(this, "for020")).ok = ((new IBM.ICU.Math.BigDecimal("0.004"))
                    .Format(4, 2)).Equals("   0.00");
            (new DiagBigDecimal.Test(this, "for021")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .Format(4, 3)).Equals("   0.005");
            (new DiagBigDecimal.Test(this, "for022")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .Format(4, 4)).Equals("   0.0050");

            (new DiagBigDecimal.Test(this, "for023")).ok = ((new IBM.ICU.Math.BigDecimal("1.73"))
                    .Format(4, 2)).Equals("   1.73");
            (new DiagBigDecimal.Test(this, "for024")).ok = ((new IBM.ICU.Math.BigDecimal("1.73"))
                    .Format(4, 3)).Equals("   1.730");
            (new DiagBigDecimal.Test(this, "for025")).ok = ((new IBM.ICU.Math.BigDecimal("-.76"))
                    .Format(4, 1)).Equals("  -0.8");
            (new DiagBigDecimal.Test(this, "for026")).ok = ((new IBM.ICU.Math.BigDecimal("-12.73"))
                    .Format(-1, 4)).Equals("-12.7300");

            (new DiagBigDecimal.Test(this, "for027")).ok = ((new IBM.ICU.Math.BigDecimal("3.03"))
                    .Format(4, -1)).Equals("   3.03");
            (new DiagBigDecimal.Test(this, "for028")).ok = ((new IBM.ICU.Math.BigDecimal("3.03"))
                    .Format(4, 1)).Equals("   3.0");
            (new DiagBigDecimal.Test(this, "for029")).ok = ((new IBM.ICU.Math.BigDecimal("3.03"))
                    .Format(4, -1, 3, -1, -1, -1)).Equals("   3.03     ");
            (new DiagBigDecimal.Test(this, "for030")).ok = ((new IBM.ICU.Math.BigDecimal("3.03"))
                    .Format(-1, -1, 3, -1, -1, -1)).Equals("3.03     ");
            (new DiagBigDecimal.Test(this, "for031")).ok = ((new IBM.ICU.Math.BigDecimal("12345.73"))
                    .Format(-1, -1, -1, 4, -1, -1)).Equals("1.234573E+4");
            (new DiagBigDecimal.Test(this, "for032")).ok = ((new IBM.ICU.Math.BigDecimal("12345.73"))
                    .Format(-1, -1, -1, 5, -1, -1)).Equals("12345.73");
            (new DiagBigDecimal.Test(this, "for033")).ok = ((new IBM.ICU.Math.BigDecimal("12345.73"))
                    .Format(-1, -1, -1, 6, -1, -1)).Equals("12345.73");

            (new DiagBigDecimal.Test(this, "for034")).ok = ((new IBM.ICU.Math.BigDecimal("12345.73"))
                    .Format(-1, 8, -1, 3, -1, -1)).Equals("1.23457300E+4");
            (new DiagBigDecimal.Test(this, "for035")).ok = ((new IBM.ICU.Math.BigDecimal("12345.73"))
                    .Format(-1, 7, -1, 3, -1, -1)).Equals("1.2345730E+4");
            (new DiagBigDecimal.Test(this, "for036")).ok = ((new IBM.ICU.Math.BigDecimal("12345.73"))
                    .Format(-1, 6, -1, 3, -1, -1)).Equals("1.234573E+4");
            (new DiagBigDecimal.Test(this, "for037")).ok = ((new IBM.ICU.Math.BigDecimal("12345.73"))
                    .Format(-1, 5, -1, 3, -1, -1)).Equals("1.23457E+4");
            (new DiagBigDecimal.Test(this, "for038")).ok = ((new IBM.ICU.Math.BigDecimal("12345.73"))
                    .Format(-1, 4, -1, 3, -1, -1)).Equals("1.2346E+4");
            (new DiagBigDecimal.Test(this, "for039")).ok = ((new IBM.ICU.Math.BigDecimal("12345.73"))
                    .Format(-1, 3, -1, 3, -1, -1)).Equals("1.235E+4");
            (new DiagBigDecimal.Test(this, "for040")).ok = ((new IBM.ICU.Math.BigDecimal("12345.73"))
                    .Format(-1, 2, -1, 3, -1, -1)).Equals("1.23E+4");
            (new DiagBigDecimal.Test(this, "for041")).ok = ((new IBM.ICU.Math.BigDecimal("12345.73"))
                    .Format(-1, 1, -1, 3, -1, -1)).Equals("1.2E+4");
            (new DiagBigDecimal.Test(this, "for042")).ok = ((new IBM.ICU.Math.BigDecimal("12345.73"))
                    .Format(-1, 0, -1, 3, -1, -1)).Equals("1E+4");

            (new DiagBigDecimal.Test(this, "for043")).ok = ((new IBM.ICU.Math.BigDecimal("99999.99"))
                    .Format(-1, 6, -1, 3, -1, -1)).Equals("9.999999E+4");
            (new DiagBigDecimal.Test(this, "for044")).ok = ((new IBM.ICU.Math.BigDecimal("99999.99"))
                    .Format(-1, 5, -1, 3, -1, -1)).Equals("1.00000E+5");
            (new DiagBigDecimal.Test(this, "for045")).ok = ((new IBM.ICU.Math.BigDecimal("99999.99"))
                    .Format(-1, 2, -1, 3, -1, -1)).Equals("1.00E+5");
            (new DiagBigDecimal.Test(this, "for046")).ok = ((new IBM.ICU.Math.BigDecimal("99999.99"))
                    .Format(-1, 0, -1, 3, -1, -1)).Equals("1E+5");
            (new DiagBigDecimal.Test(this, "for047")).ok = ((new IBM.ICU.Math.BigDecimal("99999.99"))
                    .Format(3, 0, -1, 3, -1, -1)).Equals("  1E+5");

            (new DiagBigDecimal.Test(this, "for048")).ok = ((new IBM.ICU.Math.BigDecimal("12345.73"))
                    .Format(-1, -1, 2, 2, -1, -1)).Equals("1.234573E+04");
            (new DiagBigDecimal.Test(this, "for049")).ok = ((new IBM.ICU.Math.BigDecimal("12345.73"))
                    .Format(-1, 3, -1, 0, -1, -1)).Equals("1.235E+4");
            (new DiagBigDecimal.Test(this, "for050")).ok = ((new IBM.ICU.Math.BigDecimal("1.234573"))
                    .Format(-1, 3, -1, 0, -1, -1)).Equals("1.235");
            (new DiagBigDecimal.Test(this, "for051")).ok = ((new IBM.ICU.Math.BigDecimal("123.45"))
                    .Format(-1, 3, 2, 0, -1, -1)).Equals("1.235E+02");

            (new DiagBigDecimal.Test(this, "for052")).ok = ((new IBM.ICU.Math.BigDecimal("0.444"))
                    .Format(-1, 0)).Equals("0");
            (new DiagBigDecimal.Test(this, "for053")).ok = ((new IBM.ICU.Math.BigDecimal("-0.444"))
                    .Format(-1, 0)).Equals("0");
            (new DiagBigDecimal.Test(this, "for054")).ok = ((new IBM.ICU.Math.BigDecimal("0.4"))
                    .Format(-1, 0)).Equals("0");
            (new DiagBigDecimal.Test(this, "for055")).ok = ((new IBM.ICU.Math.BigDecimal("-0.4"))
                    .Format(-1, 0)).Equals("0");

            eng = IBM.ICU.Math.MathContext.ENGINEERING;
            sci = IBM.ICU.Math.MathContext.SCIENTIFIC;
            (new DiagBigDecimal.Test(this, "for060")).ok = ((new IBM.ICU.Math.BigDecimal("1234.5"))
                    .Format(-1, 3, 2, 0, eng, -1)).Equals("1.235E+03");
            (new DiagBigDecimal.Test(this, "for061")).ok = ((new IBM.ICU.Math.BigDecimal("12345"))
                    .Format(-1, 3, 3, 0, eng, -1)).Equals("12.345E+003");
            (new DiagBigDecimal.Test(this, "for062")).ok = ((new IBM.ICU.Math.BigDecimal("12345"))
                    .Format(-1, 3, 3, 0, sci, -1)).Equals("1.235E+004");
            (new DiagBigDecimal.Test(this, "for063")).ok = ((new IBM.ICU.Math.BigDecimal("1234.5"))
                    .Format(4, 3, 2, 0, eng, -1)).Equals("   1.235E+03");
            (new DiagBigDecimal.Test(this, "for064")).ok = ((new IBM.ICU.Math.BigDecimal("12345"))
                    .Format(5, 3, 3, 0, eng, -1)).Equals("   12.345E+003");
            (new DiagBigDecimal.Test(this, "for065")).ok = ((new IBM.ICU.Math.BigDecimal("12345"))
                    .Format(6, 3, 3, 0, sci, -1)).Equals("     1.235E+004");

            (new DiagBigDecimal.Test(this, "for066")).ok = ((new IBM.ICU.Math.BigDecimal("1.2345"))
                    .Format(-1, 3, 2, 0, -1, -1)).Equals("1.235    ");
            (new DiagBigDecimal.Test(this, "for067")).ok = ((new IBM.ICU.Math.BigDecimal("12345.73"))
                    .Format(-1, -1, 3, 6, -1, -1)).Equals("12345.73     ");
            (new DiagBigDecimal.Test(this, "for068")).ok = ((new IBM.ICU.Math.BigDecimal("12345e+5"))
                    .Format(-1, 0)).Equals("1234500000");
            (new DiagBigDecimal.Test(this, "for069")).ok = ((new IBM.ICU.Math.BigDecimal("12345e+5"))
                    .Format(-1, 1)).Equals("1234500000.0");
            (new DiagBigDecimal.Test(this, "for070")).ok = ((new IBM.ICU.Math.BigDecimal("12345e+5"))
                    .Format(-1, 2)).Equals("1234500000.00");
            (new DiagBigDecimal.Test(this, "for071")).ok = ((new IBM.ICU.Math.BigDecimal("12345e+5"))
                    .Format(-1, 3)).Equals("1234500000.000");
            (new DiagBigDecimal.Test(this, "for072")).ok = ((new IBM.ICU.Math.BigDecimal("12345e+5"))
                    .Format(-1, 4)).Equals("1234500000.0000");

            // some from ANSI Dallas [Nov 1998]
            (new DiagBigDecimal.Test(this, "for073")).ok = ((new IBM.ICU.Math.BigDecimal("99.999"))
                    .Format(-1, 2, -1, 2, -1, -1)).Equals("100.00");
            (new DiagBigDecimal.Test(this, "for074")).ok = ((new IBM.ICU.Math.BigDecimal("0.99999"))
                    .Format(-1, 4, 2, 2, -1, -1)).Equals("1.0000    ");

            // try some rounding modes [default ROUND_HALF_UP widely tested above]
            // the first few also tests that defaults are accepted for the others
            d04 = new IBM.ICU.Math.BigDecimal("0.04");
            d05 = new IBM.ICU.Math.BigDecimal("0.05");
            d06 = new IBM.ICU.Math.BigDecimal("0.06");
            d15 = new IBM.ICU.Math.BigDecimal("0.15");
            (new DiagBigDecimal.Test(this, "for080")).ok = (d05.Format(-1, 1)).Equals("0.1");
            (new DiagBigDecimal.Test(this, "for081")).ok = (d05.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_HALF_UP)).Equals("0.1");
            (new DiagBigDecimal.Test(this, "for082")).ok = (d05.Format(-1, 1, -1, -1, -1, -1))
                    .Equals("0.1");
            (new DiagBigDecimal.Test(this, "for083")).ok = (d05.Format(-1, -1, -1, -1, -1, -1))
                    .Equals("0.05");
            (new DiagBigDecimal.Test(this, "for084")).ok = (d05.Format(-1, -1)).Equals("0.05");
            try
            {
                d05.Format(-1, -1, -1, -1, -1, 30); // bad mode
                flag = false; // shouldn't get here
            }
            catch (ArgumentException _94)
            {
                iae = _94;
                flag = (iae.Message).Equals("Bad argument 6 to format: 30");
            }
            (new DiagBigDecimal.Test(this, "for085")).ok = flag;

            (new DiagBigDecimal.Test(this, "for090")).ok = (d04.Format(-1, 1)).Equals("0.0");
            (new DiagBigDecimal.Test(this, "for091")).ok = (d06.Format(-1, 1)).Equals("0.1");
            (new DiagBigDecimal.Test(this, "for092")).ok = (d04.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)).Equals("0.0");
            (new DiagBigDecimal.Test(this, "for093")).ok = (d05.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)).Equals("0.0");
            (new DiagBigDecimal.Test(this, "for094")).ok = (d06.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)).Equals("0.1");

            (new DiagBigDecimal.Test(this, "for095")).ok = (d04.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)).Equals("0.0");
            (new DiagBigDecimal.Test(this, "for096")).ok = (d05.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)).Equals("0.0");
            (new DiagBigDecimal.Test(this, "for097")).ok = (d06.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)).Equals("0.1");
            (new DiagBigDecimal.Test(this, "for098")).ok = (d15.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)).Equals("0.2");
            d050 = new IBM.ICU.Math.BigDecimal("0.050");
            d150 = new IBM.ICU.Math.BigDecimal("0.150");
            (new DiagBigDecimal.Test(this, "for099")).ok = (d050.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)).Equals("0.0");
            (new DiagBigDecimal.Test(this, "for100")).ok = (d150.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)).Equals("0.2");
            m050 = new IBM.ICU.Math.BigDecimal("-0.050");
            m150 = new IBM.ICU.Math.BigDecimal("-0.150");
            (new DiagBigDecimal.Test(this, "for101")).ok = (m050.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)).Equals("0.0");
            (new DiagBigDecimal.Test(this, "for102")).ok = (m150.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)).Equals("-0.2");
            d051 = new IBM.ICU.Math.BigDecimal("0.051");
            d151 = new IBM.ICU.Math.BigDecimal("0.151");
            (new DiagBigDecimal.Test(this, "for103")).ok = (d051.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)).Equals("0.1");
            (new DiagBigDecimal.Test(this, "for104")).ok = (d151.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)).Equals("0.2");

            (new DiagBigDecimal.Test(this, "for105")).ok = (m050.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_CEILING)).Equals("0.0");
            (new DiagBigDecimal.Test(this, "for106")).ok = (m150.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_CEILING)).Equals("-0.1");
            (new DiagBigDecimal.Test(this, "for107")).ok = (d050.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_CEILING)).Equals("0.1");
            (new DiagBigDecimal.Test(this, "for108")).ok = (d150.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_CEILING)).Equals("0.2");

            (new DiagBigDecimal.Test(this, "for109")).ok = (m050.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_FLOOR)).Equals("-0.1");
            (new DiagBigDecimal.Test(this, "for110")).ok = (m150.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_FLOOR)).Equals("-0.2");
            (new DiagBigDecimal.Test(this, "for111")).ok = (d050.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_FLOOR)).Equals("0.0");
            (new DiagBigDecimal.Test(this, "for112")).ok = (d150.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_FLOOR)).Equals("0.1");

            (new DiagBigDecimal.Test(this, "for113")).ok = (m050.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_UP)).Equals("-0.1");
            (new DiagBigDecimal.Test(this, "for114")).ok = (m150.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_UP)).Equals("-0.2");
            (new DiagBigDecimal.Test(this, "for115")).ok = (d050.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_UP)).Equals("0.1");
            (new DiagBigDecimal.Test(this, "for116")).ok = (d150.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_UP)).Equals("0.2");

            (new DiagBigDecimal.Test(this, "for117")).ok = (m050.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_DOWN)).Equals("0.0");
            (new DiagBigDecimal.Test(this, "for118")).ok = (m150.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_DOWN)).Equals("-0.1");
            (new DiagBigDecimal.Test(this, "for119")).ok = (d050.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_DOWN)).Equals("0.0");
            (new DiagBigDecimal.Test(this, "for120")).ok = (d150.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_DOWN)).Equals("0.1");

            d000 = new IBM.ICU.Math.BigDecimal("0.000");
            d500 = new IBM.ICU.Math.BigDecimal("0.500");
            (new DiagBigDecimal.Test(this, "for121")).ok = (d000.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_UNNECESSARY)).Equals("0.0");
            (new DiagBigDecimal.Test(this, "for122")).ok = (d000.Format(-1, 2, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_UNNECESSARY)).Equals("0.00");
            (new DiagBigDecimal.Test(this, "for123")).ok = (d000.Format(-1, 3, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_UNNECESSARY))
                    .Equals("0.000");
            try
            { // this should trap..
                d050.Format(-1, 1, -1, -1, -1,
                        IBM.ICU.Math.MathContext.ROUND_UNNECESSARY);
                flag = false;
            }
            catch (System.ArithmeticException _95)
            {
                ae = _95;
                flag = (ae.Message).Equals("Rounding necessary");
            }
            (new DiagBigDecimal.Test(this, "for124")).ok = flag;
            (new DiagBigDecimal.Test(this, "for125")).ok = (d050.Format(-1, 2, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_UNNECESSARY)).Equals("0.05");
            (new DiagBigDecimal.Test(this, "for126")).ok = (d050.Format(-1, 3, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_UNNECESSARY))
                    .Equals("0.050");
            (new DiagBigDecimal.Test(this, "for127")).ok = (d500.Format(-1, 1, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_UNNECESSARY)).Equals("0.5");
            (new DiagBigDecimal.Test(this, "for128")).ok = (d500.Format(-1, 2, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_UNNECESSARY)).Equals("0.50");
            (new DiagBigDecimal.Test(this, "for129")).ok = (d500.Format(-1, 3, -1, -1, -1,
                    IBM.ICU.Math.MathContext.ROUND_UNNECESSARY))
                    .Equals("0.500");

            // bad negs --
            try
            {
                d050.Format(-2, -1, -1, -1, -1, -1);
                flag = false;
            }
            catch (ArgumentException _96)
            {
                flag = true;
            }
            (new DiagBigDecimal.Test(this, "for131")).ok = flag;
            try
            {
                d050.Format(-1, -2, -1, -1, -1, -1);
                flag = false;
            }
            catch (ArgumentException _97)
            {
                flag = true;
            }
            (new DiagBigDecimal.Test(this, "for132")).ok = flag;
            try
            {
                d050.Format(-1, -1, -2, -1, -1, -1);
                flag = false;
            }
            catch (ArgumentException _98)
            {
                flag = true;
            }
            (new DiagBigDecimal.Test(this, "for133")).ok = flag;
            try
            {
                d050.Format(-1, -1, -1, -2, -1, -1);
                flag = false;
            }
            catch (ArgumentException _99)
            {
                flag = true;
            }
            (new DiagBigDecimal.Test(this, "for134")).ok = flag;
            try
            {
                d050.Format(-1, -1, -1, -1, -2, -1);
                flag = false;
            }
            catch (ArgumentException _100)
            {
                flag = true;
            }
            (new DiagBigDecimal.Test(this, "for135")).ok = flag;
            try
            {
                d050.Format(-1, -1, -1, -1, -1, -2);
                flag = false;
            }
            catch (ArgumentException _101)
            {
                flag = true;
            }
            (new DiagBigDecimal.Test(this, "for136")).ok = flag;

            Summary("format");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.HashCode"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diaghashcode()
        {
            System.String hs;
            IBM.ICU.Math.BigDecimal d;
            hs = "27827817";
            d = new IBM.ICU.Math.BigDecimal(hs);
            (new DiagBigDecimal.Test(this, "has001")).ok = (d.GetHashCode()) == (hs.GetHashCode());
            hs = "1.265E+200";
            d = new IBM.ICU.Math.BigDecimal(hs);
            (new DiagBigDecimal.Test(this, "has002")).ok = (d.GetHashCode()) == (hs.GetHashCode());
            hs = "126.5E+200";
            d = new IBM.ICU.Math.BigDecimal(hs);
            (new DiagBigDecimal.Test(this, "has003")).ok = (d.GetHashCode()) != (hs.GetHashCode());
            Summary("hashCode");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="null"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagintvalue()
        {
            bool flag = false;
            System.String v = null;
            System.ArithmeticException ae = null;
            System.String[] badstrings;
            int i = 0;
            System.String norm = null;
            IBM.ICU.Math.BigDecimal dimax;
            IBM.ICU.Math.BigDecimal num = null;
            IBM.ICU.Math.BigDecimal dv = null;
            IBM.ICU.Math.BigDecimal dimin;

            // intValue --

            (new DiagBigDecimal.Test(this, "inv001")).ok = imin == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            imin))));
            (new DiagBigDecimal.Test(this, "inv002")).ok = ((99)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "99"))));
            (new DiagBigDecimal.Test(this, "inv003")).ok = ((1)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "1"))));
            (new DiagBigDecimal.Test(this, "inv004")).ok = ((0)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "0"))));
            (new DiagBigDecimal.Test(this, "inv005")).ok = ((-1)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "-1"))));
            (new DiagBigDecimal.Test(this, "inv006")).ok = ((-99)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "-99"))));
            (new DiagBigDecimal.Test(this, "inv007")).ok = imax == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            imax))));
            (new DiagBigDecimal.Test(this, "inv008")).ok = ((5)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "5.0"))));
            (new DiagBigDecimal.Test(this, "inv009")).ok = ((5)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "5.3"))));
            (new DiagBigDecimal.Test(this, "inv010")).ok = ((5)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "5.5"))));
            (new DiagBigDecimal.Test(this, "inv011")).ok = ((5)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "5.7"))));
            (new DiagBigDecimal.Test(this, "inv012")).ok = ((5)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "5.9"))));
            (new DiagBigDecimal.Test(this, "inv013")).ok = ((-5)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "-5.0"))));
            (new DiagBigDecimal.Test(this, "inv014")).ok = ((-5)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "-5.3"))));
            (new DiagBigDecimal.Test(this, "inv015")).ok = ((-5)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "-5.5"))));
            (new DiagBigDecimal.Test(this, "inv016")).ok = ((-5)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "-5.7"))));
            (new DiagBigDecimal.Test(this, "inv017")).ok = ((-5)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "-5.9"))));
            (new DiagBigDecimal.Test(this, "inv018")).ok = (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "88888888888")))) == (-1305424328); // ugh
            (new DiagBigDecimal.Test(this, "inv019")).ok = (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "-88888888888")))) == 1305424328; // ugh
            (new DiagBigDecimal.Test(this, "inv020")).ok = ((imin)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            (((long)imax)) + 1))));
            (new DiagBigDecimal.Test(this, "inv021")).ok = ((imax)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            (((long)imin)) - 1))));

            // intValueExact --

            (new DiagBigDecimal.Test(this, "inv101")).ok = imin == ((new IBM.ICU.Math.BigDecimal(
                    imin)).IntValueExact());
            (new DiagBigDecimal.Test(this, "inv102")).ok = ((99)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "99"))));
            (new DiagBigDecimal.Test(this, "inv103")).ok = ((1)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "1"))));
            (new DiagBigDecimal.Test(this, "inv104")).ok = ((0)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "0"))));
            (new DiagBigDecimal.Test(this, "inv105")).ok = ((-1)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "-1"))));
            (new DiagBigDecimal.Test(this, "inv106")).ok = ((-99)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "-99"))));
            (new DiagBigDecimal.Test(this, "inv107")).ok = imax == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            imax))));
            (new DiagBigDecimal.Test(this, "inv108")).ok = ((5)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "5.0"))));
            (new DiagBigDecimal.Test(this, "inv109")).ok = ((-5)) == (System.Convert.ToInt32((new IBM.ICU.Math.BigDecimal(
                            "-5.0"))));
            (new DiagBigDecimal.Test(this, "inv110")).ok = imax == ((new IBM.ICU.Math.BigDecimal(
                    imax)).IntValueExact());

            try
            {
                v = "-88588688888";
                (new IBM.ICU.Math.BigDecimal(v)).IntValueExact();
                flag = false;
            }
            catch (System.ArithmeticException _102)
            {
                ae = _102;
                flag = (ae.Message).Equals("Conversion overflow:" + " " + v);
            }
            (new DiagBigDecimal.Test(this, "inv200")).ok = flag;

            // this one could raise either overflow or bad decimal part
            try
            {
                v = "88088818888.00001";
                (new IBM.ICU.Math.BigDecimal(v)).IntValueExact();
                flag = false;
            }
            catch (System.ArithmeticException _103)
            {
                flag = true;
            }
            (new DiagBigDecimal.Test(this, "inv201")).ok = flag;

            // 1999.10.28: the testcases marked '*' failed
            badstrings = new String[] {
	                "12345678901",
	                (new IBM.ICU.Math.BigDecimal(imax)).Add(one).ToString(),
	                (new IBM.ICU.Math.BigDecimal(imin)).Subtract(one)
	                        .ToString(),
	                "3731367293",
	                "4731367293",
	                "5731367293",
	                "6731367293",
	                "7731367293",
	                "8731367293",
	                "9731367293",
	                "-3731367293",
	                "-4731367293",
	                "-5731367293",
	                "-6731367293",
	                "-7731367293",
	                "-8731367293",
	                "-9731367293",
	                (new IBM.ICU.Math.BigDecimal(imin)).Multiply(two)
	                        .ToString(),
	                (new IBM.ICU.Math.BigDecimal(imax)).Multiply(two)
	                        .ToString(),
	                (new IBM.ICU.Math.BigDecimal(imin)).Multiply(ten)
	                        .ToString(),
	                (new IBM.ICU.Math.BigDecimal(imax)).Multiply(ten)
	                        .ToString(), "4731367293", "4831367293", "4931367293",
	                "5031367293", "5131367293", "5231367293", "5331367293",
	                "5431367293", "5531367293", "5631367293", "5731367293",
	                "5831367293", "5931367293", "6031367293", "6131367293",
	                "6231367293", "6331367293", "6431367293", "6531367293",
	                "6631367293", "6731367293", "2200000000", "2300000000",
	                "2400000000", "2500000000", "2600000000", "2700000000",
	                "2800000000", "2900000000", "-2200000000", "-2300000000",
	                "-2400000000", "-2500000000", "-2600000000", "-2700000000",
	                "-2800000000", "-2900000000", "25E+8", "-25E+8", "-12345678901" }; // 220
            // 221
            // 222
            // 223
            // 224
            // 225 *
            // 226
            // 227
            // 228
            // 229 *
            // 230
            // 231
            // 232 *
            // 233
            // 234
            // 235
            // 236 *
            // 237
            // 238
            // 239
            // 240
            // 241
            // 242 *
            // 243 *
            // 244 *
            // 245 *
            // 246 *
            // 247 *
            // 248 *
            // 249 *
            // 250 *
            // 251 *
            // 252 *
            // 253 *
            // 254 *
            // 255 *
            // 256 *
            // 257 *
            // 258 *
            // 259
            // 260
            // 261
            // 262
            // 263
            // 264
            // 265
            // 266
            // 267
            // 268
            // 269
            // 270
            // 271
            // 272
            // 273
            // 274
            // 275
            // 276
            // 277
            // 278
            // 279
            // 280
            {
                int _104 = badstrings.Length;
                i = 0;
                for (; _104 > 0; _104--, i++)
                {
                    try
                    {
                        v = badstrings[i];
                        (new IBM.ICU.Math.BigDecimal(v)).IntValueExact();
                        flag = false;
                    }
                    catch (System.ArithmeticException _105)
                    {
                        ae = _105;
                        norm = (new IBM.ICU.Math.BigDecimal(v)).ToString();
                        flag = (ae.Message).Equals("Conversion overflow:"
                                + " " + norm);
                    }
                    (new DiagBigDecimal.Test(this, "inv" + (220 + i))).ok = flag;
                }
            }/* i */

            // now slip in some single bits...
            dimax = new IBM.ICU.Math.BigDecimal(imax);
            {
                i = 0;
                for (; i <= 49; i++)
                {
                    try
                    {
                        num = two.Pow(new IBM.ICU.Math.BigDecimal(i), mc50);
                        dv = dimax.Add(num, mc50);
                        dv.IntValueExact();
                        flag = false;
                    }
                    catch (System.ArithmeticException _106)
                    {
                        ae = _106;
                        norm = dv.ToString();
                        flag = (ae.Message).Equals("Conversion overflow:"
                                + " " + norm);
                    }
                    (new DiagBigDecimal.Test(this, "inv" + (300 + i))).ok = flag;
                }
            }/* i */
            dimin = new IBM.ICU.Math.BigDecimal(imin);
            {
                i = 50;
                for (; i <= 99; i++)
                {
                    try
                    {
                        num = two.Pow(new IBM.ICU.Math.BigDecimal(i), mc50);
                        dv = dimin.Subtract(num, mc50);
                        dv.IntValueExact();
                        flag = false;
                    }
                    catch (System.ArithmeticException _107)
                    {
                        ae = _107;
                        norm = dv.ToString();
                        flag = (ae.Message).Equals("Conversion overflow:"
                                + " " + norm);
                    }
                    (new DiagBigDecimal.Test(this, "inv" + (300 + i))).ok = flag;
                }
            }/* i */

            // the following should all raise bad-decimal-part exceptions
            badstrings = new String[] { "0.09", "0.9", "0.01", "0.1",
	                "-0.01", "-0.1", "1.01", "-1.01", "-1.1", "-111.111",
	                "+111.111", "1.09", "1.05", "1.04", "1.99", "1.9", "1.5",
	                "1.4", "-1.09", "-1.05", "-1.04", "-1.99", "-1.9", "-1.5",
	                "-1.4", "1E-1000", "-1E-1000", "11E-1", "1.5" }; // 400-403
            // 404-407
            // 408-411
            // 412-416
            // 417-420
            // 421-424
            // 425-428

            {
                int _108 = badstrings.Length;
                i = 0;
                for (; _108 > 0; _108--, i++)
                {
                    try
                    {
                        v = badstrings[i];
                        (new IBM.ICU.Math.BigDecimal(v)).IntValueExact();
                        flag = false;
                    }
                    catch (System.ArithmeticException _109)
                    {
                        ae = _109;
                        norm = (new IBM.ICU.Math.BigDecimal(v)).ToString();
                        flag = (ae.Message).Equals("Decimal part non-zero:"
                                + " " + norm);
                    }
                    (new DiagBigDecimal.Test(this, "inv" + (400 + i))).ok = flag;
                }
            }/* i */

            Summary("intValue+");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="null"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diaglongvalue()
        {
            bool flag = false;
            System.String v = null;
            System.ArithmeticException ae = null;
            System.String[] badstrings;
            int i = 0;
            System.String norm = null;
            IBM.ICU.Math.BigDecimal dlmax;
            IBM.ICU.Math.BigDecimal num = null;
            IBM.ICU.Math.BigDecimal dv = null;
            IBM.ICU.Math.BigDecimal dlmin;

            // longValue --

            (new DiagBigDecimal.Test(this, "lov001")).ok = lmin == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            lmin))));
            (new DiagBigDecimal.Test(this, "lov002")).ok = (((long)99)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "99"))));
            (new DiagBigDecimal.Test(this, "lov003")).ok = (((long)1)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "1"))));
            (new DiagBigDecimal.Test(this, "lov004")).ok = (((long)0)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "0"))));
            (new DiagBigDecimal.Test(this, "lov005")).ok = (((long)-1)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "-1"))));
            (new DiagBigDecimal.Test(this, "lov006")).ok = (((long)-99)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "-99"))));
            (new DiagBigDecimal.Test(this, "lov007")).ok = lmax == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            lmax))));
            (new DiagBigDecimal.Test(this, "lov008")).ok = (((long)5)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "5.0"))));
            (new DiagBigDecimal.Test(this, "lov009")).ok = (((long)5)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "5.3"))));
            (new DiagBigDecimal.Test(this, "lov010")).ok = (((long)5)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "5.5"))));
            (new DiagBigDecimal.Test(this, "lov011")).ok = (((long)5)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "5.7"))));
            (new DiagBigDecimal.Test(this, "lov012")).ok = (((long)5)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "5.9"))));
            (new DiagBigDecimal.Test(this, "lov013")).ok = (((long)-5)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "-5.0"))));
            (new DiagBigDecimal.Test(this, "lov014")).ok = (((long)-5)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "-5.3"))));
            (new DiagBigDecimal.Test(this, "lov015")).ok = (((long)-5)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "-5.5"))));
            (new DiagBigDecimal.Test(this, "lov016")).ok = (((long)-5)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "-5.7"))));
            (new DiagBigDecimal.Test(this, "lov017")).ok = (((long)-5)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "-5.9"))));
            (new DiagBigDecimal.Test(this, "lov018")).ok = (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "888888888899999999998")))) == 3445173361941522430L; // ugh
            (new DiagBigDecimal.Test(this, "lov019")).ok = (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "-888888888899999999998")))) == (-3445173361941522430L); // ugh

            // longValueExact --

            (new DiagBigDecimal.Test(this, "lov101")).ok = lmin == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            lmin))));
            (new DiagBigDecimal.Test(this, "lov102")).ok = (((long)99)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "99"))));
            (new DiagBigDecimal.Test(this, "lov103")).ok = (((long)1)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "1"))));
            (new DiagBigDecimal.Test(this, "lov104")).ok = (((long)0)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "0"))));
            (new DiagBigDecimal.Test(this, "lov105")).ok = (((long)-1)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "-1"))));
            (new DiagBigDecimal.Test(this, "lov106")).ok = (((long)-99)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "-99"))));
            (new DiagBigDecimal.Test(this, "lov107")).ok = lmax == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            lmax))));
            (new DiagBigDecimal.Test(this, "lov108")).ok = (((long)5)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "5.0"))));
            (new DiagBigDecimal.Test(this, "lov109")).ok = (((long)-5)) == (Convert.ToInt64((new IBM.ICU.Math.BigDecimal(
                            "-5.0"))));

            try
            {
                v = "-888888888899999999998";
                (new IBM.ICU.Math.BigDecimal(v)).LongValueExact();
                flag = false;
            }
            catch (System.ArithmeticException _110)
            {
                ae = _110;
                flag = (ae.Message).Equals("Conversion overflow:" + " " + v);
            }
            (new DiagBigDecimal.Test(this, "lov200")).ok = flag;
            try
            {
                v = "88888887487487479488888";
                (new IBM.ICU.Math.BigDecimal(v)).LongValueExact();
                flag = false;
            }
            catch (System.ArithmeticException _111)
            {
                ae = _111;
                flag = (ae.Message).Equals("Conversion overflow:" + " " + v);
            }
            (new DiagBigDecimal.Test(this, "lov201")).ok = flag;
            try
            {
                v = "1.5";
                (new IBM.ICU.Math.BigDecimal(v)).LongValueExact();
                flag = false;
            }
            catch (System.ArithmeticException _112)
            {
                ae = _112;
                flag = (ae.Message).Equals("Decimal part non-zero:" + " " + v);
            }
            (new DiagBigDecimal.Test(this, "lov202")).ok = flag;

            badstrings = new String[] {
	                "1234567890110987654321",
	                "-1234567890110987654321",
	                (new IBM.ICU.Math.BigDecimal(lmax)).Add(one).ToString(),
	                (new IBM.ICU.Math.BigDecimal(lmin)).Subtract(one)
	                        .ToString(),
	                (new IBM.ICU.Math.BigDecimal(lmin)).Multiply(two)
	                        .ToString(),
	                (new IBM.ICU.Math.BigDecimal(lmax)).Multiply(two)
	                        .ToString(),
	                (new IBM.ICU.Math.BigDecimal(lmin)).Multiply(ten)
	                        .ToString(),
	                (new IBM.ICU.Math.BigDecimal(lmax)).Multiply(ten)
	                        .ToString(), "9223372036854775818",
	                "9323372036854775818", "9423372036854775818",
	                "9523372036854775818", "9623372036854775818",
	                "9723372036854775818", "9823372036854775818",
	                "9923372036854775818", "-9223372036854775818",
	                "-9323372036854775818", "-9423372036854775818",
	                "-9523372036854775818", "-9623372036854775818",
	                "-9723372036854775818", "-9823372036854775818",
	                "-9923372036854775818", "12345678901234567890" }; // 220
            // 221
            // 222
            // 223
            // 224
            // 225
            // 226
            // 227
            // 228
            // 229
            // 230
            // 231
            // 232
            // 233
            // 234
            // 235
            // 236
            // 237
            // 238
            // 239
            // 240
            // 241
            // 242
            // 243
            // 244
            {
                int _113 = badstrings.Length;
                i = 0;
                for (; _113 > 0; _113--, i++)
                {
                    try
                    {
                        v = badstrings[i];
                        (new IBM.ICU.Math.BigDecimal(v)).LongValueExact();
                        flag = false;
                    }
                    catch (System.ArithmeticException _114)
                    {
                        ae = _114;
                        norm = (new IBM.ICU.Math.BigDecimal(v)).ToString();
                        flag = (ae.Message).Equals("Conversion overflow:"
                                + " " + norm);
                    }
                    (new DiagBigDecimal.Test(this, "lov" + (220 + i))).ok = flag;
                }
            }/* i */

            // now slip in some single bits...
            dlmax = new IBM.ICU.Math.BigDecimal(lmax);
            {
                i = 0;
                for (; i <= 99; i++)
                {
                    try
                    {
                        num = two.Pow(new IBM.ICU.Math.BigDecimal(i), mc50);
                        dv = dlmax.Add(num, mc50);
                        dv.LongValueExact();
                        flag = false;
                    }
                    catch (System.ArithmeticException _115)
                    {
                        ae = _115;
                        norm = dv.ToString();
                        flag = (ae.Message).Equals("Conversion overflow:"
                                + " " + norm);
                    }
                    (new DiagBigDecimal.Test(this, "lov" + (300 + i))).ok = flag;
                }
            }/* i */
            dlmin = new IBM.ICU.Math.BigDecimal(lmin);
            {
                i = 0;
                for (; i <= 99; i++)
                {
                    try
                    {
                        num = two.Pow(new IBM.ICU.Math.BigDecimal(i), mc50);
                        dv = dlmin.Subtract(num, mc50);
                        dv.LongValueExact();
                        flag = false;
                    }
                    catch (System.ArithmeticException _116)
                    {
                        ae = _116;
                        norm = dv.ToString();
                        flag = (ae.Message).Equals("Conversion overflow:"
                                + " " + norm);
                    }
                    (new DiagBigDecimal.Test(this, "lov" + (400 + i))).ok = flag;
                }
            }/* i */

            Summary("longValue+");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.MovePointLeft(System.Int32)"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagmovepointleft()
        {
            (new DiagBigDecimal.Test(this, "mpl001")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .MovePointLeft(-10).ToString()).Equals("-10000000000");
            (new DiagBigDecimal.Test(this, "mpl002")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .MovePointLeft(-5).ToString()).Equals("-100000");
            (new DiagBigDecimal.Test(this, "mpl003")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .MovePointLeft(-1).ToString()).Equals("-10");
            (new DiagBigDecimal.Test(this, "mpl004")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .MovePointLeft(0).ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "mpl005")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .MovePointLeft(+1).ToString()).Equals("-0.1");
            (new DiagBigDecimal.Test(this, "mpl006")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .MovePointLeft(+5).ToString()).Equals("-0.00001");
            (new DiagBigDecimal.Test(this, "mpl007")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .MovePointLeft(+10).ToString()).Equals("-0.0000000001");

            (new DiagBigDecimal.Test(this, "mpl010")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .MovePointLeft(-10).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "mpl010")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .MovePointLeft(-5).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "mpl010")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .MovePointLeft(-1).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "mpl010")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .MovePointLeft(0).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "mpl010")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .MovePointLeft(+1).ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "mpl010")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .MovePointLeft(+5).ToString()).Equals("0.00000");
            (new DiagBigDecimal.Test(this, "mpl010")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .MovePointLeft(+10).ToString()).Equals("0.0000000000");

            (new DiagBigDecimal.Test(this, "mpl020")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .MovePointLeft(-10).ToString()).Equals("10000000000");
            (new DiagBigDecimal.Test(this, "mpl021")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .MovePointLeft(-5).ToString()).Equals("100000");
            (new DiagBigDecimal.Test(this, "mpl022")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .MovePointLeft(-1).ToString()).Equals("10");
            (new DiagBigDecimal.Test(this, "mpl023")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .MovePointLeft(0).ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "mpl024")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .MovePointLeft(+1).ToString()).Equals("0.1");
            (new DiagBigDecimal.Test(this, "mpl025")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .MovePointLeft(+5).ToString()).Equals("0.00001");
            (new DiagBigDecimal.Test(this, "mpl026")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .MovePointLeft(+10).ToString()).Equals("0.0000000001");

            (new DiagBigDecimal.Test(this, "mpl030")).ok = ((new IBM.ICU.Math.BigDecimal("0.5E+1"))
                    .MovePointLeft(-10).ToString()).Equals("50000000000");
            (new DiagBigDecimal.Test(this, "mpl031")).ok = ((new IBM.ICU.Math.BigDecimal("0.5E+1"))
                    .MovePointLeft(-5).ToString()).Equals("500000");
            (new DiagBigDecimal.Test(this, "mpl032")).ok = ((new IBM.ICU.Math.BigDecimal("0.5E+1"))
                    .MovePointLeft(-1).ToString()).Equals("50");
            (new DiagBigDecimal.Test(this, "mpl033")).ok = ((new IBM.ICU.Math.BigDecimal("0.5E+1"))
                    .MovePointLeft(0).ToString()).Equals("5");
            (new DiagBigDecimal.Test(this, "mpl034")).ok = ((new IBM.ICU.Math.BigDecimal("0.5E+1"))
                    .MovePointLeft(+1).ToString()).Equals("0.5");
            (new DiagBigDecimal.Test(this, "mpl035")).ok = ((new IBM.ICU.Math.BigDecimal("0.5E+1"))
                    .MovePointLeft(+5).ToString()).Equals("0.00005");
            (new DiagBigDecimal.Test(this, "mpl036")).ok = ((new IBM.ICU.Math.BigDecimal("0.5E+1"))
                    .MovePointLeft(+10).ToString()).Equals("0.0000000005");

            Summary("movePointLeft");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.MovePointRight(System.Int32)"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagmovepointright()
        {
            (new DiagBigDecimal.Test(this, "mpr001")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .MovePointRight(+10).ToString()).Equals("-10000000000");
            (new DiagBigDecimal.Test(this, "mpr002")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .MovePointRight(+5).ToString()).Equals("-100000");
            (new DiagBigDecimal.Test(this, "mpr003")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .MovePointRight(+1).ToString()).Equals("-10");
            (new DiagBigDecimal.Test(this, "mpr004")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .MovePointRight(0).ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "mpr005")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .MovePointRight(-1).ToString()).Equals("-0.1");
            (new DiagBigDecimal.Test(this, "mpr006")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .MovePointRight(-5).ToString()).Equals("-0.00001");
            (new DiagBigDecimal.Test(this, "mpr007")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .MovePointRight(-10).ToString()).Equals("-0.0000000001");

            (new DiagBigDecimal.Test(this, "mpr010")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .MovePointRight(+10).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "mpr011")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .MovePointRight(+5).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "mpr012")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .MovePointRight(+1).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "mpr013")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .MovePointRight(0).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "mpr014")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .MovePointRight(-1).ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "mpr015")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .MovePointRight(-5).ToString()).Equals("0.00000");
            (new DiagBigDecimal.Test(this, "mpr016")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .MovePointRight(-10).ToString()).Equals("0.0000000000");

            (new DiagBigDecimal.Test(this, "mpr020")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .MovePointRight(+10).ToString()).Equals("10000000000");
            (new DiagBigDecimal.Test(this, "mpr021")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .MovePointRight(+5).ToString()).Equals("100000");
            (new DiagBigDecimal.Test(this, "mpr022")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .MovePointRight(+1).ToString()).Equals("10");
            (new DiagBigDecimal.Test(this, "mpr023")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .MovePointRight(0).ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "mpr024")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .MovePointRight(-1).ToString()).Equals("0.1");
            (new DiagBigDecimal.Test(this, "mpr025")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .MovePointRight(-5).ToString()).Equals("0.00001");
            (new DiagBigDecimal.Test(this, "mpr026")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .MovePointRight(-10).ToString()).Equals("0.0000000001");

            (new DiagBigDecimal.Test(this, "mpr030")).ok = ((new IBM.ICU.Math.BigDecimal("0.5E+1"))
                    .MovePointRight(+10).ToString()).Equals("50000000000");
            (new DiagBigDecimal.Test(this, "mpr031")).ok = ((new IBM.ICU.Math.BigDecimal("0.5E+1"))
                    .MovePointRight(+5).ToString()).Equals("500000");
            (new DiagBigDecimal.Test(this, "mpr032")).ok = ((new IBM.ICU.Math.BigDecimal("0.5E+1"))
                    .MovePointRight(+1).ToString()).Equals("50");
            (new DiagBigDecimal.Test(this, "mpr033")).ok = ((new IBM.ICU.Math.BigDecimal("0.5E+1"))
                    .MovePointRight(0).ToString()).Equals("5");
            (new DiagBigDecimal.Test(this, "mpr034")).ok = ((new IBM.ICU.Math.BigDecimal("0.5E+1"))
                    .MovePointRight(-1).ToString()).Equals("0.5");
            (new DiagBigDecimal.Test(this, "mpr035")).ok = ((new IBM.ICU.Math.BigDecimal("0.5E+1"))
                    .MovePointRight(-5).ToString()).Equals("0.00005");
            (new DiagBigDecimal.Test(this, "mpr036")).ok = ((new IBM.ICU.Math.BigDecimal("0.5E+1"))
                    .MovePointRight(-10).ToString()).Equals("0.0000000005");

            Summary("movePointRight");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.Scale"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagscale()
        {
            (new DiagBigDecimal.Test(this, "sca001")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .Scale()) == 0;
            (new DiagBigDecimal.Test(this, "sca002")).ok = ((new IBM.ICU.Math.BigDecimal("-10"))
                    .Scale()) == 0;
            (new DiagBigDecimal.Test(this, "sca003")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .Scale()) == 0;
            (new DiagBigDecimal.Test(this, "sca004")).ok = ((new IBM.ICU.Math.BigDecimal("+10"))
                    .Scale()) == 0;
            (new DiagBigDecimal.Test(this, "sca005")).ok = ((new IBM.ICU.Math.BigDecimal("1E+10"))
                    .Scale()) == 0;
            (new DiagBigDecimal.Test(this, "sca006")).ok = ((new IBM.ICU.Math.BigDecimal("1E-10"))
                    .Scale()) == 10;
            (new DiagBigDecimal.Test(this, "sca007")).ok = ((new IBM.ICU.Math.BigDecimal("0E-10"))
                    .Scale()) == 0;
            (new DiagBigDecimal.Test(this, "sca008")).ok = ((new IBM.ICU.Math.BigDecimal("0.000"))
                    .Scale()) == 3;
            (new DiagBigDecimal.Test(this, "sca009")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .Scale()) == 2;
            (new DiagBigDecimal.Test(this, "sca010")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .Scale()) == 1;
            (new DiagBigDecimal.Test(this, "sca011")).ok = ((new IBM.ICU.Math.BigDecimal("0.1"))
                    .Scale()) == 1;
            (new DiagBigDecimal.Test(this, "sca012")).ok = ((new IBM.ICU.Math.BigDecimal("0.12"))
                    .Scale()) == 2;
            (new DiagBigDecimal.Test(this, "sca013")).ok = ((new IBM.ICU.Math.BigDecimal("0.123"))
                    .Scale()) == 3;
            (new DiagBigDecimal.Test(this, "sca014")).ok = ((new IBM.ICU.Math.BigDecimal("-0.0"))
                    .Scale()) == 1;
            (new DiagBigDecimal.Test(this, "sca015")).ok = ((new IBM.ICU.Math.BigDecimal("-0.1"))
                    .Scale()) == 1;
            (new DiagBigDecimal.Test(this, "sca016")).ok = ((new IBM.ICU.Math.BigDecimal("-0.12"))
                    .Scale()) == 2;
            (new DiagBigDecimal.Test(this, "sca017")).ok = ((new IBM.ICU.Math.BigDecimal("-0.123"))
                    .Scale()) == 3;
            Summary("scale");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.SetScale(System.Int32)"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagsetscale()
        {
            bool flag = false;
            Exception e = null;

            (new DiagBigDecimal.Test(this, "ssc001")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .SetScale(0).ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "ssc002")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .SetScale(1).ToString()).Equals("-1.0");
            (new DiagBigDecimal.Test(this, "ssc003")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .SetScale(2).ToString()).Equals("-1.00");
            (new DiagBigDecimal.Test(this, "ssc004")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .SetScale(0).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "ssc005")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .SetScale(1).ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "ssc006")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .SetScale(2).ToString()).Equals("0.00");
            (new DiagBigDecimal.Test(this, "ssc007")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .SetScale(0).ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "ssc008")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .SetScale(1).ToString()).Equals("1.0");
            (new DiagBigDecimal.Test(this, "ssc009")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .SetScale(2).ToString()).Equals("1.00");
            (new DiagBigDecimal.Test(this, "ssc010")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "ssc011")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("-1.0");
            (new DiagBigDecimal.Test(this, "ssc012")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("-1.00");
            (new DiagBigDecimal.Test(this, "ssc013")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "ssc014")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "ssc015")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0.00");
            (new DiagBigDecimal.Test(this, "ssc016")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "ssc017")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1.0");
            (new DiagBigDecimal.Test(this, "ssc018")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1.00");

            (new DiagBigDecimal.Test(this, "ssc020")).ok = ((new IBM.ICU.Math.BigDecimal("1.04"))
                    .SetScale(3, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1.040");
            (new DiagBigDecimal.Test(this, "ssc021")).ok = ((new IBM.ICU.Math.BigDecimal("1.04"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1.04");
            (new DiagBigDecimal.Test(this, "ssc022")).ok = ((new IBM.ICU.Math.BigDecimal("1.04"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1.0");
            (new DiagBigDecimal.Test(this, "ssc023")).ok = ((new IBM.ICU.Math.BigDecimal("1.04"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "ssc024")).ok = ((new IBM.ICU.Math.BigDecimal("1.05"))
                    .SetScale(3, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1.050");
            (new DiagBigDecimal.Test(this, "ssc025")).ok = ((new IBM.ICU.Math.BigDecimal("1.05"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1.05");
            (new DiagBigDecimal.Test(this, "ssc026")).ok = ((new IBM.ICU.Math.BigDecimal("1.05"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1.1");
            (new DiagBigDecimal.Test(this, "ssc027")).ok = ((new IBM.ICU.Math.BigDecimal("1.05"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "ssc028")).ok = ((new IBM.ICU.Math.BigDecimal("1.05"))
                    .SetScale(3, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("1.050");
            (new DiagBigDecimal.Test(this, "ssc029")).ok = ((new IBM.ICU.Math.BigDecimal("1.05"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("1.05");
            (new DiagBigDecimal.Test(this, "ssc030")).ok = ((new IBM.ICU.Math.BigDecimal("1.05"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("1.0");
            (new DiagBigDecimal.Test(this, "ssc031")).ok = ((new IBM.ICU.Math.BigDecimal("1.05"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "ssc032")).ok = ((new IBM.ICU.Math.BigDecimal("1.06"))
                    .SetScale(3, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1.060");
            (new DiagBigDecimal.Test(this, "ssc033")).ok = ((new IBM.ICU.Math.BigDecimal("1.06"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1.06");
            (new DiagBigDecimal.Test(this, "ssc034")).ok = ((new IBM.ICU.Math.BigDecimal("1.06"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1.1");
            (new DiagBigDecimal.Test(this, "ssc035")).ok = ((new IBM.ICU.Math.BigDecimal("1.06"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1");

            (new DiagBigDecimal.Test(this, "ssc040")).ok = ((new IBM.ICU.Math.BigDecimal("-10"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("-10.00");
            (new DiagBigDecimal.Test(this, "ssc041")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("1.00");
            (new DiagBigDecimal.Test(this, "ssc042")).ok = ((new IBM.ICU.Math.BigDecimal("+10"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("10.00");
            (new DiagBigDecimal.Test(this, "ssc043")).ok = ((new IBM.ICU.Math.BigDecimal("1E+10"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("10000000000.00");
            (new DiagBigDecimal.Test(this, "ssc044")).ok = ((new IBM.ICU.Math.BigDecimal("1E-10"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0.00");
            (new DiagBigDecimal.Test(this, "ssc045")).ok = ((new IBM.ICU.Math.BigDecimal("1E-2"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0.01");
            (new DiagBigDecimal.Test(this, "ssc046")).ok = ((new IBM.ICU.Math.BigDecimal("0E-10"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0.00");

            // check rounding
            (new DiagBigDecimal.Test(this, "ssc050")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_CEILING)
                    .ToString()).Equals("0.01");
            (new DiagBigDecimal.Test(this, "ssc051")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_CEILING)
                    .ToString()).Equals("0.1");
            (new DiagBigDecimal.Test(this, "ssc052")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_CEILING)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "ssc053")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_DOWN)
                    .ToString()).Equals("0.00");
            (new DiagBigDecimal.Test(this, "ssc054")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_DOWN)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "ssc055")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_DOWN)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "ssc056")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_FLOOR)
                    .ToString()).Equals("0.00");
            (new DiagBigDecimal.Test(this, "ssc057")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_FLOOR)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "ssc058")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_FLOOR)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "ssc059")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("0.00");
            (new DiagBigDecimal.Test(this, "ssc060")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "ssc061")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_HALF_DOWN)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "ssc062")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0.00");
            (new DiagBigDecimal.Test(this, "ssc063")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "ssc064")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "ssc065")).ok = ((new IBM.ICU.Math.BigDecimal("0.015"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0.02");
            (new DiagBigDecimal.Test(this, "ssc066")).ok = ((new IBM.ICU.Math.BigDecimal("0.015"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "ssc067")).ok = ((new IBM.ICU.Math.BigDecimal("0.015"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_HALF_EVEN)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "ssc068")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0.01");
            (new DiagBigDecimal.Test(this, "ssc069")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "ssc070")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "ssc071")).ok = ((new IBM.ICU.Math.BigDecimal("0.095"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0.10");
            (new DiagBigDecimal.Test(this, "ssc072")).ok = ((new IBM.ICU.Math.BigDecimal("0.095"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0.1");
            (new DiagBigDecimal.Test(this, "ssc073")).ok = ((new IBM.ICU.Math.BigDecimal("0.095"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_HALF_UP)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "ssc074")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(2, IBM.ICU.Math.MathContext.ROUND_UP).ToString())
                    .Equals("0.01");
            (new DiagBigDecimal.Test(this, "ssc075")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(1, IBM.ICU.Math.MathContext.ROUND_UP).ToString())
                    .Equals("0.1");
            (new DiagBigDecimal.Test(this, "ssc076")).ok = ((new IBM.ICU.Math.BigDecimal("0.005"))
                    .SetScale(0, IBM.ICU.Math.MathContext.ROUND_UP).ToString())
                    .Equals("1");

            try
            {
                (new IBM.ICU.Math.BigDecimal(1)).SetScale(-8);
                flag = false;
            }
            catch (Exception _117)
            {
                e = _117;
                flag = (e.Message).Equals("Negative scale: -8");
            }/* checkscale */
            (new DiagBigDecimal.Test(this, "ssc100")).ok = flag;
            try
            {
                (new IBM.ICU.Math.BigDecimal(1.0001D)).SetScale(3);
                flag = false;
            }
            catch (Exception _118)
            {
                e = _118;
                flag = (e.Message).Equals("Rounding necessary");
            }/* checkrunn */
            (new DiagBigDecimal.Test(this, "ssc101")).ok = flag;
            try
            {
                (new IBM.ICU.Math.BigDecimal(1E-8D)).SetScale(3);
                flag = false;
            }
            catch (Exception _119)
            {
                e = _119;
                flag = (e.Message).Equals("Rounding necessary");
            }/* checkrunn */
            (new DiagBigDecimal.Test(this, "ssc102")).ok = flag;
            Summary("setScale");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <c>BigDecimal.shortValue()</c> method. 
        /// </summary>
        ///
        [Test]
        public void Diagshortvalue()
        {
            bool flag = false;
            System.String v = null;
            System.ArithmeticException ae = null;
            System.String[] badstrings;
            int i = 0;
            System.String norm = null;

            (new DiagBigDecimal.Test(this, "shv002")).ok = (((short)0)) == (Convert.ToInt16((new IBM.ICU.Math.BigDecimal(
                            "0"))));
            (new DiagBigDecimal.Test(this, "shv003")).ok = (((short)1)) == (Convert.ToInt16((new IBM.ICU.Math.BigDecimal(
                            "1"))));
            (new DiagBigDecimal.Test(this, "shv004")).ok = (((short)99)) == (Convert.ToInt16((new IBM.ICU.Math.BigDecimal(
                            "99"))));
            (new DiagBigDecimal.Test(this, "shv006")).ok = ((smax)) == (Convert.ToInt16((new IBM.ICU.Math.BigDecimal(
                            smax))));
            (new DiagBigDecimal.Test(this, "shv007")).ok = ((smin)) == (Convert.ToInt16((new IBM.ICU.Math.BigDecimal(
                            smin))));
            (new DiagBigDecimal.Test(this, "shv008")).ok = ((sneg)) == (Convert.ToInt16((new IBM.ICU.Math.BigDecimal(
                            sneg))));
            (new DiagBigDecimal.Test(this, "shv009")).ok = ((szer)) == (Convert.ToInt16((new IBM.ICU.Math.BigDecimal(
                            szer))));
            (new DiagBigDecimal.Test(this, "shv010")).ok = ((spos)) == (Convert.ToInt16((new IBM.ICU.Math.BigDecimal(
                            spos))));
            (new DiagBigDecimal.Test(this, "shv011")).ok = ((smin)) == (Convert.ToInt16((new IBM.ICU.Math.BigDecimal(
                            smax + 1))));
            (new DiagBigDecimal.Test(this, "shv012")).ok = ((smax)) == (Convert.ToInt16((new IBM.ICU.Math.BigDecimal(
                            smin - 1))));

            (new DiagBigDecimal.Test(this, "shv022")).ok = (((short)0)) == ((new IBM.ICU.Math.BigDecimal(
                    "0")).ShortValueExact());
            (new DiagBigDecimal.Test(this, "shv023")).ok = (((short)1)) == ((new IBM.ICU.Math.BigDecimal(
                    "1")).ShortValueExact());
            (new DiagBigDecimal.Test(this, "shv024")).ok = (((short)99)) == ((new IBM.ICU.Math.BigDecimal(
                    "99")).ShortValueExact());
            (new DiagBigDecimal.Test(this, "shv026")).ok = ((smax)) == ((new IBM.ICU.Math.BigDecimal(
                    smax)).ShortValueExact());
            (new DiagBigDecimal.Test(this, "shv027")).ok = ((smin)) == ((new IBM.ICU.Math.BigDecimal(
                    smin)).ShortValueExact());
            (new DiagBigDecimal.Test(this, "shv028")).ok = ((sneg)) == ((new IBM.ICU.Math.BigDecimal(
                    sneg)).ShortValueExact());
            (new DiagBigDecimal.Test(this, "shv029")).ok = ((szer)) == ((new IBM.ICU.Math.BigDecimal(
                    szer)).ShortValueExact());
            (new DiagBigDecimal.Test(this, "shv030")).ok = ((spos)) == ((new IBM.ICU.Math.BigDecimal(
                    spos)).ShortValueExact());
            try
            {
                v = "-88888888888";
                (new IBM.ICU.Math.BigDecimal(v)).ShortValueExact();
                flag = false;
            }
            catch (System.ArithmeticException _120)
            {
                ae = _120;
                flag = (ae.Message).Equals("Conversion overflow:" + " " + v);
            }
            (new DiagBigDecimal.Test(this, "shv100")).ok = flag;
            try
            {
                v = "88888888888";
                (new IBM.ICU.Math.BigDecimal(v)).ShortValueExact();
                flag = false;
            }
            catch (System.ArithmeticException _121)
            {
                ae = _121;
                flag = (ae.Message).Equals("Conversion overflow:" + " " + v);
            }
            (new DiagBigDecimal.Test(this, "shv101")).ok = flag;
            try
            {
                v = "1.5";
                (new IBM.ICU.Math.BigDecimal(v)).ShortValueExact();
                flag = false;
            }
            catch (System.ArithmeticException _122)
            {
                ae = _122;
                flag = (ae.Message).Equals("Decimal part non-zero:" + " " + v);
            }
            (new DiagBigDecimal.Test(this, "shv102")).ok = flag;

            badstrings = new String[] {
	                "123456",
	                (new IBM.ICU.Math.BigDecimal(smax)).Add(one).ToString(),
	                (new IBM.ICU.Math.BigDecimal(smin)).Subtract(one)
	                        .ToString(),
	                "71111",
	                "81111",
	                "91111",
	                "-71111",
	                "-81111",
	                "-91111",
	                (new IBM.ICU.Math.BigDecimal(smin)).Multiply(two)
	                        .ToString(),
	                (new IBM.ICU.Math.BigDecimal(smax)).Multiply(two)
	                        .ToString(),
	                (new IBM.ICU.Math.BigDecimal(smin)).Multiply(ten)
	                        .ToString(),
	                (new IBM.ICU.Math.BigDecimal(smax)).Multiply(ten)
	                        .ToString(), "-123456" }; // 220
            // 221
            // 222
            // 223
            // 224
            // 225
            // 226
            // 227
            // 228
            // 229
            // 230
            // 231
            // 232
            // 233
            {
                int _123 = badstrings.Length;
                i = 0;
                for (; _123 > 0; _123--, i++)
                {
                    try
                    {
                        v = badstrings[i];
                        (new IBM.ICU.Math.BigDecimal(v)).ShortValueExact();
                        flag = false;
                    }
                    catch (System.ArithmeticException _124)
                    {
                        ae = _124;
                        norm = (new IBM.ICU.Math.BigDecimal(v)).ToString();
                        flag = (ae.Message).Equals("Conversion overflow:"
                                + " " + norm);
                    }
                    (new DiagBigDecimal.Test(this, "shv" + (220 + i))).ok = flag;
                }
            }/* i */

            Summary("shortValue+");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.Signum"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagsignum()
        {
            // necessarily checks some obscure constructions, too
            (new DiagBigDecimal.Test(this, "sig001")).ok = (-1) == ((new IBM.ICU.Math.BigDecimal(
                    "-1")).Signum());
            (new DiagBigDecimal.Test(this, "sig002")).ok = (-1) == ((new IBM.ICU.Math.BigDecimal(
                    "-0.0010")).Signum());
            (new DiagBigDecimal.Test(this, "sig003")).ok = (-1) == ((new IBM.ICU.Math.BigDecimal(
                    "-0.001")).Signum());
            (new DiagBigDecimal.Test(this, "sig004")).ok = 0 == ((new IBM.ICU.Math.BigDecimal(
                    "-0.00")).Signum());
            (new DiagBigDecimal.Test(this, "sig005")).ok = 0 == ((new IBM.ICU.Math.BigDecimal("-0"))
                    .Signum());
            (new DiagBigDecimal.Test(this, "sig006")).ok = 0 == ((new IBM.ICU.Math.BigDecimal("0"))
                    .Signum());
            (new DiagBigDecimal.Test(this, "sig007")).ok = 0 == ((new IBM.ICU.Math.BigDecimal("00"))
                    .Signum());
            (new DiagBigDecimal.Test(this, "sig008")).ok = 0 == ((new IBM.ICU.Math.BigDecimal("00.0"))
                    .Signum());
            (new DiagBigDecimal.Test(this, "sig009")).ok = 1 == ((new IBM.ICU.Math.BigDecimal(
                    "00.01")).Signum());
            (new DiagBigDecimal.Test(this, "sig010")).ok = 1 == ((new IBM.ICU.Math.BigDecimal(
                    "00.01")).Signum());
            (new DiagBigDecimal.Test(this, "sig011")).ok = 1 == ((new IBM.ICU.Math.BigDecimal(
                    "00.010")).Signum());
            (new DiagBigDecimal.Test(this, "sig012")).ok = 1 == ((new IBM.ICU.Math.BigDecimal(
                    "01.01")).Signum());
            (new DiagBigDecimal.Test(this, "sig013")).ok = 1 == ((new IBM.ICU.Math.BigDecimal(
                    "+0.01")).Signum());
            (new DiagBigDecimal.Test(this, "sig014")).ok = 1 == ((new IBM.ICU.Math.BigDecimal(
                    "+0.001")).Signum());
            (new DiagBigDecimal.Test(this, "sig015")).ok = 1 == ((new IBM.ICU.Math.BigDecimal("1"))
                    .Signum());
            (new DiagBigDecimal.Test(this, "sig016")).ok = 1 == ((new IBM.ICU.Math.BigDecimal(
                    "1e+12")).Signum());
            (new DiagBigDecimal.Test(this, "sig017")).ok = 0 == ((new IBM.ICU.Math.BigDecimal(
                    "00e+12")).Signum());
            Summary("signum");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.ToBigDecimal"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagtobigdecimal()
        {
            // #if defined(FOUNDATION10) || defined(J2SE13)
            // #else
            (new DiagBigDecimal.Test(this, "tbd001")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .ToBigDecimal().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbd002")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .ToBigDecimal().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbd003")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .ToBigDecimal().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbd004")).ok = ((new IBM.ICU.Math.BigDecimal("1"))
                    .ToBigDecimal().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbd005")).ok = ((new IBM.ICU.Math.BigDecimal("1E+2"))
                    .ToBigDecimal().ToString()).Equals("100");
            (new DiagBigDecimal.Test(this, "tbd006")).ok = ((new IBM.ICU.Math.BigDecimal("1E-2"))
                    .ToBigDecimal().ToString()).Equals("0.01");
            if (!isJDK15OrLater)
            {
                (new DiagBigDecimal.Test(this, "tbd007")).ok = ((new IBM.ICU.Math.BigDecimal("1E-8"))
                        .ToBigDecimal().ToString()).Equals("0.00000001");
            }
            if (!isJDK15OrLater)
            {
                (new DiagBigDecimal.Test(this, "tbd008")).ok = ((new IBM.ICU.Math.BigDecimal("1E-9"))
                        .ToBigDecimal().ToString()).Equals("0.000000001");
            }
            (new DiagBigDecimal.Test(this, "tbd009")).ok = ((new IBM.ICU.Math.BigDecimal("1E10"))
                    .ToBigDecimal().ToString()).Equals("10000000000");
            (new DiagBigDecimal.Test(this, "tbd010")).ok = ((new IBM.ICU.Math.BigDecimal("1E12"))
                    .ToBigDecimal().ToString()).Equals("1000000000000");
            Summary("toBigDecimal");
            // #endif
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.ToBigInteger"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagtobiginteger()
        {
            bool flag = false;
            System.String[] badstrings;
            int i = 0;
            (new DiagBigDecimal.Test(this, "tbi001")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .ToBigInteger().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi002")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .ToBigInteger().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi003")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .ToBigInteger().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi004")).ok = ((new IBM.ICU.Math.BigDecimal("10"))
                    .ToBigInteger().ToString()).Equals("10");
            (new DiagBigDecimal.Test(this, "tbi005")).ok = ((new IBM.ICU.Math.BigDecimal("1000"))
                    .ToBigInteger().ToString()).Equals("1000");
            (new DiagBigDecimal.Test(this, "tbi006")).ok = ((new IBM.ICU.Math.BigDecimal("-1E+0"))
                    .ToBigInteger().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi007")).ok = ((new IBM.ICU.Math.BigDecimal("0E+0"))
                    .ToBigInteger().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi008")).ok = ((new IBM.ICU.Math.BigDecimal("+1E+0"))
                    .ToBigInteger().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi009")).ok = ((new IBM.ICU.Math.BigDecimal("10E+0"))
                    .ToBigInteger().ToString()).Equals("10");
            (new DiagBigDecimal.Test(this, "tbi010")).ok = ((new IBM.ICU.Math.BigDecimal("1E+3"))
                    .ToBigInteger().ToString()).Equals("1000");
            (new DiagBigDecimal.Test(this, "tbi011")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .ToBigInteger().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi012")).ok = ((new IBM.ICU.Math.BigDecimal("0.01"))
                    .ToBigInteger().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi013")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .ToBigInteger().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi014")).ok = ((new IBM.ICU.Math.BigDecimal("0.1"))
                    .ToBigInteger().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi015")).ok = ((new IBM.ICU.Math.BigDecimal("-0.00"))
                    .ToBigInteger().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi016")).ok = ((new IBM.ICU.Math.BigDecimal("-0.01"))
                    .ToBigInteger().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi017")).ok = ((new IBM.ICU.Math.BigDecimal("-0.0"))
                    .ToBigInteger().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi018")).ok = ((new IBM.ICU.Math.BigDecimal("-0.1"))
                    .ToBigInteger().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi019")).ok = ((new IBM.ICU.Math.BigDecimal("1.00"))
                    .ToBigInteger().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi020")).ok = ((new IBM.ICU.Math.BigDecimal("1.01"))
                    .ToBigInteger().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi021")).ok = ((new IBM.ICU.Math.BigDecimal("1.0"))
                    .ToBigInteger().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi022")).ok = ((new IBM.ICU.Math.BigDecimal("1.1"))
                    .ToBigInteger().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi023")).ok = ((new IBM.ICU.Math.BigDecimal("-1.00"))
                    .ToBigInteger().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi024")).ok = ((new IBM.ICU.Math.BigDecimal("-1.01"))
                    .ToBigInteger().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi025")).ok = ((new IBM.ICU.Math.BigDecimal("-1.0"))
                    .ToBigInteger().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi026")).ok = ((new IBM.ICU.Math.BigDecimal("-1.1"))
                    .ToBigInteger().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi027")).ok = ((new IBM.ICU.Math.BigDecimal("-111.111"))
                    .ToBigInteger().ToString()).Equals("-111");
            (new DiagBigDecimal.Test(this, "tbi028")).ok = ((new IBM.ICU.Math.BigDecimal("+111.111"))
                    .ToBigInteger().ToString()).Equals("111");
            (new DiagBigDecimal.Test(this, "tbi029")).ok = ((new IBM.ICU.Math.BigDecimal("0.09"))
                    .ToBigInteger().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi030")).ok = ((new IBM.ICU.Math.BigDecimal("0.9"))
                    .ToBigInteger().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi031")).ok = ((new IBM.ICU.Math.BigDecimal("1.09"))
                    .ToBigInteger().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi032")).ok = ((new IBM.ICU.Math.BigDecimal("1.05"))
                    .ToBigInteger().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi033")).ok = ((new IBM.ICU.Math.BigDecimal("1.04"))
                    .ToBigInteger().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi034")).ok = ((new IBM.ICU.Math.BigDecimal("1.99"))
                    .ToBigInteger().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi034")).ok = ((new IBM.ICU.Math.BigDecimal("1.9"))
                    .ToBigInteger().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi035")).ok = ((new IBM.ICU.Math.BigDecimal("1.5"))
                    .ToBigInteger().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi036")).ok = ((new IBM.ICU.Math.BigDecimal("1.4"))
                    .ToBigInteger().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi037")).ok = ((new IBM.ICU.Math.BigDecimal("-1.09"))
                    .ToBigInteger().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi038")).ok = ((new IBM.ICU.Math.BigDecimal("-1.05"))
                    .ToBigInteger().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi039")).ok = ((new IBM.ICU.Math.BigDecimal("-1.04"))
                    .ToBigInteger().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi040")).ok = ((new IBM.ICU.Math.BigDecimal("-1.99"))
                    .ToBigInteger().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi041")).ok = ((new IBM.ICU.Math.BigDecimal("-1.9"))
                    .ToBigInteger().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi042")).ok = ((new IBM.ICU.Math.BigDecimal("-1.5"))
                    .ToBigInteger().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi043")).ok = ((new IBM.ICU.Math.BigDecimal("-1.4"))
                    .ToBigInteger().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi044")).ok = ((new IBM.ICU.Math.BigDecimal("1E-1000"))
                    .ToBigInteger().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi045")).ok = ((new IBM.ICU.Math.BigDecimal("-1E-1000"))
                    .ToBigInteger().ToString()).Equals("0");

            // Exact variety --
            (new DiagBigDecimal.Test(this, "tbi101")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .ToBigIntegerExact().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi102")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .ToBigIntegerExact().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi103")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .ToBigIntegerExact().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi104")).ok = ((new IBM.ICU.Math.BigDecimal("10"))
                    .ToBigIntegerExact().ToString()).Equals("10");
            (new DiagBigDecimal.Test(this, "tbi105")).ok = ((new IBM.ICU.Math.BigDecimal("1000"))
                    .ToBigIntegerExact().ToString()).Equals("1000");
            (new DiagBigDecimal.Test(this, "tbi106")).ok = ((new IBM.ICU.Math.BigDecimal("-1E+0"))
                    .ToBigIntegerExact().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi107")).ok = ((new IBM.ICU.Math.BigDecimal("0E+0"))
                    .ToBigIntegerExact().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi108")).ok = ((new IBM.ICU.Math.BigDecimal("+1E+0"))
                    .ToBigIntegerExact().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi109")).ok = ((new IBM.ICU.Math.BigDecimal("10E+0"))
                    .ToBigIntegerExact().ToString()).Equals("10");
            (new DiagBigDecimal.Test(this, "tbi110")).ok = ((new IBM.ICU.Math.BigDecimal("1E+3"))
                    .ToBigIntegerExact().ToString()).Equals("1000");
            (new DiagBigDecimal.Test(this, "tbi111")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .ToBigIntegerExact().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi112")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .ToBigIntegerExact().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi113")).ok = ((new IBM.ICU.Math.BigDecimal("-0.00"))
                    .ToBigIntegerExact().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi114")).ok = ((new IBM.ICU.Math.BigDecimal("-0.0"))
                    .ToBigIntegerExact().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "tbi115")).ok = ((new IBM.ICU.Math.BigDecimal("1.00"))
                    .ToBigIntegerExact().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi116")).ok = ((new IBM.ICU.Math.BigDecimal("1.0"))
                    .ToBigIntegerExact().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "tbi117")).ok = ((new IBM.ICU.Math.BigDecimal("-1.00"))
                    .ToBigIntegerExact().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi118")).ok = ((new IBM.ICU.Math.BigDecimal("-1.0"))
                    .ToBigIntegerExact().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "tbi119")).ok = ((new IBM.ICU.Math.BigDecimal(
                    "1.00000000000000000000000000000")).ToBigIntegerExact()
                    .ToString()).Equals("1");

            // the following should all raise exceptions

            badstrings = new String[] { "0.09", "0.9", "0.01", "0.1",
	                "-0.01", "-0.1", "1.01", "-1.01", "-1.1", "-111.111",
	                "+111.111", "1.09", "1.05", "1.04", "1.99", "1.9", "1.5",
	                "1.4", "-1.09", "-1.05", "-1.04", "-1.99", "-1.9", "-1.5",
	                "-1.4", "1E-1000", "-1E-1000", "11E-1", "1.1",
	                "127623156123656561356123512315631231551312356.000001",
	                "0.000000000000000000000000000000000000000000000001" }; // 300-303
            // 304-307
            // 308-311
            // 312-316
            // 317-320
            // 321-324
            // 325-328
            // 329
            // 330

            {
                int _125 = badstrings.Length;
                i = 0;
                for (; _125 > 0; _125--, i++)
                {
                    try
                    {
                        (new IBM.ICU.Math.BigDecimal(badstrings[i]))
                                .ToBigIntegerExact();
                        flag = false;
                    }
                    catch (System.ArithmeticException _126)
                    {
                        flag = true;
                    }
                    (new DiagBigDecimal.Test(this, "tbi" + (300 + i))).ok = flag;
                }
            }/* i */

            Summary("toBigInteger+");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.ToCharArray"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagtochararray()
        {
            System.String str;
            char[] car;
            IBM.ICU.Math.BigDecimal d;
            char[] ca;
            // the function of this has been tested above, this is simply an
            // existence proof and type-check
            str = "-123.45";
            car = (str).ToCharArray();
            d = new IBM.ICU.Math.BigDecimal(str);
            ca = d.ToCharArray();
            (new DiagBigDecimal.Test(this, "tca001")).ok = ca.Length == car.Length;
            (new DiagBigDecimal.Test(this, "tca002")).ok = (ILOG.J2CsMapping.Util.StringUtil.NewString(ca))
                    .Equals((Object)(ILOG.J2CsMapping.Util.StringUtil.NewString(car)));
            (new DiagBigDecimal.Test(this, "tca003")).ok = (d.ToCharArray() is char[]);
            (new DiagBigDecimal.Test(this, "tca004")).ok = (ca is char[]);
            Summary("toCharArray");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.ToString"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagtostring()
        {
            System.String str;
            char[] car;
            IBM.ICU.Math.BigDecimal d;
            char[] ca;
            System.String cs;
            // the function of this has been tested above, this is simply an
            // existence proof and type-check
            str = "123.45";
            car = (str).ToCharArray();
            d = new IBM.ICU.Math.BigDecimal(car, 0, car.Length);
            ca = d.ToCharArray();
            cs = d.ToString();
            (new DiagBigDecimal.Test(this, "tos001")).ok = (str.ToCharArray().Length) == ca.Length;
            (new DiagBigDecimal.Test(this, "tos002")).ok = (str.Length) == (cs.Length);
            (new DiagBigDecimal.Test(this, "tos003")).ok = str
                    .Equals((Object)(ILOG.J2CsMapping.Util.StringUtil.NewString(ca)));
            (new DiagBigDecimal.Test(this, "tos004")).ok = str.Equals((Object)cs);
            (new DiagBigDecimal.Test(this, "tos005")).ok = (cs is System.String);
            (new DiagBigDecimal.Test(this, "tos006")).ok = (d.ToString() is System.String);
            Summary("toString");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.UnscaledValue"/> method. 
        /// </summary>
        ///
        [Test]
        public void Diagunscaledvalue()
        {
            // just like toBigInteger, but scaly bits are preserved [without dots]
            (new DiagBigDecimal.Test(this, "uns001")).ok = ((new IBM.ICU.Math.BigDecimal("-1"))
                    .UnscaledValue().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "uns002")).ok = ((new IBM.ICU.Math.BigDecimal("0"))
                    .UnscaledValue().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "uns003")).ok = ((new IBM.ICU.Math.BigDecimal("+1"))
                    .UnscaledValue().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "uns004")).ok = ((new IBM.ICU.Math.BigDecimal("10"))
                    .UnscaledValue().ToString()).Equals("10");
            (new DiagBigDecimal.Test(this, "uns005")).ok = ((new IBM.ICU.Math.BigDecimal("1000"))
                    .UnscaledValue().ToString()).Equals("1000");
            (new DiagBigDecimal.Test(this, "uns006")).ok = ((new IBM.ICU.Math.BigDecimal("-1E+0"))
                    .UnscaledValue().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "uns007")).ok = ((new IBM.ICU.Math.BigDecimal("0E+0"))
                    .UnscaledValue().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "uns008")).ok = ((new IBM.ICU.Math.BigDecimal("+1E+0"))
                    .UnscaledValue().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "uns009")).ok = ((new IBM.ICU.Math.BigDecimal("10E+0"))
                    .UnscaledValue().ToString()).Equals("10");
            (new DiagBigDecimal.Test(this, "uns010")).ok = ((new IBM.ICU.Math.BigDecimal("1E+3"))
                    .UnscaledValue().ToString()).Equals("1000");
            (new DiagBigDecimal.Test(this, "uns011")).ok = ((new IBM.ICU.Math.BigDecimal("0.00"))
                    .UnscaledValue().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "uns012")).ok = ((new IBM.ICU.Math.BigDecimal("0.01"))
                    .UnscaledValue().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "uns013")).ok = ((new IBM.ICU.Math.BigDecimal("0.0"))
                    .UnscaledValue().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "uns014")).ok = ((new IBM.ICU.Math.BigDecimal("0.1"))
                    .UnscaledValue().ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "uns015")).ok = ((new IBM.ICU.Math.BigDecimal("-0.00"))
                    .UnscaledValue().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "uns016")).ok = ((new IBM.ICU.Math.BigDecimal("-0.01"))
                    .UnscaledValue().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "uns017")).ok = ((new IBM.ICU.Math.BigDecimal("-0.0"))
                    .UnscaledValue().ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "uns018")).ok = ((new IBM.ICU.Math.BigDecimal("-0.1"))
                    .UnscaledValue().ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "uns019")).ok = ((new IBM.ICU.Math.BigDecimal("1.00"))
                    .UnscaledValue().ToString()).Equals("100");
            (new DiagBigDecimal.Test(this, "uns020")).ok = ((new IBM.ICU.Math.BigDecimal("1.01"))
                    .UnscaledValue().ToString()).Equals("101");
            (new DiagBigDecimal.Test(this, "uns021")).ok = ((new IBM.ICU.Math.BigDecimal("1.0"))
                    .UnscaledValue().ToString()).Equals("10");
            (new DiagBigDecimal.Test(this, "uns022")).ok = ((new IBM.ICU.Math.BigDecimal("1.1"))
                    .UnscaledValue().ToString()).Equals("11");
            (new DiagBigDecimal.Test(this, "uns023")).ok = ((new IBM.ICU.Math.BigDecimal("-1.00"))
                    .UnscaledValue().ToString()).Equals("-100");
            (new DiagBigDecimal.Test(this, "uns024")).ok = ((new IBM.ICU.Math.BigDecimal("-1.01"))
                    .UnscaledValue().ToString()).Equals("-101");
            (new DiagBigDecimal.Test(this, "uns025")).ok = ((new IBM.ICU.Math.BigDecimal("-1.0"))
                    .UnscaledValue().ToString()).Equals("-10");
            (new DiagBigDecimal.Test(this, "uns026")).ok = ((new IBM.ICU.Math.BigDecimal("-1.1"))
                    .UnscaledValue().ToString()).Equals("-11");
            (new DiagBigDecimal.Test(this, "uns027")).ok = ((new IBM.ICU.Math.BigDecimal("-111.111"))
                    .UnscaledValue().ToString()).Equals("-111111");
            (new DiagBigDecimal.Test(this, "uns028")).ok = ((new IBM.ICU.Math.BigDecimal("+111.111"))
                    .UnscaledValue().ToString()).Equals("111111");
            Summary("unscaledValue");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="M:IBM.ICU.Dev.Test.BigDec.BigDecimal.ValueOf(System.Double)"/> method [long and
        /// double].
        /// </summary>
        ///
        [Test]
        public void Diagvalueof()
        {
            bool flag = false;
            FormatException e = null;
            double dzer;
            double dpos;
            double dneg;
            double dpos5;
            double dneg5;
            double dmin;
            double dmax;
            double d;

            // valueOf(long [,scale]) --

            (new DiagBigDecimal.Test(this, "val001")).ok = (IBM.ICU.Math.BigDecimal
                    .ValueOf((long)((sbyte)-2)).ToString()).Equals("-2");
            (new DiagBigDecimal.Test(this, "val002")).ok = (IBM.ICU.Math.BigDecimal
                    .ValueOf((long)((sbyte)-1)).ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "val003")).ok = (IBM.ICU.Math.BigDecimal
                    .ValueOf((long)((byte)-0)).ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "val004")).ok = (IBM.ICU.Math.BigDecimal
                    .ValueOf((long)((byte)+1)).ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "val005")).ok = (IBM.ICU.Math.BigDecimal
                    .ValueOf((long)((byte)+2)).ToString()).Equals("2");
            (new DiagBigDecimal.Test(this, "val006")).ok = (IBM.ICU.Math.BigDecimal
                    .ValueOf((long)((byte)10)).ToString()).Equals("10");
            (new DiagBigDecimal.Test(this, "val007")).ok = (IBM.ICU.Math.BigDecimal
                    .ValueOf((long)((byte)11)).ToString()).Equals("11");
            (new DiagBigDecimal.Test(this, "val008")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(lmin)
                    .ToString()).Equals("-9223372036854775808");
            (new DiagBigDecimal.Test(this, "val009")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(lmax)
                    .ToString()).Equals("9223372036854775807");
            (new DiagBigDecimal.Test(this, "val010")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(lneg)
                    .ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "val011")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(lzer)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "val012")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(lpos)
                    .ToString()).Equals("1");
            (new DiagBigDecimal.Test(this, "val013")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(lmin, 0)
                    .ToString()).Equals("-9223372036854775808");
            (new DiagBigDecimal.Test(this, "val014")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(lmax, 0)
                    .ToString()).Equals("9223372036854775807");
            (new DiagBigDecimal.Test(this, "val015")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(lneg, 0)
                    .ToString()).Equals("-1");
            (new DiagBigDecimal.Test(this, "val016")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(lpos, 0)
                    .ToString()).Equals("1");

            (new DiagBigDecimal.Test(this, "val017")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(lzer, 0)
                    .ToString()).Equals("0");
            (new DiagBigDecimal.Test(this, "val018")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(lzer, 1)
                    .ToString()).Equals("0.0");
            (new DiagBigDecimal.Test(this, "val019")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(lzer, 2)
                    .ToString()).Equals("0.00");
            (new DiagBigDecimal.Test(this, "val020")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(lzer, 3)
                    .ToString()).Equals("0.000");
            (new DiagBigDecimal.Test(this, "val021")).ok = (IBM.ICU.Math.BigDecimal
                    .ValueOf(lzer, 10).ToString()).Equals("0.0000000000");

            (new DiagBigDecimal.Test(this, "val022")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(lmin, 7)
                    .ToString()).Equals("-922337203685.4775808");
            (new DiagBigDecimal.Test(this, "val023")).ok = (IBM.ICU.Math.BigDecimal
                    .ValueOf(lmax, 11).ToString()).Equals("92233720.36854775807");

            try
            {
                IBM.ICU.Math.BigDecimal.ValueOf((long)23, -8);
                flag = false;
            }
            catch (FormatException _127)
            {
                e = _127;
                flag = (e.Message).Equals("Negative scale: -8");
            }/* checkscale */
            (new DiagBigDecimal.Test(this, "val100")).ok = flag;

            // valueOf(double) --

            dzer = (double)0;
            dpos = (double)1;
            dpos = dpos / ((double)10);
            dneg = (double)-dpos;
            (new DiagBigDecimal.Test(this, "val201")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(dneg)
                    .ToString()).Equals("-0.1");
            (new DiagBigDecimal.Test(this, "val202")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(dzer)
                    .ToString()).Equals("0.0"); // cf. constructor
            (new DiagBigDecimal.Test(this, "val203")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(dpos)
                    .ToString()).Equals("0.1");
            dpos5 = (double)0.5D;
            dneg5 = (double)-dpos5;
            (new DiagBigDecimal.Test(this, "val204")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(dneg5)
                    .ToString()).Equals("-0.5");
            (new DiagBigDecimal.Test(this, "val205")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(dpos5)
                    .ToString()).Equals("0.5");
            dmin = System.Double.MinValue;
            dmax = System.Double.MaxValue;
            (new DiagBigDecimal.Test(this, "val206")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(dmin)
                    .ToString()).Equals("4.9E-324");
            (new DiagBigDecimal.Test(this, "val207")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(dmax)
                    .ToString()).Equals("1.7976931348623157E+308");

            // nasties
            d = (double)9;
            d = d / ((double)10);
            (new DiagBigDecimal.Test(this, "val210")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(d)
                    .ToString()).Equals("0.9");
            d = d / ((double)10);
            (new DiagBigDecimal.Test(this, "val211")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(d)
                    .ToString()).Equals("0.09");
            d = d / ((double)10);
            (new DiagBigDecimal.Test(this, "val212")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(d)
                    .ToString()).Equals("0.0090");
            d = d / ((double)10);
            (new DiagBigDecimal.Test(this, "val213")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(d)
                    .ToString()).Equals("9.0E-4");
            d = d / ((double)10);
            (new DiagBigDecimal.Test(this, "val214")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(d)
                    .ToString()).Equals("8.999999999999999E-5");
            d = d / ((double)10);
            (new DiagBigDecimal.Test(this, "val215")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(d)
                    .ToString()).Equals("8.999999999999999E-6");
            d = d / ((double)10);
            (new DiagBigDecimal.Test(this, "val216")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(d)
                    .ToString()).Equals("8.999999999999999E-7");
            d = d / ((double)10);
            (new DiagBigDecimal.Test(this, "val217")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(d)
                    .ToString()).Equals("8.999999999999999E-8");
            d = d / ((double)10);
            (new DiagBigDecimal.Test(this, "val218")).ok = (IBM.ICU.Math.BigDecimal.ValueOf(d)
                    .ToString()).Equals("8.999999999999998E-9");

            try
            {
                IBM.ICU.Math.BigDecimal
                        .ValueOf(System.Double.PositiveInfinity);
                flag = false;
            }
            catch (FormatException _128)
            {
                flag = true;
            }/* checkpin */
            (new DiagBigDecimal.Test(this, "val301")).ok = flag;
            try
            {
                IBM.ICU.Math.BigDecimal
                        .ValueOf(System.Double.NegativeInfinity);
                flag = false;
            }
            catch (FormatException _129)
            {
                flag = true;
            }/* checknin */
            (new DiagBigDecimal.Test(this, "val302")).ok = flag;
            try
            {
                IBM.ICU.Math.BigDecimal.ValueOf(System.Double.NaN);
                flag = false;
            }
            catch (FormatException _130)
            {
                flag = true;
            }/* checknan */
            (new DiagBigDecimal.Test(this, "val303")).ok = flag;

            Summary("valueOf");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test the <see cref="T:IBM.ICU.Dev.Test.BigDec.MathContext"/> class. 
        /// </summary>
        ///
        [Test]
        public void Diagmathcontext()
        {
            IBM.ICU.Math.MathContext mccon1;
            IBM.ICU.Math.MathContext mccon2;
            IBM.ICU.Math.MathContext mccon3;
            IBM.ICU.Math.MathContext mccon4;
            IBM.ICU.Math.MathContext mcrmc;
            IBM.ICU.Math.MathContext mcrmd;
            IBM.ICU.Math.MathContext mcrmf;
            IBM.ICU.Math.MathContext mcrmhd;
            IBM.ICU.Math.MathContext mcrmhe;
            IBM.ICU.Math.MathContext mcrmhu;
            IBM.ICU.Math.MathContext mcrmun;
            IBM.ICU.Math.MathContext mcrmu;
            bool flag = false;
            ArgumentException e = null;
            // these tests are mostly existence checks
            (new DiagBigDecimal.Test(this, "mcn001")).ok = (IBM.ICU.Math.MathContext.DEFAULT
                    .GetDigits()) == 9;
            (new DiagBigDecimal.Test(this, "mcn002")).ok = (IBM.ICU.Math.MathContext.DEFAULT
                    .GetForm()) == IBM.ICU.Math.MathContext.SCIENTIFIC;
            (new DiagBigDecimal.Test(this, "mcn003")).ok = (IBM.ICU.Math.MathContext.DEFAULT
                    .GetForm()) != IBM.ICU.Math.MathContext.ENGINEERING;
            (new DiagBigDecimal.Test(this, "mcn004")).ok = (IBM.ICU.Math.MathContext.DEFAULT
                    .GetForm()) != IBM.ICU.Math.MathContext.PLAIN;
            (new DiagBigDecimal.Test(this, "mcn005")).ok = ((IBM.ICU.Math.MathContext.DEFAULT
                    .GetLostDigits()) ? 1 : 0) == 0;
            (new DiagBigDecimal.Test(this, "mcn006")).ok = (IBM.ICU.Math.MathContext.DEFAULT
                    .GetRoundingMode()) == IBM.ICU.Math.MathContext.ROUND_HALF_UP;

            (new DiagBigDecimal.Test(this, "mcn010")).ok = IBM.ICU.Math.MathContext.ROUND_CEILING >= 0;
            (new DiagBigDecimal.Test(this, "mcn011")).ok = IBM.ICU.Math.MathContext.ROUND_DOWN >= 0;
            (new DiagBigDecimal.Test(this, "mcn012")).ok = IBM.ICU.Math.MathContext.ROUND_FLOOR >= 0;
            (new DiagBigDecimal.Test(this, "mcn013")).ok = IBM.ICU.Math.MathContext.ROUND_HALF_DOWN >= 0;
            (new DiagBigDecimal.Test(this, "mcn014")).ok = IBM.ICU.Math.MathContext.ROUND_HALF_EVEN >= 0;
            (new DiagBigDecimal.Test(this, "mcn015")).ok = IBM.ICU.Math.MathContext.ROUND_HALF_UP >= 0;
            (new DiagBigDecimal.Test(this, "mcn016")).ok = IBM.ICU.Math.MathContext.ROUND_UNNECESSARY >= 0;
            (new DiagBigDecimal.Test(this, "mcn017")).ok = IBM.ICU.Math.MathContext.ROUND_UP >= 0;

            mccon1 = new IBM.ICU.Math.MathContext(111);
            (new DiagBigDecimal.Test(this, "mcn021")).ok = (mccon1.GetDigits()) == 111;
            (new DiagBigDecimal.Test(this, "mcn022")).ok = (mccon1.GetForm()) == IBM.ICU.Math.MathContext.SCIENTIFIC;
            (new DiagBigDecimal.Test(this, "mcn023")).ok = ((mccon1.GetLostDigits()) ? 1 : 0) == 0;
            (new DiagBigDecimal.Test(this, "mcn024")).ok = (mccon1.GetRoundingMode()) == IBM.ICU.Math.MathContext.ROUND_HALF_UP;

            mccon2 = new IBM.ICU.Math.MathContext(78,
                    IBM.ICU.Math.MathContext.ENGINEERING);
            (new DiagBigDecimal.Test(this, "mcn031")).ok = (mccon2.GetDigits()) == 78;
            (new DiagBigDecimal.Test(this, "mcn032")).ok = (mccon2.GetForm()) == IBM.ICU.Math.MathContext.ENGINEERING;
            (new DiagBigDecimal.Test(this, "mcn033")).ok = ((mccon2.GetLostDigits()) ? 1 : 0) == 0;
            (new DiagBigDecimal.Test(this, "mcn034")).ok = (mccon2.GetRoundingMode()) == IBM.ICU.Math.MathContext.ROUND_HALF_UP;

            mccon3 = new IBM.ICU.Math.MathContext(5,
                    IBM.ICU.Math.MathContext.PLAIN, true);
            (new DiagBigDecimal.Test(this, "mcn041")).ok = (mccon3.GetDigits()) == 5;
            (new DiagBigDecimal.Test(this, "mcn042")).ok = (mccon3.GetForm()) == IBM.ICU.Math.MathContext.PLAIN;
            (new DiagBigDecimal.Test(this, "mcn043")).ok = ((mccon3.GetLostDigits()) ? 1 : 0) == 1;
            (new DiagBigDecimal.Test(this, "mcn044")).ok = (mccon3.GetRoundingMode()) == IBM.ICU.Math.MathContext.ROUND_HALF_UP;

            mccon4 = new IBM.ICU.Math.MathContext(0,
                    IBM.ICU.Math.MathContext.SCIENTIFIC, false,
                    IBM.ICU.Math.MathContext.ROUND_FLOOR);
            (new DiagBigDecimal.Test(this, "mcn051")).ok = (mccon4.GetDigits()) == 0;
            (new DiagBigDecimal.Test(this, "mcn052")).ok = (mccon4.GetForm()) == IBM.ICU.Math.MathContext.SCIENTIFIC;
            (new DiagBigDecimal.Test(this, "mcn053")).ok = ((mccon4.GetLostDigits()) ? 1 : 0) == 0;
            (new DiagBigDecimal.Test(this, "mcn054")).ok = (mccon4.GetRoundingMode()) == IBM.ICU.Math.MathContext.ROUND_FLOOR;

            (new DiagBigDecimal.Test(this, "mcn061")).ok = (mccon1.ToString())
                    .Equals("digits=111 form=SCIENTIFIC lostDigits=0 roundingMode=ROUND_HALF_UP");

            (new DiagBigDecimal.Test(this, "mcn062")).ok = (mccon2.ToString())
                    .Equals("digits=78 form=ENGINEERING lostDigits=0 roundingMode=ROUND_HALF_UP");

            (new DiagBigDecimal.Test(this, "mcn063")).ok = (mccon3.ToString())
                    .Equals("digits=5 form=PLAIN lostDigits=1 roundingMode=ROUND_HALF_UP");

            (new DiagBigDecimal.Test(this, "mcn064")).ok = (mccon4.ToString())
                    .Equals("digits=0 form=SCIENTIFIC lostDigits=0 roundingMode=ROUND_FLOOR");

            // complete testing rounding modes round trips
            mcrmc = new IBM.ICU.Math.MathContext(0,
                    IBM.ICU.Math.MathContext.PLAIN, false,
                    IBM.ICU.Math.MathContext.ROUND_CEILING);
            mcrmd = new IBM.ICU.Math.MathContext(0,
                    IBM.ICU.Math.MathContext.PLAIN, false,
                    IBM.ICU.Math.MathContext.ROUND_DOWN);
            mcrmf = new IBM.ICU.Math.MathContext(0,
                    IBM.ICU.Math.MathContext.PLAIN, false,
                    IBM.ICU.Math.MathContext.ROUND_FLOOR);
            mcrmhd = new IBM.ICU.Math.MathContext(0,
                    IBM.ICU.Math.MathContext.PLAIN, false,
                    IBM.ICU.Math.MathContext.ROUND_HALF_DOWN);
            mcrmhe = new IBM.ICU.Math.MathContext(0,
                    IBM.ICU.Math.MathContext.PLAIN, false,
                    IBM.ICU.Math.MathContext.ROUND_HALF_EVEN);
            mcrmhu = new IBM.ICU.Math.MathContext(0,
                    IBM.ICU.Math.MathContext.PLAIN, false,
                    IBM.ICU.Math.MathContext.ROUND_HALF_UP);
            mcrmun = new IBM.ICU.Math.MathContext(0,
                    IBM.ICU.Math.MathContext.PLAIN, false,
                    IBM.ICU.Math.MathContext.ROUND_UNNECESSARY);
            mcrmu = new IBM.ICU.Math.MathContext(0,
                    IBM.ICU.Math.MathContext.PLAIN, false,
                    IBM.ICU.Math.MathContext.ROUND_UP);

            (new DiagBigDecimal.Test(this, "mcn071")).ok = (mcrmc.ToString())
                    .Equals("digits=0 form=PLAIN lostDigits=0 roundingMode=ROUND_CEILING");

            (new DiagBigDecimal.Test(this, "mcn072")).ok = (mcrmd.ToString())
                    .Equals("digits=0 form=PLAIN lostDigits=0 roundingMode=ROUND_DOWN");

            (new DiagBigDecimal.Test(this, "mcn073")).ok = (mcrmf.ToString())
                    .Equals("digits=0 form=PLAIN lostDigits=0 roundingMode=ROUND_FLOOR");

            (new DiagBigDecimal.Test(this, "mcn074")).ok = (mcrmhd.ToString())
                    .Equals("digits=0 form=PLAIN lostDigits=0 roundingMode=ROUND_HALF_DOWN");

            (new DiagBigDecimal.Test(this, "mcn075")).ok = (mcrmhe.ToString())
                    .Equals("digits=0 form=PLAIN lostDigits=0 roundingMode=ROUND_HALF_EVEN");

            (new DiagBigDecimal.Test(this, "mcn076")).ok = (mcrmhu.ToString())
                    .Equals("digits=0 form=PLAIN lostDigits=0 roundingMode=ROUND_HALF_UP");

            (new DiagBigDecimal.Test(this, "mcn077")).ok = (mcrmun.ToString())
                    .Equals("digits=0 form=PLAIN lostDigits=0 roundingMode=ROUND_UNNECESSARY");

            (new DiagBigDecimal.Test(this, "mcn078")).ok = (mcrmu.ToString())
                    .Equals("digits=0 form=PLAIN lostDigits=0 roundingMode=ROUND_UP");

            // [get methods tested already]

            // errors...

            try
            {
                new IBM.ICU.Math.MathContext(-1);
                flag = false;
            }
            catch (ArgumentException _131)
            {
                e = _131;
                flag = (e.Message).Equals("Digits too small: -1");
            }/* checkdig */
            (new DiagBigDecimal.Test(this, "mcn101")).ok = flag;
            try
            {
                new IBM.ICU.Math.MathContext(1000000000);
                flag = false;
            }
            catch (ArgumentException _132)
            {
                e = _132;
                flag = (e.Message).Equals("Digits too large: 1000000000");
            }/* checkdigbig */
            (new DiagBigDecimal.Test(this, "mcn102")).ok = flag;

            try
            {
                new IBM.ICU.Math.MathContext(0, 5);
                flag = false;
            }
            catch (ArgumentException _133)
            {
                e = _133;
                flag = (e.Message).Equals("Bad form value: 5");
            }/* checkform */
            (new DiagBigDecimal.Test(this, "mcn111")).ok = flag;
            try
            {
                new IBM.ICU.Math.MathContext(0, -1);
                flag = false;
            }
            catch (ArgumentException _134)
            {
                e = _134;
                flag = (e.Message).Equals("Bad form value: -1");
            }/* checkformneg */
            (new DiagBigDecimal.Test(this, "mcn112")).ok = flag;

            // [lostDigits cannot be invalid]

            try
            {
                new IBM.ICU.Math.MathContext(0,
                        IBM.ICU.Math.MathContext.PLAIN, false, 12);
                flag = false;
            }
            catch (ArgumentException _135)
            {
                e = _135;
                flag = (e.Message).Equals("Bad roundingMode value: 12");
            }/* checkround */
            (new DiagBigDecimal.Test(this, "mcn121")).ok = flag;
            try
            {
                new IBM.ICU.Math.MathContext(0,
                        IBM.ICU.Math.MathContext.PLAIN, false, -1);
                flag = false;
            }
            catch (ArgumentException _136)
            {
                e = _136;
                flag = (e.Message).Equals("Bad roundingMode value: -1");
            }/* checkroundneg */
            (new DiagBigDecimal.Test(this, "mcn122")).ok = flag;

            Summary("MathContext");
        }

        /* ----------------------------------------------------------------- */

        /// <summary>
        /// Test general arithmetic (base operators).
        /// <p>
        /// Unlike the specific method tests, these tests were randomly generated by
        /// an IBM Object Rexx procedure, then manually corrected for known
        /// differences from ANSI X3-274. These differences are:
        /// <ol>
        /// <li>the trigger point in exponential notation is fixed in ANSI X3-274 but
        /// varies with DIGITS in Classic and Object Rexx
        /// <li>some trailing zeros were missing (e.g., 1.3 + 1E-60 should show seven
        /// trailing zeros)
        /// <li>the power operator is less accurate in Object Rexx
        /// <li>ANSI X3-274 [errata 1999] rounds input numbers to DIGITS (rather than
        /// truncating to DIGITS+1).
        /// </ol>
        /// </summary>
        ///
        [Test]
        public void Diagmath()
        {
            IBM.ICU.Math.MathContext def;
            def = IBM.ICU.Math.MathContext.DEFAULT;
            Mathtest(1, def, "-9375284.42", "5516.99832E+27276984",
                    "5.51699832E+27276987", "-5.51699832E+27276987",
                    "-5.17234284E+27276994", "-1.69934516E-27276981", "0",
                    "-9375284.42", "6.79057752E+41");
            Mathtest(2, def, "-410.832710", "99.3588243E-502740862", "-410.832710",
                    "-410.832710", "-4.08198550E-502740858",
                    "-4.13483868E+502740862", "", "", "1.36977786E+26");
            Mathtest(3, def, "80025.2340", "-8.03097581", "80017.2030",
                    "80033.2650", "-642680.718", "-9964.57167", "-9964",
                    "4.59102916", "5.94544517E-40");
            Mathtest(4, def, "81052020.2", "-464525495", "-383473475", "545577515",
                    "-3.76507298E+16", "-0.17448347", "0", "81052020.2", "");
            Mathtest(5, def, "715.069294E-26923151", "85.4404128E+796388557",
                    "8.54404128E+796388558", "-8.54404128E+796388558",
                    "6.10958157E+769465410", "8.36921628E-823311708", "0",
                    "7.15069294E-26923149", "4.88802213E-242308334");
            Mathtest(6, def, "-21971575.0E+31454441", "-70944960.3E+111238221",
                    "-7.09449603E+111238228", "7.09449603E+111238228",
                    "1.55877252E+142692677", "3.09698884E-79783781", "0",
                    "-2.19715750E+31454448", "-4.04549502E-220181139");
            Mathtest(7, def, "682.25316", "54470185.6", "54470867.9",
                    "-54469503.4", "3.71624563E+10", "0.0000125252586", "0",
                    "682.25316", "3.48578699E+154365541");
            Mathtest(8, def, "-257586757.", "2082888.71", "-255503868",
                    "-259669646", "-5.36524548E+14", "-123.668036", "-123",
                    "-1391445.67", "-1.26879515E+17519020");
            Mathtest(9, def, "319577540.E+242599761", "60.7124561",
                    "3.19577540E+242599769", "3.19577540E+242599769",
                    "1.94023374E+242599771", "5.26378869E+242599767", "", "", "");
            Mathtest(10, def, "-13769977.0", "24371.3381", "-13745605.7",
                    "-13794348.3", "-3.35592765E+11", "-565.007015", "-565",
                    "-170.9735", "-8.73734001E+173982");
            Mathtest(11, def, "-475.434972E-725464311", "-3.22214066E-865476836",
                    "-4.75434972E-725464309", "-4.75434972E-725464309", "",
                    "1.47552519E+140012527", "", "", "");
            Mathtest(12, def, "842.01250", "197199893", "197200735", "-197199051",
                    "1.66044775E+11", "0.00000426984258", "0", "842.01250",
                    "7.00674164E+576872502");
            Mathtest(13, def, "572.173103E+280128428", "-7140.19428",
                    "5.72173103E+280128430", "5.72173103E+280128430",
                    "-4.08542712E+280128434", "-8.01341085E+280128426", "", "", "");
            Mathtest(14, def, "674235.954E+476135291", "9684.82245",
                    "6.74235954E+476135296", "6.74235954E+476135296",
                    "6.52985550E+476135300", "6.96177919E+476135292", "", "", "");
            Mathtest(15, def, "-360557.921E+437116514", "930428850",
                    "-3.60557921E+437116519", "-3.60557921E+437116519",
                    "-3.35473492E+437116528", "-3.87517993E+437116510", "", "", "");
            Mathtest(16, def, "957165918E-394595705", "1676.59073E-829618944",
                    "9.57165918E-394595697", "9.57165918E-394595697", "",
                    "5.70900161E+435023244", "", "", "9.16166595E-789191393");
            Mathtest(17, def, "-2610864.40", "31245912.7", "28635048.3",
                    "-33856777.1", "-8.15788411E+13", "-0.0835585897", "0",
                    "-2610864.40", "-3.12008905E+200498284");
            Mathtest(18, def, "959.548461", "98.994577E+776775426",
                    "9.89945770E+776775427", "-9.89945770E+776775427",
                    "9.49900940E+776775430", "9.69293965E-776775426", "0",
                    "959.548461", "6.61712185E+29");
            Mathtest(19, def, "-41085.0268", "3115477.61", "3074392.58",
                    "-3156562.64", "-1.27999481E+11", "-0.0131873927", "0",
                    "-41085.0268", "4.73844173E+14373829");
            Mathtest(20, def, "-723420285.", "2681660.35", "-720738625",
                    "-726101945", "-1.93996749E+15", "-269.765813", "-269",
                    "-2053650.85", "4.14324113E+23757873");
            Mathtest(21, def, "63542018.0E-817732230", "-8836243.22",
                    "-8836243.22", "8836243.22", "-5.61472726E-817732216",
                    "-7.19106711E-817732230", "0", "6.35420180E-817732223", "");
            Mathtest(22, def, "-96051.7108", "-291201.955", "-387253.666",
                    "195150.244", "2.79704460E+10", "0.329845694", "0",
                    "-96051.7108", "3.53617153E-1450916");
            Mathtest(23, def, "108490.853", "91685996.5", "91794487.4",
                    "-91577505.7", "9.94709197E+12", "0.00118328706", "0",
                    "108490.853", "6.98124265E+461675038");
            Mathtest(24, def, "-27489.1735", "-9835835.4E-506411649",
                    "-27489.1735", "-27489.1735", "2.70378986E-506411638",
                    "2.79479804E+506411646", "", "", "4.05866472E-45");
            Mathtest(25, def, "-89220406.6", "993391.008E-611041175",
                    "-89220406.6", "-89220406.6", "-8.86307496E-611041162",
                    "-8.98139865E+611041176", "", "", "3.19625913E+79");
            Mathtest(26, def, "4.75502020", "-17089144.9", "-17089140.2",
                    "17089149.7", "-81259229.2", "-2.78247989E-7", "0",
                    "4.75502020", "1.0630191E-11571955");
            Mathtest(27, def, "68027916.2", "-796883.839", "67231032.4",
                    "68824800.0", "-5.42103470E+13", "-85.3674185", "-85",
                    "292789.885", "8.29415374E-6241744");
            Mathtest(28, def, "-8.01969439E+788605478", "92154156.0",
                    "-8.01969439E+788605478", "-8.01969439E+788605478",
                    "-7.39048168E+788605486", "-8.70247717E+788605470", "", "", "");
            Mathtest(29, def, "-8012.98341", "96188.8651", "88175.8817",
                    "-104201.849", "-770759780", "-0.0833046881", "0",
                    "-8012.98341", "-1.16010156E+375502");
            Mathtest(30, def, "21761476E+592330677", "-9.70744506",
                    "2.17614760E+592330684", "2.17614760E+592330684",
                    "-2.11248333E+592330685", "-2.24173053E+592330683", "", "", "");
            Mathtest(31, def, "-9840778.51", "-17907.219", "-9858685.73",
                    "-9822871.29", "1.76220976E+11", "549.542534", "549",
                    "-9715.279", "-6.62997437E-125225");
            Mathtest(32, def, "-4.1097614", "-819.225776E-145214751",
                    "-4.10976140", "-4.10976140", "3.36682247E-145214748",
                    "5.01664074E+145214748", "", "", "0.0000122876018");
            Mathtest(33, def, "-448.880985", "-394.087374E-442511435",
                    "-448.880985", "-448.880985", "1.76898329E-442511430",
                    "1.13903925E+442511435", "", "", "2.46306099E-11");
            Mathtest(34, def, "779.445304E+882688544", "-797868519",
                    "7.79445304E+882688546", "7.79445304E+882688546",
                    "-6.21894870E+882688555", "-9.7690946E+882688537", "", "", "");
            Mathtest(35, def, "799995477", "-6.23675208E+156309440",
                    "-6.23675208E+156309440", "6.23675208E+156309440",
                    "-4.98937346E+156309449", "-1.28271169E-156309432", "0",
                    "799995477", "3.81482667E-54");
            Mathtest(36, def, "-51932.8170", "591840275E-278480289", "-51932.8170",
                    "-51932.8170", "-3.07359327E-278480276",
                    "-8.7748028E+278480284", "", "", "1.96178443E+28");
            Mathtest(37, def, "70.3552392", "-4228656.73", "-4228586.38",
                    "4228727.09", "-297508156", "-0.0000166377277", "0",
                    "70.3552392", "9.14742382E-7811584");
            Mathtest(38, def, "1588359.34", "-12232799.2", "-10644439.9",
                    "13821158.5", "-1.94300809E+13", "-0.129844307", "0",
                    "1588359.34", "1.56910086E-75854960");
            Mathtest(39, def, "2842.16206", "-3.23234345", "2838.92972",
                    "2845.39440", "-9186.84392", "-879.288388", "-879",
                    "0.93216745", "4.35565514E-11");
            Mathtest(40, def, "29960.2305", "45.2735747E-95205475", "29960.2305",
                    "29960.2305", "1.35640673E-95205469", "6.61759773E+95205477",
                    "", "", "2.413936E+22");
            Mathtest(41, def, "2916565.77", "1151935.43E-787118724", "2916565.77",
                    "2916565.77", "3.35969544E-787118712", "2.53188303E+787118724",
                    "", "", "2916565.77");
            Mathtest(42, def, "-52723012.9E-967143787", "79.4088237", "79.4088237",
                    "-79.4088237", "-4.18667244E-967143778",
                    "-6.63944011E-967143782", "0", "-5.27230129E-967143780", "");
            Mathtest(43, def, "-167473465", "793646.597", "-166679819",
                    "-168267112", "-1.32914746E+14", "-211.017682", "-211",
                    "-14033.033", "-1.19053789E+6526910");
            Mathtest(44, def, "-31769071.0", "133.4360", "-31768937.6",
                    "-31769204.4", "-4.23913776E+9", "-238084.707", "-238084",
                    "-94.3760", "-5.84252432E+997");
            Mathtest(45, def, "45960.6383", "-93352.7468", "-47392.1085",
                    "139313.385", "-4.29055183E+9", "-0.492333004", "0",
                    "45960.6383", "1.88335323E-435248");
            Mathtest(46, def, "606.175648", "5.28528458E-981983620", "606.175648",
                    "606.175648", "3.20381081E-981983617", "1.14691203E+981983622",
                    "", "", "8.18450516E+13");
            Mathtest(47, def, "171578.617E+643006110", "-407774.293",
                    "1.71578617E+643006115", "1.71578617E+643006115",
                    "-6.99653492E+643006120", "-4.20768597E+643006109", "", "", "");
            Mathtest(48, def, "-682286332.", "-464.871699", "-682286797",
                    "-682285867", "3.17175606E+11", "1467687.39", "1467687",
                    "-182.709787", "-1.6050843E-4108");
            Mathtest(49, def, "492088.428", "653.72170", "492742.150",
                    "491434.706", "321688884", "752.74911", "752", "489.70960",
                    "3.94658596E+3722");
            Mathtest(50, def, "74303782.5", "1141.68058", "74304924.2",
                    "74302640.8", "8.48311855E+10", "65082.812", "65082",
                    "926.99244", "4.94849869E+8988");
            Mathtest(51, def, "74.7794084E+119375329", "-34799355.6",
                    "7.47794084E+119375330", "7.47794084E+119375330",
                    "-2.60227522E+119375338", "-2.14887337E+119375323", "", "", "");
            Mathtest(52, def, "-9432.08369", "33735.5058", "24303.4221",
                    "-43167.5895", "-318196114", "-0.279589218", "0",
                    "-9432.08369", "2.309567E+134087");
            Mathtest(53, def, "4249198.78E-112433155", "418673051.", "418673051",
                    "-418673051", "1.77902502E-112433140", "1.01492054E-112433157",
                    "0", "4.24919878E-112433149", "");
            Mathtest(54, def, "-2960933.02", "-207933.38", "-3168866.40",
                    "-2752999.64", "6.15676811E+11", "14.2398158", "14",
                    "-49865.70", "-2.75680397E-1345624");
            Mathtest(55, def, "29317.7519E+945600035", "1.43555750",
                    "2.93177519E+945600039", "2.93177519E+945600039",
                    "4.20873186E+945600039", "2.04225549E+945600039", "", "",
                    "2.93177519E+945600039");
            Mathtest(56, def, "-51.1693770", "-638055.414", "-638106.583",
                    "638004.245", "32648898.0", "0.0000801958198", "0",
                    "-51.1693770", "-3.48266075E-1090443");
            Mathtest(57, def, "-756343055.", "-68.9248344E+217100975",
                    "-6.89248344E+217100976", "6.89248344E+217100976",
                    "5.21308198E+217100985", "1.09734475E-217100968", "0",
                    "-756343055", "-7.06265897E-63");
            Mathtest(58, def, "2538.80406E+694185197", "-3386499.65",
                    "2.53880406E+694185200", "2.53880406E+694185200",
                    "-8.59765906E+694185206", "-7.49683839E+694185193", "", "", "");
            Mathtest(59, def, "-54344.0672", "-8086.45235", "-62430.5196",
                    "-46257.6149", "439450710", "6.72038427", "6", "-5825.35310",
                    "3.62916861E-38289");
            Mathtest(60, def, "3.31600054", "217481648", "217481651", "-217481645",
                    "721169262", "1.5247266E-8", "0", "3.31600054",
                    "3.73134969E+113224119");
            Mathtest(61, def, "681832.671", "320341.161E+629467560",
                    "3.20341161E+629467565", "-3.20341161E+629467565",
                    "2.18419069E+629467571", "2.12845789E-629467560", "0",
                    "681832.671", "3.16981139E+17");
            Mathtest(62, def, "832689481", "348040024E-882122501", "832689481",
                    "832689481", "2.89809267E-882122484", "2.3925107E+882122501",
                    "", "", "5.77363381E+26");
            Mathtest(63, def, "14.5512326E+257500811", "60.9979577E-647314724",
                    "1.45512326E+257500812", "1.45512326E+257500812",
                    "8.87595471E-389813911", "2.38552784E+904815534", "", "", "");
            Mathtest(64, def, "-901.278844", "449461667.", "449460766",
                    "-449462568", "-4.05090292E+11", "-0.00000200524074", "0",
                    "-901.278844", "");
            Mathtest(65, def, "-5.32627675", "-738860216E-238273224",
                    "-5.32627675", "-5.32627675", "3.93537399E-238273215",
                    "7.20877459E+238273215", "", "", "-0.00000822306838");
            Mathtest(66, def, "-505383463.", "3.18756328", "-505383460",
                    "-505383466", "-1.61094177E+9", "-158548527", "-158548527",
                    "-0.23671144", "-1.29081226E+26");
            Mathtest(67, def, "769241.44E-720927320", "-145382631.", "-145382631",
                    "145382631", "-1.11834344E-720927306",
                    "-5.29115091E-720927323", "0", "7.6924144E-720927315", "");
            Mathtest(68, def, "-6.45038910", "56736.4411E+440937167",
                    "5.67364411E+440937171", "-5.67364411E+440937171",
                    "-3.65972121E+440937172", "-1.13690407E-440937171", "0",
                    "-6.45038910", "72030.3421");
            Mathtest(69, def, "58.4721075", "-712186829", "-712186771",
                    "712186887", "-4.16430648E+10", "-8.21022028E-8", "0",
                    "58.4721075", "");
            Mathtest(70, def, "8244.08357", "245.302828E+652007959",
                    "2.45302828E+652007961", "-2.45302828E+652007961",
                    "2.02229701E+652007965", "3.36077804E-652007958", "0",
                    "8244.08357", "67964913.9");
            Mathtest(71, def, "45.5361397", "-76579063.9", "-76579018.4",
                    "76579109.4", "-3.48711495E+9", "-5.94629098E-7", "0",
                    "45.5361397", "3.98335374E-126995367");
            Mathtest(72, def, "594420.54E+685263039", "-952420.179",
                    "5.94420540E+685263044", "5.94420540E+685263044",
                    "-5.66138117E+685263050", "-6.24115861E+685263038", "", "", "");
            Mathtest(73, def, "-841310701.", "9398110.4", "-831912591",
                    "-850708811", "-7.90673085E+15", "-89.5191337", "-89",
                    "-4878875.4", "1.30001466E+83877722");
            Mathtest(74, def, "904392146E-140100276", "168116093.", "168116093",
                    "-168116093", "1.52042874E-140100259", "5.37956914E-140100276",
                    "0", "9.04392146E-140100268", "");
            Mathtest(75, def, "-907324792E+685539670", "-15.6902171",
                    "-9.07324792E+685539678", "-9.07324792E+685539678",
                    "1.42361230E+685539680", "5.78274211E+685539677", "", "", "");
            Mathtest(76, def, "987013606.", "-26818.3572E+560907442",
                    "-2.68183572E+560907446", "2.68183572E+560907446",
                    "-2.64700834E+560907455", "-3.68036565E-560907438", "0",
                    "987013606", "1.0399934E-27");
            Mathtest(77, def, "-741317564", "630.241530E-212782946", "-741317564",
                    "-741317564", "-4.67209116E-212782935",
                    "-1.1762436E+212782952", "", "", "1.65968527E+53");
            Mathtest(78, def, "61867907.2", "-139204670", "-77336763", "201072577",
                    "-8.61230161E+15", "-0.444438446", "0", "61867907.2", "");
            Mathtest(79, def, "-273.622743E+531282717", "-4543.68684",
                    "-2.73622743E+531282719", "-2.73622743E+531282719",
                    "1.24325606E+531282723", "6.02204229E+531282715", "", "", "");
            Mathtest(80, def, "-383588949.", "-428640583.", "-812229532",
                    "45051634", "1.64421791E+17", "0.89489648", "0", "-383588949",
                    "");
            Mathtest(81, def, "-56182.2686", "32.7741649", "-56149.4944",
                    "-56215.0428", "-1841326.94", "-1714.22426", "-1714",
                    "-7.3499614", "-5.45476402E+156");
            Mathtest(82, def, "-6366384.30", "332014.980", "-6034369.32",
                    "-6698399.28", "-2.11373496E+12", "-19.1749911", "-19",
                    "-58099.680", "-3.05392399E+2258994");
            Mathtest(83, def, "-1.27897702", "-8213776.03E-686519123",
                    "-1.27897702", "-1.27897702", "1.05052308E-686519116",
                    "1.55711212E+686519116", "", "", "0.139668371");
            Mathtest(84, def, "65.4059036", "401162145E+884155506",
                    "4.01162145E+884155514", "-4.01162145E+884155514",
                    "2.62383726E+884155516", "1.63041066E-884155513", "0",
                    "65.4059036", "18300704.1");
            Mathtest(85, def, "-20630916.8", "158987411.E-480500612",
                    "-20630916.8", "-20630916.8", "-3.28005605E-480500597",
                    "-1.29764468E+480500611", "", "", "4.25634728E+14");
            Mathtest(86, def, "-4.72705853", "-97626742.4", "-97626747.1",
                    "97626737.7", "461487325", "4.84197097E-8", "0", "-4.72705853",
                    "2.92654449E-65858120");
            Mathtest(87, def, "8.43528169", "-4573.45752", "-4565.02224",
                    "4581.89280", "-38578.4025", "-0.00184439927", "0",
                    "8.43528169", "8.84248688E-4236");
            Mathtest(88, def, "1.91075189", "-704247089.", "-704247087",
                    "704247091", "-1.34564146E+9", "-2.71318394E-9", "0",
                    "1.91075189", "6.84547494E-198037309");
            Mathtest(89, def, "31997198E-551746308", "326.892584", "326.892584",
                    "-326.892584", "1.04596467E-551746298",
                    "9.78829119E-551746304", "0", "3.1997198E-551746301", "");
            Mathtest(90, def, "127589.213", "84184304.", "84311893.2",
                    "-84056714.8", "1.07410091E+13", "0.00151559385", "0",
                    "127589.213", "2.87917042E+429829394");
            Mathtest(91, def, "714494248", "-7025063.59", "707469185", "721519312",
                    "-5.01936753E+15", "-101.706446", "-101", "4962825.41",
                    "1.65018516E-62199908");
            Mathtest(92, def, "-52987680.2E+279533503", "-42014114.8",
                    "-5.29876802E+279533510", "-5.29876802E+279533510",
                    "2.22623048E+279533518", "1.26118759E+279533503", "", "", "");
            Mathtest(93, def, "-8795.0513", "-225294.394E-884414238",
                    "-8795.05130", "-8795.05130", "1.98147575E-884414229",
                    "3.90380388E+884414236", "", "", "1.2927759E-8");
            Mathtest(94, def, "83280.1394", "161566354.", "161649634",
                    "-161483074", "1.34552685E+13", "0.000515454718", "0",
                    "83280.1394", "5.30774809E+794993940");
            Mathtest(95, def, "112.877897", "-9.96481666", "102.913080",
                    "122.842714", "-1124.80755", "-11.3276441", "-11",
                    "3.26491374", "2.97790545E-21");
            Mathtest(96, def, "-572542.121E+847487397", "433.843420",
                    "-5.72542121E+847487402", "-5.72542121E+847487402",
                    "-2.48393632E+847487405", "-1.3196976E+847487400", "", "", "");
            Mathtest(97, def, "4709649.89", "20949266.4", "25658916.3",
                    "-16239616.5", "9.86637102E+13", "0.224812163", "0",
                    "4709649.89", "4.85293644E+139794213");
            Mathtest(98, def, "-9475.19322", "-30885.2475E+584487341",
                    "-3.08852475E+584487345", "3.08852475E+584487345",
                    "2.92643688E+584487349", "3.06787026E-584487342", "0",
                    "-9475.19322", "-1.17553557E-12");
            Mathtest(99, def, "-213230447.", "864.815822E+127783046",
                    "8.64815822E+127783048", "-8.64815822E+127783048",
                    "-1.84405064E+127783057", "-2.46561686E-127783041", "0",
                    "-213230447", "-9.11261361E+74");
            Mathtest(100, def, "-89.1168786E+403375873", "6464.05744",
                    "-8.91168786E+403375874", "-8.91168786E+403375874",
                    "-5.76056622E+403375878", "-1.37865233E+403375871", "", "", "");
            Mathtest(101, def, "61774.4958", "-14000.7706", "47773.7252",
                    "75775.2664", "-864890545", "-4.41222112", "-4", "5771.4134",
                    "7.59030407E-67077");
            Mathtest(102, def, "1.60731414", "7.04330293E-427033419", "1.60731414",
                    "1.60731414", "1.13208004E-427033418", "2.28204602E+427033418",
                    "", "", "27.7143921");
            Mathtest(103, def, "7955012.51", "-230117662.", "-222162650",
                    "238072675", "-1.83058888E+15", "-0.0345693261", "0",
                    "7955012.51", "");
            Mathtest(104, def, "4086661.08", "1.77621994", "4086662.86",
                    "4086659.30", "7258808.90", "2300762.98", "2300762",
                    "1.73840572", "1.67007988E+13");
            Mathtest(105, def, "-610.076931", "-207.658306", "-817.735237",
                    "-402.418625", "126687.542", "2.93788841", "2", "-194.760319",
                    "4.36518377E-580");
            Mathtest(106, def, "-98.6353697", "-99253.3899E-716309653",
                    "-98.6353697", "-98.6353697", "9.78989481E-716309647",
                    "9.93773309E+716309649", "", "", "1.14729007E-20");
            Mathtest(107, def, "-959923730", "409.125542E-900295528", "-959923730",
                    "-959923730", "-3.92729316E-900295517",
                    "-2.3462816E+900295534", "", "", "8.49076677E+35");
            Mathtest(108, def, "379965133", "-8.15869657", "379965125",
                    "379965141", "-3.10002023E+9", "-46571793.6", "-46571793",
                    "5.19214999", "2.30170697E-69");
            Mathtest(109, def, "833.646797", "1389499.46E-443407251", "833.646797",
                    "833.646797", "1.15835177E-443407242", "5.99961944E+443407247",
                    "", "", "833.646797");
            Mathtest(110, def, "2314933.4E-646489194", "-7401538.17",
                    "-7401538.17", "7401538.17", "-1.71340679E-646489181",
                    "-3.12763826E-646489195", "0", "2.3149334E-646489188", "");
            Mathtest(111, def, "808525347", "-5959.74667E+58232168",
                    "-5.95974667E+58232171", "5.95974667E+58232171",
                    "-4.81860624E+58232180", "-1.35664382E-58232163", "0",
                    "808525347", "3.5796302E-54");
            Mathtest(112, def, "-17220490.6E+726428704", "19.9855688",
                    "-1.72204906E+726428711", "-1.72204906E+726428711",
                    "-3.44161300E+726428712", "-8.61646259E+726428709", "", "", "");
            Mathtest(113, def, "59015.9705", "-72070405.4E+322957279",
                    "-7.20704054E+322957286", "7.20704054E+322957286",
                    "-4.25330492E+322957291", "-8.18865527E-322957283", "0",
                    "59015.9705", "4.01063488E-34");
            Mathtest(114, def, "16411470E+578192008", "497470.005E-377473621",
                    "1.64114700E+578192015", "1.64114700E+578192015",
                    "8.16421406E+200718399", "3.29898684E+955665630", "", "", "");
            Mathtest(115, def, "-107.353544E+609689808", "-659.50136E-456711743",
                    "-1.07353544E+609689810", "-1.07353544E+609689810",
                    "7.07998083E+152978069", "", "", "", "");
            Mathtest(116, def, "786.134163", "-53.0292275E-664419768",
                    "786.134163", "786.134163", "-4.16880874E-664419764",
                    "-1.48245449E+664419769", "", "", "3.33055532E-15");
            Mathtest(117, def, "23.5414714", "5000786.91", "5000810.45",
                    "-5000763.37", "117725882", "0.0000047075534", "0",
                    "23.5414714", "4.4895618E+6860247");
            Mathtest(118, def, "-69775.6113", "561292120.", "561222344",
                    "-561361896", "-3.91645008E+13", "-0.000124312473", "0",
                    "-69775.6113", "");
            Mathtest(119, def, "919043.871", "-71606613.7", "-70687569.8",
                    "72525657.6", "-6.58096194E+13", "-0.0128346227", "0",
                    "919043.871", "3.05862429E-427014317");
            Mathtest(120, def, "-27667.1915", "-293455.107E-789181924",
                    "-27667.1915", "-27667.1915", "8.11907864E-789181915",
                    "9.42808315E+789181922", "", "", "-4.72176938E-14");
            Mathtest(121, def, "-908603625.", "-982.409273E+449441134",
                    "-9.82409273E+449441136", "9.82409273E+449441136",
                    "8.92620627E+449441145", "9.2487281E-449441129", "0",
                    "-908603625", "2.60768632E-90");
            Mathtest(122, def, "847.113351", "5.71511268", "852.828464",
                    "841.398238", "4841.34825", "148.223386", "148", "1.27667436",
                    "3.69529538E+17");
            Mathtest(123, def, "-992140475", "3.82918218", "-992140471",
                    "-992140479", "-3.79908663E+9", "-259099836", "-259099836",
                    "-0.14787752", "9.68930595E+35");
            Mathtest(124, def, "-12606437.5", "268123145E+362798858",
                    "2.68123145E+362798866", "-2.68123145E+362798866",
                    "-3.38007767E+362798873", "-4.70173416E-362798860", "0",
                    "-12606437.5", "-2.00344362E+21");
            Mathtest(125, def, "3799470.64", "-264.703992", "3799205.94",
                    "3799735.34", "-1.00573505E+9", "-14353.6583", "-14353",
                    "174.242824", "2.3625466E-1744");
            Mathtest(126, def, "-8.11070247", "-931284056.E-654288974",
                    "-8.11070247", "-8.11070247", "7.55336789E-654288965",
                    "8.70916067E+654288965", "", "", "-6.58375662E-9");
            Mathtest(127, def, "-242660177.", "-6.09832715E-943742415",
                    "-242660177", "-242660177", "1.47982115E-943742406",
                    "3.97912692E+943742422", "", "", "4.89788901E-51");
            Mathtest(128, def, "76.1463803", "-45.6758006E-636907996",
                    "76.1463803", "76.1463803", "-3.47804688E-636907993",
                    "-1.66710554E+636907996", "", "", "3.90619287E-10");
            Mathtest(129, def, "761185.862", "-70878470.9E+221214712",
                    "-7.08784709E+221214719", "7.08784709E+221214719",
                    "-5.39516900E+221214725", "-1.07393099E-221214714", "0",
                    "761185.862", "6.75406144E-42");
            Mathtest(130, def, "6203606.54", "-195.92748E-833512061", "6203606.54",
                    "6203606.54", "-1.21545700E-833512052",
                    "-3.1662769E+833512065", "", "", "2.59843292E-14");
            Mathtest(131, def, "-163274837.", "95.0448550E+887876533",
                    "9.50448550E+887876534", "-9.50448550E+887876534",
                    "-1.55184332E+887876543", "-1.71787139E-887876527", "0",
                    "-163274837", "1.34645731E+82");
            Mathtest(132, def, "2.38638190", "-807986179.", "-807986177",
                    "807986181", "-1.92816359E+9", "-2.95349347E-9", "0",
                    "2.38638190", "1.19029305E-305208656");
            Mathtest(133, def, "-109022296E-811981158", "7.19685680", "7.19685680",
                    "-7.19685680", "-7.84617852E-811981150",
                    "-1.51485988E-811981151", "0", "-1.09022296E-811981150", "");
            Mathtest(134, def, "-559250.780E-273710421", "-393780811.",
                    "-393780811", "393780811", "2.20222226E-273710407",
                    "1.42020831E-273710424", "0", "-5.59250780E-273710416", "");
            Mathtest(135, def, "-88021.9966E+555334642", "7599686.64E+818884053",
                    "7.59968664E+818884059", "-7.59968664E+818884059", "",
                    "-1.15823192E-263549413", "0", "-8.80219966E+555334646", "");
            Mathtest(136, def, "194.317648E-197450009", "-930.979064",
                    "-930.979064", "930.979064", "-1.80905662E-197450004",
                    "-2.08723972E-197450010", "0", "1.94317648E-197450007", "");
            Mathtest(137, def, "9495479.65", "7405697.96", "16901177.6",
                    "2089781.69", "7.03206543E+13", "1.28218565", "1",
                    "2089781.69", "1.0135446E+51673383");
            Mathtest(138, def, "-1656.28925", "-163050511E-682882380",
                    "-1656.28925", "-1656.28925", "2.70058809E-682882369",
                    "1.01581359E+682882375", "", "", "3.64525265E-7");
            Mathtest(139, def, "95581.3784E+64262149", "-99.2879365",
                    "9.55813784E+64262153", "9.55813784E+64262153",
                    "-9.49007783E+64262155", "-9.62668596E+64262151", "", "", "");
            Mathtest(140, def, "643761.452", "3.73446939", "643765.186",
                    "643757.718", "2404107.44", "172383.647", "172383",
                    "2.41514363", "1.71751236E+23");
            Mathtest(141, def, "7960.49866E-129827423", "3220.22850", "3220.22850",
                    "-3220.22850", "2.56346247E-129827416",
                    "2.47202913E-129827423", "0", "7.96049866E-129827420", "");
            Mathtest(142, def, "-6356.64112E-707203818", "1805054.98",
                    "1805054.98", "-1805054.98", "-1.14740867E-707203808",
                    "-3.52157756E-707203821", "0", "-6.35664112E-707203815", "");
            Mathtest(143, def, "2.3904042", "8476.52006", "8478.91046",
                    "-8474.12966", "20262.3092", "0.000282003013", "0",
                    "2.3904042", "2.00251752E+3208");
            Mathtest(144, def, "-713298.658", "-957.782729", "-714256.441",
                    "-712340.875", "683185135", "744.739528", "744", "-708.307624",
                    "3.68122321E-5608");
            Mathtest(145, def, "607779233.E-820497365", "-20.1188742E-857318323",
                    "6.07779233E-820497357", "6.07779233E-820497357", "",
                    "-3.02094057E+36820965", "", "", "");
            Mathtest(146, def, "-205888251", "-908.792922E+250680613",
                    "-9.08792922E+250680615", "9.08792922E+250680615",
                    "1.87109785E+250680624", "2.26551336E-250680608", "0",
                    "-205888251", "-1.5042358E-75");
            Mathtest(147, def, "51542399.1", "-23212.2414", "51519186.9",
                    "51565611.3", "-1.19641461E+12", "-2220.4835", "-2220",
                    "11223.1920", "1.71641348E-179015");
            Mathtest(148, def, "4.44287230", "158923023", "158923027",
                    "-158923019", "706074697", "2.79561275E-8", "0", "4.44287230",
                    "7.12573416E+102928693");
            Mathtest(149, def, "-79123682.6", "-3.8571770", "-79123686.5",
                    "-79123678.8", "305194049", "20513365.8", "20513365",
                    "-2.9293950", "2.55137345E-32");
            Mathtest(150, def, "-80.3324347E-569715030", "883142.351",
                    "883142.351", "-883142.351", "-7.09449752E-569715023",
                    "-9.09620455E-569715035", "0", "-8.03324347E-569715029", "");
            Mathtest(151, def, "13637.483", "-52798.5631", "-39161.0801",
                    "66436.0461", "-720039507", "-0.258292692", "0", "13637.483",
                    "1.47163791E-218310");
            Mathtest(152, def, "6.42934843E-276476458", "84057440.0E-388039782",
                    "6.42934843E-276476458", "6.42934843E-276476458",
                    "5.40434570E-664516232", "7.64875593E+111563316", "", "", "");
            Mathtest(153, def, "-5.64133087", "-17401297.", "-17401302.6",
                    "17401291.4", "98166473.9", "3.24190253E-7", "0",
                    "-5.64133087", "-1.25908916E-13075014");
            Mathtest(154, def, "95469.7057E+865733824", "198.829749",
                    "9.54697057E+865733828", "9.54697057E+865733828",
                    "1.89822176E+865733831", "4.80158056E+865733826", "", "", "");
            Mathtest(155, def, "-416466.209", "-930153427", "-930569893",
                    "929736961", "3.87377472E+14", "0.000447739262", "0",
                    "-416466.209", "");
            Mathtest(156, def, "-1541733.85", "-1.99208708", "-1541735.84",
                    "-1541731.86", "3071268.08", "773928.944", "773928",
                    "-1.88034976", "4.20708401E-13");
            Mathtest(157, def, "-39152691.8", "-645131748.", "-684284440",
                    "605979056", "2.52586445E+16", "0.0606894513", "0",
                    "-39152691.8", "");
            Mathtest(158, def, "113.939979", "-58282550.4", "-58282436.5",
                    "58282664.3", "-6.64071257E+9", "-0.0000019549587", "0",
                    "113.939979", "2.106557E-119868330");
            Mathtest(159, def, "-324971.736", "-9517.15154", "-334488.888",
                    "-315454.585", "3.09280526E+9", "34.1459033", "34",
                    "-1388.58364", "-5.82795263E-52457");
            Mathtest(160, def, "-76.9436744", "-9548122.75E-273599728",
                    "-76.9436744", "-76.9436744", "7.34667648E-273599720",
                    "8.05851332E+273599722", "", "", "1.37489895E-19");
            Mathtest(161, def, "-430393.282", "-70.2551505", "-430463.537",
                    "-430323.027", "30237344.8", "6126.14561", "6126",
                    "-10.2300370", "4.26006409E-395");
            Mathtest(162, def, "-3308051.90", "-349433799.E+397813188",
                    "-3.49433799E+397813196", "3.49433799E+397813196",
                    "1.15594514E+397813203", "9.46689161E-397813191", "0",
                    "-3308051.90", "-2.76237768E-20");
            Mathtest(163, def, "23.1543212E-655822712", "5848.20853", "5848.20853",
                    "-5848.20853", "1.35411299E-655822707",
                    "3.95921607E-655822715", "0", "2.31543212E-655822711", "");
            Mathtest(164, def, "-174.261308E-82902077", "-200096204.",
                    "-200096204", "200096204", "3.48690262E-82902067",
                    "8.70887626E-82902084", "0", "-1.74261308E-82902075", "");
            Mathtest(165, def, "-50669105.2", "9105789.01E+609889700",
                    "9.10578901E+609889706", "-9.10578901E+609889706",
                    "-4.61382181E+609889714", "-5.56449366E-609889700", "0",
                    "-50669105.2", "-2.20135008E+69");
            Mathtest(166, def, "424768856.", "-971.71757", "424767884",
                    "424769828", "-4.12755361E+11", "-437132.012", "-437132",
                    "11.19076", "2.72651473E-8387");
            Mathtest(167, def, "7181.2767", "999117.918", "1006299.19",
                    "-991936.641", "7.17494223E+9", "0.00718761677", "0",
                    "7181.2767", "3.09655124E+3852800");
            Mathtest(168, def, "8096417.07E-433694528", "-68.4863363",
                    "-68.4863363", "68.4863363", "-5.54493942E-433694520",
                    "-1.18219451E-433694523", "0", "8.09641707E-433694522", "");
            Mathtest(169, def, "1236287.5", "-7119.97299E-176200498", "1236287.50",
                    "1236287.50", "-8.80233361E-176200489",
                    "-1.73636544E+176200500", "", "", "2.26549784E-43");
            Mathtest(170, def, "-752995833E-654401067", "-15.2736930E+803939983",
                    "-1.52736930E+803939984", "1.52736930E+803939984",
                    "1.15010272E+149538926", "", "0", "-7.52995833E-654401059", "");
            Mathtest(171, def, "702992.459", "-312.689474", "702679.770",
                    "703305.148", "-219818342", "-2248.21274", "-2248",
                    "66.521448", "8.02493322E-1831");
            Mathtest(172, def, "-4414.38805", "-17680.4630E-584364536",
                    "-4414.38805", "-4414.38805", "7.80484246E-584364529",
                    "2.49676044E+584364535", "", "", "5.13167312E-8");
            Mathtest(173, def, "9.46350807", "7826.65424", "7836.11775",
                    "-7817.19073", "74067.6056", "0.00120913839", "0",
                    "9.46350807", "3.63271495E+7639");
            Mathtest(174, def, "2078153.7", "-16934607.3E+233594439",
                    "-1.69346073E+233594446", "1.69346073E+233594446",
                    "-3.51927168E+233594452", "-1.2271638E-233594440", "0",
                    "2078153.7", "2.31549939E-13");
            Mathtest(175, def, "-9359.74629", "7.07761788E+252457696",
                    "7.07761788E+252457696", "-7.07761788E+252457696",
                    "-6.62447077E+252457700", "-1.32244301E-252457693", "0",
                    "-9359.74629", "-6.29286677E+27");
            Mathtest(176, def, "66.2319284E+730468479", "25.9391685E+221147044",
                    "6.62319284E+730468480", "6.62319284E+730468480",
                    "1.71800115E+951615526", "2.55335588E+509321435", "", "", "");
            Mathtest(177, def, "317997088.E-90968742", "-977426.461",
                    "-977426.461", "977426.461", "-3.10818768E-90968728",
                    "-3.2534119E-90968740", "0", "3.17997088E-90968734", "");
            Mathtest(178, def, "227473386", "-6759.61390", "227466626",
                    "227480146", "-1.53763226E+12", "-33651.8312", "-33651",
                    "5618.65110", "1.40992627E-56493");
            Mathtest(179, def, "-392019.462", "-245456.503", "-637475.965",
                    "-146562.959", "9.62237263E+10", "1.59710359", "1",
                    "-146562.959", "-3.08656533E-1372917");
            Mathtest(180, def, "-3619556.28E+587673583", "-3.45236972",
                    "-3.61955628E+587673589", "-3.61955628E+587673589",
                    "1.24960465E+587673590", "1.04842661E+587673589", "", "", "");
            Mathtest(181, def, "-249.400704E-923930848", "831102.919",
                    "831102.919", "-831102.919", "-2.07277653E-923930840",
                    "-3.00084019E-923930852", "0", "-2.49400704E-923930846", "");
            Mathtest(182, def, "65234.2739E+154949914", "-694581895",
                    "6.52342739E+154949918", "6.52342739E+154949918",
                    "-4.53105456E+154949927", "-9.39187652E+154949909", "", "", "");
            Mathtest(183, def, "45.2316213", "-88775083.4", "-88775038.2",
                    "88775128.6", "-4.01544095E+9", "-5.09508069E-7", "0",
                    "45.2316213", "1.92314254E-146962015");
            Mathtest(184, def, "331100375.", "442.343378", "331100817",
                    "331099933", "1.46460058E+11", "748514.37", "748514",
                    "163.759708", "6.64011043E+3765");
            Mathtest(185, def, "81.8162765", "5.61239515E+467372163",
                    "5.61239515E+467372163", "-5.61239515E+467372163",
                    "4.59185273E+467372165", "1.45777826E-467372162", "0",
                    "81.8162765", "2.99942677E+11");
            Mathtest(186, def, "-5738.13069E+789464078", "33969715.0",
                    "-5.73813069E+789464081", "-5.73813069E+789464081",
                    "-1.94922664E+789464089", "-1.68919012E+789464074", "", "", "");
            Mathtest(187, def, "-7413.03911", "2.70630320E-254858264",
                    "-7413.03911", "-7413.03911", "-2.00619315E-254858260",
                    "-2.73917539E+254858267", "", "", "-4.07369842E+11");
            Mathtest(188, def, "-417696.182", "27400.6002", "-390295.582",
                    "-445096.782", "-1.14451261E+10", "-15.2440523", "-15",
                    "-6687.1790", "-1.58020334E+154017");
            Mathtest(189, def, "68.8538735E+655647287", "3198.17933E-132454826",
                    "6.88538735E+655647288", "6.88538735E+655647288",
                    "2.20207035E+523192466", "2.15290846E+788102111", "", "", "");
            Mathtest(190, def, "-6817.04246", "434420.439", "427603.397",
                    "-441237.481", "-2.96146258E+9", "-0.0156922692", "0",
                    "-6817.04246", "5.94143518E+1665390");
            Mathtest(191, def, "8578.27511", "647042.341E-490924334", "8578.27511",
                    "8578.27511", "5.55050721E-490924325", "1.3257672E+490924332",
                    "", "", "3.98473846E+23");
            Mathtest(192, def, "4124.11615E+733109424", "597385828E+375928745",
                    "4.12411615E+733109427", "4.12411615E+733109427", "",
                    "6.9036056E+357180673", "", "", "");
            Mathtest(193, def, "102.714400", "-919017.468", "-918914.754",
                    "919120.182", "-94396327.8", "-0.000111765449", "0",
                    "102.714400", "4.04295689E-1848724");
            Mathtest(194, def, "-4614.33015E+996778733", "-433.560812E+22860599",
                    "-4.61433015E+996778736", "-4.61433015E+996778736", "",
                    "1.06428672E+973918135", "", "", "");
            Mathtest(195, def, "457455170.", "3709230.48E+677010879",
                    "3.70923048E+677010885", "-3.70923048E+677010885",
                    "1.69680666E+677010894", "1.23328861E-677010877", "0",
                    "457455170", "4.37919376E+34");
            Mathtest(196, def, "-2522468.15", "-48482043.5", "-51004511.7",
                    "45959575.4", "1.22294411E+14", "0.0520289156", "0",
                    "-2522468.15", "1.42348178E-310373595");
            Mathtest(197, def, "-659811384", "62777.6118", "-659748606",
                    "-659874162", "-4.14213829E+13", "-10510.2976", "-10510",
                    "-18683.9820", "3.4393524E+553665");
            Mathtest(198, def, "4424.94176", "-825848.20", "-821423.258",
                    "830273.142", "-3.65433019E+9", "-0.00535805704", "0",
                    "4424.94176", "3.42152775E-3010966");
            Mathtest(199, def, "43.6441884", "-6509.89663E-614169377",
                    "43.6441884", "43.6441884", "-2.84119155E-614169372",
                    "-6.70428286E+614169374", "", "", "3.31524056E-12");
            Mathtest(200, def, "897.388381E-843864876", "84195.1369", "84195.1369",
                    "-84195.1369", "7.55557376E-843864869",
                    "1.06584348E-843864878", "0", "8.97388381E-843864874", "");
            Mathtest(201, def, "796199825", "496.76834", "796200322", "796199328",
                    "3.95526865E+11", "1602758.79", "1602758", "393.91828",
                    "6.42647264E+4423");
            Mathtest(202, def, "573583582", "1598.69521", "573585181", "573581983",
                    "9.16985325E+11", "358782.323", "358782", "517.16578",
                    "9.91156302E+14004");
            Mathtest(203, def, "-783144270.", "6347.71496", "-783137922",
                    "-783150618", "-4.97117660E+12", "-123374.202", "-123374",
                    "-1284.52496", "1.28110803E+56458");
            Mathtest(204, def, "26909234.7", "52411.5081", "26961646.2",
                    "26856823.2", "1.41035357E+12", "513.422255", "513",
                    "22131.0447", "9.75836528E+389415");
            Mathtest(205, def, "8.21915282", "24859.7841E-843282959", "8.21915282",
                    "8.21915282", "2.04326365E-843282954", "3.30620443E+843282955",
                    "", "", "67.5544731");
            Mathtest(206, def, "-688.387710", "82783.5207E-831870858",
                    "-688.387710", "-688.387710", "-5.69871582E-831870851",
                    "-8.31551623E+831870855", "", "", "5.04272012E+22");
            Mathtest(207, def, "-9792232.", "-1749.01166", "-9793981.01",
                    "-9790482.99", "1.71267279E+10", "5598.72311", "5598",
                    "-1264.72732", "-8.86985674E-12228");
            Mathtest(208, def, "-130.765600", "8.67437427", "-122.091226",
                    "-139.439974", "-1134.30976", "-15.0749317", "-15",
                    "-0.64998595", "-1.11799947E+19");
            Mathtest(209, def, "917.259102", "-368640.426", "-367723.167",
                    "369557.685", "-338138786", "-0.00248822169", "0",
                    "917.259102", "8.67104255E-1092094");
            Mathtest(210, def, "-4.9725631", "-294563717.", "-294563722",
                    "294563712", "1.46473667E+9", "1.6881112E-8", "0",
                    "-4.9725631", "-6.27962584E-205187284");
            Mathtest(211, def, "-60962887.2E-514249661", "-243021.407",
                    "-243021.407", "243021.407", "1.48152866E-514249648",
                    "2.5085398E-514249659", "0", "-6.09628872E-514249654", "");
            Mathtest(212, def, "-55389219.8", "-3772200E+981866393",
                    "-3.77220000E+981866399", "3.77220000E+981866399",
                    "2.08939215E+981866407", "1.46835321E-981866392", "0",
                    "-55389219.8", "1.06242678E-31");
            Mathtest(213, def, "681.666010", "626886700", "626887382",
                    "-626886018", "4.27327356E+11", "0.00000108738311", "0",
                    "681.666010", "");
            Mathtest(214, def, "6.42652138", "53465894.5", "53465900.9",
                    "-53465888.1", "343599714", "1.2019852E-7", "0", "6.42652138",
                    "4.61155532E+43199157");
            Mathtest(215, def, "561546656", "651408.476", "562198064", "560895248",
                    "3.65796251E+14", "862.049968", "862", "32549.688",
                    "8.6052377E+5699419");
            Mathtest(216, def, "7845778.36E-79951139", "9.45859047", "9.45859047",
                    "-9.45859047", "7.42100044E-79951132", "8.29487056E-79951134",
                    "0", "7.84577836E-79951133", "1.12648216E-719560189");
            Mathtest(217, def, "54486.2112", "10.7565078", "54496.9677",
                    "54475.4547", "586081.356", "5065.41828", "5065", "4.4991930",
                    "1.25647168E+52");
            Mathtest(218, def, "16576482.5", "-2217720.83", "14358761.7",
                    "18794203.3", "-3.67620105E+13", "-7.47455779", "-7",
                    "1052436.69", "1.38259374E-16010820");
            Mathtest(219, def, "61.2793787E-392070111", "6.22575651", "6.22575651",
                    "-6.22575651", "3.81510491E-392070109",
                    "9.84288072E-392070111", "0", "6.12793787E-392070110", "");
            Mathtest(220, def, "5115136.39", "-653674372.", "-648559236",
                    "658789508", "-3.34363357E+15", "-0.00782520565", "0",
                    "5115136.39", "");
            Mathtest(221, def, "-7.84238366E-416477339", "-37432758.9E+97369393",
                    "-3.74327589E+97369400", "3.74327589E+97369400",
                    "2.93562057E-319107938", "2.09505895E-513846739", "0",
                    "-7.84238366E-416477339", "");
            Mathtest(222, def, "-387781.3E+284108380", "-218085.592",
                    "-3.87781300E+284108385", "-3.87781300E+284108385",
                    "8.45695144E+284108390", "1.77811517E+284108380", "", "", "");
            Mathtest(223, def, "-5353.17736", "3.39332346E+546685359",
                    "3.39332346E+546685359", "-3.39332346E+546685359",
                    "-1.81650623E+546685363", "-1.57756177E-546685356", "0",
                    "-5353.17736", "-1.53403369E+11");
            Mathtest(224, def, "-20837.2900E-168652772", "-8236.78305E-712819173",
                    "-2.08372900E-168652768", "-2.08372900E-168652768",
                    "1.71632237E-881471937", "2.52978497E+544166401", "", "", "");
            Mathtest(225, def, "-98573.8722E+829022366", "309011.007",
                    "-9.85738722E+829022370", "-9.85738722E+829022370",
                    "-3.04604115E+829022376", "-3.18997932E+829022365", "", "", "");
            Mathtest(226, def, "49730750.7", "-5315.10636E-299586991",
                    "49730750.7", "49730750.7", "-2.64324229E-299586980",
                    "-9.35649211E+299586994", "", "", "3.28756936E-39");
            Mathtest(227, def, "1539523.40", "-962388.581", "577134.82",
                    "2501911.98", "-1.48161974E+12", "-1.59969001", "-1",
                    "577134.819", "3.10144834E-5954673");
            Mathtest(228, def, "81596.2121", "-37600.9653", "43995.2468",
                    "119197.177", "-3.06809634E+9", "-2.17005631", "-2",
                    "6394.2815", "1.97878299E-184684");
            Mathtest(229, def, "590146199", "-1425404.61", "588720794",
                    "591571604", "-8.41197113E+14", "-414.020128", "-414",
                    "28690.46", "2.04650994E-12502170");
            Mathtest(230, def, "196.05543", "505.936305", "701.991735",
                    "-309.880875", "99191.5598", "0.387510104", "0", "196.05543",
                    "8.78437397E+1159");
            Mathtest(231, def, "77.8058449", "-642.275274", "-564.469429",
                    "720.081119", "-49972.7704", "-0.121140963", "0", "77.8058449",
                    "9.33582626E-1215");
            Mathtest(232, def, "1468.60684", "10068.138", "11536.7448",
                    "-8599.5312", "14786136.3", "0.145866777", "0", "1468.60684",
                    "2.54122484E+31884");
            Mathtest(233, def, "4.98774767E-387968632", "4.41731439E-578812376",
                    "4.98774767E-387968632", "4.98774767E-387968632",
                    "2.20324496E-966781007", "1.12913577E+190843744", "", "", "");
            Mathtest(234, def, "981.091059", "-92238.9930", "-91257.9020",
                    "93220.0841", "-90494851.3", "-0.0106364025", "0",
                    "981.091059", "5.29943342E-275953");
            Mathtest(235, def, "-3606.24992", "8290224.70", "8286618.45",
                    "-8293830.95", "-2.98966222E+10", "-0.000435000262", "0",
                    "-3606.24992", "-1.23747107E+29488793");
            Mathtest(236, def, "-8978571.35", "92243.4796", "-8886327.87",
                    "-9070814.83", "-8.28214663E+11", "-97.3355666", "-97",
                    "-30953.8288", "-4.95762813E+641384");
            Mathtest(237, def, "-61968.1992E+810060478", "474294671.E+179263414",
                    "-6.19681992E+810060482", "-6.19681992E+810060482",
                    "-2.93911867E+989323905", "-1.30653374E+630797060", "", "", "");
            Mathtest(238, def, "61298431.6E-754429041", "-2584862.79",
                    "-2584862.79", "2584862.79", "-1.58448035E-754429027",
                    "-2.37143851E-754429040", "0", "6.12984316E-754429034", "");
            Mathtest(239, def, "621039.064", "-5351539.62", "-4730500.56",
                    "5972578.68", "-3.32351516E+12", "-0.116048672", "0",
                    "621039.064", "2.41163312E-31002108");
            Mathtest(240, def, "-19.6007605", "-57905696.", "-57905715.6",
                    "57905676.4", "1.13499568E+9", "3.38494515E-7", "0",
                    "-19.6007605", "1.05663646E-74829963");
            Mathtest(241, def, "3626.13109E+687030346", "189.896004",
                    "3.62613109E+687030349", "3.62613109E+687030349",
                    "6.88587804E+687030351", "1.90953523E+687030347", "", "", "");
            Mathtest(242, def, "-249334.026", "-7.54735834E-14137188",
                    "-249334.026", "-249334.026", "1.88181324E-14137182",
                    "3.30359332E+14137192", "", "", "6.69495408E-44");
            Mathtest(243, def, "417613928.", "-925213.216", "416688715",
                    "418539141", "-3.86381925E+14", "-451.370474", "-451",
                    "342767.584", "8.38430085E-7976054");
            Mathtest(244, def, "23.8320309", "-50074996.1", "-50074972.3",
                    "50075019.9", "-1.19338885E+9", "-4.75926765E-7", "0",
                    "23.8320309", "5.81466387E-68961335");
            Mathtest(245, def, "49789677.7", "-131827812E+156412534",
                    "-1.31827812E+156412542", "1.31827812E+156412542",
                    "-6.56366427E+156412549", "-3.77687204E-156412535", "0",
                    "49789677.7", "2.00844843E-8");
            Mathtest(246, def, "-8907163.61E-741867246", "773651.288E-472033282",
                    "7.73651288E-472033277", "-7.73651288E-472033277", "",
                    "-1.15131504E-269833963", "0", "-8.90716361E-741867240", "");
            Mathtest(247, def, "514021711.E+463536646", "617441659.",
                    "5.14021711E+463536654", "5.14021711E+463536654",
                    "3.17378418E+463536663", "8.32502478E+463536645", "", "", "");
            Mathtest(248, def, "998175750", "2.39285478", "998175752", "998175748",
                    "2.38848961E+9", "417148487", "417148486", "1.30513692",
                    "9.96354828E+17");
            Mathtest(249, def, "873575426.", "647853.152E+497450781",
                    "6.47853152E+497450786", "-6.47853152E+497450786",
                    "5.65948593E+497450795", "1.3484158E-497450778", "0",
                    "873575426", "4.44429064E+53");
            Mathtest(250, def, "4352626.8", "-130338048.E-744560911", "4352626.80",
                    "4352626.80", "-5.67312881E-744560897",
                    "-3.33949055E+744560909", "", "", "2.29746322E-7");
            Mathtest(251, def, "437.286960", "7.37560835", "444.662568",
                    "429.911352", "3225.25735", "59.2882565", "59", "2.12606735",
                    "3.05749452E+18");
            Mathtest(252, def, "8498280.45E+220511522", "588617612",
                    "8.49828045E+220511528", "8.49828045E+220511528",
                    "5.00223754E+220511537", "1.44376931E+220511520", "", "", "");
            Mathtest(253, def, "-5320387.77", "-7673237.46", "-12993625.2",
                    "2352849.69", "4.08245987E+13", "0.693369363", "0",
                    "-5320387.77", "-1.30113745E-51609757");
            Mathtest(254, def, "587655375", "-4.9748366", "587655370", "587655380",
                    "-2.92348947E+9", "-118125563", "-118125563", "0.7919942",
                    "1.42687667E-44");
            Mathtest(255, def, "1266098.44", "-2661.64904E-642601142",
                    "1266098.44", "1266098.44", "-3.36990970E-642601133",
                    "-4.75681963E+642601144", "", "", "4.92717036E-19");
            Mathtest(256, def, "3.92737463E+482873483", "-685.522747",
                    "3.92737463E+482873483", "3.92737463E+482873483",
                    "-2.69230464E+482873486", "-5.72902161E+482873480", "", "", "");
            Mathtest(257, def, "22826494.1", "986189474.", "1.00901597E+9",
                    "-963362980", "2.25112482E+16", "0.0231461547", "0",
                    "22826494.1", "");
            Mathtest(258, def, "-647342.380", "-498816386", "-499463728",
                    "498169044", "3.22904986E+14", "0.00129775685", "0",
                    "-647342.380", "");
            Mathtest(259, def, "393092373.", "-25.7226822", "393092347",
                    "393092399", "-1.01113902E+10", "-15281935.6", "-15281935",
                    "15.5939430", "3.49252839E-224");
            Mathtest(260, def, "2.96253492", "20.7444888", "23.7070237",
                    "-17.7819539", "61.4562725", "0.142810698", "0", "2.96253492",
                    "8.03402246E+9");
            Mathtest(261, def, "53553.3750E+386955423", "-732470876",
                    "5.35533750E+386955427", "5.35533750E+386955427",
                    "-3.92262875E+386955436", "-7.31133165E+386955418", "", "", "");
            Mathtest(262, def, "-696451.406E-286535917", "-73086090.8",
                    "-73086090.8", "73086090.8", "5.09009107E-286535904",
                    "9.52919219E-286535920", "0", "-6.96451406E-286535912", "");
            Mathtest(263, def, "1551.29957", "-580358622.E+117017265",
                    "-5.80358622E+117017273", "5.80358622E+117017273",
                    "-9.00310081E+117017276", "-2.67300168E-117017271", "0",
                    "1551.29957", "7.17506711E-20");
            Mathtest(264, def, "-205123006.E-213752799", "-78638468.6",
                    "-78638468.6", "78638468.6", "1.61305591E-213752783",
                    "2.60843083E-213752799", "0", "-2.05123006E-213752791", "");
            Mathtest(265, def, "77632.8073", "-3378542.88E+677441319",
                    "-3.37854288E+677441325", "3.37854288E+677441325",
                    "-2.62285768E+677441330", "-2.29781921E-677441321", "0",
                    "77632.8073", "2.13729331E-15");
            Mathtest(266, def, "3068999.37", "2.21006212", "3069001.58",
                    "3068997.16", "6782679.25", "1388648.46", "1388648",
                    "1.02718624", "9.41875713E+12");
            Mathtest(267, def, "625524274.", "55.2468624", "625524329",
                    "625524219", "3.45582535E+10", "11322349.3", "11322349",
                    "16.7522224", "6.21482943E+483");
            Mathtest(268, def, "61269134.9", "-845761303.", "-784492168",
                    "907030438", "-5.18190634E+16", "-0.0724425848", "0",
                    "61269134.9", "");
            Mathtest(269, def, "-2840.12099", "-2856.76731E-82743650",
                    "-2840.12099", "-2840.12099", "8.11356480E-82743644",
                    "9.94173022E+82743649", "", "", "-4.36505254E-11");
            Mathtest(270, def, "8.9538781", "-7.56603391", "1.38784419",
                    "16.5199120", "-67.7453453", "-1.18343087", "-1", "1.38784419",
                    "2.42053061E-8");
            Mathtest(271, def, "-56233547.2", "509752530", "453518983",
                    "-565986077", "-2.86651930E+16", "-0.110315386", "0",
                    "-56233547.2", "");
            Mathtest(272, def, "-3167.47853E-854859497", "-110852115",
                    "-110852115", "110852115", "3.51121694E-854859486",
                    "2.85739116E-854859502", "0", "-3.16747853E-854859494", "");
            Mathtest(273, def, "-5652.52092", "-632243244.", "-632248897",
                    "632237592", "3.57376816E+12", "0.00000894042123", "0",
                    "-5652.52092", "");
            Mathtest(274, def, "-946.009928", "820090.66E-589278015",
                    "-946.009928", "-946.009928", "-7.75813906E-589278007",
                    "-1.15354311E+589278012", "", "", "6.41454053E+23");
            Mathtest(275, def, "-367.757758", "-959.626016", "-1327.38377",
                    "591.868258", "352909.912", "0.383230292", "0", "-367.757758",
                    "1.14982199E-2463");
            Mathtest(276, def, "809926721.E-744611554", "-67.6560549",
                    "-67.6560549", "67.6560549", "-5.47964467E-744611544",
                    "-1.19712378E-744611547", "0", "8.09926721E-744611546", "");
            Mathtest(277, def, "-1725.08555", "75586.3031", "73861.2176",
                    "-77311.3887", "-130392839", "-0.0228227269", "0",
                    "-1725.08555", "3.70540587E+244657");
            Mathtest(278, def, "2659.84191E+29314492", "-74372.4551E+518196680",
                    "-7.43724551E+518196684", "7.43724551E+518196684",
                    "-1.97818973E+547511180", "-3.5763804E-488882190", "0",
                    "2.65984191E+29314495", "1.06171811E-205201468");
            Mathtest(279, def, "-91.1431113", "12147507.0", "12147415.9",
                    "-12147598.1", "-1.10716158E+9", "-0.00000750303015", "0",
                    "-91.1431113", "-1.52417006E+23805759");
            Mathtest(280, def, "-1136778.91E+697783878", "-801552569.",
                    "-1.13677891E+697783884", "-1.13677891E+697783884",
                    "9.11188056E+697783892", "1.41822128E+697783875", "", "", "");
            Mathtest(281, def, "73123773.0E+433334149", "63.3548930",
                    "7.31237730E+433334156", "7.31237730E+433334156",
                    "4.63274881E+433334158", "1.15419298E+433334155", "", "", "");
            Mathtest(282, def, "-9765484.8", "7979.90802E-234029715",
                    "-9765484.80", "-9765484.80", "-7.79276705E-234029705",
                    "-1.22375907E+234029718", "", "", "8.27085614E+55");
            Mathtest(283, def, "-695010288", "-8.26582820", "-695010296",
                    "-695010280", "5.74483564E+9", "84082353.4", "84082353",
                    "-3.45024540", "1.83683495E-71");
            Mathtest(284, def, "23975643.3E-155955264", "-505547.692E+137258948",
                    "-5.05547692E+137258953", "5.05547692E+137258953",
                    "-1.21208311E-18696303", "-4.7425087E-293214211", "0",
                    "2.39756433E-155955257", "1.26225952E+779776283");
            Mathtest(285, def, "2862.95921", "-32601248.6E-605861333",
                    "2862.95921", "2862.95921", "-9.33360449E-605861323",
                    "-8.78174712E+605861328", "", "", "4.26142175E-11");
            Mathtest(286, def, "-13.133518E+246090516", "-8.71269925E-945092108",
                    "-1.31335180E+246090517", "-1.31335180E+246090517",
                    "1.14428392E-699001590", "", "", "", "");
            Mathtest(287, def, "-34671.2232", "817710.762", "783039.539",
                    "-852381.985", "-2.83510323E+10", "-0.0424003508", "0",
                    "-34671.2232", "-5.30788828E+3712382");
            Mathtest(288, def, "-22464769", "62.4366060", "-22464706.6",
                    "-22464831.4", "-1.40262393E+9", "-359801.252", "-359801",
                    "-15.7245940", "6.21042536E+455");
            Mathtest(289, def, "-9458.60887E-563051963", "5676056.01",
                    "5676056.01", "-5676056.01", "-5.36875937E-563051953",
                    "-1.66640513E-563051966", "0", "-9.45860887E-563051960", "");
            Mathtest(290, def, "-591.924123E-95331874", "-134.596188",
                    "-134.596188", "134.596188", "7.96707305E-95331870",
                    "4.39777777E-95331874", "0", "-5.91924123E-95331872", "");
            Mathtest(291, def, "-182566085.E+68870646", "-960345993.",
                    "-1.82566085E+68870654", "-1.82566085E+68870654",
                    "1.75326608E+68870663", "1.9010449E+68870645", "", "", "");
            Mathtest(292, def, "8232.54893", "-99822004E+891979845",
                    "-9.98220040E+891979852", "9.98220040E+891979852",
                    "-8.21789532E+891979856", "-8.24722867E-891979850", "0",
                    "8232.54893", "6.99289156E-40");
            Mathtest(293, def, "-4336.94317", "-819373.601E+563233430",
                    "-8.19373601E+563233435", "8.19373601E+563233435",
                    "3.55357674E+563233439", "5.29299841E-563233433", "0",
                    "-4336.94317", "7.98969405E-30");
            Mathtest(294, def, "-2.09044362E-876527908", "-6515463.33",
                    "-6515463.33", "6515463.33", "1.36202087E-876527901",
                    "3.20843433E-876527915", "0", "-2.09044362E-876527908", "");
            Mathtest(295, def, "-194343.344", "1.95929977", "-194341.385",
                    "-194345.303", "-380776.869", "-99190.2041", "-99190",
                    "-0.39981370", "3.77693354E+10");
            Mathtest(296, def, "-326002.927", "4215.99030", "-321786.937",
                    "-330218.917", "-1.37442518E+9", "-77.3253503", "-77",
                    "-1371.67390", "5.51875821E+23243");
            Mathtest(297, def, "-12037.8590E+876429044", "314.81827",
                    "-1.20378590E+876429048", "-1.20378590E+876429048",
                    "-3.78973794E+876429050", "-3.82374854E+876429045", "", "", "");
            Mathtest(298, def, "21036045.4E-162804809", "-91.7149219",
                    "-91.7149219", "91.7149219", "-1.92931926E-162804800",
                    "-2.2936339E-162804804", "0", "2.10360454E-162804802", "");
            Mathtest(299, def, "-947019.534", "9916.29280", "-937103.241",
                    "-956935.827", "-9.39092299E+9", "-95.5013686", "-95",
                    "-4971.71800", "3.76029022E+59261");
            Mathtest(300, def, "-5985.84136", "-12.4090184E-12364204",
                    "-5985.84136", "-5985.84136", "7.42784156E-12364200",
                    "4.82378313E+12364206", "", "", "-0.000167060893");
            Mathtest(301, def, "-85344379.4", "-6783.08669E+218840215",
                    "-6.78308669E+218840218", "6.78308669E+218840218",
                    "5.78898324E+218840226", "1.25819385E-218840211", "0",
                    "-85344379.4", "-3.03232347E-56");
            Mathtest(302, def, "-94.1947070E-938257103", "15003.240", "15003.2400",
                    "-15003.2400", "-1.41322580E-938257097",
                    "-6.27829102E-938257106", "0", "-9.41947070E-938257102", "");
            Mathtest(303, def, "-4846233.6", "-8289769.76", "-13136003.4",
                    "3443536.16", "4.01741607E+13", "0.584604125", "0",
                    "-4846233.6", "4.25077524E-55420465");
            Mathtest(304, def, "67.9147198", "-108373645.E+291715415",
                    "-1.08373645E+291715423", "1.08373645E+291715423",
                    "-7.36016573E+291715424", "-6.26671916E-291715422", "0",
                    "67.9147198", "0.0147243485");
            Mathtest(305, def, "1958.77994", "5.57285137E+690137826",
                    "5.57285137E+690137826", "-5.57285137E+690137826",
                    "1.09159895E+690137830", "3.51486126E-690137824", "0",
                    "1958.77994", "5.64824968E+19");
            Mathtest(306, def, "22780314.3", "8805279.83", "31585594.1",
                    "13975034.5", "2.00587042E+14", "2.58711986", "2",
                    "5169754.64", "2.39132169E+64785373");
            Mathtest(307, def, "596745.184", "197602423.", "198199168",
                    "-197005678", "1.17918294E+14", "0.00301992848", "0",
                    "596745.184", "");
            Mathtest(308, def, "171.340497", "-480349.924", "-480178.584",
                    "480521.264", "-82303394.7", "-0.000356699332", "0",
                    "171.340497", "2.17914102E-1073035");
            Mathtest(309, def, "824.65555", "-379287.530", "-378462.875",
                    "380112.186", "-312781567", "-0.00217422268", "0", "824.65555",
                    "6.35829256E-1106108");
            Mathtest(310, def, "19.3164031", "-9207644.24E+988115069",
                    "-9.20764424E+988115075", "9.20764424E+988115075",
                    "-1.77858568E+988115077", "-2.09786592E-988115075", "0",
                    "19.3164031", "2.67093711E-12");
            Mathtest(311, def, "-3123.77646E+177814265", "973284435.E+383256112",
                    "9.73284435E+383256120", "-9.73284435E+383256120",
                    "-3.04032301E+561070389", "-3.20952062E-205441853", "0",
                    "-3.12377646E+177814268", "");
            Mathtest(312, def, "-850.123915E+662955309", "6774849.81E-846576865",
                    "-8.50123915E+662955311", "-8.50123915E+662955311",
                    "-5.75946184E-183621547", "", "", "", "");
            Mathtest(313, def, "-23349.7724", "2921.35355", "-20428.4189",
                    "-26271.1260", "-68212940.5", "-7.99279238", "-7",
                    "-2900.29755", "-5.6705546E+12759");
            Mathtest(314, def, "18886653.3", "568707476.", "587594129",
                    "-549820823", "1.07409809E+16", "0.0332097855", "0",
                    "18886653.3", "");
            Mathtest(315, def, "-90552818.0", "-542.03563E-986606878",
                    "-90552818.0", "-90552818.0", "4.90828538E-986606868",
                    "1.67060638E+986606883", "", "", "-1.64244241E-40");
            Mathtest(316, def, "41501126.1E+791838765", "-69.6651675E+204268348",
                    "4.15011261E+791838772", "4.15011261E+791838772",
                    "-2.89118290E+996107122", "-5.95722763E+587570422", "", "", "");
            Mathtest(317, def, "76783193.3E-271488154", "3765.01829E-520346003",
                    "7.67831933E-271488147", "7.67831933E-271488147",
                    "2.89090127E-791834146", "2.03938434E+248857853", "", "", "");
            Mathtest(318, def, "4192.9928", "987822007E-146560989", "4192.99280",
                    "4192.99280", "4.14193056E-146560977", "4.24468454E+146560983",
                    "", "", "1.67973653E+36");
            Mathtest(319, def, "-891845.629", "48277955.", "47386109.4",
                    "-49169800.6", "-4.30564831E+13", "-0.0184731443", "0",
                    "-891845.629", "-6.32964147E+287267817");
            Mathtest(320, def, "334.901176", "-7609296.55E+447340228",
                    "-7.60929655E+447340234", "7.60929655E+447340234",
                    "-2.54836236E+447340237", "-4.40121073E-447340233", "0",
                    "334.901176", "6.31926575E-21");
            Mathtest(321, def, "4.49868636", "-341880896E-447251873", "4.49868636",
                    "4.49868636", "-1.53801492E-447251864",
                    "-1.31586363E+447251865", "", "", "0.010983553");
            Mathtest(322, def, "807615.58", "-314286480", "-313478865",
                    "315094096", "-2.53822658E+14", "-0.00256967968", "0",
                    "807615.58", "");
            Mathtest(323, def, "-37.7457954", "53277.8129E-859225538",
                    "-37.7457954", "-37.7457954", "-2.01101343E-859225532",
                    "-7.08471188E+859225534", "", "", "-76620134.1");
            Mathtest(324, def, "-28671081.", "98.8819623", "-28670982.1",
                    "-28671179.9", "-2.83505275E+9", "-289952.589", "-289952",
                    "-58.2671904", "-1.93625566E+738");
            Mathtest(325, def, "-89752.2106E-469496896", "99.9879961",
                    "99.9879961", "-99.9879961", "-8.97414368E-469496890",
                    "-8.97629857E-469496894", "0", "-8.97522106E-469496892", "");
            Mathtest(326, def, "-497983567E-13538052", "39.4578742", "39.4578742",
                    "-39.4578742", "-1.96493729E-13538042",
                    "-1.26206385E-13538045", "0", "-4.97983567E-13538044",
                    "-1.55376543E-527983689");
            Mathtest(327, def, "845739221E-654202565", "-33313.1551",
                    "-33313.1551", "33313.1551", "-2.81742418E-654202552",
                    "-2.53875449E-654202561", "0", "8.45739221E-654202557", "");
            Mathtest(328, def, "742.332067E+537827843", "-4532.70023E-855387414",
                    "7.42332067E+537827845", "7.42332067E+537827845",
                    "-3.36476873E-317559565", "", "", "", "");
            Mathtest(329, def, "-893.48654", "670389960", "670389067",
                    "-670390853", "-5.98984406E+11", "-0.00000133278628", "0",
                    "-893.48654", "");
            Mathtest(330, def, "1.37697162", "-915.737474E-351578724",
                    "1.37697162", "1.37697162", "-1.26094451E-351578721",
                    "-1.50367508E+351578721", "", "", "0.0561920784");
            Mathtest(331, def, "-65.2839808E+550288403", "-121389.306",
                    "-6.52839808E+550288404", "-6.52839808E+550288404",
                    "7.92477712E+550288409", "5.37806689E+550288399", "", "", "");
            Mathtest(332, def, "-30346603.E+346067390", "792661.544",
                    "-3.03466030E+346067397", "-3.03466030E+346067397",
                    "-2.40545852E+346067403", "-3.82844396E+346067391", "", "", "");
            Mathtest(333, def, "-61170.7065", "-453731131.", "-453792302",
                    "453669960", "2.77550538E+13", "0.000134817081", "0",
                    "-61170.7065", "");
            Mathtest(334, def, "6569.51133", "13.8706351E+399434914",
                    "1.38706351E+399434915", "-1.38706351E+399434915",
                    "9.11232944E+399434918", "4.73627291E-399434912", "0",
                    "6569.51133", "6569.51133");
            Mathtest(335, def, "300703925.", "-3156736.8", "297547188",
                    "303860662", "-9.49243146E+14", "-95.2578387", "-95",
                    "813929.0", "4.18609114E-26763256");
            Mathtest(336, def, "192138216E+353011592", "-473.080633",
                    "1.92138216E+353011600", "1.92138216E+353011600",
                    "-9.08968688E+353011602", "-4.06142637E+353011597", "", "", "");
            Mathtest(337, def, "8607.64794", "-34740.3367", "-26132.6888",
                    "43347.9846", "-299032588", "-0.247770999", "0", "8607.64794",
                    "1.29604519E-136698");
            Mathtest(338, def, "-67913.8241", "-93815.4229", "-161729.247",
                    "25901.5988", "6.37136413E+9", "0.723908948", "0",
                    "-67913.8241", "-6.96355203E-453311");
            Mathtest(339, def, "34.5559455", "-998799398.", "-998799364",
                    "998799433", "-3.45144576E+10", "-3.45974833E-8", "0",
                    "34.5559455", "");
            Mathtest(340, def, "387995.328", "990199543.E-124623607", "387995.328",
                    "387995.328", "3.84192796E-124623593", "3.91835495E+124623603",
                    "", "", "7.73152138E+55");
            Mathtest(341, def, "-471.09166E-83521919", "-441222368", "-441222368",
                    "441222368", "2.07856178E-83521908", "1.06769669E-83521925",
                    "0", "-4.7109166E-83521917", "");
            Mathtest(342, def, "-97834.3858", "70779789.8E+502166065",
                    "7.07797898E+502166072", "-7.07797898E+502166072",
                    "-6.92469726E+502166077", "-1.38223617E-502166068", "0",
                    "-97834.3858", "-8.57907886E+34");
            Mathtest(343, def, "7732331.06", "-952719.482E+115325505",
                    "-9.52719482E+115325510", "9.52719482E+115325510",
                    "-7.36674244E+115325517", "-8.11606271E-115325505", "0",
                    "7732331.06", "1.30886724E-69");
            Mathtest(344, def, "23.2745547", "2.23194245E-221062592", "23.2745547",
                    "23.2745547", "5.19474666E-221062591", "1.04279368E+221062593",
                    "", "", "541.704896");
            Mathtest(345, def, "671.083363E-218324205", "-787150031", "-787150031",
                    "787150031", "-5.28243290E-218324194",
                    "-8.52548227E-218324212", "0", "6.71083363E-218324203", "");
            Mathtest(346, def, "365167.80", "-80263.6516", "284904.148",
                    "445431.452", "-2.93097011E+10", "-4.54960362", "-4",
                    "44113.1936", "1.27052227E-446468");
            Mathtest(347, def, "-1.43297604E-65129780", "56.598733E-135581942",
                    "-1.43297604E-65129780", "-1.43297604E-65129780",
                    "-8.11046283E-200711721", "-2.53181646E+70452160", "", "",
                    "8.65831881E-390778680");
            Mathtest(348, def, "416998859.", "260.220323E-349285593", "416998859",
                    "416998859", "1.08511578E-349285582", "1.60248383E+349285599",
                    "", "", "7.25111178E+25");
            Mathtest(349, def, "7267.17611E+862630607", "4021.56861",
                    "7.26717611E+862630610", "7.26717611E+862630610",
                    "2.92254473E+862630614", "1.80705014E+862630607", "", "", "");
            Mathtest(350, def, "12.2142434E+593908740", "5.27236571E-396050748",
                    "1.22142434E+593908741", "1.22142434E+593908741",
                    "6.43979581E+197857993", "2.3166533E+989959488", "", "", "");
            Mathtest(351, def, "-28.591932", "-1.79153238E-817064576",
                    "-28.5919320", "-28.5919320", "5.12233720E-817064575",
                    "1.59594838E+817064577", "", "", "0.00122324372");
            Mathtest(352, def, "590.849666", "753424.306E+277232744",
                    "7.53424306E+277232749", "-7.53424306E+277232749",
                    "4.45160500E+277232752", "7.84219014E-277232748", "0",
                    "590.849666", "1.48530607E+22");
            Mathtest(353, def, "1.7270628", "-1325026.67", "-1325024.94",
                    "1325028.40", "-2288404.27", "-0.00000130341739", "0",
                    "1.7270628", "2.09260036E-314440");
            Mathtest(354, def, "33402118.", "-5534.83745", "33396583.2",
                    "33407652.8", "-1.84875294E+11", "-6034.8869", "-6034",
                    "4908.82670", "8.14473913E-41645");
            Mathtest(355, def, "-439842.506", "-775110.807", "-1214953.31",
                    "335268.301", "3.40926680E+11", "0.567457584", "0",
                    "-439842.506", "-1.84678472E-4374182");
            Mathtest(356, def, "-248664.779", "-440890.44E+666433944",
                    "-4.40890440E+666433949", "4.40890440E+666433949",
                    "1.09633924E+666433955", "5.64005831E-666433945", "0",
                    "-248664.779", "2.61542877E-22");
            Mathtest(357, def, "-14161.9142", "8306.49493", "-5855.4193",
                    "-22468.4091", "-117635869", "-1.70492059", "-1",
                    "-5855.41927", "1.65573372E+34479");
            Mathtest(358, def, "-6417227.13", "16679.8842", "-6400547.25",
                    "-6433907.01", "-1.07038605E+11", "-384.728518", "-384",
                    "-12151.5972", "3.58767978E+113546");
            Mathtest(359, def, "514825024.", "-25.0446345E-103809457", "514825024",
                    "514825024", "-1.28936046E-103809447",
                    "-2.05563002E+103809464", "", "", "7.32860062E-27");
            Mathtest(360, def, "525948196", "219450390", "745398586", "306497806",
                    "1.15419537E+17", "2.39666102", "2", "87047416", "");
            Mathtest(361, def, "-638509.181", "45580189.0E+269212559",
                    "4.55801890E+269212566", "-4.55801890E+269212566",
                    "-2.91033691E+269212572", "-1.40084803E-269212561", "0",
                    "-638509.181", "-1.06129405E+29");
            Mathtest(362, def, "330590422", "74.359928E+535377965",
                    "7.43599280E+535377966", "-7.43599280E+535377966",
                    "2.45826800E+535377975", "4.44581418E-535377959", "0",
                    "330590422", "4.31550742E+59");
            Mathtest(363, def, "-3.48593871E-940579904", "-20265.9640E-322988987",
                    "-2.02659640E-322988983", "2.02659640E-322988983", "",
                    "1.72009519E-617590921", "0", "-3.48593871E-940579904", "");
            Mathtest(364, def, "-328103480.", "-721.949371E-923938665",
                    "-328103480", "-328103480", "2.36874101E-923938654",
                    "4.54468822E+923938670", "", "", "-2.4430038E-60");
            Mathtest(365, def, "-1857.01448", "19081578.1", "19079721.1",
                    "-19083435.1", "-3.54347668E+10", "-0.0000973197537", "0",
                    "-1857.01448", "8.44397087E+62374153");
            Mathtest(366, def, "347.28720E+145930771", "-62821.9906E-676564106",
                    "3.47287200E+145930773", "3.47287200E+145930773",
                    "-2.18172732E-530633328", "-5.52811518E+822494874", "", "",
                    "5.69990135E-875584642");
            Mathtest(367, def, "-643.211399E+441807003", "-50733419.2",
                    "-6.43211399E+441807005", "-6.43211399E+441807005",
                    "3.26323135E+441807013", "1.26782584E+441806998", "", "", "");
            Mathtest(368, def, "-53991661.4E-843339554", "20718.7346",
                    "20718.7346", "-20718.7346", "-1.11863890E-843339542",
                    "-2.60593431E-843339551", "0", "-5.39916614E-843339547", "");
            Mathtest(369, def, "-900181424", "-105763982.", "-1.00594541E+9",
                    "-794417442", "9.52067719E+16", "8.51122856", "8", "-54069568",
                    "1.32627061E-947045602");
            Mathtest(370, def, "94218.7462E+563233951", "19262.6382E+765263890",
                    "1.92626382E+765263894", "-1.92626382E+765263894", "",
                    "4.89126906E-202029939", "0", "9.42187462E+563233955", "");
            Mathtest(371, def, "28549.271E+921331828", "-2150590.40",
                    "2.85492710E+921331832", "2.85492710E+921331832",
                    "-6.13977881E+921331838", "-1.32750853E+921331826", "", "", "");
            Mathtest(372, def, "810.7080E+779625763", "5957.94044",
                    "8.10708000E+779625765", "8.10708000E+779625765",
                    "4.83014998E+779625769", "1.36071854E+779625762", "", "", "");
            Mathtest(373, def, "-23.7357549E+77116908", "351.100649E+864348022",
                    "3.51100649E+864348024", "-3.51100649E+864348024",
                    "-8.33363895E+941464933", "-6.7603848E-787231116", "0",
                    "-2.37357549E+77116909", "3.17403853E+308467637");
            Mathtest(374, def, "40216102.2E+292724544", "661.025962",
                    "4.02161022E+292724551", "4.02161022E+292724551",
                    "2.65838876E+292724554", "6.08389148E+292724548", "", "", "");
            Mathtest(375, def, "22785024.3E+783719168", "399.505989E+137478666",
                    "2.27850243E+783719175", "2.27850243E+783719175",
                    "9.10275367E+921197843", "5.70329981E+646240506", "", "", "");
            Mathtest(376, def, "515.591819E+821371364", "-692137914.E-149498690",
                    "5.15591819E+821371366", "5.15591819E+821371366",
                    "-3.56860646E+671872685", "-7.44926421E+970870047", "", "", "");
            Mathtest(377, def, "-536883072E+477911251", "624996.301",
                    "-5.36883072E+477911259", "-5.36883072E+477911259",
                    "-3.35549934E+477911265", "-8.59017999E+477911253", "", "", "");
            Mathtest(378, def, "-399492.914E-334369192", "5202119.87E+442442258",
                    "5.20211987E+442442264", "-5.20211987E+442442264",
                    "-2.07821003E+108073078", "-7.67942539E-776811452", "0",
                    "-3.99492914E-334369187", "");
            Mathtest(379, def, "762.071184", "9851631.37", "9852393.44",
                    "-9850869.30", "7.50764438E+9", "0.0000773548213", "0",
                    "762.071184", "4.02198436E+28392356");
            Mathtest(380, def, "5626.12471", "72989818.3", "72995444.4",
                    "-72984192.2", "4.10649820E+11", "0.0000770809524", "0",
                    "5626.12471", "1.79814757E+273727098");
            Mathtest(381, def, "-47207260.1", "-2073.3152", "-47209333.4",
                    "-47205186.8", "9.78755299E+10", "22768.9741", "22768",
                    "-2019.6264", "-6.02238319E-15909");
            Mathtest(382, def, "207.740860", "-51.0390090", "156.701851",
                    "258.779869", "-10602.8876", "-4.07023694", "-4", "3.5848240",
                    "6.40297515E-119");
            Mathtest(383, def, "-572.812464E-745934021", "-182805872.E+604508681",
                    "-1.82805872E+604508689", "1.82805872E+604508689",
                    "1.04713482E-141425329", "", "0", "-5.72812464E-745934019", "");
            Mathtest(384, def, "-6418504E+3531407", "8459416.1",
                    "-6.41850400E+3531413", "-6.41850400E+3531413",
                    "-5.42967961E+3531420", "-7.58740784E+3531406", "", "", "");
            Mathtest(385, def, "280689.531", "-128212543", "-127931854",
                    "128493233", "-3.59879186E+13", "-0.00218925173", "0",
                    "280689.531", "1.42173809E-698530938");
            Mathtest(386, def, "15.803551E-783422793", "239108038E-489186308",
                    "2.39108038E-489186300", "-2.39108038E-489186300", "",
                    "6.60937672E-294236493", "0", "1.5803551E-783422792", "");
            Mathtest(387, def, "26.515922", "-9418242.96E-105481628", "26.5159220",
                    "26.5159220", "-2.49733396E-105481620",
                    "-2.81537885E+105481622", "", "", "1.54326108E-13");
            Mathtest(388, def, "-88.1094557", "-54029934.1", "-54030022.2",
                    "54029846.0", "4.76054809E+9", "0.0000016307526", "0",
                    "-88.1094557", "5.05289826E-105089439");
            Mathtest(389, def, "6770.68602E-498420397", "-6.11248908E-729616908",
                    "6.77068602E-498420394", "6.77068602E-498420394", "",
                    "-1.10768067E+231196514", "", "", "");
            Mathtest(390, def, "-892973818.E-781904441", "555201299.", "555201299",
                    "-555201299", "-4.95780224E-781904424",
                    "-1.60837847E-781904441", "0", "-8.92973818E-781904433", "");
            Mathtest(391, def, "670175802E+135430680", "27355195.4",
                    "6.70175802E+135430688", "6.70175802E+135430688",
                    "1.83327900E+135430696", "2.44990318E+135430681", "", "", "");
            Mathtest(392, def, "-440950.26", "205.477469E-677345561",
                    "-440950.260", "-440950.260", "-9.06053434E-677345554",
                    "-2.14597864E+677345564", "", "", "1.94437132E+11");
            Mathtest(393, def, "-8.2335779", "573665010E+742722075",
                    "5.73665010E+742722083", "-5.73665010E+742722083",
                    "-4.72331555E+742722084", "-1.43525886E-742722083", "0",
                    "-8.2335779", "311552.753");
            Mathtest(394, def, "452943.863", "7022.23629", "459966.099",
                    "445921.627", "3.18067883E+9", "64.5013703", "64",
                    "3520.74044", "5.54158976E+39716");
            Mathtest(395, def, "62874.1079", "-52719654.1", "-52656780.0",
                    "52782528.2", "-3.31470122E+12", "-0.0011926123", "0",
                    "62874.1079", "1.18819936E-252973775");
            Mathtest(396, def, "-7428.41741E+609772037", "-46024819.3",
                    "-7.42841741E+609772040", "-7.42841741E+609772040",
                    "3.41891569E+609772048", "1.61400251E+609772033", "", "", "");
            Mathtest(397, def, "2.27959297", "41937.019", "41939.2986",
                    "-41934.7394", "95599.3337", "0.0000543575348", "0",
                    "2.27959297", "2.89712423E+15007");
            Mathtest(398, def, "508692408E-671967782", "8491989.20", "8491989.20",
                    "-8491989.20", "4.31981043E-671967767",
                    "5.99026207E-671967781", "0", "5.08692408E-671967774", "");
            Mathtest(399, def, "940.533705E-379310421", "-4.01176961E+464620037",
                    "-4.01176961E+464620037", "4.01176961E+464620037",
                    "-3.77320453E+85309619", "-2.34443599E-843930456", "0",
                    "9.40533705E-379310419", "");
            Mathtest(400, def, "97.0649652", "-92.4485649E-151989098",
                    "97.0649652", "97.0649652", "-8.97351673E-151989095",
                    "-1.0499348E+151989098", "", "", "1.30748728E-18");
            Mathtest(401, def, "297544.536E+360279473", "8.80275007",
                    "2.97544536E+360279478", "2.97544536E+360279478",
                    "2.61921019E+360279479", "3.38013159E+360279477", "", "", "");
            Mathtest(402, def, "-28861028.", "82818.820E+138368758",
                    "8.28188200E+138368762", "-8.28188200E+138368762",
                    "-2.39023628E+138368770", "-3.48483932E-138368756", "0",
                    "-28861028", "4.81387013E+59");
            Mathtest(403, def, "36.2496238E+68828039", "49243.00",
                    "3.62496238E+68828040", "3.62496238E+68828040",
                    "1.78504022E+68828045", "7.36137599E+68828035", "", "", "");
            Mathtest(404, def, "22.447828E-476014683", "-56067.5520",
                    "-56067.5520", "56067.5520", "-1.25859476E-476014677",
                    "-4.00371109E-476014687", "0", "2.2447828E-476014682", "");
            Mathtest(405, def, "282688.791E+75011952", "5.99789051",
                    "2.82688791E+75011957", "2.82688791E+75011957",
                    "1.69553642E+75011958", "4.7131369E+75011956", "", "",
                    "5.10330507E+450071744");
            Mathtest(406, def, "-981.860310E-737387002", "-994046289",
                    "-994046289", "994046289", "9.76014597E-737386991",
                    "9.87741035E-737387009", "0", "-9.81860310E-737387000", "");
            Mathtest(407, def, "-702.91210", "-6444903.55", "-6445606.46",
                    "6444200.64", "4.53020069E+9", "0.000109064797", "0",
                    "-702.91210", "1.70866703E-18348004");
            Mathtest(408, def, "972456720E-17536823", "16371.2590", "16371.2590",
                    "-16371.2590", "1.59203408E-17536810", "5.94002404E-17536819",
                    "0", "9.72456720E-17536815", "");
            Mathtest(409, def, "71471.2045", "-74303278.4", "-74231807.2",
                    "74374749.6", "-5.31054481E+12", "-0.00096188494", "0",
                    "71471.2045", "2.14535374E-360677853");
            Mathtest(410, def, "643.103951E+439708441", "788251925.",
                    "6.43103951E+439708443", "6.43103951E+439708443",
                    "5.06927927E+439708452", "8.15860933E+439708434", "", "", "");
            Mathtest(411, def, "4.30838663", "-7.43110827", "-3.12272164",
                    "11.7394949", "-32.0160875", "-0.579777131", "0", "4.30838663",
                    "0.0000362908645");
            Mathtest(412, def, "823.678025", "-513.581840E-324453141",
                    "823.678025", "823.678025", "-4.23026076E-324453136",
                    "-1.60379118E+324453141", "", "", "2.63762228E-15");
            Mathtest(413, def, "4461.81162", "3.22081680", "4465.03244",
                    "4458.59080", "14370.6778", "1385.30438", "1385", "0.98035200",
                    "8.8824688E+10");
            Mathtest(414, def, "-4458527.10", "-99072605", "-103531132",
                    "94614077.9", "4.41717894E+14", "0.0450026231", "0",
                    "-4458527.10", "-6.23928099E-658752715");
            Mathtest(415, def, "-577964618", "487424368.", "-90540250",
                    "-1.06538899E+9", "-2.81714039E+17", "-1.18575241", "-1",
                    "-90540250", "");
            Mathtest(416, def, "-867.036184", "-57.1768608", "-924.213045",
                    "-809.859323", "49574.4072", "15.1641096", "15", "-9.3832720",
                    "-3.40312837E-168");
            Mathtest(417, def, "771871921E-330504770", "5.34285236", "5.34285236",
                    "-5.34285236", "4.12399771E-330504761",
                    "1.44468136E-330504762", "0", "7.71871921E-330504762", "");
            Mathtest(418, def, "-338683.062E-728777518", "166441931", "166441931",
                    "-166441931", "-5.63710628E-728777505",
                    "-2.03484218E-728777521", "0", "-3.38683062E-728777513", "");
            Mathtest(419, def, "-512568743", "-416376887.E-965945295",
                    "-512568743", "-512568743", "2.13421778E-965945278",
                    "1.23102112E+965945295", "", "", "1.44874358E-35");
            Mathtest(420, def, "7447181.99", "5318438.52", "12765620.5",
                    "2128743.47", "3.96073796E+13", "1.40025723", "1",
                    "2128743.47", "1.21634782E+36548270");
            Mathtest(421, def, "54789.8207", "93165435.2", "93220225.0",
                    "-93110645.4", "5.10451749E+12", "0.000588091716", "0",
                    "54789.8207", "3.80769825E+441483035");
            Mathtest(422, def, "41488.5960", "146.797094", "41635.3931",
                    "41341.7989", "6090405.33", "282.625459", "282", "91.815492",
                    "6.84738153E+678");
            Mathtest(423, def, "785741.663E+56754529", "-461.531732",
                    "7.85741663E+56754534", "7.85741663E+56754534",
                    "-3.62644711E+56754537", "-1.70246509E+56754532", "", "", "");
            Mathtest(424, def, "-4.95436786", "-3132.4233", "-3137.37767",
                    "3127.46893", "15519.1773", "0.0015816406", "0", "-4.95436786",
                    "1.98062422E-2177");
            Mathtest(425, def, "77321.8478E+404626874", "82.4797688",
                    "7.73218478E+404626878", "7.73218478E+404626878",
                    "6.37748813E+404626880", "9.3746441E+404626876", "", "", "");
            Mathtest(426, def, "-7.99307725", "-29153.7273", "-29161.7204",
                    "29145.7342", "233027.994", "0.000274169994", "0",
                    "-7.99307725", "1.88688028E-26318");
            Mathtest(427, def, "-61.6337401E+474999517", "5254.87092",
                    "-6.16337401E+474999518", "-6.16337401E+474999518",
                    "-3.23877349E+474999522", "-1.1728878E+474999515", "", "", "");
            Mathtest(428, def, "-16.4043088", "35.0064812", "18.6021724",
                    "-51.4107900", "-574.257128", "-0.468607762", "0",
                    "-16.4043088", "-3.33831843E+42");
            Mathtest(429, def, "-8.41156520", "-56508958.9", "-56508967.3",
                    "56508950.5", "475328792", "1.48853657E-7", "0", "-8.41156520",
                    "-8.86365458E-52263827");
            Mathtest(430, def, "-360165.79E+503559835", "-196688.515",
                    "-3.60165790E+503559840", "-3.60165790E+503559840",
                    "7.08404744E+503559845", "1.83114805E+503559835", "", "", "");
            Mathtest(431, def, "-653236480.E+565648495", "-930.445274",
                    "-6.53236480E+565648503", "-6.53236480E+565648503",
                    "6.07800796E+565648506", "7.02068674E+565648500", "", "", "");
            Mathtest(432, def, "-3.73342903", "855.029289", "851.295860",
                    "-858.762718", "-3192.19117", "-0.00436643408", "0",
                    "-3.73342903", "-1.41988961E+489");
            Mathtest(433, def, "-5.14890532E+562048011", "10847127.8E-390918910",
                    "-5.14890532E+562048011", "-5.14890532E+562048011",
                    "-5.58508340E+171129108", "-4.74679142E+952966914", "", "",
                    "-5.14890532E+562048011");
            Mathtest(434, def, "653311907", "-810.036965E+744537823",
                    "-8.10036965E+744537825", "8.10036965E+744537825",
                    "-5.29206794E+744537834", "-8.06521104E-744537818", "0",
                    "653311907", "3.01325171E-71");
            Mathtest(435, def, "-1.31557907", "98.9139300E-579281802",
                    "-1.31557907", "-1.31557907", "-1.30129096E-579281800",
                    "-1.33002406E+579281800", "", "", "15.529932");
            Mathtest(436, def, "-875192389", "-72071565.6", "-947263955",
                    "-803120823", "6.30764857E+16", "12.1433797", "12",
                    "-10333601.8", "1.25564408E-644471405");
            Mathtest(437, def, "-72838078.8", "-391.398423", "-72838470.2",
                    "-72837687.4", "2.85087092E+10", "186097.017", "186097",
                    "-6.474969", "-6.574057E-3075");
            Mathtest(438, def, "29186560.9", "-79.7419988", "29186481.2",
                    "29186640.6", "-2.32739470E+9", "-366012.407", "-366012",
                    "32.4352144", "6.10050869E-598");
            Mathtest(439, def, "-329801660E-730249465", "-6489.9256",
                    "-6489.92560", "6489.92560", "2.14038824E-730249453",
                    "5.08174793E-730249461", "0", "-3.29801660E-730249457", "");
            Mathtest(440, def, "91.8429117E+103164883", "7131455.16",
                    "9.18429117E+103164884", "9.18429117E+103164884",
                    "6.54973607E+103164891", "1.28785654E+103164878", "", "", "");
            Mathtest(441, def, "3943866.38E+150855113", "-31927007.3",
                    "3.94386638E+150855119", "3.94386638E+150855119",
                    "-1.25915851E+150855127", "-1.23527594E+150855112", "", "", "");
            Mathtest(442, def, "-7002.0468E-795962156", "-5937891.05",
                    "-5937891.05", "5937891.05", "4.15773910E-795962146",
                    "1.17921443E-795962159", "0", "-7.0020468E-795962153", "");
            Mathtest(443, def, "696504605.", "54506.4617", "696559111",
                    "696450099", "3.79640016E+13", "12778.386", "12778",
                    "21037.3974", "2.6008532E+481992");
            Mathtest(444, def, "-5115.76467", "690.960979E+815126701",
                    "6.90960979E+815126703", "-6.90960979E+815126703",
                    "-3.53479376E+815126707", "-7.4038402E-815126701", "0",
                    "-5115.76467", "-9.17009655E+25");
            Mathtest(445, def, "-261.279392", "-613.079357", "-874.358749",
                    "351.799965", "160185.002", "0.426175484", "0", "-261.279392",
                    "-2.06318841E-1482");
            Mathtest(446, def, "-591407763", "-80145822.8", "-671553586",
                    "-511261940", "4.73988618E+16", "7.37914644", "7",
                    "-30387003.4", "-2.79334522E-703030105");
            Mathtest(447, def, "615630407", "-69.4661869", "615630338",
                    "615630476", "-4.27654969E+10", "-8862303.15", "-8862303",
                    "10.4375693", "3.44283102E-607");
            Mathtest(448, def, "1078757.50", "27402569.0E-713742082", "1078757.50",
                    "1078757.50", "2.95607268E-713742069", "3.93670207E+713742080",
                    "", "", "1.25536924E+18");
            Mathtest(449, def, "-4865.60358E-401116515", "66952.5315",
                    "66952.5315", "-66952.5315", "-3.25764477E-401116507",
                    "-7.26724363E-401116517", "0", "-4.86560358E-401116512", "");
            Mathtest(450, def, "-87805.3921E-934896690", "-1875.14745",
                    "-1875.14745", "1875.14745", "1.64648057E-934896682",
                    "4.68258601E-934896689", "0", "-8.78053921E-934896686", "");
            Mathtest(451, def, "-232540609.E+602702520", "68.0834223",
                    "-2.32540609E+602702528", "-2.32540609E+602702528",
                    "-1.58321605E+602702530", "-3.41552468E+602702526", "", "", "");
            Mathtest(452, def, "-320610803.", "-863871235.", "-1.18448204E+9",
                    "543260432", "2.76966450E+17", "0.37113263", "0", "-320610803",
                    "");
            Mathtest(453, def, "-303956364E+278139979", "229537.920E+479603725",
                    "2.29537920E+479603730", "-2.29537920E+479603730",
                    "-6.97695116E+757743717", "-1.3242098E-201463743", "0",
                    "-3.03956364E+278139987", "9.23894712E+556279974");
            Mathtest(454, def, "-439.747348", "74.9494457E-353117582",
                    "-439.747348", "-439.747348", "-3.29588200E-353117578",
                    "-5.86725284E+353117582", "", "", "-3.17996693E+18");
            Mathtest(455, def, "-89702231.9", "1.28993993", "-89702230.6",
                    "-89702233.2", "-115710491", "-69539852.1", "-69539852",
                    "-0.07890964", "-89702231.9");
            Mathtest(456, def, "-5856939.14", "-6743375.34", "-12600314.5",
                    "886436.20", "3.94955390E+13", "0.868547107", "0",
                    "-5856939.14", "-3.29213248E-45636942");
            Mathtest(457, def, "733317.669E+100381349", "-13832.6792E+174055607",
                    "-1.38326792E+174055611", "1.38326792E+174055611",
                    "-1.01437481E+274436966", "-5.30134227E-73674257", "0",
                    "7.33317669E+100381354", "1.36366549E-100381355");
            Mathtest(458, def, "87.4798787E-80124704", "108497.32", "108497.320",
                    "-108497.320", "9.49133239E-80124698", "8.06286079E-80124708",
                    "0", "8.74798787E-80124703", "");
            Mathtest(459, def, "-694562052", "310681.319E+549445264",
                    "3.10681319E+549445269", "-3.10681319E+549445269",
                    "-2.15787454E+549445278", "-2.23560932E-549445261", "0",
                    "-694562052", "-3.35068155E+26");
            Mathtest(460, def, "-9744135.85", "1797016.04", "-7947119.81",
                    "-11541151.9", "-1.75103684E+13", "-5.42239782", "-5",
                    "-759055.65", "3.83848006E+12558883");
            Mathtest(461, def, "3625.87308", "-50.2208536E+658627487",
                    "-5.02208536E+658627488", "5.02208536E+658627488",
                    "-1.82094441E+658627492", "-7.21985554E-658627486", "0",
                    "3625.87308", "1.5956477E-18");
            Mathtest(462, def, "365347.52", "-3655414.47", "-3290066.95",
                    "4020761.99", "-1.33549661E+12", "-0.099946948", "0",
                    "365347.52", "1.02663257E-20333994");
            Mathtest(463, def, "-19706333.6E-816923050", "-383858032.",
                    "-383858032", "383858032", "7.56443443E-816923035",
                    "5.1337557E-816923052", "0", "-1.97063336E-816923043", "");
            Mathtest(464, def, "-86346.2616", "-98.8063785", "-86445.0680",
                    "-86247.4552", "8531561.41", "873.893598", "873",
                    "-88.2931695", "-2.05064086E-489");
            Mathtest(465, def, "-445588.160E-496592215", "328.822976",
                    "328.822976", "-328.822976", "-1.46519625E-496592207",
                    "-1.35510044E-496592212", "0", "-4.45588160E-496592210", "");
            Mathtest(466, def, "-9709213.71", "-34.6690137", "-9709248.38",
                    "-9709179.04", "336608863", "280054.512", "280054",
                    "-17.7472602", "-2.80903974E-245");
            Mathtest(467, def, "742395536.", "-43533.6889", "742352002",
                    "742439070", "-3.23192163E+13", "-17053.3569", "-17053",
                    "15539.1883", "5.7622734E-386175");
            Mathtest(468, def, "-878849193.", "-5842982.47E-972537342",
                    "-878849193", "-878849193", "5.13510043E-972537327",
                    "1.50411061E+972537344", "", "", "2.17027042E-54");
            Mathtest(469, def, "-78014142.1", "-624658.522", "-78638800.6",
                    "-77389483.6", "4.87321987E+13", "124.890863", "124",
                    "-556485.372", "-7.86063865E-4929918");
            Mathtest(470, def, "857039.371", "454.379672", "857493.751",
                    "856584.991", "389421268", "1886.17454", "1886", "79.309608",
                    "3.82253101E+2693");
            Mathtest(471, def, "166534010.", "-173.012236", "166533837",
                    "166534183", "-2.88124214E+10", "-962556.255", "-962556",
                    "44.164784", "4.78620664E-1423");
            Mathtest(472, def, "-810.879063", "43776.610", "42965.7309",
                    "-44587.4891", "-35497536.5", "-0.0185231123", "0",
                    "-810.879063", "-2.34758691E+127345");
            Mathtest(473, def, "-327.127935", "93458944", "93458616.9",
                    "-93459271.1", "-3.05730314E+10", "-0.00000350023145", "0",
                    "-327.127935", "2.29323021E+235022854");
            Mathtest(474, def, "539295218.", "-9587941.10E-309643098", "539295218",
                    "539295218", "-5.17073079E-309643083",
                    "-5.62472394E+309643099", "", "", "4.80545269E-88");
            Mathtest(475, def, "-3862702.65", "879616.733", "-2983085.92",
                    "-4742319.38", "-3.39769789E+12", "-4.3913474", "-4",
                    "-344235.718", "-3.50650167E+5793941");
            Mathtest(476, def, "-8.25290500", "992.091584E+256070257",
                    "9.92091584E+256070259", "-9.92091584E+256070259",
                    "-8.18763759E+256070260", "-8.31869268E-256070260", "0",
                    "-8.25290500", "1.46577888E+9");
            Mathtest(477, def, "546875205.", "447.52857E+557357101",
                    "4.47528570E+557357103", "-4.47528570E+557357103",
                    "2.44742278E+557357112", "1.22198948E-557357095", "0",
                    "546875205", "8.94443542E+34");
            Mathtest(478, def, "177623437", "-7779116.14", "169844321",
                    "185402553", "-1.38175335E+15", "-22.83337", "-22",
                    "6482881.92", "2.90085309E-64173820");
            Mathtest(479, def, "377204735.", "13768.1401", "377218503",
                    "377190967", "5.19340764E+12", "27396.9274", "27396",
                    "12768.8204", "2.06065297E+118082");
            Mathtest(480, def, "-2435.49239", "-11732.0640E-23331504",
                    "-2435.49239", "-2435.49239", "2.85733526E-23331497",
                    "2.07592832E+23331503", "", "", "-0.00041059459");
            Mathtest(481, def, "-6128465.14E-137123294", "-5742264.27",
                    "-5742264.27", "5742264.27", "3.51912664E-137123281",
                    "1.06725585E-137123294", "0", "-6.12846514E-137123288", "");
            Mathtest(482, def, "-2898065.44", "-5.11638105", "-2898070.56",
                    "-2898060.32", "14827607.1", "566428.773", "566428",
                    "-3.95461060", "-4.89169151E-33");
            Mathtest(483, def, "1851395.31E+594383160", "-550301.475",
                    "1.85139531E+594383166", "1.85139531E+594383166",
                    "-1.01882557E+594383172", "-3.36432918E+594383160", "", "", "");
            Mathtest(484, def, "536412589.E+379583977", "899.601161",
                    "5.36412589E+379583985", "5.36412589E+379583985",
                    "4.82557388E+379583988", "5.96278231E+379583982", "", "", "");
            Mathtest(485, def, "185.85297", "867419480.", "867419666",
                    "-867419294", "1.61212487E+11", "2.14259622E-7", "0",
                    "185.85297", "");
            Mathtest(486, def, "-5.26631053", "-3815941.35E+183291763",
                    "-3.81594135E+183291769", "3.81594135E+183291769",
                    "2.00959321E+183291770", "1.38008162E-183291769", "0",
                    "-5.26631053", "0.00130009218");
            Mathtest(487, def, "-8.11587021E-245942806", "4553.06753E+943412048",
                    "4.55306753E+943412051", "-4.55306753E+943412051",
                    "-3.69521051E+697469246", "", "0", "-8.11587021E-245942806", "");
            Mathtest(488, def, "-405765.352", "854963231", "854557466",
                    "-855368996", "-3.46914456E+14", "-0.000474599769", "0",
                    "-405765.352", "");
            Mathtest(489, def, "-159.609757", "-43356.7567", "-43516.3665",
                    "43197.1470", "6920161.40", "0.00368131219", "0",
                    "-159.609757", "-8.95397849E-95519");
            Mathtest(490, def, "-564240.241E-501316672", "-557.781977",
                    "-557.781977", "557.781977", "3.14723037E-501316664",
                    "1.01157847E-501316669", "0", "-5.64240241E-501316667", "");
            Mathtest(491, def, "318847.270", "582107878.E+399633412",
                    "5.82107878E+399633420", "-5.82107878E+399633420",
                    "1.85603508E+399633426", "5.47746014E-399633416", "0",
                    "318847.270", "1.0507423E+33");
            Mathtest(492, def, "-4426.59663", "95.1096765", "-4331.48695",
                    "-4521.70631", "-421012.173", "-46.5420217", "-46",
                    "-51.5515110", "-2.38037379E+346");
            Mathtest(493, def, "6037.28310", "578264.105", "584301.388",
                    "-572226.822", "3.49114411E+9", "0.010440356", "0",
                    "6037.28310", "3.57279483E+2186324");
            Mathtest(494, def, "-66.9556692", "-53.8519404", "-120.807610",
                    "-13.1037288", "3605.69271", "1.24332881", "1", "-13.1037288",
                    "2.55554086E-99");
            Mathtest(495, def, "-92486.0222", "-59935.8544", "-152421.877",
                    "-32550.1678", "5.54322876E+9", "1.5430834", "1",
                    "-32550.1678", "1.83152656E-297647");
            Mathtest(496, def, "852136219.E+917787351", "9246221.91",
                    "8.52136219E+917787359", "8.52136219E+917787359",
                    "7.87904058E+917787366", "9.21604767E+917787352", "", "", "");
            Mathtest(497, def, "-2120096.16E-269253718", "9437.00514",
                    "9437.00514", "-9437.00514", "-2.00073584E-269253708",
                    "-2.24657731E-269253716", "0", "-2.12009616E-269253712", "");
            Mathtest(498, def, "-524653.169E-865784226", "228054.698",
                    "228054.698", "-228054.698", "-1.19649620E-865784215",
                    "-2.30055848E-865784226", "0", "-5.24653169E-865784221", "");
            Mathtest(499, def, "-288193133", "-312268737.", "-600461870",
                    "24075604", "8.99937057E+16", "0.922901011", "0", "-288193133",
                    "");
            Mathtest(500, def, "-373484759E-113589964", "844101958E-852538240",
                    "-3.73484759E-113589956", "-3.73484759E-113589956",
                    "-3.15259216E-966128187", "-4.42464036E+738948275", "", "",
                    "3.78602147E-908719644");

            Summary("Arithmetic");
        }

        /*
         * mathtest -- general arithmetic test routine Arg1 is test number Arg2 is
         * MathContext Arg3 is left hand side (LHS) Arg4 is right hand side (RHS)
         * Arg5 is the expected result for add Arg6 is the expected result for
         * subtract Arg7 is the expected result for multiply Arg8 is the expected
         * result for divide Arg9 is the expected result for integerDivide Arg10 is
         * the expected result for remainder Arg11 is the expected result for power
         * 
         * For power RHS, 0 is added to the number, any exponent is removed and the
         * number is then rounded to an integer, using format(rhs+0,,0)
         * 
         * If an error should result for an operation, the 'expected result' is an
         * empty string.
         */

        private void Mathtest(int test, IBM.ICU.Math.MathContext mc,
                System.String slhs, System.String srhs, System.String add,
                System.String sub, System.String mul, System.String div,
                System.String idv, System.String rem, System.String pow)
        {
            IBM.ICU.Math.BigDecimal lhs;
            IBM.ICU.Math.BigDecimal rhs;
            System.String res = null;
            System.String sn = null;
            int e = 0;

            lhs = new IBM.ICU.Math.BigDecimal(slhs);
            rhs = new IBM.ICU.Math.BigDecimal(srhs);

            try
            {
                res = lhs.Add(rhs, mc).ToString();
            }
            catch (System.ArithmeticException _137)
            {
                res = "";
            }
            Mathtestcheck(test, lhs, rhs, "add", res, add);

            try
            {
                res = lhs.Subtract(rhs, mc).ToString();
            }
            catch (System.ArithmeticException _138)
            {
                res = "";
            }
            Mathtestcheck(test, lhs, rhs, "sub", res, sub);

            try
            {
                res = lhs.Multiply(rhs, mc).ToString();
            }
            catch (System.ArithmeticException _139)
            {
                res = "";
            }
            Mathtestcheck(test, lhs, rhs, "mul", res, mul);

            try
            {
                res = lhs.Divide(rhs, mc).ToString();
            }
            catch (System.ArithmeticException _140)
            {
                res = "";
            }
            Mathtestcheck(test, lhs, rhs, "div", res, div);

            try
            {
                res = lhs.DivideInteger(rhs, mc).ToString();
            }
            catch (System.ArithmeticException _141)
            {
                res = "";
            }
            Mathtestcheck(test, lhs, rhs, "idv", res, idv);

            try
            {
                res = lhs.Remainder(rhs, mc).ToString();
            }
            catch (System.ArithmeticException _142)
            {
                res = "";
            }
            Mathtestcheck(test, lhs, rhs, "rem", res, rem);

            try
            {
                // prepare an integer from the rhs
                // in Rexx:
                // n=rhs+0
                // e=pos('E', n)
                // if e>0 then n=left(n,e-1)
                // n=format(n,,0)

                sn = rhs.Plus(mc).ToString();
                e = ILOG.J2CsMapping.Util.StringUtil.IndexOf(sn, "E", 0);
                if (e > 0)
                    sn = sn.Substring(0, (e) - (0));
                sn = (new IBM.ICU.Math.BigDecimal(sn)).Format(-1, 0);

                res = lhs.Pow(new IBM.ICU.Math.BigDecimal(sn), mc).ToString();
            }
            catch (System.ArithmeticException _143)
            {
                res = "";
            }
            Mathtestcheck(test, lhs, rhs, "pow", res, pow);
            return;
        }

        /*
         * mathtestcheck -- check for general mathtest error Arg1 is test number
         * Arg2 is left hand side (LHS) Arg3 is right hand side (RHS) Arg4 is the
         * operation Arg5 is the actual result Arg6 is the expected result Show
         * error message if a problem, otherwise return quietly
         */

        private void Mathtestcheck(int test, IBM.ICU.Math.BigDecimal lhs,
                IBM.ICU.Math.BigDecimal rhs, System.String op,
                System.String got, System.String want)
        {
            bool flag;
            System.String testnum;

            flag = want.Equals((Object)got);

            if ((!flag))
                Say(">" + test + ">" + " " + lhs.ToString() + " " + op + " "
                        + rhs.ToString() + " " + "=" + " " + want + " " + "[got"
                        + " " + got + "]");

            testnum = "gen"
                    + Right((new IBM.ICU.Math.BigDecimal(test + 1000))
                            .ToString(),
                            3);

            (new DiagBigDecimal.Test(this, testnum)).ok = flag;
            return;
        }

        /* ------------------------------------------------------------------ */
        /* Support routines and minor classes follow */
        /* ------------------------------------------------------------------ */

        /* ----------------------------------------------------------------- */
        /* Method called to summarise pending tests */
        /* ----------------------------------------------------------------- */
        /* Arg1 is section name */

        private void Summary(System.String section)
        {
            int bad;
            int count;
            int i = 0;
            DiagBigDecimal.Test item = null;
            bad = 0;
            count = Tests.Count;
            {
                int _144 = count;
                i = 0;
                for (; _144 > 0; _144--, i++)
                {
                    item = (DiagBigDecimal.Test)(Tests[i]);
                    if ((!item.ok))
                    {
                        bad++;
                        Errln("Failed:" + " " + item.name);
                    }
                }
            }/* i */
            totalcount = totalcount + count;
            Tests = new ArrayList(100); // reinitialize
            if (bad == 0)
                Say("OK" + " " + Left(section, 14) + " "
                        + Right("[" + count + " " + "tests]", 12));
            else
                throw new DiagBigDecimal.DiagException(section + " " + "[failed" + " " + bad + " "
                        + "of" + " " + count + " " + "tests]", bad);
        }

        /* ----------------------------------------------------------------- */
        /* right - Utility to do a 'right' on a Java String */
        /* ----------------------------------------------------------------- */
        /* Arg1 is string to right-justify */
        /* Arg2 is desired length */

        private static System.String Right(System.String s, int len)
        {
            int slen;
            slen = s.Length;
            if (slen == len)
                return s; // length just right
            if (slen > len)
                return s.Substring(slen - len); // truncate on left
            // too short
            return String.Concat((ILOG.J2CsMapping.Util.StringUtil.NewString(new char[len - slen]))
                            .Replace('\u0000', ' '), s);
        }

        /* ----------------------------------------------------------------- */
        /* left - Utility to do a 'left' on a Java String */
        /* ----------------------------------------------------------------- */
        /* Arg1 is string to left-justify */
        /* Arg2 is desired length */

        private static System.String Left(System.String s, int len)
        {
            int slen;
            slen = s.Length;
            if (slen == len)
                return s; // length just right
            if (slen > len)
                return s.Substring(0, (len) - (0)); // truncate on right
            // too short
            return String.Concat(s, (ILOG.J2CsMapping.Util.StringUtil.NewString(new char[len - slen])).Replace(
                            '\u0000', ' '));
        }

        /* ----------------------------------------------------------------- */
        /* say - Utility to do a display */
        /* ----------------------------------------------------------------- */
        /* Arg1 is string to display, omitted if none */
        /* [null or omitted gives blank line] */
        // this version doesn't heed continuation final character
        private void Say()
        {
            Say((String)null);
            return;
        }

        private void Say(System.String s)
        {
            if (s == null)
                s = "  ";
            Logln(s);
        }

        /* ----------------------------------------------------------------- */
        /* Scaffolding for stand-alone run */
        /* ----------------------------------------------------------------- */
        /// <summary>
        /// Entry point for stand-alone run. It constructs a
        /// <c>DiagBigDecimal</c> object and then invokes its<see cref="M:IBM.ICU.Dev.Test.BigDec.DiagBigDecimal.Diagrun(System.Boolean)"/> method to run the test suite.
        /// </summary>
        ///
        /// <param name="args">The command line argument string array. if the first word is '<c>continue</c>' then try and run all tests, otherwisestop after the first failing test group.</param>
        public static void Main(String[] args)
        {
            new DiagBigDecimal().Run(args);
        }

        [Test]
        public void TestBigDecimal()
        {
            bool _continue;
            int fails;
            _continue = false;
            fails = Diagrun(_continue); // and run the tests
            if (fails != 0)
            {
                Errln("Diagnostic Tests for math failed. Number of errors: "
                        + fails);
            }
        }

        /* ------------------------------------------------------------------ */
        /* Test -- represents a test and its status */
        /* ------------------------------------------------------------------ */
        /* Copyright IBM Corporation 1998, 2000. All rights reserved. */
        /* Author: Mike Cowlishaw */
        /* ------------------------------------------------------------------ */
        /* 1998.07.15 Initial version */
        /* 2000.03.27 Change to javadoc comments */

        /// <summary>
        /// The <c>Test</c> class is used to record a specific test. When
        /// constructed, it notes the name of the test and adds the test to the list
        /// of tests held by the parent.
        /// Its <code>ok</flag> is assigned directly to record whether the
        /// test succeeded (1) or failed (0).
        /// </summary>
        ///
        /// <seealso cref="T:IBM.ICU.Dev.Test.BigDec.BigDecimal"/>

        public class Test
        {
            // private final transient java.lang.String $0 = "DiagBigDecimal.nrx";

            private DiagBigDecimal outer_DiagBigDecimal;

            /* properties shared transient */
            /// <summary>
            /// The name of the test. 
            /// </summary>
            ///
            internal System.String name;

            /// <summary>
            /// Success flag; will be set to 1 (true) if the test succeeded, or 0
            /// (false) if the test failed.
            /// </summary>
            ///
            internal bool ok;

            /// <summary>
            /// Constructs a new <c>Test</c> with a specified name.
            /// </summary>
            ///
            /// <param name="testname">The <c>String</c> naming the test.</param>
            /// <param name="decimal">TODO</param>

            public Test(DiagBigDecimal decima, System.String testname)
                : base()
            {
                outer_DiagBigDecimal = decima;
                name = testname; // save the name
                outer_DiagBigDecimal.Tests.Add((Object)this); // and
                // add
                // to
                // parent's
                // list
            }
        }

        /* ------------------------------------------------------------------ */
        /* DiagException */
        /* ------------------------------------------------------------------ */
        /* Copyright IBM Corporation 1996, 2000. All rights reserved. */
        /* Author: Mike Cowlishaw */
        /* ------------------------------------------------------------------ */
        /* 1996.05.27 Initial version in NetRexx (as DiagX) */
        /* 1998.06.25 Copied from NetRexx test suite */
        /* 1999.07.03 Add fail count */
        /* 2000.03.27 Change to javadoc comments */

        /// <summary>
        /// The <c>DiagException</c> class is used to signal the failure of a
        /// test group. It records the number of failures in the group.
        /// </summary>
        ///
        /// <seealso cref="T:IBM.ICU.Dev.Test.BigDec.BigDecimal"/>
        [Serializable]

        public class DiagException : Exception
        {
            // private final transient java.lang.String $0 = "DiagBigDecimal.nrx";

            /// <summary>
            /// For serialization
            /// </summary>
            ///
            private const long serialVersionUID = 755873172220249188L;

            /* properties shared transient */
            /// <summary>
            /// the count of failed tests in the group which signalled this
            /// exception.
            /// </summary>
            ///
            internal int failcount;

            // number of tests which failed

            /// <summary>
            /// Constructs a new <c>DiagException</c> with a message and
            /// failure count. This is thrown when a group of tests fails.
            /// </summary>
            ///
            /// <param name="message">The <c>String</c> message describing the group.</param>
            /// <param name="fails">The <c>int</c> number of failed tests in the group.</param>

            public DiagException(System.String message, int fails)
                : base(message)
            {
                this.failcount = 0;
                failcount = fails;
            }
        }
    }
}
