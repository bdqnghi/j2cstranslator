/*
 *******************************************************************************
 *   Copyright (C) 2001-2007, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 10:46 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Charset {
	
	using IBM.ICU.Text;
	using NUnit;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Regression test for the UBA implementation.
	/// ported from C by Lina Kemmel, Matitiahu Allouche
	/// </summary>
	///
	
	[NUnit.Framework.TestFixture]
	public class TestReorder : BidiTest {
	
	    private static readonly String[] logicalOrder = { "del(KC)add(K.C.&)",
	            "del(QDVT) add(BVDL)", "del(PQ)add(R.S.)T)U.&",
	            "del(LV)add(L.V.) L.V.&", "day  0  R  DPDHRVR dayabbr",
	            "day  1  H  DPHPDHDA dayabbr", "day  2   L  DPBLENDA dayabbr",
	            "day  3  J  DPJQVM  dayabbr", "day  4   I  DPIQNF    dayabbr",
	            "day  5  M  DPMEG  dayabbr", "helloDPMEG", "hello WXYZ" };
	
	    private static readonly String[] visualOrder = { "del(CK)add(&.C.K)",
	            "del(TVDQ) add(LDVB)", "del(QP)add(&.U(T(.S.R",
	            "del(VL)add(&.V.L (.V.L", "day  0  RVRHDPD  R dayabbr",
	            "day  1  ADHDPHPD  H dayabbr", "day  2   ADNELBPD  L dayabbr",
	            "day  3  MVQJPD  J  dayabbr", "day  4   FNQIPD  I    dayabbr",
	            "day  5  GEMPD  M  dayabbr", "helloGEMPD", "hello ZYXW" };
	
	    private static readonly String[] visualOrder1 = { ")K.C.&(dda)KC(led",
	            ")BVDL(dda )QDVT(led", "R.S.(T(U.&(dda)PQ(led",
	            "L.V.( L.V.&(dda)LV(led", "rbbayad R  DPDHRVR  0  yad",
	            "rbbayad H  DPHPDHDA  1  yad", "rbbayad L  DPBLENDA   2  yad",
	            "rbbayad  J  DPJQVM  3  yad", "rbbayad    I  DPIQNF   4  yad",
	            "rbbayad  M  DPMEG  5  yad", "DPMEGolleh", "WXYZ olleh" };
	
	    private static readonly String[] visualOrder2 = { "@)@K.C.&@(dda)@KC@(led",
	            "@)@BVDL@(dda )@QDVT@(led", "R.S.)T)U.&@(dda)@PQ@(led",
	            "L.V.) L.V.&@(dda)@LV@(led", "rbbayad @R  DPDHRVR@  0  yad",
	            "rbbayad @H  DPHPDHDA@  1  yad", "rbbayad @L  DPBLENDA@   2  yad",
	            "rbbayad  @J  DPJQVM@  3  yad", "rbbayad    @I  DPIQNF@   4  yad",
	            "rbbayad  @M  DPMEG@  5  yad", "DPMEGolleh", "WXYZ@ olleh" };
	
	    private static readonly String[] visualOrder3 = { ")K.C.&(KC)dda(led",
	            ")BVDL(ddaQDVT) (led", "R.S.)T)U.&(PQ)dda(led",
	            "L.V.) L.V.&(LV)dda(led", "rbbayad DPDHRVR   R  0 yad",
	            "rbbayad DPHPDHDA   H  1 yad", "rbbayad DPBLENDA     L 2 yad",
	            "rbbayad  DPJQVM   J  3 yad", "rbbayad    DPIQNF     I 4 yad",
	            "rbbayad  DPMEG   M  5 yad", "DPMEGolleh", "WXYZ olleh" };
	
	    private static readonly String[] visualOrder4 = { "del(add(CK(.C.K)",
	            "del( (TVDQadd(LDVB)", "del(add(QP(.U(T(.S.R",
	            "del(add(VL(.V.L (.V.L", "day 0  R   RVRHDPD dayabbr",
	            "day 1  H   ADHDPHPD dayabbr", "day 2 L     ADNELBPD dayabbr",
	            "day 3  J   MVQJPD  dayabbr", "day 4 I     FNQIPD    dayabbr",
	            "day 5  M   GEMPD  dayabbr", "helloGEMPD", "hello ZYXW" };
	
	    [NUnit.Framework.Test]
	    public void TestReorder2() {
	        Bidi bidi = new Bidi();
	        int testNumber;
	        int nTests = logicalOrder.Length;
	        String src, srcU16, dest = "";
	
	        Logln("\nEntering TestReorder\n");
	
	        for (testNumber = 0; testNumber < nTests; testNumber++) {
	            Logln("Testing L2V #1 for case " + testNumber);
	            src = logicalOrder[testNumber];
	            srcU16 = IBM.ICU.Charset.BidiTest.PseudoToU16(src);
	            try {
	                bidi.SetPara(srcU16, IBM.ICU.Text.Bidi.LEVEL_DEFAULT_LTR, null);
	            } catch (Exception e) {
	                Errln("Bidi.setPara(tests[" + testNumber + "], paraLevel "
	                        + IBM.ICU.Text.Bidi.LEVEL_DEFAULT_LTR + " failed.");
	            }
	            try {
	                dest = IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.WriteReordered(IBM.ICU.Text.Bidi.DO_MIRRORING));
	            } catch (Exception e_0) {
	                Errln("Bidi.writeReordered(tests[" + testNumber
	                        + "], paraLevel " + IBM.ICU.Text.Bidi.LEVEL_DEFAULT_LTR + " failed.");
	            }
	            if (!visualOrder[testNumber].Equals(dest)) {
	                AssertEquals(
	                        "Failure #1 in Bidi.writeReordered(), test number "
	                                + testNumber, visualOrder[testNumber], dest,
	                        src, null, "Bidi.DO_MIRRORING",
	                        "Bidi.LEVEL_DEFAULT_LTR");
	            }
	            CheckWhatYouCan(bidi, src, dest);
	        }
	
	        for (testNumber = 0; testNumber < nTests; testNumber++) {
	            Logln("Testing L2V #2 for case " + testNumber);
	            src = logicalOrder[testNumber];
	            srcU16 = IBM.ICU.Charset.BidiTest.PseudoToU16(src);
	            try {
	                bidi.SetPara(srcU16, IBM.ICU.Text.Bidi.LEVEL_DEFAULT_LTR, null);
	            } catch (Exception e_1) {
	                Errln("Bidi.setPara(tests[" + testNumber + "], paraLevel "
	                        + IBM.ICU.Text.Bidi.LEVEL_DEFAULT_LTR + " failed.");
	            }
	            try {
	                dest = IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.WriteReordered(IBM.ICU.Text.Bidi.DO_MIRRORING
	                        + IBM.ICU.Text.Bidi.OUTPUT_REVERSE));
	            } catch (Exception e_2) {
	                Errln("Bidi.writeReordered(test[" + testNumber
	                        + "], paraLevel " + IBM.ICU.Text.Bidi.LEVEL_DEFAULT_LTR + " failed.");
	            }
	            AssertEquals("Failure #2 in Bidi.writeReordered() at index "
	                    + testNumber, visualOrder1[testNumber], dest,
	                    logicalOrder[testNumber], null,
	                    "DO_MIRRORING + OUTPUT_REVERSE", "Bidi.LEVEL_DEFAULT_LTR");
	        }
	
	        for (testNumber = 0; testNumber < nTests; testNumber++) {
	            Logln("Testing V2L #3 for case " + testNumber);
	            src = logicalOrder[testNumber];
	            srcU16 = IBM.ICU.Charset.BidiTest.PseudoToU16(src);
	            bidi.SetInverse(true);
	            try {
	                bidi.SetPara(srcU16, IBM.ICU.Text.Bidi.LEVEL_DEFAULT_LTR, null);
	            } catch (Exception e_3) {
	                Errln("Bidi.setPara(tests[" + testNumber + "], paraLevel "
	                        + IBM.ICU.Text.Bidi.LEVEL_DEFAULT_LTR + " failed.");
	            }
	            try {
	                dest = IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.WriteReordered(IBM.ICU.Text.Bidi.OUTPUT_REVERSE
	                        | IBM.ICU.Text.Bidi.INSERT_LRM_FOR_NUMERIC));
	            } catch (Exception e_4) {
	                Errln("Bidi.writeReordered(test[" + testNumber
	                        + "], paraLevel " + IBM.ICU.Text.Bidi.LEVEL_DEFAULT_LTR + " failed.");
	            }
	            AssertEquals("Failure #3 in Bidi.writeReordered(test[" + testNumber
	                    + "])", visualOrder2[testNumber], dest,
	                    logicalOrder[testNumber], null,
	                    "INSERT_LRM_FOR_NUMERIC + OUTPUT_REVERSE",
	                    "Bidi.LEVEL_DEFAULT_LTR");
	        }
	
	        /* Max Explicit level */
	        for (testNumber = 0; testNumber < nTests; testNumber++) {
	            Logln("Testing V2L #4 for case " + testNumber);
	            src = logicalOrder[testNumber];
	            srcU16 = IBM.ICU.Charset.BidiTest.PseudoToU16(src);
	            sbyte[] levels = new sbyte[IBM.ICU.Text.Bidi.MAX_EXPLICIT_LEVEL];
	            for (int i = 0; i < 10; i++) {
	                levels[i] = (sbyte) (i + 1);
	            }
	            try {
	                bidi.SetPara(srcU16, IBM.ICU.Text.Bidi.LEVEL_DEFAULT_LTR, levels);
	            } catch (Exception e_5) {
	                Errln("Bidi.setPara(tests[" + testNumber
	                        + "], paraLevel = MAX_EXPLICIT_LEVEL = "
	                        + IBM.ICU.Text.Bidi.MAX_EXPLICIT_LEVEL + " failed.");
	            }
	            try {
	                dest = IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.WriteReordered(IBM.ICU.Text.Bidi.OUTPUT_REVERSE));
	            } catch (Exception e_6) {
	                Errln("Bidi.writeReordered(test[" + testNumber
	                        + "], paraLevel " + IBM.ICU.Text.Bidi.LEVEL_DEFAULT_LTR + " failed.");
	            }
	            AssertEquals("Failure #4 in Bidi.writeReordered(test[" + testNumber
	                    + "])", visualOrder3[testNumber], dest,
	                    logicalOrder[testNumber], null, "OUTPUT_REVERSE",
	                    "Bidi.LEVEL_DEFAULT_LTR");
	        }
	
	        for (testNumber = 0; testNumber < nTests; testNumber++) {
	            Logln("Testing V2L #5 for case " + testNumber);
	            src = logicalOrder[testNumber];
	            srcU16 = IBM.ICU.Charset.BidiTest.PseudoToU16(src);
	            sbyte[] levels_7 = new sbyte[IBM.ICU.Text.Bidi.MAX_EXPLICIT_LEVEL];
	            for (int i_8 = 0; i_8 < 10; i_8++) {
	                levels_7[i_8] = (sbyte) (i_8 + 1);
	            }
	            try {
	                bidi.SetPara(srcU16, IBM.ICU.Text.Bidi.LEVEL_DEFAULT_LTR, levels_7);
	            } catch (Exception e_9) {
	                Errln("Bidi.setPara(tests[" + testNumber + "], paraLevel "
	                        + IBM.ICU.Text.Bidi.MAX_EXPLICIT_LEVEL + " failed.");
	            }
	            try {
	                dest = IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.WriteReordered(IBM.ICU.Text.Bidi.DO_MIRRORING
	                        | IBM.ICU.Text.Bidi.REMOVE_BIDI_CONTROLS));
	            } catch (Exception e_10) {
	                Errln("Bidi.writeReordered(test[" + testNumber
	                        + "], paraLevel " + IBM.ICU.Text.Bidi.LEVEL_DEFAULT_LTR + " failed.");
	            }
	            AssertEquals("Failure #5 in Bidi.writeReordered(test[" + testNumber
	                    + "])", visualOrder4[testNumber], dest,
	                    logicalOrder[testNumber], null,
	                    "DO_MIRRORING + REMOVE_BIDI_CONTROLS",
	                    "Bidi.LEVEL_DEFAULT_LTR");
	        }
	
	        Logln("\nExiting TestReorder\n");
	    }
	
	    public static void Main(String[] args) {
	        try {
	            new TestReorder().Run(args);
	        } catch (Exception e) {
	            System.Console.Out.WriteLine(e);
	        }
	    }
	
	}
}
