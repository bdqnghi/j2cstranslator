/*
 *******************************************************************************
 *   Copyright (C) 2001-2007, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 10:46 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Charset {
	
	using IBM.ICU.Text;
	using NUnit;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	/// <summary>
	/// Regression test for streaming mode
	/// </summary>
	///
	
	[NUnit.Framework.TestFixture]
	public class TestStreaming : BidiTest {
	
	    internal const int MAXPORTIONS = 10;
	
	    internal class TestCase {
	        internal String textIn;
	
	        internal int chunk;
	
	        internal int[] nPortions;
	
	        internal int[][] portionLens;
	
	        internal String[] message;
	
	        public TestCase(String ins0, int ch, int[] np, int[][] lens, String[] msg) {
	            this.textIn = ins0;
	            this.chunk = ch;
	            this.nPortions = np;
	            this.portionLens = lens;
	            this.message = msg;
	        }
	    }
	
	    static internal readonly TestStreaming.TestCase [] testCases = {
	            new TestStreaming.TestCase ("123\n" + "abc45\r" + "67890\n" + "\r" + "02468\r"
	                    + "ghi", 6, new int[] { 6, 6 }, new int[][] { new int[] { 6, 4, 6, 1, 6, 3 },
	                            new int[] { 4, 6, 6, 1, 6, 3 } }, new String[] {
	                    "6, 4, 6, 1, 6, 3", "4, 6, 6, 1, 6, 3" }),
	            new TestStreaming.TestCase ("abcd\nfgh\r12345\n456", 6, new int[] { 4, 4 },
	                    new int[][] { new int[] { 6, 3, 6, 3 }, new int[] { 5, 4, 6, 3 } },
	                    new String[] { "6, 3, 6, 3", "5, 4, 6, 3" }),
	            new TestStreaming.TestCase ("abcd\nfgh\r12345\n45\r", 6, new int[] { 4, 4 },
	                    new int[][] { new int[] { 6, 3, 6, 3 }, new int[] { 5, 4, 6, 3 } },
	                    new String[] { "6, 3, 6, 3", "5, 4, 6, 3" }),
	            new TestStreaming.TestCase ("abcde\nfghi", 10, new int[] { 1, 2 }, new int[][] { new int[] { 10 }, new int[] { 6, 4 } }, new String[] { "10", "6, 4" }) };
	
	    internal const int MAXLOOPS = 20;
	
	    static internal readonly sbyte[] paraLevels = { IBM.ICU.Text.Bidi.LTR, IBM.ICU.Text.Bidi.RTL };
	
	    [NUnit.Framework.Test]
	    public void TestStreaming2() {
	        String src, subsrc;
	        Bidi bidi;
	        int srcLen, processedLen, chunk_0, len, nPortions_1, offset;
	        int i, j, levelIndex;
	        sbyte level;
	        int nTests = testCases.Length, nLevels = paraLevels.Length;
	        bool mismatch, testOK = true;
	        StringBuilder processedLenStr = new StringBuilder(MAXLOOPS * 5);
	
	        Logln("\nEntering TestStreaming\n");
	
	        bidi = new Bidi();
	
	        bidi.OrderParagraphsLTR(true);
	
	        for (levelIndex = 0; levelIndex < nLevels; levelIndex++) {
	            for (i = 0; i < nTests; i++) {
	                src = testCases[i].textIn;
	                srcLen = src.Length;
	                chunk_0 = testCases[i].chunk;
	                nPortions_1 = testCases[i].nPortions[levelIndex];
	                level = paraLevels[levelIndex];
	                processedLenStr.Length=0;
	                Logln("Testing level " + level + ", case " + i);
	
	                mismatch = false;
	
	                bidi.SetReorderingOptions(IBM.ICU.Text.Bidi.OPTION_STREAMING);
	                for (j = 0; j < MAXPORTIONS && srcLen > 0; j++) {
	                    len = (chunk_0 < srcLen) ? chunk_0 : srcLen;
	                    offset = src.Length - srcLen;
	                    subsrc = src.Substring(offset,(offset + len)-(offset));
	                    bidi.SetPara(subsrc, level, null);
	
	                    processedLen = bidi.GetProcessedLength();
	                    if (processedLen == 0) {
	                        bidi.SetReorderingOptions(IBM.ICU.Text.Bidi.OPTION_DEFAULT);
	                        j--;
	                        continue;
	                    }
	                    bidi.SetReorderingOptions(IBM.ICU.Text.Bidi.OPTION_STREAMING);
	
	                    mismatch |= j >= nPortions_1
	                            || processedLen != testCases[i].portionLens[levelIndex][j];
	
	                    processedLenStr
	                            .Append(ILOG.J2CsMapping.Util.IlNumber.ToString(processedLen) + " ");
	                    srcLen -= processedLen;
	                }
	
	                if (mismatch || j != nPortions_1) {
	                    testOK = false;
	                    Errln("\nProcessed lengths mismatch for"
	                            + "\n\tParagraph level = " + level
	                            + "\n\tInput string: " + IBM.ICU.Impl.Utility.Escape(src)
	                            + "\n\tChunk = " + chunk_0
	                            + "\n\tActually processed portion lengths: { "
	                            + processedLenStr + " }"
	                            + "\n\tExpected portion lengths          : { "
	                            + testCases[i].message[levelIndex] + " }\n");
	                }
	            }
	        }
	        if (testOK) {
	            Logln("\nBidi streaming test OK");
	        }
	        Logln("\nExiting TestStreaming\n");
	    }
	
	    public static void Main(String[] args) {
	        try {
	            new TestStreaming().Run(args);
	        } catch (Exception e) {
	            System.Console.Out.WriteLine(e);
	        }
	    }
	
	}
}
