//##header J2SE15
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 //#if defined(FOUNDATION10) || defined(J2SE13)
//#else
/*
 *******************************************************************************
 * Copyright (C) 1996-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
namespace IBM.ICU.Charset {
	
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using ILOG.J2CsMapping.IO;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Simple data output compressor. Nothing fancy, but much smaller footprint for
	/// ints and many strings.
	/// </summary>
	///
	public sealed class DataOutputCompressor : ObjectOutput {
	    internal const bool SHOW = false;
	
	    private ObjectOutput dataOutput;
	
	    public DataOutputCompressor(ObjectOutput dataOutput_0) {
	        this.dataOutput = dataOutput_0;
	    }
	
	    public DataOutput GetDataOutput() {
	        return dataOutput;
	    }
	
	    public void SetDataOutput(ObjectOutput dataOutput_0) {
	        this.dataOutput = dataOutput_0;
	    }
	
	    public void Write(byte[] b) {
	        dataOutput.Write(b);
	    }
	
	    public void Write(byte[] b, int off, int len) {
	        dataOutput.Write(b, off, len);
	    }
	
	    public void Write(int b) {
	        dataOutput.Write(b);
	    }
	
	    public void WriteBoolean(bool v) {
	        dataOutput.WriteBoolean(v);
	    }
	
	    public void WriteByte(int v) {
	        dataOutput.WriteByte(v);
	    }
	
	    public void WriteBytes(String s) {
	        dataOutput.WriteBytes(s);
	    }
	
	    public void WriteDouble(double v) {
	        dataOutput.WriteDouble(v);
	    }
	
	    public void WriteFloat(float v) {
	        dataOutput.WriteFloat(v);
	    }
	
	    public void Close() {
	        dataOutput.Close();
	    }
	
	    public void Flush() {
	        dataOutput.Flush();
	    }
	
	    public override String ToString() {
	        return dataOutput.ToString();
	    }
	
	    public void WriteObject(Object obj) {
	        dataOutput.WriteObject(obj);
	    }
	
	    // ==== New Routines ====
	
	    public void WriteChar(int v) {
	        WriteULong(v);
	    }
	
	    public void WriteShort(int v) {
	        WriteLong(v);
	    }
	
	    public void WriteUShort(int v) {
	        WriteULong(v);
	    }
	
	    public void WriteInt(int v) {
	        WriteLong(v);
	    }
	
	    public void WriteUInt(int v) {
	        WriteULong(v);
	    }
	
	    public void WriteUTF(String str) {
	        WriteULong(IBM.ICU.Text.UTF16.CountCodePoint(str));
	        WriteChars(str);
	    }
	
	    public void WriteChars(String s) {
	        int cp = 0;
	        for (int i = 0; i < s.Length; i += IBM.ICU.Text.UTF16.GetCharCount(cp)) {
	            cp = IBM.ICU.Text.UTF16.CharAt(s, i);
	            WriteULong(cp);
	        }
	    }
	
	    public void WriteLong(long v) {
	        long flag = 0; // put sign bit at the bottom, and invert
	        if (v < 0) {
	            v = ~v;
	            flag = 1;
	        }
	        v <<= 1;
	        v |= flag;
	        while (true) {
	            if ((v & ~0x7FL) == 0) {
	                dataOutput.WriteByte((byte) v);
	                break;
	            }
	            dataOutput.WriteByte((byte) (0x80L | v));
	            v = (long) (((ulong) v) >> 7);
	        }
	    }
	
	    public void WriteULong(long v) {
	        while (true) { // write sequence of 7 bits, with top bit = 1 for
	                       // continuation
	            if ((v & ~0x7FL) == 0) {
	                dataOutput.WriteByte((byte) v);
	                break;
	            }
	            dataOutput.WriteByte((byte) (0x80L | v));
	            v = (long) (((ulong) v) >> 7);
	        }
	    }
	
	    public void WriteStringSet(SortedSet c, IDictionary object_index) {
	        if (SHOW)
	            System.Console.Out.WriteLine("writeStringSet");
	        WriteUInt(c.Count);
	        int i = 0;
	        ILOG.J2CsMapping.Collections.Collections.Put(object_index,null,((int)(i++)));
	        DataOutputCompressor.WritePool  trailingPool = new DataOutputCompressor.WritePool ();
	        String lastString = "";
	        for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(c.GetEnumerator()); it.HasNext();) {
	            String s = (String) it.Next();
	            ILOG.J2CsMapping.Collections.Collections.Put(object_index,s,((int)(i++)));
	            int common = IBM.ICU.Charset.UnicodeMap.FindCommon(lastString, s); // runlength
	                                                               // encode
	            lastString = s;
	            String piece = s.Substring(common);
	            if (SHOW)
	                System.Console.Out.WriteLine(common);
	            common <<= 1;
	            int inPool = trailingPool.GetIndex(piece);
	            if (inPool < 0) {
	                WriteUInt(common);
	                WriteUTF(piece);
	                trailingPool.Put(piece);
	            } else {
	                WriteUInt(common | 1);
	                WriteUInt(inPool);
	                if (SHOW)
	                    System.Console.Out.WriteLine("\t" + inPool);
	            }
	            if (SHOW)
	                System.Console.Out.WriteLine("\t\t" + lastString);
	        }
	    }
	
	    public class WritePool {
	        public WritePool() {
	            this.trailingPool = new Hashtable();
	            this.poolCount = 0;
	        }
	
	        private IDictionary trailingPool;
	
	        private int poolCount;
	
	        public int GetIndex(Object o) {
	            Int32 inPool = (Int32) ILOG.J2CsMapping.Collections.Collections.Get(trailingPool,o);
	            if (inPool == null)
	                return -1;
	            return inPool;
	        }
	
	        public void Put(Object o) {
	            ILOG.J2CsMapping.Collections.Collections.Put(trailingPool,o,((int)(poolCount++)));
	        }
	    }
	
	    
	    /// <exception cref="IOException"></exception>
	    public void WriteCollection(ICollection c, IDictionary object_index) {
	        WriteUInt(c.Count);
	        int i = 0;
	        ILOG.J2CsMapping.Collections.Collections.Put(object_index,null,((int)(i++)));
	        for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(c.GetEnumerator()); it.HasNext();) {
	            Object s = it.Next();
	            dataOutput.WriteObject(s);
	            if (object_index != null)
	                ILOG.J2CsMapping.Collections.Collections.Put(object_index,s,((int)(i++)));
	        }
	    }
	}
	
	// #endif
}
