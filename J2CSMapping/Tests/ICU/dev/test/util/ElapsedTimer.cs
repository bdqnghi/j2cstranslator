//
//  ElapsedTimer.java
//
//  Created by Steven R. Loomis on 11/11/2005.
//  Copyright 2005-2006 IBM. All rights reserved.
//

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Charset {
	
	using IBM.ICU.Text;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Simple stopwatch timer. Usage: { ElapsedTimer et = new ElapsedTimer();
	/// do_some_stuff; System.out.println("It took " + et + " to do stuff."); }
	/// Advanced: { ElapsedTimer et = new ElapsedTimer("Thing2's time: {0}"); //
	/// messageformat pattern do_thing_2(); System.out.println(et.toString()); }
	/// More advanced: NumberFormat and/or MessageFormat can be provided in the
	/// constructor
	/// </summary>
	///
	public sealed class ElapsedTimer {
	
	    /// <summary>
	    /// Convenience method to print the elasped time (in milliseconds)
	    /// </summary>
	    ///
	    public static String ElapsedTime(long start, long end) {
	        return DiffTime(GetFormat(), start, end);
	    }
	
	    public static String ElapsedTime(long start) {
	        return DiffTime(GetFormat(), start, DateTime.Now.Millisecond);
	    }
	
	    // class
	
	    private long startTime;
	
	    private NumberFormat myDurationFormat;
	
	    private MessageFormat myMsgFormat;
	
	    public ElapsedTimer() {
	        this.startTime = DateTime.Now.Millisecond;
	        this.myDurationFormat = null;
	        this.myMsgFormat = null;
	    }
	
	    public ElapsedTimer(MessageFormat aMsgFmt) {
	        this.startTime = DateTime.Now.Millisecond;
	        this.myDurationFormat = null;
	        this.myMsgFormat = null;
	        myMsgFormat = aMsgFmt;
	    }
	
	    public ElapsedTimer(NumberFormat aNumFmt) {
	        this.startTime = DateTime.Now.Millisecond;
	        this.myDurationFormat = null;
	        this.myMsgFormat = null;
	        myDurationFormat = aNumFmt;
	    }
	
	    public ElapsedTimer(MessageFormat aMsgFmt, NumberFormat aNumFmt) {
	        this.startTime = DateTime.Now.Millisecond;
	        this.myDurationFormat = null;
	        this.myMsgFormat = null;
	        myMsgFormat = aMsgFmt;
	        myDurationFormat = aNumFmt;
	    }
	
	    public ElapsedTimer(String pattern) {
	        this.startTime = DateTime.Now.Millisecond;
	        this.myDurationFormat = null;
	        this.myMsgFormat = null;
	        myMsgFormat = new MessageFormat(pattern);
	    }
	
	    public ElapsedTimer(String pattern, NumberFormat aNumFmt) {
	        this.startTime = DateTime.Now.Millisecond;
	        this.myDurationFormat = null;
	        this.myMsgFormat = null;
	        myMsgFormat = new MessageFormat(pattern);
	        myDurationFormat = aNumFmt;
	    }
	
	    
	    /// <returns>elapsed time in seconds since object creation</returns>
	    public sealed override String ToString() {
	        long endTime = DateTime.Now.Millisecond;
	        String duration = DiffTime(myDurationFormat, startTime, endTime);
	        if (myMsgFormat == null) {
	            return duration;
	        } else {
	            return myMsgFormat.FormatObject(new Object[] { duration });
	        }
	    }
	
	    private static NumberFormat gFormat = null;
	
	    private static NumberFormat GetFormat() {
	        if (gFormat == null) {
	            gFormat = new RuleBasedNumberFormat(ILOG.J2CsMapping.Util.Locale.US,
	                    IBM.ICU.Text.RuleBasedNumberFormat.DURATION);
	        }
	        return gFormat;
	    }
	
	    private static String DiffTime(NumberFormat fmt, long start, long end) {
	        if (fmt == null) {
	            fmt = GetFormat();
	        }
	         lock (fmt) {
	                    long age = end - start;
	                    double diff = (double) age;
	                    diff = diff / (double) 1000.0d; // millis per second
	                    return fmt.Format(diff);
	                }
	    }
	}
}
