//##header J2SE15
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /*
 *******************************************************************************
 * Copyright (C) 2002-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
namespace IBM.ICU.Charset
{

    using IBM.ICU.Text;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;
    using System.Text;

    public class TransliteratorUtilities
    {
        public static bool DEBUG = false;

        public static void RegisterTransliteratorFromFile(String dir, String id)
        {
            try
            {
                String filename = id.Replace('-', '_') + ".txt";
                String rules = GetFileContents(dir, filename);
                Transliterator t;
                int pos = id.IndexOf('-');
                String rid;
                if (pos < 0)
                {
                    rid = id + "-Any";
                    id = "Any-" + id;
                }
                else
                {
                    rid = id.Substring(pos + 1) + "-" + id.Substring(0, (pos) - (0));
                }
                t = IBM.ICU.Text.Transliterator.CreateFromRules(id, rules,
                        IBM.ICU.Text.Transliterator.FORWARD);
                IBM.ICU.Text.Transliterator.Unregister(id);
                IBM.ICU.Text.Transliterator.RegisterInstance(t);

                /*
                 * String test = "\u049A\u0430\u0437\u0430\u049B";
                 * System.out.println(t.transliterate(test)); t =
                 * Transliterator.getInstance(id);
                 * System.out.println(t.transliterate(test));
                 */

                t = IBM.ICU.Text.Transliterator.CreateFromRules(rid, rules,
                        IBM.ICU.Text.Transliterator.REVERSE);
                IBM.ICU.Text.Transliterator.Unregister(rid);
                IBM.ICU.Text.Transliterator.RegisterInstance(t);
                if (DEBUG)
                    System.Console.Out.WriteLine("Registered new Transliterator: " + id
                            + ", " + rid);
            }
            catch (IOException e)
            {
                // #if defined(FOUNDATION10) || defined(J2SE13)
                // ## throw (IllegalArgumentException) new
                // IllegalArgumentException("Can't open " + dir + ", " + id+" "+
                // e.getMessage());
                // #else
                throw (ArgumentException)new ArgumentException(
                        "Can't open " + dir + ", " + id); //.InitCause(e);
                // #endif
            }
        }

        public static String GetFileContents(String dir, String filename)
        {
            // #if defined(FOUNDATION10) || defined(J2SE13)
            // ## BufferedReader br = TestUtil.openUTF8Reader(dir, filename);
            // #else
            TextReader br = IBM.ICU.Charset.BagFormatter.OpenUTF8Reader(dir, filename);
            // #endif
            StringBuilder buffer = new StringBuilder();
            while (true)
            {
                String line = br.ReadLine();
                if (line == null)
                    break;
                if (line.Length > 0 && line[0] == '\uFEFF')
                    line = line.Substring(1);
                buffer.Append(line).Append("\r\n");
            }
            br.Close();
            return buffer.ToString();

        }

        private const String BASE_RULES = ":: (hex-any/xml);"
                + ":: (hex-any/xml10);" + "'<' > '&lt;' ;"
                + "'<' < '&'[lL][Tt]';' ;" + "'&' > '&amp;' ;"
                + "'&' < '&'[aA][mM][pP]';' ;" + "'>' < '&'[gG][tT]';' ;"
                + "'\"' < '&'[qQ][uU][oO][tT]';' ; "
                + "'' < '&'[aA][pP][oO][sS]';' ; ";

        private const String CONTENT_RULES = "'>' > '&gt;' ;";

        private const String HTML_RULES = BASE_RULES + CONTENT_RULES
                + "'\"' > '&quot;' ; ";

        private const String HTML_RULES_CONTROLS = HTML_RULES
                + ":: [[:C:][:Z:][:whitespace:][:Default_Ignorable_Code_Point:]] hex/unicode ; ";

        private const String HTML_RULES_ASCII = HTML_RULES
                + ":: [[:C:][:^ASCII:]] any-hex/xml ; ";

        private const String XML_RULES = HTML_RULES + "'' > '&apos;' ; ";

        /*
         * The ampersand character (&) and the left angle bracket (<) MUST NOT
         * appear
         * 
         * in their literal form, except when used as markup delimiters, or within a
         * 
         * comment, a processing instruction, or a CDATA section. If they are needed
         * 
         * elsewhere, they MUST be escaped using either numeric character references
         * or
         * 
         * the strings "&amp;" and "&lt;" respectively. The right angle bracket (>)
         * MAY
         * 
         * be represented using the string "&gt;", and MUST, for compatibility, be
         * 
         * escaped using either "&gt;" or a character reference when it appears in
         * the string
         * 
         * "]]>" in content, when that string is not marking the end of a CDATA
         * section.
         * 
         * In the content of elements, character data is any string of characters
         * which does
         * 
         * not contain the start-delimiter of any markup and does not include the
         * 
         * CDATA-section-close delimiter, "]]>". In a CDATA section, character data
         * is
         * 
         * any string of characters not including the CDATA-section-close delimiter,
         * 
         * "]]>".
         * 
         * To allow attribute values to contain both single and double quotes, the
         * 
         * apostrophe or single-quote character (') MAY be represented as "&apos;",
         * and
         * 
         * the double-quote character (") as "&quot;".
         */

        public static readonly Transliterator toXML = IBM.ICU.Text.Transliterator.CreateFromRules(
                "any-xml", XML_RULES, IBM.ICU.Text.Transliterator.FORWARD);

        public static readonly Transliterator fromXML = IBM.ICU.Text.Transliterator
                .CreateFromRules("xml-any", XML_RULES, IBM.ICU.Text.Transliterator.REVERSE);

        public static readonly Transliterator toHTML = IBM.ICU.Text.Transliterator.CreateFromRules(
                "any-html", HTML_RULES, IBM.ICU.Text.Transliterator.FORWARD);

        public static readonly Transliterator toHTMLControl = IBM.ICU.Text.Transliterator
                .CreateFromRules("any-html", HTML_RULES_CONTROLS,
                        IBM.ICU.Text.Transliterator.FORWARD);

        public static readonly Transliterator toHTMLAscii = IBM.ICU.Text.Transliterator
                .CreateFromRules("any-html", HTML_RULES_ASCII,
                        IBM.ICU.Text.Transliterator.FORWARD);

        public static readonly Transliterator fromHTML = IBM.ICU.Text.Transliterator
                .CreateFromRules("html-any", HTML_RULES, IBM.ICU.Text.Transliterator.REVERSE);
    }
}
