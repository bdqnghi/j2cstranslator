//##header J2SE15
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 //#if defined(FOUNDATION10) || defined(J2SE13)
//#else
/*
 *******************************************************************************
 * Copyright (C) 1996-2006, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
namespace IBM.ICU.Charset {
	
	using ILOG.J2CsMapping.IO;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	/// <summary>
	/// Simple data input compressor. Nothing fancy, but much smaller footprint for
	/// ints and many strings.
	/// </summary>
	///
	public sealed class DataInputCompressor : ObjectInput {
	    internal const bool SHOW = false;
	
	    private ObjectInput dataInput;
	
	    private StringBuilder stringBuffer;
	
	    public DataInputCompressor(ObjectInput dataInput_0) {
	        this.stringBuffer = new StringBuilder();
	        this.dataInput = dataInput_0;
	    }
	
	    public DataInput GetDataInput() {
	        return dataInput;
	    }
	
	    public void SetDataInput(ObjectInput dataInput_0) {
	        this.dataInput = dataInput_0;
	    }
	
	    public bool ReadBoolean() {
	        return dataInput.ReadBoolean();
	    }
	
	    public byte ReadByte() {
	        return dataInput.ReadByte();
	    }
	
	    public int ReadUnsignedByte() {
	        return dataInput.ReadUnsignedByte();
	    }
	
	    public double ReadDouble() {
	        return dataInput.ReadDouble();
	    }
	
	    public float ReadFloat() {
	        return dataInput.ReadFloat();
	    }
	
	    public void ReadFully(byte[] b) {
	        dataInput.ReadFully(b);
	    }
	
	    public void ReadFully(byte[] b, int off, int len) {
	        dataInput.ReadFully(b, off, len);
	    }
	
	    public int SkipBytes(int n) {
	        return dataInput.SkipBytes(n);
	    }
	
	    public String ReadLine() {
	        return dataInput.ReadLine();
	    }
	
	    public int Available() {
	        return dataInput.Available();
	    }
	
	    public void Close() {
	        dataInput.Close();
	    }
	
	    public int Read() {
	        return dataInput.Read();
	    }
	
	    public int Read(byte[] b) {
	        return dataInput.Read(b);
	    }
	
	    public int Read(byte[] b, int off, int len) {
	        return dataInput.Read(b, off, len);
	    }
	
	    public Object ReadObject() {
	        return dataInput.ReadObject();
	    }
	
	    public long Skip(long n) {
	        return dataInput.Skip(n);
	    }
	
	    public override String ToString() {
	        return dataInput.ToString();
	    }
	
	    // ==== New Routines ====
	
	    public char ReadChar() {
	        return (char) ReadULong();
	    }
	
	    public short ReadShort() {
	        return (short) ReadLong();
	    }
	
	    public int ReadUnsignedShort() {
	        return (int) ReadULong();
	    }
	
	    public int ReadUShort() {
	        return (int) ReadULong();
	    }
	
	    public int ReadInt() {
	        return (int) ReadLong();
	    }
	
	    public int ReadUInt() {
	        return (int) ReadULong();
	    }
	
	    public String ReadChars(int len) {
	        stringBuffer.Length=0;
	        for (int i = 0; i < len; ++i) {
	            int cp = (int) ReadULong();
	            IBM.ICU.Text.UTF16.Append(stringBuffer, cp);
	        }
	        return stringBuffer.ToString();
	    }
	
	    public String ReadUTF() {
	        int len = (int) ReadULong();
	        return ReadChars(len);
	    }
	
	    public long ReadLong() {
	        long result = 0;
	        int offset = 0;
	        while (true) {
	            long input = ReadByte();
	            result |= (input & 0x7F) << offset;
	            if ((input & 0x80) == 0)
	                break;
	            offset += 7;
	        }
	        bool negative = (result & 1) != 0; // get sign bit from the bottom,
	                                              // and invert
	        result = (long) (((ulong) result) >> 1);
	        if (negative)
	            result = ~result;
	        return result;
	    }
	
	    public long ReadULong() {
	        long result = 0;
	        int offset = 0;
	        while (true) { // read sequence of 7 bits, with top bit = 1 for
	                       // continuation
	            int input = ReadByte();
	            result |= (input & 0x7F) << offset;
	            if ((input & 0x80) == 0)
	                return result;
	            offset += 7;
	        }
	    }
	
	    public Object[] ReadStringSet(ICollection availableValues) {
	        int size = ReadUInt();
	        if (SHOW)
	            System.Console.Out.WriteLine("readStringSet");
	        Object[] valuesList = new Object[size + 1];
	        // first item is null
	        String lastString = "";
	        DataInputCompressor.ReadPool  trailingPool = new DataInputCompressor.ReadPool ();
	        for (int i = 0; i < size; ++i) {
	            int common = ReadUInt();
	            bool inPool = (common & 1) != 0;
	            common = (int) (((uint) common) >> 1);
	            if (SHOW)
	                System.Console.Out.WriteLine(common);
	            String current;
	            if (inPool) {
	                int poolIndex = ReadUInt();
	                if (SHOW)
	                    System.Console.Out.WriteLine("\t" + poolIndex);
	                current = (String) trailingPool.Get(poolIndex);
	            } else {
	                current = ReadUTF();
	                trailingPool.Add(current);
	            }
	            valuesList[i + 1] = lastString = lastString.Substring(0,(common)-(0))
	                    + current;
	            if (SHOW)
	                System.Console.Out.WriteLine("\t\t" + lastString);
	            if (availableValues != null)
	                ILOG.J2CsMapping.Collections.Collections.Add(availableValues,current);
	        }
	        return valuesList;
	    }
	
	    public class ReadPool {
	        public ReadPool() {
	            this.trailingPool = new ArrayList();
	        }
	
	        private IList trailingPool;
	
	        public Object Get(int index) {
	            return trailingPool[index];
	        }
	
	        public void Add(Object o) {
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(trailingPool,o);
	        }
	    }
	
	    
	    /// <exception cref="IOException"></exception>
	    /// <exception cref="ClassNotFoundException"></exception>
	    public Object[] ReadCollection(LinkedHashSet availableValues) {
	        int size = ReadUInt();
	        Object[] valuesList = new Object[size + 1];
	        for (int i = 0; i < size; ++i) {
	            valuesList[i + 1] = ReadObject();
	        }
	        return valuesList;
	    }
	}
	// #endif
}
