/*
 *******************************************************************************
 * Copyright (C) 2002-2005, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Charset {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	public class ArrayComparator : IComparer {
	    public static readonly IComparer COMPARABLE = new ArrayComparator.Anonymous_C0 ();
	
	    private IComparer[] comparators;
	
	    private int[] reordering;
	
	    public ArrayComparator(IComparer[] comparators_0, int[] reordering_1) {
	        this.comparators = comparators_0;
	        this.reordering = reordering_1;
	        if (this.reordering == null) {
	            this.reordering = new int[comparators_0.Length];
	            for (int i = 0; i < this.reordering.Length; ++i) {
	                this.reordering[i] = i;
	            }
	        } else {
	            if (this.reordering.Length != this.comparators.Length) {
	                throw new ArgumentException(
	                        "comparator and reordering lengths must match");
	            }
	        }
	    }
	
	    public ArrayComparator(IComparer[] comparators_0) : this(comparators_0, null) {
	    }
	
	    /*
	     * Lexigraphic compare. Returns the first difference
	     * 
	     * @return zero if equal. Otherwise +/- (i+1) where i is the index of the
	     * first comparator finding a difference
	     * 
	     * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
	     */
	    public virtual int Compare(Object a0, Object a1) {
	        Object[] arg0 = (Object[]) a0;
	        Object[] arg1 = (Object[]) a1;
	        for (int j = 0; j < comparators.Length; ++j) {
	            int i = reordering[j];
	            IComparer comp = comparators[i];
	            if (comp == null)
	                continue;
	            int result = comp.Compare(arg0[i], arg1[i]);
	            if (result == 0)
	                continue;
	            if (result > 0)
	                return i + 1;
	            return -(i + 1);
	        }
	        return 0;
	    }
	
	    public sealed class Anonymous_C0 : IComparer {
	        public int Compare(Object o1, Object o2) {
	            return ((IComparable) o1).CompareTo(o2);
	        }
	    }
	
	    internal class CatchExceptionComparator : IComparer {
	        private IComparer other;
	
	        public CatchExceptionComparator(IComparer other_0) {
	            this.other = other_0;
	        }
	
	        public virtual int Compare(Object arg0, Object arg1) {
	            try {
	                return other.Compare(arg0, arg1);
	            } catch (Exception e) {
	                System.Console.Out.WriteLine("Arg0: " + arg0);
	                System.Console.Out.WriteLine("Arg1: " + arg1);
	                throw e;
	            }
	        }
	    }
	
	}}
