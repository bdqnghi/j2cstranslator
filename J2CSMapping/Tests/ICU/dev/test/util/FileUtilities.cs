//##header J2SE15
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 //#if defined(FOUNDATION10) || defined(J2SE13)
//#else
/*
 *******************************************************************************
 * Copyright (C) 2002-2006, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
namespace IBM.ICU.Charset {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	public class FileUtilities {
	    public static void AppendFile(String filename, String encoding,
	            StreamWriter output) {
	        AppendFile(filename, encoding, output, null);
	    }
	
	    public static void AppendFile(String filename, String encoding,
	            StreamWriter output, String[] replacementList) {
	        TextReader br = IBM.ICU.Charset.BagFormatter.OpenReader("", filename, encoding);
	        /*
	         * FileInputStream fis = new FileInputStream(filename);
	         * InputStreamReader isr = (encoding == UTF8_UNIX || encoding ==
	         * UTF8_WINDOWS) ? new InputStreamReader(fis, "UTF8") : new
	         * InputStreamReader(fis); BufferedReader br = new BufferedReader(isr,
	         * 32*1024);
	         */
	        while (true) {
	            String line = br.ReadLine();
	            if (line == null)
	                break;
	            if (replacementList != null) {
	                for (int i = 0; i < replacementList.Length; i += 2) {
	                    line = Replace(line, replacementList[i],
	                            replacementList[i + 1]);
	                }
	            }
	            output.WriteLine(line);
	        }
	    }
	
	    /// <summary>
	    /// Replaces all occurances of piece with replacement, and returns new String
	    /// </summary>
	    ///
	    public static String Replace(String source, String piece, String replacement) {
	        if (source == null || source.Length < piece.Length)
	            return source;
	        int pos = 0;
	        while (true) {
	            pos = ILOG.J2CsMapping.Util.StringUtil.IndexOf(source,piece,pos);
	            if (pos < 0)
	                return source;
	            source = source.Substring(0,(pos)-(0)) + replacement
	                    + source.Substring(pos + piece.Length);
	            pos += replacement.Length;
	        }
	    }
	
	    public static String Replace(String source, String[][] replacements) {
	        return Replace(source, replacements, replacements.Length);
	    }
	
	    public static String Replace(String source, String[][] replacements,
	            int count) {
	        for (int i = 0; i < count; ++i) {
	            source = Replace(source, replacements[i][0], replacements[i][1]);
	        }
	        return source;
	    }
	
	    public static String Replace(String source, String[][] replacements,
	            bool reverse) {
	        if (!reverse)
	            return Replace(source, replacements);
	        for (int i = 0; i < replacements.Length; ++i) {
	            source = Replace(source, replacements[i][1], replacements[i][0]);
	        }
	        return source;
	    }
	
	    public static String Anchorize(String source) {
	        String result = source.ToLower(System.Globalization.CultureInfo.CreateSpecificCulture("en")).Replace(
	                "[^\\p{L}\\p{N}]+", "_");
	        if (result.EndsWith("_"))
	            result = result.Substring(0,(result.Length - 1)-(0));
	        if (result.StartsWith("_"))
	            result = result.Substring(1);
	        return result;
	    }
	}
	// #endif
}
