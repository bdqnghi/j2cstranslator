/*
 *******************************************************************************
 * Copyright (C) 2005-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */

/*
 * New added, 2005-5-10 [Terry/SGL]
 * Major modification by Ram
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:02 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace IBM.ICU.Charset
{

    using IBM.ICU.Text;
    using IBM.ICU.Util;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;
    using NUnit.Framework;

    [TestFixture]
    public class LocaleAliasTest : IBM.ICU.Charset.TestFmwk
    {
        private static readonly ULocale[][] _LOCALES = { new ULocale[] { new ULocale("en", "RH"), new ULocale("en", "ZW") },
	            new ULocale[] { new ULocale("in"), new ULocale("id") },
	            new ULocale[] { new ULocale("in", "ID"), new ULocale("id", "ID") },
	            new ULocale[] { new ULocale("iw"), new ULocale("he") },
	            new ULocale[] { new ULocale("iw", "IL"), new ULocale("he", "IL") },
	            new ULocale[] { new ULocale("ji"), new ULocale("yi") },
	            new ULocale[] { new ULocale("en", "BU"), new ULocale("en", "MM") },
	            new ULocale[] { new ULocale("en", "DY"), new ULocale("en", "BJ") },
	            new ULocale[] { new ULocale("en", "HV"), new ULocale("en", "BF") },
	            new ULocale[] { new ULocale("en", "NH"), new ULocale("en", "VU") },
	            new ULocale[] { new ULocale("en", "TP"), new ULocale("en", "TL") },
	            new ULocale[] { new ULocale("en", "ZR"), new ULocale("en", "CD") } };

        private static readonly int _LOCALE_NUMBER = _LOCALES.Length;

        private static ULocale[] available = null;

        private Hashtable availableMap;

        private static readonly ULocale _DEFAULT_LOCALE = IBM.ICU.Util.ULocale.US;

        public LocaleAliasTest()
        {
            this.availableMap = new Hashtable();
        }

        [SetUp]
        public void SetUp()
        {
            Init();
        }

        protected internal override void Init()
        {
            available = IBM.ICU.Util.ULocale.GetAvailableLocales();
            for (int i = 0; i < available.Length; i++)
            {
                ILOG.J2CsMapping.Collections.Collections.Put(availableMap, available[i].ToString(), "");
            }
        }

        public static void Main(String[] args)
        {
            new LocaleAliasTest().Run(args);
        }

        [Test]
        public void TestCalendar()
        {
            ULocale defLoc = IBM.ICU.Util.ULocale.GetDefault();
            IBM.ICU.Util.ULocale.SetDefault(_DEFAULT_LOCALE);
            for (int i = 0; i < _LOCALE_NUMBER; i++)
            {
                ULocale oldLoc = _LOCALES[i][0];
                ULocale newLoc = _LOCALES[i][1];
                if (ILOG.J2CsMapping.Collections.Collections.Get(availableMap, _LOCALES[i][1]) == null)
                {
                    Logln(_LOCALES[i][1] + " is not available. Skipping!");
                    continue;
                }
                Calendar c1 = IBM.ICU.Util.Calendar.GetInstance(oldLoc);
                Calendar c2 = IBM.ICU.Util.Calendar.GetInstance(newLoc);
                c1.SetTime(c2.GetTime());
                // Test function "getFirstDayOfWeek"
                // int firstDayOfWeek1 = c1.getFirstDayOfWeek();
                // int firstDayOfWeek2 = c2.getFirstDayOfWeek();
                // if (firstDayOfWeek1 != firstDayOfWeek2) {
                // this.logln("Calendar(getFirstDayOfWeek) old:"
                // +firstDayOfWeek1+"   new:"+firstDayOfWeek2);
                // pass = false;
                // }

                // Test function "getLocale(ULocale.VALID_LOCALE)"
                ULocale l1 = c1.GetLocale(IBM.ICU.Util.ULocale.VALID_LOCALE);
                ULocale l2 = c2.GetLocale(IBM.ICU.Util.ULocale.VALID_LOCALE);
                if (!newLoc.Equals(l1))
                {
                    Errln("CalendarTest: newLoc!=l1: newLoc= " + newLoc + " l1= "
                            + l1);
                }
                if (!l1.Equals(l2))
                {
                    Errln("CalendarTest: l1!=l2: l1= " + l1 + " l2= " + l2);
                }
                if (!c1.Equals(c2))
                {
                    Errln("CalendarTest: c1!=c2.  newLoc= " + newLoc + " oldLoc= "
                            + oldLoc);
                }
                Logln("Calendar(getLocale) old:" + l1 + "   new:" + l2);
            }
            IBM.ICU.Util.ULocale.SetDefault(defLoc);
        }

        [Test]
        public void TestDateFormat()
        {
            ULocale defLoc = IBM.ICU.Util.ULocale.GetDefault();
            IBM.ICU.Util.ULocale.SetDefault(_DEFAULT_LOCALE);
            for (int i = 0; i < _LOCALE_NUMBER; i++)
            {
                ULocale oldLoc = _LOCALES[i][0];
                ULocale newLoc = _LOCALES[i][1];
                if (ILOG.J2CsMapping.Collections.Collections.Get(availableMap, _LOCALES[i][1]) == null)
                {
                    Logln(_LOCALES[i][1] + " is not available. Skipping!");
                    continue;
                }
                DateFormat df1 = IBM.ICU.Text.DateFormat
                        .GetDateInstance(IBM.ICU.Text.DateFormat.FULL, oldLoc);
                DateFormat df2 = IBM.ICU.Text.DateFormat
                        .GetDateInstance(IBM.ICU.Text.DateFormat.FULL, newLoc);

                // Test function "getLocale"
                ULocale l1 = df1.GetLocale(IBM.ICU.Util.ULocale.VALID_LOCALE);
                ULocale l2 = df2.GetLocale(IBM.ICU.Util.ULocale.VALID_LOCALE);
                if (!newLoc.Equals(l1))
                {
                    Errln("DateFormatTest: newLoc!=l1: newLoc= " + newLoc + " l1= "
                            + l1);
                }
                if (!l1.Equals(l2))
                {
                    Errln("DateFormatTest: l1!=l2: l1= " + l1 + " l2= " + l2);
                }
                if (!df1.Equals(df2))
                {
                    Errln("DateFormatTest: df1!=df2: newLoc= " + newLoc
                            + " oldLoc= " + oldLoc);
                }
                this.Logln("DateFormat(getLocale) old:" + l1 + "   new:" + l2);

                // Test function "format"
                // Date d = new Date();
                // String d1 = df1.format(d);
                // String d2 = df2.format(d);
                // if (!d1.equals(d2)) {
                // pass = false;
                // }
                // this.logln("DateFormat(format) old:"+d1+"   new:"+d2);
            }
            IBM.ICU.Util.ULocale.SetDefault(defLoc);
        }

        [Test]
        public void TestCollation()
        {
            ULocale defLoc = IBM.ICU.Util.ULocale.GetDefault();
            IBM.ICU.Util.ULocale.SetDefault(_DEFAULT_LOCALE);
            for (int i = 0; i < _LOCALE_NUMBER; i++)
            {
                ULocale oldLoc = _LOCALES[i][0];
                ULocale newLoc = _LOCALES[i][1];
                if (ILOG.J2CsMapping.Collections.Collections.Get(availableMap, _LOCALES[i][1]) == null)
                {
                    Logln(_LOCALES[i][1] + " is not available. Skipping!");
                    continue;
                }
                Collator c1 = IBM.ICU.Text.Collator.GetInstance(oldLoc);
                Collator c2 = IBM.ICU.Text.Collator.GetInstance(newLoc);

                if (!c1.Equals(c2))
                {
                    Errln("CollationTest: c1!=c2: newLoc= " + newLoc + " oldLoc= "
                            + oldLoc);
                }

                Logln("Collation old:" + oldLoc + "   new:" + newLoc);
            }
            IBM.ICU.Util.ULocale.SetDefault(defLoc);
        }

        [Test]
        public void TestULocale()
        {
            ULocale defLoc = IBM.ICU.Util.ULocale.GetDefault();
            IBM.ICU.Util.ULocale.SetDefault(_DEFAULT_LOCALE);
            for (int i = 0; i < _LOCALE_NUMBER; i++)
            {
                ULocale oldLoc = _LOCALES[i][0];
                ULocale newLoc = _LOCALES[i][1];
                if (ILOG.J2CsMapping.Collections.Collections.Get(availableMap, _LOCALES[i][1]) == null)
                {
                    Logln(_LOCALES[i][1] + " is not available. Skipping!");
                    continue;
                }
                ULocale ul1 = new ULocale(oldLoc.ToString());
                ULocale ul2 = new ULocale(newLoc.ToString());

                String name1 = ul1.GetDisplayName();
                String name2 = ul2.GetDisplayName();
                if (!name1.Equals(name2))
                {
                    Errln("name1!=name2. name1 = " + name1 + " name2 = " + name2);
                }
                Logln("ULocale(getDisplayName) old:" + name1 + "   new:" + name2);
            }
            IBM.ICU.Util.ULocale.SetDefault(defLoc);
        }

        [Test]
        public void TestDisplayName()
        {
            ULocale defLoc = IBM.ICU.Util.ULocale.GetDefault();
            IBM.ICU.Util.ULocale.SetDefault(_DEFAULT_LOCALE);
            for (int i = 0; i < _LOCALE_NUMBER; i++)
            {
                ULocale oldLoc = _LOCALES[i][0];
                ULocale newLoc = _LOCALES[i][1];

                for (int j = 0; j < available.Length; j++)
                {
                    String oldCountry = oldLoc.GetDisplayCountry(available[j]);
                    String newCountry = newLoc.GetDisplayCountry(available[j]);
                    String oldLang = oldLoc.GetDisplayLanguage(available[j]);
                    String newLang = newLoc.GetDisplayLanguage(available[j]);

                    // is there display name for the current country ID
                    if (!newCountry.Equals(newLoc.GetCountry()))
                    {
                        if (!oldCountry.Equals(newCountry))
                        {
                            Errln("getCountry() failed for " + oldLoc
                                    + " oldCountry= " + IBM.ICU.Charset.TestFmwk.Prettify(oldCountry)
                                    + " newCountry = " + IBM.ICU.Charset.TestFmwk.Prettify(newCountry)
                                    + " in display locale "
                                    + available[j].ToString());
                        }
                    }
                    // there is a display name for the current lang ID
                    if (!newLang.Equals(newLoc.GetLanguage()))
                    {
                        if (!oldLang.Equals(newLang))
                        {
                            Errln("getLanguage() failed for " + oldLoc
                                    + " oldLang = " + IBM.ICU.Charset.TestFmwk.Prettify(oldLang)
                                    + " newLang = " + IBM.ICU.Charset.TestFmwk.Prettify(newLang)
                                    + " in display locale "
                                    + available[j].ToString());
                        }
                    }
                }
            }
            IBM.ICU.Util.ULocale.SetDefault(defLoc);
        }

        [Test]
        public void TestUResourceBundle()
        {
            ULocale defLoc = IBM.ICU.Util.ULocale.GetDefault();
            IBM.ICU.Util.ULocale.SetDefault(_DEFAULT_LOCALE);
            for (int i = 0; i < _LOCALE_NUMBER; i++)
            {
                if (ILOG.J2CsMapping.Collections.Collections.Get(availableMap, _LOCALES[i][1]) == null)
                {
                    Logln(_LOCALES[i][1] + " is not available. Skipping!");
                    continue;
                }
                ULocale oldLoc = _LOCALES[i][0];
                ULocale newLoc = _LOCALES[i][1];
                UResourceBundle urb1 = null;
                UResourceBundle urb2 = null;

                urb1 = IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                        IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME, oldLoc);
                urb2 = IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                        IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME, newLoc);
                ULocale l1 = urb1.GetULocale();
                ULocale l2 = urb2.GetULocale();
                if (!newLoc.Equals(l1))
                {
                    Errln("ResourceBundleTest: newLoc!=l1: newLoc= " + newLoc
                            + " l1= " + l1);
                }
                if (!l1.Equals(l2))
                {
                    Errln("ResourceBundleTest: l1!=l2: l1= " + l1 + " l2= " + l2);
                }
                this.Logln("UResourceBundle old:" + l1 + "   new:" + l2);
            }
            IBM.ICU.Util.ULocale.SetDefault(defLoc);
        }
    }
}
