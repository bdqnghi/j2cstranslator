/*
 *******************************************************************************
 * Copyright (C) 1996-2005, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Charset {
	
	using IBM.ICU.Impl;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Testing class for Trie. Tests here will be simple, since both CharTrie and
	/// IntTrie are very similar and are heavily used in other parts of ICU4J. Codes
	/// using Tries are expected to have detailed tests.
	/// </summary>
	///
	public sealed class ICUBinaryTest : TestFmwk {
	    // constructor ---------------------------------------------------
	
	    public sealed class Anonymous_C0 : ICUBinary.Authenticate {
	        public bool IsDataVersionAcceptable(byte[] version) {
	            return version[0] == 1;
	        }
	    }
	
	    /// <summary>
	    /// Constructor
	    /// </summary>
	    ///
	    public ICUBinaryTest() {
	    }
	
	    // public methods -----------------------------------------------
	
	    public static void Main(String[] arg) {
	        ICUBinaryTest test = new ICUBinaryTest();
	        try {
	            test.Run(arg);
	        } catch (Exception e) {
	            test.Errln("Error testing icubinarytest");
	        }
	    }
	
	    /// <summary>
	    /// Testing the constructors of the Tries
	    /// </summary>
	    ///
	    public void TestReadHeader() {
	       /* byte[] formatid = { 1, 2, 3, 4 };
	        byte[] array = { 0, 0x18, (byte) 0xda, 0x27, 0, 0, 0, 0, 1, 0, 2, 0, 1,
	                2, 3, 4, 1, 2, 3, 4, 3, 2, 0, 0 };
	        MemoryStream inputstream = new MemoryStream(array);
	        ICUBinary.Authenticate authenticate = new ICUBinaryTest.Anonymous_C0 ();
	        // check full data version
	        try {
	            IBM.ICU.Impl.ICUBinary.ReadHeader(inputstream, formatid, authenticate);
	        } catch (IOException e) {
	            Errln("Failed: Lenient authenticate object should pass ICUBinary.readHeader");
	        }
	        // no restriction to the data version
	        try {
	            inputstream.Reset();
	            IBM.ICU.Impl.ICUBinary.ReadHeader(inputstream, formatid, null);
	        } catch (IOException e_0) {
	            Errln("Failed: Null authenticate object should pass ICUBinary.readHeader");
	        }
	        // lenient data version
	        try {
	            inputstream.Reset();
	            IBM.ICU.Impl.ICUBinary.ReadHeader(inputstream, formatid, authenticate);
	        } catch (IOException e_1) {
	            Errln("Failed: Lenient authenticate object should pass ICUBinary.readHeader");
	        }
	        // changing the version to an incorrect one, expecting failure
	        array[16] = 2;
	        try {
	            inputstream.Reset();
	            IBM.ICU.Impl.ICUBinary.ReadHeader(inputstream, formatid, authenticate);
	            Errln("Failed: Invalid version number should not pass authenticate object");
	        } catch (IOException e_2) {
	            Logln("PASS: ICUBinary.readHeader with invalid version number failed as expected");
	        }*/
	    }
	}
}
