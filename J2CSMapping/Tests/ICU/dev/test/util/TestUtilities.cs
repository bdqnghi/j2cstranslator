//##header J2SE15
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 //#if defined(FOUNDATION10) || defined(J2SE13)
//#else
/*
 *******************************************************************************
 * Copyright (C) 1996-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
namespace IBM.ICU.Charset {
	
	using IBM.ICU.Text;
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using ILOG.J2CsMapping.Text;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	public class TestUtilities : TestFmwk {
	    public TestUtilities() {
	        this.map1 = new UnicodeMap();
	        this.map2 = new Hashtable();
	        this.map3 = new SortedList();
	        this.log = new SortedSet();
	        this.propEnum = IBM.ICU.Lang.UProperty_Constants.GENERAL_CATEGORY;
	    }
	
	    internal const int LIMIT = 0x15; // limit to make testing more realistic in
	                                   // terms of collisions
	
	    internal const int ITERATIONS = 1000000;
	
	    internal const bool SHOW_PROGRESS = false;
	
	    internal const bool DEBUG = false;
	
	    public static void Main(String[] args) {
	        new TestUtilities().Run(args);
	    }
	
	    internal UnicodeMap map1;
	
	    internal IDictionary map2;
	
	    internal IDictionary map3;
	
	    internal SortedSet log;
	
	    static internal String[] TEST_VALUES = { null, "A", "B", "C", "D", "E", "F" };
	
	    static internal Random random = new Random(12345);
	
	    public void TestUnicodeMap() {
	        random.SetSeed(12345);
	        // do random change to both, then compare
	        Logln("Comparing against HashMap");
	        for (int counter = 0; counter < ITERATIONS; ++counter) {
	            int start = random.Next(LIMIT);
	            String value_ren = TEST_VALUES[random.Next(TEST_VALUES.Length)];
	            String logline = IBM.ICU.Impl.Utility.Hex(start) + "\t" + value_ren;
	            if (SHOW_PROGRESS)
	                Logln(counter + "\t" + logline);
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(log,logline);
	            if (DEBUG && counter == 144) {
	                System.Console.Out.WriteLine(" debug");
	            }
	            map1.Put(start, value_ren);
	            ILOG.J2CsMapping.Collections.Collections.Put(map2,((int)(start)),value_ren);
	            Check(counter);
	        }
	        CheckNext(LIMIT);
	
	        Logln("Setting General Category");
	        map1 = new UnicodeMap();
	        map2 = new SortedList();
	        for (int cp = 0; cp <= SET_LIMIT; ++cp) {
	            int enumValue = IBM.ICU.Lang.UCharacter.GetIntPropertyValue(cp, propEnum);
	            // if (enumValue <= 0) continue; // for smaller set
	            String value_0 = IBM.ICU.Lang.UCharacter.GetPropertyValueName(propEnum, enumValue,
	                    IBM.ICU.Lang.UProperty_Constants.NameChoice.LONG);
	            map1.Put(cp, value_0);
	            ILOG.J2CsMapping.Collections.Collections.Put(map2,((int)(cp)),value_0);
	        }
	        CheckNext(Int32.MaxValue);
	
	        Logln("Comparing General Category");
	        Check(-1);
	        Logln("Comparing Values");
	        ILOG.J2CsMapping.Collections.ISet values1 = (ISet) map1.GetAvailableValues(new SortedSet());
	        ILOG.J2CsMapping.Collections.ISet values2 = new SortedSet(map2.Values);
	        if (!IBM.ICU.Charset.TestBoilerplate.VerifySetsIdentical(this, values1, values2)) {
	            throw new ArgumentException("Halting");
	        }
	        Logln("Comparing Sets");
	        for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(values1.GetEnumerator()); it.HasNext();) {
	            Object value_1 = it.Next();
	            Logln((value_1 == null) ? "null" : value_1.ToString());
	            UnicodeSet set1 = map1.GetSet(value_1);
	            UnicodeSet set2 = IBM.ICU.Charset.TestBoilerplate.GetSet(map2, value_1);
	            if (!IBM.ICU.Charset.TestBoilerplate.VerifySetsIdentical(this, set1, set2)) {
	                throw new ArgumentException("Halting");
	            }
	        }
	
	        Logln("Getting Scripts");
	        UnicodeMap scripts = IBM.ICU.Charset.ICUPropertyFactory.Make().GetProperty("script")
	                .GetUnicodeMap_internal();
	        UnicodeMap.Composer composer = new TestUtilities.Anonymous_C1 ();
	
	        Logln("Trying Compose");
	        UnicodeMap composed = ((UnicodeMap) scripts.CloneAsThawed())
	                .ComposeWith(map1, composer);
	        Object last = "";
	        for (int i = 0; i < 0x10FFFF; ++i) {
	            Object comp = composed.GetValue(i);
	            Object gc = map1.GetValue(i);
	            Object sc = scripts.GetValue(i);
	            if (!comp.Equals(composer.Compose(i, gc, sc))) {
	                Errln("Failed compose at: " + i);
	            }
	            if (!last.Equals(comp)) {
	                Logln(IBM.ICU.Impl.Utility.Hex(i) + "\t" + comp);
	                last = comp;
	            }
	        }
	
	        // check boilerplate
	        IList argList = new ArrayList();
	        ILOG.J2CsMapping.Collections.Generics.Collections.Add(argList,"TestMain");
	        if (paras.nothrow)
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(argList,"-nothrow");
	        if (paras.verbose)
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(argList,"-verbose");
	        String[] args = new String[argList.Count];
	        ILOG.J2CsMapping.Collections.Collections.ToArray(argList,args);
	        new TestUtilities.UnicodeMapBoilerplate ().Run(args);
	        // TODO: the following is not being reached
	        new TestUtilities.UnicodeSetBoilerplate ().Run(args);
	    }
	
	    public void TestCollectionUtilitySpeed() {
	        HashedSet hs1 = new HashedSet();
	        HashedSet hs2 = new HashedSet();
	        int size = 100000;
	        int iterations = 100;
	        String prefix = "abcde";
	        String postfix = "abcde";
	        int start1 = 0; // 1 for some, 0 for all
	        for (int i = 0; i < size; i += 2)
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(hs1,prefix + i.ToString() + postfix);
	        for (int i_0 = start1; i_0 < size; i_0 += 2)
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(hs2,prefix + i_0.ToString() + postfix);
	        SortedSet ts1 = new SortedSet(hs1);
	        SortedSet ts2 = new SortedSet(hs2);
	        IBM.ICU.Charset.CollectionUtilities.ContainsAll(hs1, hs2);
	        IBM.ICU.Charset.CollectionUtilities.ContainsAll(ts1, ts2);
	        long start, end;
	        bool temp = false;
	        start = DateTime.Now.Millisecond;
	        for (int i_1 = 0; i_1 < iterations; ++i_1)
	            temp = IBM.ICU.Charset.CollectionUtilities.ContainsAll(hs1, hs2);
	        end = DateTime.Now.Millisecond;
	        Logln(temp + " " + (end - start) / 1000.0d);
	        start = DateTime.Now.Millisecond;
	        for (int i_2 = 0; i_2 < iterations; ++i_2)
	            temp = IBM.ICU.Charset.CollectionUtilities.ContainsAll(ts1, ts2);
	        end = DateTime.Now.Millisecond;
	        Logln(temp + " " + (end - start) / 1000.0d);
	    }
	
	    public void TestCollectionUtilities() {
	        String[][] test = { new String[] { "a", "c", "e", "g", "h", "z" },
	                new String[] { "b", "d", "f", "h", "w" },
	                new String[] { "a", "b" }, new String[] { "a", "d" },
	                new String[] { "d" }, new String[] {} }; //
	        int resultMask = 0;
	        for (int i = 0; i < test.Length; ++i) {
	            ICollection a = new SortedSet(ILOG.J2CsMapping.Collections.Arrays.AsList(test[i]));
	            for (int j = 0; j < test.Length; ++j) {
	                ICollection b = new SortedSet(ILOG.J2CsMapping.Collections.Arrays.AsList(test[j]));
	                int relation = IBM.ICU.Charset.CollectionUtilities.GetContainmentRelation(a, b);
	                resultMask |= (1 << relation);
	                switch (relation) {
	                case IBM.ICU.Charset.CollectionUtilities.ALL_EMPTY:
	                    CheckContainment(a.Count == 0 && b.Count == 0, a,
	                            relation, b);
	                    break;
	                case IBM.ICU.Charset.CollectionUtilities.NOT_A_SUPERSET_B:
	                    CheckContainment(a.Count == 0 && b.Count != 0, a,
	                            relation, b);
	                    break;
	                case IBM.ICU.Charset.CollectionUtilities.NOT_A_DISJOINT_B:
	                    CheckContainment(a.Equals(b) && a.Count != 0, a, relation,
	                            b);
	                    break;
	                case IBM.ICU.Charset.CollectionUtilities.NOT_A_SUBSET_B:
	                    CheckContainment(a.Count != 0 && b.Count == 0, a,
	                            relation, b);
	                    break;
	                case IBM.ICU.Charset.CollectionUtilities.A_PROPER_SUBSET_OF_B:
	                    CheckContainment(ILOG.J2CsMapping.Collections.Collections.ContainsAll(b,a) && !a.Equals(b), a,
	                            relation, b);
	                    break;
	                case IBM.ICU.Charset.CollectionUtilities.NOT_A_EQUALS_B:
	                    CheckContainment(!IBM.ICU.Charset.CollectionUtilities.ContainsSome(a, b)
	                            && a.Count != 0 && b.Count != 0, a, relation, b);
	                    break;
	                case IBM.ICU.Charset.CollectionUtilities.A_PROPER_SUPERSET_B:
	                    CheckContainment(ILOG.J2CsMapping.Collections.Collections.ContainsAll(a,b) && !a.Equals(b), a,
	                            relation, b);
	                    break;
	                case IBM.ICU.Charset.CollectionUtilities.A_PROPER_OVERLAPS_B:
	                    CheckContainment(!ILOG.J2CsMapping.Collections.Collections.ContainsAll(b,a) && !ILOG.J2CsMapping.Collections.Collections.ContainsAll(a,b)
	                            && IBM.ICU.Charset.CollectionUtilities.ContainsSome(a, b), a,
	                            relation, b);
	                    break;
	                }
	            }
	        }
	        if (resultMask != 0xFF) {
	            String missing = "";
	            for (int i_0 = 0; i_0 < 8; ++i_0) {
	                if ((resultMask & (1 << i_0)) == 0) {
	                    if (missing.Length != 0)
	                        missing += ", ";
	                    missing += RelationName[i_0];
	                }
	            }
	            Errln("Not all ContainmentRelations checked: " + missing);
	        }
	    }
	
	    static internal readonly String[] RelationName = { "ALL_EMPTY", "NOT_A_SUPERSET_B",
	            "NOT_A_DISJOINT_B", "NOT_A_SUBSET_B", "A_PROPER_SUBSET_OF_B",
	            "A_PROPER_DISJOINT_B", "A_PROPER_SUPERSET_B", "A_PROPER_OVERLAPS_B" };
	
	    private void CheckContainment(bool c, ICollection a, int relation,
	            ICollection b) {
	        if (!c) {
	            Errln("Fails relation: " + a + " \t" + RelationName[relation]
	                    + " \t" + b);
	        }
	    }
	
	    private void CheckNext(int limit) {
	        Logln("Comparing nextRange");
	        UnicodeMap.MapIterator mi = new UnicodeMap.MapIterator(map1);
	        IDictionary localMap = new SortedList();
	        while (mi.NextRange()) {
	            Logln(IBM.ICU.Impl.Utility.Hex(mi.codepoint) + ".."
	                    + IBM.ICU.Impl.Utility.Hex(mi.codepointEnd) + " => " + mi.value_ren);
	            for (int i = mi.codepoint; i <= mi.codepointEnd; ++i) {
	                if (i >= limit)
	                    continue;
	                ILOG.J2CsMapping.Collections.Collections.Put(localMap,((int)(i)),mi.value_ren);
	            }
	        }
	        CheckMap(map2, localMap);
	
	        Logln("Comparing next");
	        mi.Reset();
	        localMap = new SortedList();
	        Object lastValue = new Object();
	        while (mi.Next()) {
	            if (!IBM.ICU.Charset.UnicodeMap.AreEqual(lastValue, mi.value_ren)) {
	                // System.out.println("Change: " + Utility.hex(mi.codepoint) +
	                // " => " + mi.value);
	                lastValue = mi.value_ren;
	            }
	            if (mi.codepoint >= limit)
	                continue;
	            ILOG.J2CsMapping.Collections.Collections.Put(localMap,((int)(mi.codepoint)),mi.value_ren);
	        }
	        CheckMap(map2, localMap);
	    }
	
	    public void Check(int counter) {
	        for (int i = 0; i < LIMIT; ++i) {
	            Object value1 = map1.GetValue(i);
	            Object value2 = ILOG.J2CsMapping.Collections.Collections.Get(map2,((int)(i)));
	            if (!IBM.ICU.Charset.UnicodeMap.AreEqual(value1, value2)) {
	                Errln(counter + " Difference at " + IBM.ICU.Impl.Utility.Hex(i)
	                        + "\t UnicodeMap: " + value1 + "\t HashMap: " + value2);
	                Errln("UnicodeMap: " + map1);
	                Errln("Log: " + IBM.ICU.Charset.TestBoilerplate.Show(log));
	                Errln("HashMap: " + IBM.ICU.Charset.TestBoilerplate.Show(map2));
	            }
	        }
	    }
	
	    internal void CheckMap(IDictionary m1, IDictionary m2) {
	        if (m1.Equals(m2))
	            return;
	        StringBuilder buffer = new StringBuilder();
	        ILOG.J2CsMapping.Collections.ISet m1entries = m1;
	        ILOG.J2CsMapping.Collections.ISet m2entries = m2;
	        GetEntries("\r\nIn First, and not Second", m1entries, m2entries,
	                buffer, 20);
	        GetEntries("\r\nIn Second, and not First", m2entries, m1entries,
	                buffer, 20);
	        Errln(buffer.ToString());
	    }
	
	    static internal IComparer ENTRY_COMPARATOR = new TestUtilities.Anonymous_C0 ();
	
	    private void GetEntries(String title, ILOG.J2CsMapping.Collections.ISet m1entries, ILOG.J2CsMapping.Collections.ISet m2entries,
	            StringBuilder buffer, int limit) {
	        ILOG.J2CsMapping.Collections.ISet m1_m2 = new SortedSet(ENTRY_COMPARATOR);
	        ILOG.J2CsMapping.Collections.Generics.Collections.AddAll(m1entries,m1_m2);
	        m1_m2.RemoveAll(m2entries);
	        buffer.Append(title + ": " + m1_m2.Count + "\r\n");
	        for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(m1_m2.GetEnumerator()); it.HasNext();) {
	            if (limit-- < 0)
	                return;
	            DictionaryEntry entry = (DictionaryEntry) it.Next();
	            buffer.Append(((DictionaryEntry) entry).Key).Append(" => ")
	                    .Append(((DictionaryEntry) entry).Value).Append("\r\n");
	        }
	    }
	
	    internal const int SET_LIMIT = 0x10FFFF;
	
	    internal const int CHECK_LIMIT = 0xFFFF;
	
	    static internal readonly NumberFormat pf = ILOG.J2CsMapping.Text.NumberFormat.GetPercentInstance();
	
	    static internal readonly NumberFormat nf = ILOG.J2CsMapping.Text.NumberFormat.GetInstance();
	
	    public void TestTime() {
	        double hashTime, umTime, icuTime, treeTime;
	        umTime = CheckSetTime(20, 0);
	        hashTime = CheckSetTime(20, 1);
	        Logln("Percentage: " + pf.Format(hashTime / umTime));
	        treeTime = CheckSetTime(20, 3);
	        Logln("Percentage: " + pf.Format(treeTime / umTime));
	        // logln(map1.toString());
	
	        umTime = CheckGetTime(1000, 0);
	        hashTime = CheckGetTime(1000, 1);
	        Logln("Percentage: " + pf.Format(hashTime / umTime));
	        icuTime = CheckGetTime(1000, 2);
	        Logln("Percentage: " + pf.Format(icuTime / umTime));
	        treeTime = CheckGetTime(1000, 3);
	        Logln("Percentage: " + pf.Format(treeTime / umTime));
	    }
	
	    internal int propEnum;
	
	    internal double CheckSetTime(int iterations, int type) {
	        _checkSetTime(1, type);
	        double result = _checkSetTime(iterations, type);
	        Logln(((type == 0) ? "UnicodeMap" : (type == 1) ? "HashMap"
	                : (type == 2) ? "ICU" : "TreeMap")
	                + "\t" + nf.Format(result));
	        return result;
	    }
	
	    internal double _checkSetTime(int iterations, int type) {
	        map1 = new UnicodeMap();
	        map2 = new Hashtable();
	        System.Console.Gc();
	        double start = DateTime.Now.Millisecond;
	        for (int j = 0; j < iterations; ++j)
	            for (int cp = 0; cp <= SET_LIMIT; ++cp) {
	                int enumValue = IBM.ICU.Lang.UCharacter.GetIntPropertyValue(cp, propEnum);
	                if (enumValue <= 0)
	                    continue; // for smaller set
	                String value_ren = IBM.ICU.Lang.UCharacter.GetPropertyValueName(propEnum,
	                        enumValue, IBM.ICU.Lang.UProperty.NameChoice.LONG);
	                switch (type) {
	                case 0:
	                    map1.Put(cp, value_ren);
	                    break;
	                case 1:
	                    ILOG.J2CsMapping.Collections.Collections.Put(map2,((int)(cp)),value_ren);
	                    break;
	                case 3:
	                    ILOG.J2CsMapping.Collections.Collections.Put(map3,((int)(cp)),value_ren);
	                    break;
	                }
	            }
	        double end = DateTime.Now.Millisecond;
	        return (end - start) / 1000 / iterations;
	    }
	
	    internal double CheckGetTime(int iterations, int type) {
	        _checkGetTime(1, type);
	        double result = _checkGetTime(iterations, type);
	        Logln(((type == 0) ? "UnicodeMap" : (type == 1) ? "HashMap"
	                : (type == 2) ? "ICU" : "TreeMap")
	                + "\t" + nf.Format(result));
	        return result;
	    }
	
	    internal double _checkGetTime(int iterations, int type) {
	        System.Console.Gc();
	        double start = DateTime.Now.Millisecond;
	        for (int j = 0; j < iterations; ++j)
	            for (int cp = 0; cp < CHECK_LIMIT; ++cp) {
	                switch (type) {
	                case 0:
	                    map1.GetValue(cp);
	                    break;
	                case 1:
	                    ILOG.J2CsMapping.Collections.Collections.Get(map2,((int)(cp)));
	                    break;
	                case 2:
	                    int enumValue = IBM.ICU.Lang.UCharacter
	                            .GetIntPropertyValue(cp, propEnum);
	                    // if (enumValue <= 0) continue;
	                    IBM.ICU.Lang.UCharacter.GetPropertyValueName(propEnum, enumValue,
	                            IBM.ICU.Lang.UProperty.NameChoice.LONG);
	                    break;
	                case 3:
	                    ILOG.J2CsMapping.Collections.Collections.Get(map3,((int)(cp)));
	                    break;
	                }
	            }
	        double end = DateTime.Now.Millisecond;
	        return (end - start) / 1000 / iterations;
	    }
	
	    public sealed class Anonymous_C1 : UnicodeMap.Composer {
	        public Object Compose(int codePoint, Object a, Object b) {
	            return a.ToString() + "_" + b.ToString();
	        }
	    }
	
	    public sealed class Anonymous_C0 : IComparer {
	        public int Compare(Object o1, Object o2) {
	            if (o1 == o2)
	                return 0;
	            if (o1 == null)
	                return -1;
	            if (o2 == null)
	                return 1;
	            DictionaryEntry a = (DictionaryEntry) o1;
	            DictionaryEntry b = (DictionaryEntry) o2;
	            int result = Compare2(((DictionaryEntry) a).Key, ((DictionaryEntry) b).Key);
	            if (result != 0)
	                return result;
	            return Compare2(((DictionaryEntry) a).Value, ((DictionaryEntry) b).Value);
	        }
	
	        public int Compare2(Object o1, Object o2) {
	            if (o1 == o2)
	                return 0;
	            if (o1 == null)
	                return -1;
	            if (o2 == null)
	                return 1;
	            return ((IComparable) o1).CompareTo(o2);
	        }
	    }
	
	    internal class UnicodeMapBoilerplate : TestBoilerplate {
	
	        /*
	         * @see
	         * com.ibm.icu.dev.test.TestBoilerplate#_hasSameBehavior(java.lang.Object
	         * , java.lang.Object)
	         */
	        protected internal override bool _hasSameBehavior(Object a, Object b) {
	            // we are pretty confident in the equals method, so won't bother
	            // with this right now.
	            return true;
	        }
	
	        /*
	         * @see com.ibm.icu.dev.test.TestBoilerplate#_createTestObject()
	         */
	        protected internal override bool _addTestObject(IList list) {
	            if (list.Count > 30)
	                return false;
	            UnicodeMap result = new UnicodeMap();
	            for (int i = 0; i < 50; ++i) {
	                int start = IBM.ICU.Charset.TestUtilities.random.Next(25);
	                String value_ren = IBM.ICU.Charset.TestUtilities.TEST_VALUES[IBM.ICU.Charset.TestUtilities.random.Next(TEST_VALUES.Length)];
	                result.Put(start, value_ren);
	            }
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(list,result);
	            return true;
	        }
	    }
	
	    internal class StringBoilerplate : TestBoilerplate {
	
	        /*
	         * @see
	         * com.ibm.icu.dev.test.TestBoilerplate#_hasSameBehavior(java.lang.Object
	         * , java.lang.Object)
	         */
	        protected internal override bool _hasSameBehavior(Object a, Object b) {
	            // we are pretty confident in the equals method, so won't bother
	            // with this right now.
	            return true;
	        }
	
	        /*
	         * @see com.ibm.icu.dev.test.TestBoilerplate#_createTestObject()
	         */
	        protected internal override bool _addTestObject(IList list) {
	            if (list.Count > 31)
	                return false;
	            StringBuilder result = new StringBuilder();
	            for (int i = 0; i < 10; ++i) {
	                result.Append((char) IBM.ICU.Charset.TestUtilities.random.Next(0xFF));
	            }
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(list,result.ToString());
	            return true;
	        }
	    }
	
	    internal class UnicodeSetBoilerplate : TestBoilerplate {
	
	        /*
	         * @see
	         * com.ibm.icu.dev.test.TestBoilerplate#_hasSameBehavior(java.lang.Object
	         * , java.lang.Object)
	         */
	        protected internal override bool _hasSameBehavior(Object a, Object b) {
	            // we are pretty confident in the equals method, so won't bother
	            // with this right now.
	            return true;
	        }
	
	        /*
	         * @see com.ibm.icu.dev.test.TestBoilerplate#_createTestObject()
	         */
	        protected internal override bool _addTestObject(IList list) {
	            if (list.Count > 32)
	                return false;
	            UnicodeSet result = new UnicodeSet();
	            for (int i = 0; i < 50; ++i) {
	                result.Add(IBM.ICU.Charset.TestUtilities.random.Next(100));
	            }
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(list,result.ToString());
	            return true;
	        }
	    }
	
	}
	// #endif
}
