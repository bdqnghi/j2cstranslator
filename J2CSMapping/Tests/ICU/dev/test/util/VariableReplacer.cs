/*
 *******************************************************************************
 * Copyright (C) 2002-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Charset {
	
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	public class VariableReplacer {
	    public VariableReplacer() {
            throw new NotImplementedException();
	        // this.m = new SortedList(ILOG.J2CsMapping.Collections.Generics.Collections.ReverseOrder<System.Object>());
	    }
	
	    // simple implementation for now
	    private IDictionary m;
	
	    // TODO - fix to do streams also, clean up implementation
	
	    public VariableReplacer Add(String variable, String value_ren) {
	        ILOG.J2CsMapping.Collections.Collections.Put(m,variable,value_ren);
	        return this;
	    }
	
	    public String Replace(String source) {
	        String oldSource;
	        do {
	            oldSource = source;
	            for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(new ILOG.J2CsMapping.Collections.ListSet(m.Keys).GetEnumerator()); it.HasNext();) {
	                String variable = (String) it.Next();
	                String value_ren = (String) ILOG.J2CsMapping.Collections.Collections.Get(m,variable);
	                source = ReplaceAll(source, variable, value_ren);
	            }
	        } while (!source.Equals(oldSource));
	        return source;
	    }
	
	    public String ReplaceAll(String source, String key, String value_ren) {
	        while (true) {
	            int pos = source.IndexOf(key);
	            if (pos < 0)
	                return source;
	            source = source.Substring(0,(pos)-(0)) + value_ren
	                    + source.Substring(pos + key.Length);
	        }
	    }
	}
}
