/*
 *******************************************************************************
 * Copyright (C) 2003-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace IBM.ICU.Charset
{

    using IBM.ICU.Text;
    using IBM.ICU.Util;
    using ILOG.J2CsMapping.Collections;
    using ILOG.J2CsMapping.Collections.Generics;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;
    using NUnit.Framework;

    [TestFixture]
    public class LocaleDataTest : TestFmwk
    {

        public static void Main(String[] args)
        {
            new LocaleDataTest().Run(args);
        }

        private ULocale[] availableLocales;

        public LocaleDataTest()
        {
            this.availableLocales = null;
        }

        [SetUp]
        public void SetUp()
        {
            Init();
        }

        protected internal override void Init()
        {
            availableLocales = IBM.ICU.Impl.ICUResourceBundle
                    .GetAvailableULocales(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME);
        }

        [Test]
        public void TestPaperSize()
        {
            for (int i = 0; i < availableLocales.Length; i++)
            {
                ULocale locale = availableLocales[i];
                LocaleData.PaperSize paperSize = IBM.ICU.Util.LocaleData.GetPaperSize(locale);
                // skip testing of "in" .. deprecated code for Indonesian
                String lang = locale.GetLanguage();
                if (lang.Equals("in"))
                {
                    continue;
                }
                if (locale.ToString().IndexOf("_US") >= 0)
                {
                    if (paperSize.GetHeight() != 279 || paperSize.GetWidth() != 216)
                    {
                        Errln("PaperSize did not return the expected value for locale "
                                + locale
                                + " Expected height: 279 width: 216."
                                + " Got height: "
                                + paperSize.GetHeight()
                                + " width: " + paperSize.GetWidth());
                    }
                    else
                    {
                        Logln("PaperSize returned the expected values for locale "
                                + locale);
                    }
                }
                else
                {
                    if (paperSize.GetHeight() != 297 || paperSize.GetWidth() != 210)
                    {
                        Errln("PaperSize did not return the expected value for locale "
                                + locale
                                + " Expected height: 297 width: 210."
                                + " Got height: "
                                + paperSize.GetHeight()
                                + " width: " + paperSize.GetWidth());
                    }
                    else
                    {
                        Logln("PaperSize returned the expected values for locale "
                                + locale);
                    }
                }
            }
        }

        [Test]
        public void TestMeasurementSystem()
        {
            for (int i = 0; i < availableLocales.Length; i++)
            {
                ULocale locale = availableLocales[i];
                LocaleData.MeasurementSystem ms = IBM.ICU.Util.LocaleData
                        .GetMeasurementSystem(locale);
                // skip testing of "in" .. deprecated code for Indonesian
                String lang = locale.GetLanguage();
                if (lang.Equals("in"))
                {
                    continue;
                }
                if (locale.ToString().IndexOf("_US") >= 0)
                {
                    if (ms == IBM.ICU.Util.LocaleData.MeasurementSystem.US)
                    {
                        Logln("Got the expected measurement system for locale: "
                                + locale);
                    }
                    else
                    {
                        Errln("Did not get the expected measurement system for locale: "
                                + locale);
                    }
                }
                else
                {
                    if (ms == IBM.ICU.Util.LocaleData.MeasurementSystem.SI)
                    {
                        Logln("Got the expected measurement system for locale: "
                                + locale);
                    }
                    else
                    {
                        Errln("Did not get the expected measurement system for locale: "
                                + locale);
                    }
                }
            }
        }

        // Bundle together a UnicodeSet (of expemplars) and ScriptCode combination.
        // We keep a set of combinations that have already been tested, to
        // avoid repeated (time consuming) retesting of the same data.
        // Instances of this class must be well behaved as members of a set.
        internal class ExemplarGroup
        {
            private int[] scs;

            private UnicodeSet set;

            internal ExemplarGroup(UnicodeSet s, int[] scriptCodes)
            {
                set = s;
                scs = scriptCodes;
            }

            public override int GetHashCode()
            {
                int hash = 0;
                for (int i = 0; i < scs.Length && i < 4; i++)
                {
                    hash = (hash << 8) + scs[i];
                }
                return hash;
            }

            public override bool Equals(Object other)
            {
                LocaleDataTest.ExemplarGroup o = (LocaleDataTest.ExemplarGroup)other;
                bool r = ILOG.J2CsMapping.Collections.Arrays.Equals(scs, o.scs) && set.Equals(o.set);
                return r;
            }
        }

        [Test]
        public void TestExemplarSet()
        {
            HashedSet testedExemplars = new HashedSet();
            int equalCount = 0;
            for (int i = 0; i < availableLocales.Length; i++)
            {
                ULocale locale = availableLocales[i];
                int[] scriptCodes = IBM.ICU.Lang.UScript.GetCode(locale);
                if (scriptCodes == null)
                {
                    // I hate the JDK's solution for deprecated language codes.
                    // Why does the Locale constructor change the string I passed to
                    // it ?
                    // such a broken hack !!!!!
                    // so in effect I can never test the script code for Indonesian
                    // :(
                    if (locale.ToString().IndexOf(("in")) < 0)
                    {
                        Errln("UScript.getCode returned null for locale: " + locale);
                    }
                    continue;
                }
                UnicodeSet[] exemplarSets = new UnicodeSet[2];
                for (int k = 0; k < 2; ++k)
                { // for casing option in (normal,
                    // caseInsensitive)
                    int option = (k == 0) ? 0 : IBM.ICU.Text.UnicodeSet.CASE;
                    UnicodeSet exemplarSet = IBM.ICU.Util.LocaleData.GetExemplarSet(locale,
                            option);
                    exemplarSets[k] = exemplarSet;
                    LocaleDataTest.ExemplarGroup exGrp = new LocaleDataTest.ExemplarGroup(exemplarSet,
                            scriptCodes);
                    if (!ILOG.J2CsMapping.Collections.Collections.Contains(exGrp, testedExemplars))
                    {
                        ILOG.J2CsMapping.Collections.Generics.Collections.Add(testedExemplars, exGrp);
                        UnicodeSet[] sets = new UnicodeSet[scriptCodes.Length];
                        // create the UnicodeSets for the script
                        for (int j = 0; j < scriptCodes.Length; j++)
                        {
                            sets[j] = new UnicodeSet("[:"
                                    + IBM.ICU.Lang.UScript.GetShortName(scriptCodes[j]) + ":]");
                        }
                        bool existsInScript = false;
                        UnicodeSetIterator iter = new UnicodeSetIterator(
                                exemplarSet);
                        // iterate over the
                        while (!existsInScript && iter.NextRange())
                        {
                            if (iter.codepoint != IBM.ICU.Text.UnicodeSetIterator.IS_STRING)
                            {
                                for (int j_0 = 0; j_0 < sets.Length; j_0++)
                                {
                                    if (sets[j_0].Contains(iter.codepoint,
                                            iter.codepointEnd))
                                    {
                                        existsInScript = true;
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                for (int j_1 = 0; j_1 < sets.Length; j_1++)
                                {
                                    if (sets[j_1].Contains(iter.str0))
                                    {
                                        existsInScript = true;
                                        break;
                                    }
                                }
                            }
                        }
                        if (existsInScript == false)
                        {
                            Errln("ExemplarSet containment failed for locale : "
                                    + locale);
                        }
                    }
                }
                // This is expensive, so only do it if it will be visible
                if (IsVerbose())
                {
                    Logln(locale.ToString() + " exemplar " + exemplarSets[0]);
                    Logln(locale.ToString() + " exemplar(case-folded) "
                            + exemplarSets[1]);
                }
                AssertTrue(locale.ToString() + " case-folded is a superset",
                        exemplarSets[1].ContainsAll(exemplarSets[0]));
                if (exemplarSets[1].Equals(exemplarSets[0]))
                {
                    ++equalCount;
                }
            }
            // Note: The case-folded set should sometimes be a strict superset
            // and sometimes be equal.
            AssertTrue(
                    "case-folded is sometimes a strict superset, and sometimes equal",
                    equalCount > 0 && equalCount < availableLocales.Length);
        }

        [Test]
        public void TestExemplarSet2()
        {
            int equalCount = 0;
            HashedSet testedExemplars = new HashedSet();
            for (int i = 0; i < availableLocales.Length; i++)
            {
                ULocale locale = availableLocales[i];
                LocaleData ld = IBM.ICU.Util.LocaleData.GetInstance(locale);
                int[] scriptCodes = IBM.ICU.Lang.UScript.GetCode(locale);
                if (scriptCodes == null)
                {
                    if (locale.ToString().IndexOf(("in")) < 0)
                    {
                        Errln("UScript.getCode returned null for locale: " + locale);
                    }
                    continue;
                }
                UnicodeSet[] exemplarSets = new UnicodeSet[4];

                for (int k = 0; k < 2; ++k)
                { // for casing option in (normal,
                    // uncased)
                    int option = (k == 0) ? 0 : IBM.ICU.Text.UnicodeSet.CASE;
                    for (int h = 0; h < 2; ++h)
                    {
                        int type = (h == 0) ? IBM.ICU.Util.LocaleData.ES_STANDARD
                                : IBM.ICU.Util.LocaleData.ES_AUXILIARY;

                        UnicodeSet exemplarSet = ld.GetExemplarSet(option, type);
                        exemplarSets[k * 2 + h] = exemplarSet;

                        LocaleDataTest.ExemplarGroup exGrp = new LocaleDataTest.ExemplarGroup(exemplarSet,
                                scriptCodes);
                        if (!ILOG.J2CsMapping.Collections.Collections.Contains(exGrp, testedExemplars))
                        {
                            ILOG.J2CsMapping.Collections.Generics.Collections.Add(testedExemplars, exGrp);
                            UnicodeSet[] sets = new UnicodeSet[scriptCodes.Length];
                            // create the UnicodeSets for the script
                            for (int j = 0; j < scriptCodes.Length; j++)
                            {
                                sets[j] = new UnicodeSet("[:"
                                        + IBM.ICU.Lang.UScript.GetShortName(scriptCodes[j])
                                        + ":]");
                            }
                            bool existsInScript = false;
                            UnicodeSetIterator iter = new UnicodeSetIterator(
                                    exemplarSet);
                            // iterate over the
                            while (!existsInScript && iter.NextRange())
                            {
                                if (iter.codepoint != IBM.ICU.Text.UnicodeSetIterator.IS_STRING)
                                {
                                    for (int j_0 = 0; j_0 < sets.Length; j_0++)
                                    {
                                        if (sets[j_0].Contains(iter.codepoint,
                                                iter.codepointEnd))
                                        {
                                            existsInScript = true;
                                            break;
                                        }
                                    }
                                }
                                else
                                {
                                    for (int j_1 = 0; j_1 < sets.Length; j_1++)
                                    {
                                        if (sets[j_1].Contains(iter.str0))
                                        {
                                            existsInScript = true;
                                            break;
                                        }
                                    }
                                }
                            }
                            // TODO: How to verify LocaleData.ES_AUXILIARY ???
                            if (existsInScript == false && h == 0)
                            {
                                Errln("ExemplarSet containment failed for locale,option,type : "
                                        + locale + ", " + option + ", " + type);
                            }
                        }
                    }
                }
                // This is expensive, so only do it if it will be visible
                if (IsVerbose())
                {
                    Logln(locale.ToString() + " exemplar(ES_STANDARD)"
                            + exemplarSets[0]);
                    Logln(locale.ToString() + " exemplar(ES_AUXILIARY) "
                            + exemplarSets[1]);
                    Logln(locale.ToString() + " exemplar(case-folded,ES_STANDARD) "
                            + exemplarSets[2]);
                    Logln(locale.ToString()
                            + " exemplar(case-folded,ES_AUXILIARY) "
                            + exemplarSets[3]);
                }
                AssertTrue(locale.ToString() + " case-folded is a superset",
                        exemplarSets[2].ContainsAll(exemplarSets[0]));
                AssertTrue(locale.ToString() + " case-folded is a superset",
                        exemplarSets[3].ContainsAll(exemplarSets[1]));
                if (exemplarSets[2].Equals(exemplarSets[0]))
                {
                    ++equalCount;
                }
                if (exemplarSets[3].Equals(exemplarSets[1]))
                {
                    ++equalCount;
                }
            }
            // Note: The case-folded set should sometimes be a strict superset
            // and sometimes be equal.
            AssertTrue(
                    "case-folded is sometimes a strict superset, and sometimes equal",
                    equalCount > 0 && equalCount < availableLocales.Length * 2);
        }

        [Test]
        public void TestCoverage()
        {
            LocaleData ld = IBM.ICU.Util.LocaleData.GetInstance();
            bool t = ld.GetNoSubstitute();
            ld.SetNoSubstitute(t);
            AssertEquals("LocaleData get/set NoSubstitute", t, ld.GetNoSubstitute());

            Logln(ld.GetDelimiter(IBM.ICU.Util.LocaleData.QUOTATION_START));
            Logln(ld.GetDelimiter(IBM.ICU.Util.LocaleData.QUOTATION_END));
            Logln(ld.GetDelimiter(IBM.ICU.Util.LocaleData.ALT_QUOTATION_START));
            Logln(ld.GetDelimiter(IBM.ICU.Util.LocaleData.ALT_QUOTATION_END));
        }
    }
}
