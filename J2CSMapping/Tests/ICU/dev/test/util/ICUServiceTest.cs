// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:02 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2001-2007, International Business Machines Corporation and    
/// others. All Rights Reserved.                                                
/// </summary>
///
namespace IBM.ICU.Charset
{

    using IBM.ICU.Impl;
    using System;
    using System.Collections;
    using ILOG.J2CsMapping.Util;
    using IBM.ICU.Util;
    using IBM.ICU.Text;
    using ILOG.J2CsMapping.Collections;
    using System.Text;
    using System.Threading;
    using NUnit.Framework;

    [TestFixture]
    public class ICUServiceTest : TestFmwk
    {
        public static void Main(String[] args)
        {
            ICUServiceTest test = new ICUServiceTest();
            test.Run(args);
        }

        private String Lrmsg(String message, Object lhs, Object rhs)
        {
            return message + " lhs: " + lhs + " rhs: " + rhs;
        }

        public void ConfirmBoolean(String message, bool val)
        {
            Msg(message, (val) ? IBM.ICU.Charset.TestLog_Constants.LOG : IBM.ICU.Charset.TestLog_Constants.ERR, !val, true);
        }

        public void ConfirmEqual(String message, Object lhs, Object rhs)
        {
            Msg(Lrmsg(message, lhs, rhs),
                    ((lhs == null) ? rhs == null : lhs.Equals(rhs)) ? IBM.ICU.Charset.TestLog_Constants.LOG : IBM.ICU.Charset.TestLog_Constants.ERR,
                    true, true);
        }

        public void ConfirmIdentical(String message, Object lhs, Object rhs)
        {
            Msg(Lrmsg(message, lhs, rhs), (lhs == rhs) ? IBM.ICU.Charset.TestLog_Constants.LOG : IBM.ICU.Charset.TestLog_Constants.ERR, true, true);
        }

        public void ConfirmIdentical(String message, int lhs, int rhs)
        {
            Msg(message + " lhs: " + lhs + " rhs: " + rhs, (lhs == rhs) ? IBM.ICU.Charset.TestLog_Constants.LOG : IBM.ICU.Charset.TestLog_Constants.ERR,
                    true, true);
        }

        /// <summary>
        /// Convenience override of getDisplayNames(ULocale, Comparator, String) that
        /// uses the current default ULocale as the locale, the default collator for
        /// the locale as the comparator to sort the display names, and null for the
        /// matchID.
        /// </summary>
        ///
        public SortedList GetDisplayNames(ICUService service)
        {
            ULocale locale = IBM.ICU.Util.ULocale.GetDefault();
            Collator col = IBM.ICU.Text.Collator.GetInstance(locale);
            return service.GetDisplayNames(locale, col, null);
        }

        /// <summary>
        /// Convenience override of getDisplayNames(ULocale, Comparator, String) that
        /// uses the default collator for the locale as the comparator to sort the
        /// display names, and null for the matchID.
        /// </summary>
        ///
        public SortedList GetDisplayNames(ICUService service, ULocale locale)
        {
            Collator col = IBM.ICU.Text.Collator.GetInstance(locale);
            return service.GetDisplayNames(locale, col, null);
        }

        /// <summary>
        /// Convenience override of getDisplayNames(ULocale, Comparator, String) that
        /// uses the default collator for the locale as the comparator to sort the
        /// display names.
        /// </summary>
        ///
        public SortedList GetDisplayNames(ICUService service, ULocale locale,
                String matchID)
        {
            Collator col = IBM.ICU.Text.Collator.GetInstance(locale);
            return service.GetDisplayNames(locale, col, matchID);
        }

        public sealed class Anonymous_C5 : IBM.ICU.Impl.ICUService.Factory
        {
            public Object Create(IBM.ICU.Impl.ICUService.Key key, ICUService unusedService)
            {
                return new ULocale(key.CurrentID());
            }

            public void UpdateVisibleIDs(IDictionary unusedResult)
            {
            }

            public String GetDisplayName(String id, ULocale l)
            {
                return null;
            }
        }

        public sealed class Anonymous_C4 : IComparer
        {
            public int Compare(Object lhs, Object rhs)
            {
                return -StringUtil.CASE_INSENSITIVE_ORDER(
                        (String)lhs, (String)rhs);
            }
        }

        public sealed class Anonymous_C3 : IBM.ICU.Impl.ICUService.ServiceListener
        {
            private readonly ICUServiceTest outer_ICUServiceTest;

            private int n;


            /// <param name="paramouter_ICUServiceTest"></param>
            public Anonymous_C3(ICUServiceTest paramouter_ICUServiceTest)
            {
                this.outer_ICUServiceTest = paramouter_ICUServiceTest;
            }

            public void ServiceChanged(ICUService s)
            {
                outer_ICUServiceTest.Logln("listener 1 report " + n++ + " service changed: " + s);
            }
        }

        public sealed class Anonymous_C2 : IBM.ICU.Impl.ICUService.ServiceListener
        {
            private readonly ICUServiceTest outer_ICUServiceTest;

            private int n;


            /// <param name="paramouter_ICUServiceTest"></param>
            public Anonymous_C2(ICUServiceTest paramouter_ICUServiceTest)
            {
                this.outer_ICUServiceTest = paramouter_ICUServiceTest;
            }

            public void ServiceChanged(ICUService s)
            {
                outer_ICUServiceTest.Logln("listener 2 report " + n++ + " service changed: " + s);
            }
        }

        public sealed class Anonymous_C1 : IBM.ICU.Impl.ICUService.ServiceListener
        {
            private readonly ICUServiceTest outer_ICUServiceTest;

            private int n;


            /// <param name="paramouter_ICUServiceTest"></param>
            public Anonymous_C1(ICUServiceTest paramouter_ICUServiceTest)
            {
                this.outer_ICUServiceTest = paramouter_ICUServiceTest;
            }

            public void ServiceChanged(ICUService s)
            {
                outer_ICUServiceTest.Logln("listener 3 report " + n++ + " service changed...");
                if (s.Get("en_BOINK") == null)
                { // don't recurse on
                    // ourselves!!!
                    outer_ICUServiceTest.Logln("registering boink...");
                    s.RegisterObject("boink", "en_BOINK");
                }
            }
        }

        public sealed class Anonymous_C0 : IComparer
        {
            public int Compare(Object lhs, Object rhs)
            {
                return -StringUtil.CASE_INSENSITIVE_ORDER(
                        (String)lhs, (String)rhs);
            }
        }

        // use locale keys
        internal sealed class TestService : ICUService
        {
            public TestService()
                : base("Test Service")
            {
            }

            public override IBM.ICU.Impl.ICUService.Key CreateKey(String id)
            {
                return IBM.ICU.Impl.ICULocaleService.LocaleKey.CreateWithCanonicalFallback(id, null); // no
                // fallback
                // locale
            }
        }

        [Test]
        public void TestAPI()
        {
            // create a service using locale keys,
            ICUService service = new ICUServiceTest.TestService();

            Logln("service name:" + service.GetName());

            // register an object with one locale,
            // search for an object with a more specific locale
            // should return the original object
            Int32 singleton0 = ((int)(0));
            service.RegisterObject(singleton0, "en_US");
            Object result = service.Get("en_US_FOO");
            ConfirmIdentical("1) en_US_FOO -> en_US", result, singleton0);

            // register a new object with the more specific locale
            // search for an object with that locale
            // should return the new object
            Int32 singleton1 = ((int)(1));
            service.RegisterObject(singleton1, "en_US_FOO");
            result = service.Get("en_US_FOO");
            ConfirmIdentical("2) en_US_FOO -> en_US_FOO", result, singleton1);

            // search for an object that falls back to the first registered locale
            result = service.Get("en_US_BAR");
            ConfirmIdentical("3) en_US_BAR -> en_US", result, singleton0);

            // get a list of the factories, should be two
            IList factories = service.Factories();
            ConfirmIdentical("4) factory size", factories.Count, 2);

            // register a new object with yet another locale
            // original factory list is unchanged
            Int32 singleton2 = ((int)(2));
            service.RegisterObject(singleton2, "en");
            ConfirmIdentical("5) factory size", factories.Count, 2);

            // search for an object with the new locale
            // stack of factories is now en, en_US_FOO, en_US
            // search for en_US should still find en_US object
            result = service.Get("en_US_BAR");
            ConfirmIdentical("6) en_US_BAR -> en_US", result, singleton0);

            // register a new object with an old id, should hide earlier factory
            // using this id, but leave it there
            Int32 singleton3 = ((int)(3));
            service.RegisterObject(singleton3, "en_US");
            factories = service.Factories();
            ConfirmIdentical("9) factory size", factories.Count, 4);

            // should get data from that new factory
            result = service.Get("en_US_BAR");
            ConfirmIdentical("10) en_US_BAR -> (3)", result, singleton3);

            // remove new factory
            // should have fewer factories again
            service.UnregisterFactory((IBM.ICU.Impl.ICUService.Factory)factories[0]);
            factories = service.Factories();
            ConfirmIdentical("11) factory size", factories.Count, 3);

            // should get original data again after remove factory
            result = service.Get("en_US_BAR");
            ConfirmIdentical("12) en_US_BAR -> 0", result, singleton0);

            // shouldn't find unregistered ids
            result = service.Get("foo");
            ConfirmIdentical("13) foo -> null", result, null);

            // should find non-canonical strings
            String[] resultID = new String[1];
            result = service.Get("EN_us_fOo", resultID);
            ConfirmEqual("14) find non-canonical", resultID[0], "en_US_FOO");

            // should be able to register non-canonical strings and get them
            // canonicalized
            service.RegisterObject(singleton3, "eN_ca_dUde");
            result = service.Get("En_Ca_DuDe", resultID);
            ConfirmEqual("15) register non-canonical", resultID[0], "en_CA_DUDE");

            // should be able to register invisible factories, these will not
            // be visible by default, but if you know the secret password you
            // can still access these services...
            Int32 singleton4 = ((int)(4));
            service.RegisterObject(singleton4, "en_US_BAR", false);
            result = service.Get("en_US_BAR");
            ConfirmIdentical("17) get invisible", result, singleton4);

            // should not be able to locate invisible services
            ILOG.J2CsMapping.Collections.ISet ids = service.GetVisibleIDs();
            ConfirmBoolean("18) find invisible", !ILOG.J2CsMapping.Collections.Collections.Contains("en_US_BAR", ids));

            service.Reset();
            // an anonymous factory than handles all ids
            {
                IBM.ICU.Impl.ICUService.Factory factory = new ICUServiceTest.Anonymous_C5();
                service.RegisterFactory(factory);

                // anonymous factory will still handle the id
                result = service.Get(IBM.ICU.Util.ULocale.US.ToString());
                ConfirmEqual("21) locale", result, IBM.ICU.Util.ULocale.US);

                // still normalizes id
                result = service.Get("EN_US_BAR");
                ConfirmEqual("22) locale", result, new ULocale("en_US_BAR"));

                // we can override for particular ids
                service.RegisterObject(singleton3, "en_US_BAR");
                result = service.Get("en_US_BAR");
                ConfirmIdentical("23) override super", result, singleton3);

            }

            // empty service should not recognize anything
            service.Reset();
            result = service.Get("en_US");
            ConfirmIdentical("24) empty", result, null);

            // create a custom multiple key factory
            {
                String[] xids = { "en_US_VALLEY_GIRL", "en_US_VALLEY_BOY",
	                    "en_US_SURFER_GAL", "en_US_SURFER_DUDE" };
                service.RegisterFactory(new ICUServiceTest.TestLocaleKeyFactory(xids, "Later"));
            }

            // iterate over the visual ids returned by the multiple factory
            {
                ILOG.J2CsMapping.Collections.ISet vids = service.GetVisibleIDs();
                IIterator iter = new ILOG.J2CsMapping.Collections.IteratorAdapter(vids.GetEnumerator());
                int count = 0;
                while (iter.HasNext())
                {
                    ++count;
                    String id = (String)iter.Next();
                    Logln("  " + id + " --> " + service.Get(id));
                }
                // four visible ids
                ConfirmIdentical("25) visible ids", count, 4);
            }

            // iterate over the display names
            {
                IDictionary dids = GetDisplayNames(service, IBM.ICU.Util.ULocale.GERMANY);
                IIterator iter_0 = new ILOG.J2CsMapping.Collections.IteratorAdapter(dids.GetEnumerator());
                int count_1 = 0;
                while (iter_0.HasNext())
                {
                    ++count_1;
                    DictionaryEntry e = (DictionaryEntry)iter_0.Next();
                    Logln("  " + ((DictionaryEntry)e).Key + " -- > " + ((DictionaryEntry)e).Value);
                }
                // four display names, in german
                ConfirmIdentical("26) display names", count_1, 4);
            }

            // no valid display name
            ConfirmIdentical("27) get display name",
                    service.GetDisplayName("en_US_VALLEY_GEEK"), null);

            {
                String name = service.GetDisplayName("en_US_SURFER_DUDE",
                        IBM.ICU.Util.ULocale.US);
                ConfirmEqual("28) get display name", name,
                        "English (United States, SURFER_DUDE)");
            }

            // register another multiple factory
            {
                String[] xids_2 = { "en_US_SURFER", "en_US_SURFER_GAL",
	                    "en_US_SILICON", "en_US_SILICON_GEEK" };
                service.RegisterFactory(new ICUServiceTest.TestLocaleKeyFactory(xids_2, "Rad dude"));
            }

            // this time, we have seven display names
            // Rad dude's surfer gal 'replaces' later's surfer gal
            {
                IDictionary dids_3 = GetDisplayNames(service);
                IIterator iter_4 = new ILOG.J2CsMapping.Collections.IteratorAdapter(dids_3.GetEnumerator());
                int count_5 = 0;
                while (iter_4.HasNext())
                {
                    ++count_5;
                    DictionaryEntry e_6 = (DictionaryEntry)iter_4.Next();
                    Logln("  " + ((DictionaryEntry)e_6).Key + " --> " + ((DictionaryEntry)e_6).Value);
                }
                // seven display names, in spanish
                ConfirmIdentical("29) display names", count_5, 7);
            }

            // we should get the display name corresponding to the actual id
            // returned by the id we used.
            {
                String[] actualID = new String[1];
                String id_7 = "en_us_surfer_gal";
                String gal = (String)service.Get(id_7, actualID);
                if (gal != null)
                {
                    Logln("actual id: " + actualID[0]);
                    String displayName = service.GetDisplayName(actualID[0],
                            IBM.ICU.Util.ULocale.US);
                    Logln("found actual: " + gal + " with display name: "
                            + displayName);
                    ConfirmBoolean("30) found display name for actual",
                            displayName != null);

                    displayName = service.GetDisplayName(id_7, IBM.ICU.Util.ULocale.US);
                    Logln("found query: " + gal + " with display name: "
                            + displayName);
                    // this is no longer a bug, we want to return display names for
                    // anything
                    // that a factory handles. since we handle it, we should return
                    // a display
                    // name. see jb3549
                    // confirmBoolean("31) found display name for query",
                    // displayName == null);
                }
                else
                {
                    Errln("30) service could not find entry for " + id_7);
                }

                // this should be handled by the 'dude' factory, since it overrides
                // en_US_SURFER.
                id_7 = "en_US_SURFER_BOZO";
                String bozo = (String)service.Get(id_7, actualID);
                if (bozo != null)
                {
                    String displayName_8 = service.GetDisplayName(actualID[0],
                            IBM.ICU.Util.ULocale.US);
                    Logln("found actual: " + bozo + " with display name: "
                            + displayName_8);
                    ConfirmBoolean("32) found display name for actual",
                            displayName_8 != null);

                    displayName_8 = service.GetDisplayName(id_7, IBM.ICU.Util.ULocale.US);
                    Logln("found actual: " + bozo + " with display name: "
                            + displayName_8);
                    // see above and jb3549
                    // confirmBoolean("33) found display name for query",
                    // displayName == null);
                }
                else
                {
                    Errln("32) service could not find entry for " + id_7);
                }

                ConfirmBoolean("34) is default ", !service.IsDefault());
            }

            /*
             * // disallow hiding for now
             * 
             * // hiding factory should obscure 'sublocales' { String[] xids = {
             * "en_US_VALLEY", "en_US_SILICON" }; service.registerFactory(new
             * TestHidingFactory(xids, "hiding")); }
             * 
             * { Map dids = service.getDisplayNames(); Iterator iter =
             * dids.entrySet().iterator(); int count = 0; while (iter.hasNext()) {
             * ++count; Entry e = (Entry)iter.next(); logln("  " + e.getKey() +
             * " -- > " + e.getValue()); } confirmIdentical("35) hiding factory",
             * count, 5); }
             */

            {
                ILOG.J2CsMapping.Collections.ISet xids_9 = service.GetVisibleIDs();
                IIterator iter_10 = new ILOG.J2CsMapping.Collections.IteratorAdapter(xids_9.GetEnumerator());
                while (iter_10.HasNext())
                {
                    String xid = (String)iter_10.Next();
                    Logln(xid + "?  " + service.Get(xid));
                }

                Logln("valleygirl?  " + service.Get("en_US_VALLEY_GIRL"));
                Logln("valleyboy?   " + service.Get("en_US_VALLEY_BOY"));
                Logln("valleydude?  " + service.Get("en_US_VALLEY_DUDE"));
                Logln("surfergirl?  " + service.Get("en_US_SURFER_GIRL"));
            }

            // resource bundle factory.
            service.Reset();
            service.RegisterFactory(new IBM.ICU.Impl.ICULocaleService.ICUResourceBundleFactory());

            // list all of the resources
            {
                Logln("all visible ids: " + service.GetVisibleIDs());
                /*
                 * Set xids = service.getVisibleIDs(); StringBuffer buf = new
                 * StringBuffer("{"); boolean notfirst = false; Iterator iter =
                 * xids.iterator(); while (iter.hasNext()) { String xid =
                 * (String)iter.next(); if (notfirst) { buf.append(", "); } else {
                 * notfirst = true; } buf.append(xid); } buf.append("}");
                 * logln(buf.toString());
                 */
            }

            // list only the resources for es, default locale
            // since we're using the default Key, only "es" is matched
            {
                Logln("visible ids for es locale: " + service.GetVisibleIDs("es"));
            }

            // list only the spanish display names for es, spanish collation order
            // since we're using the default Key, only "es" is matched
            {
                Logln("display names: "
                        + GetDisplayNames(service, new ULocale("es"), "es"));
            }

            // list the display names in reverse order
            {
                Logln("display names in reverse order: "
                        + service.GetDisplayNames(IBM.ICU.Util.ULocale.US, new ICUServiceTest.Anonymous_C4()));
            }

            // get all the display names of these resources
            // this should be fast since the display names were cached.
            {
                Logln("service display names for de_DE");
                IDictionary names = GetDisplayNames(service, new ULocale("de_DE"));
                StringBuilder buf = new StringBuilder("{");
                IIterator iter_11 = new ILOG.J2CsMapping.Collections.IteratorAdapter(names.GetEnumerator());
                while (iter_11.HasNext())
                {
                    DictionaryEntry e_12 = (DictionaryEntry)iter_11.Next();
                    String name_13 = (String)((DictionaryEntry)e_12).Key;
                    String id_14 = (String)((DictionaryEntry)e_12).Value;
                    buf.Append("\n   " + name_13 + " --> " + id_14);
                }
                buf.Append("\n}");
                Logln(buf.ToString());
            }

            ICUServiceTest.CalifornioLanguageFactory califactory = new ICUServiceTest.CalifornioLanguageFactory();
            service.RegisterFactory(califactory);
            // get all the display names of these resources
            {
                Logln("californio language factory");
                StringBuilder buf_15 = new StringBuilder("{");
                String[] idNames = { IBM.ICU.Charset.ICUServiceTest.CalifornioLanguageFactory.californio,
	                    IBM.ICU.Charset.ICUServiceTest.CalifornioLanguageFactory.valley,
	                    IBM.ICU.Charset.ICUServiceTest.CalifornioLanguageFactory.surfer,
	                    IBM.ICU.Charset.ICUServiceTest.CalifornioLanguageFactory.geek };
                for (int i = 0; i < idNames.Length; ++i)
                {
                    String idName = idNames[i];
                    buf_15.Append("\n  --- " + idName + " ---");
                    IDictionary names_16 = GetDisplayNames(service, new ULocale(idName));
                    IIterator iter_17 = new ILOG.J2CsMapping.Collections.IteratorAdapter(names_16.GetEnumerator());
                    while (iter_17.HasNext())
                    {
                        DictionaryEntry e_18 = (DictionaryEntry)iter_17.Next();
                        String name_19 = (String)((DictionaryEntry)e_18).Key;
                        String id_20 = (String)((DictionaryEntry)e_18).Value;
                        buf_15.Append("\n    " + name_19 + " --> " + id_20);
                    }
                }
                buf_15.Append("\n}");
                Logln(buf_15.ToString());
            }

            // test notification
            // simple registration
            {
                Logln("simple registration notification");
                ICULocaleService ls = new ICULocaleService();
                IBM.ICU.Impl.ICUService.ServiceListener l1 = new ICUServiceTest.Anonymous_C3(this);
                ls.AddListener(l1);
                IBM.ICU.Impl.ICUService.ServiceListener l2 = new ICUServiceTest.Anonymous_C2(this);
                ls.AddListener(l2);
                Logln("registering foo... ");
                ls.RegisterObject("Foo", "en_FOO");
                Logln("registering bar... ");
                ls.RegisterObject("Bar", "en_BAR");
                Logln("getting foo...");
                Logln((String)ls.Get("en_FOO"));
                Logln("removing listener 2...");
                ls.RemoveListener(l2);
                Logln("registering baz...");
                ls.RegisterObject("Baz", "en_BAZ");
                Logln("removing listener 1");
                ls.RemoveListener(l1);
                Logln("registering burp...");
                ls.RegisterObject("Burp", "en_BURP");

                // should only get one notification even if register multiple times
                Logln("... trying multiple registration");
                ls.AddListener(l1);
                ls.AddListener(l1);
                ls.AddListener(l1);
                ls.AddListener(l2);
                ls.RegisterObject("Foo", "en_FOO");
                Logln("... registered foo");

                // since in a separate thread, we can callback and not deadlock
                IBM.ICU.Impl.ICUService.ServiceListener l3 = new ICUServiceTest.Anonymous_C1(this);
                ls.AddListener(l3);
                Logln("registering boo...");
                ls.RegisterObject("Boo", "en_BOO");
                Logln("...done");

                try
                {
                    ILOG.J2CsMapping.Threading.ThreadWrapper.Sleep(100);
                }
                catch (ThreadInterruptedException e_21)
                {
                }
            }
        }

        internal class TestLocaleKeyFactory : IBM.ICU.Impl.ICULocaleService.LocaleKeyFactory
        {
            protected internal readonly ILOG.J2CsMapping.Collections.ISet ids;

            protected internal readonly String factoryID;

            public TestLocaleKeyFactory(String[] ids_0, String factoryID_1)
                : base(IBM.ICU.Impl.ICULocaleService.LocaleKeyFactory.VISIBLE, factoryID_1)
            {
                this.ids = ILOG.J2CsMapping.Collections.Generics.Collections.UnmodifiableSet(new HashedSet(ILOG.J2CsMapping.Collections.Generics.Arrays.AsList(ids_0)));
                this.factoryID = factoryID_1 + ": ";
            }

            protected override Object HandleCreate(ULocale loc, int kind, ICUService service)
            {
                return factoryID + loc.ToString();
            }

            protected override ILOG.J2CsMapping.Collections.ISet GetSupportedIDs()
            {
                return ids;
            }
        }

        /*
         * // Disallow hiding for now since it causes gnarly problems, like // how
         * do you localize the hidden (but still exported) names.
         * 
         * static class TestHidingFactory : ICUService.Factory { protected
         * final String[] ids; protected final String factoryID;
         * 
         * public TestHidingFactory(String[] ids) { this(ids, "Hiding"); }
         * 
         * public TestHidingFactory(String[] ids, String factoryID) { this.ids =
         * (String[])ids.clone();
         * 
         * if (factoryID == null || factoryID.length() == 0) { this.factoryID = "";
         * } else { this.factoryID = factoryID + ": "; } }
         * 
         * public Object create(Key key, ICUService service) { for (int i = 0; i <
         * ids.length; ++i) { if (LocaleUtility.isFallbackOf(ids[i],
         * key.currentID())) { return factoryID + key.canonicalID(); } } return
         * null; }
         * 
         * public void updateVisibleIDs(Map result) { for (int i = 0; i <
         * ids.length; ++i) { String id = ids[i]; Iterator iter =
         * result.keySet().iterator(); while (iter.hasNext()) { if
         * (LocaleUtility.isFallbackOf(id, (String)iter.next())) { iter.remove(); }
         * } result.put(id, this); } }
         * 
         * public String getDisplayName(String id, ULocale locale) { return
         * factoryID + new ULocale(id).getDisplayName(locale); } }
         */

        internal class CalifornioLanguageFactory : IBM.ICU.Impl.ICULocaleService.ICUResourceBundleFactory
        {
            public static String californio = "en_US_CA";

            public static String valley = californio + "_VALLEY";

            public static String surfer = californio + "_SURFER";

            public static String geek = californio + "_GEEK";

            public static ILOG.J2CsMapping.Collections.ISet supportedIDs;
            protected override ILOG.J2CsMapping.Collections.ISet GetSupportedIDs()
            {
                return supportedIDs;
            }

            public override String GetDisplayName(String id, ULocale locale)
            {
                String prefix = "";
                String suffix = "";
                String ls = locale.ToString();
                if (IBM.ICU.Impl.LocaleUtility.IsFallbackOf(californio, ls))
                {
                    if (ls.Equals(valley, StringComparison.InvariantCultureIgnoreCase))
                    {
                        prefix = "Like, you know, it's so totally ";
                    }
                    else if (ls.Equals(surfer, StringComparison.InvariantCultureIgnoreCase))
                    {
                        prefix = "Dude, its ";
                    }
                    else if (ls.Equals(geek, StringComparison.InvariantCultureIgnoreCase))
                    {
                        prefix = "I'd estimate it's approximately ";
                    }
                    else
                    {
                        prefix = "Huh?  Maybe ";
                    }
                }
                if (IBM.ICU.Impl.LocaleUtility.IsFallbackOf(californio, id))
                {
                    if (id.Equals(valley, StringComparison.InvariantCultureIgnoreCase))
                    {
                        suffix = "like the Valley, you know?  Let's go to the mall!";
                    }
                    else if (id.Equals(surfer, StringComparison.InvariantCultureIgnoreCase))
                    {
                        suffix = "time to hit those gnarly waves, Dude!!!";
                    }
                    else if (id.Equals(geek, StringComparison.InvariantCultureIgnoreCase))
                    {
                        suffix = "all systems go.  T-Minus 9, 8, 7...";
                    }
                    else
                    {
                        suffix = "No Habla Englais";
                    }
                }
                else
                {
                    suffix = base.GetDisplayName(id, locale);
                }

                return prefix + suffix;
            }

            static CalifornioLanguageFactory()
            {
                HashedSet result = new HashedSet();
                ILOG.J2CsMapping.Collections.Generics.Collections.AddAll(IBM.ICU.Impl.ICUResourceBundle
                                    .GetAvailableLocaleNameSet(), result);
                ILOG.J2CsMapping.Collections.Generics.Collections.Add(result, californio);
                ILOG.J2CsMapping.Collections.Generics.Collections.Add(result, valley);
                ILOG.J2CsMapping.Collections.Generics.Collections.Add(result, surfer);
                ILOG.J2CsMapping.Collections.Generics.Collections.Add(result, geek);
                supportedIDs = ILOG.J2CsMapping.Collections.Generics.Collections.UnmodifiableSet(result);
            }
        }

        [Test]
        public void TestLocale()
        {
            ICULocaleService service = new ICULocaleService("test locale");
            service.RegisterObject("root", IBM.ICU.Util.ULocale.ROOT);
            service.RegisterObject("german", "de");
            service.RegisterObject("german_Germany", IBM.ICU.Util.ULocale.GERMANY);
            service.RegisterObject("japanese", "ja");
            service.RegisterObject("japanese_Japan", IBM.ICU.Util.ULocale.JAPAN);

            Object target = service.Get("de_US");
            ConfirmEqual("test de_US", "german", target);

            ULocale de = new ULocale("de");
            ULocale de_US = new ULocale("de_US");

            target = service.Get(de_US);
            ConfirmEqual("test de_US 2", "german", target);

            target = service.Get(de_US, IBM.ICU.Impl.ICULocaleService.LocaleKey.KIND_ANY);
            ConfirmEqual("test de_US 3", "german", target);

            target = service.Get(de_US, 1234);
            ConfirmEqual("test de_US 4", "german", target);

            ULocale[] actualReturn = new ULocale[1];
            target = service.Get(de_US, actualReturn);
            ConfirmEqual("test de_US 5", "german", target);
            ConfirmEqual("test de_US 6", actualReturn[0], de);

            actualReturn[0] = null;
            target = service.Get(de_US, IBM.ICU.Impl.ICULocaleService.LocaleKey.KIND_ANY, actualReturn);
            ConfirmEqual("test de_US 7", actualReturn[0], de);

            actualReturn[0] = null;
            target = service.Get(de_US, 1234, actualReturn);
            ConfirmEqual("test de_US 8", "german", target);
            ConfirmEqual("test de_US 9", actualReturn[0], de);

            service.RegisterObject("one/de_US", de_US, 1);
            service.RegisterObject("two/de_US", de_US, 2);

            target = service.Get(de_US, 1);
            ConfirmEqual("test de_US kind 1", "one/de_US", target);

            target = service.Get(de_US, 2);
            ConfirmEqual("test de_US kind 2", "two/de_US", target);

            target = service.Get(de_US);
            ConfirmEqual("test de_US kind 3", "german", target);

            IBM.ICU.Impl.ICULocaleService.LocaleKey lkey = IBM.ICU.Impl.ICULocaleService.LocaleKey
                    .CreateWithCanonicalFallback("en", null, 1234);
            Logln("lkey prefix: " + lkey.Prefix());
            Logln("lkey descriptor: " + lkey.CurrentDescriptor());
            Logln("lkey current locale: " + lkey.CurrentLocale());

            lkey.Fallback();
            Logln("lkey descriptor 2: " + lkey.CurrentDescriptor());

            lkey.Fallback();
            Logln("lkey descriptor 3: " + lkey.CurrentDescriptor());

            target = service.Get("za_PPP");
            ConfirmEqual("test zappp", "root", target);

            ULocale loc = IBM.ICU.Util.ULocale.GetDefault();
            IBM.ICU.Util.ULocale.SetDefault(IBM.ICU.Util.ULocale.JAPANESE);
            target = service.Get("za_PPP");
            ConfirmEqual("test with ja locale", "japanese", target);

            ILOG.J2CsMapping.Collections.ISet ids_0 = service.GetVisibleIDs();
            for (IIterator iter = new ILOG.J2CsMapping.Collections.IteratorAdapter(ids_0.GetEnumerator()); iter.HasNext(); )
            {
                Logln("id: " + iter.Next());
            }

            IBM.ICU.Util.ULocale.SetDefault(loc);
            ids_0 = service.GetVisibleIDs();
            for (IIterator iter_1 = new ILOG.J2CsMapping.Collections.IteratorAdapter(ids_0.GetEnumerator()); iter_1.HasNext(); )
            {
                Logln("id: " + iter_1.Next());
            }

            target = service.Get("za_PPP");
            ConfirmEqual("test with en locale", "root", target);

            ULocale[] locales = service.GetAvailableULocales();
            ConfirmIdentical("test available locales", locales.Length, 6);
            Logln("locales: ");
            for (int i = 0; i < locales.Length; ++i)
            {
                Log("\n  [" + i + "] " + locales[i]);
            }
            Logln(" ");

            service.RegisterFactory(new IBM.ICU.Impl.ICULocaleService.ICUResourceBundleFactory());
            target = service.Get(IBM.ICU.Util.ULocale.JAPAN);

            {
                int n_2 = 0;
                IList factories = service.Factories();
                IIterator iter_3 = new ILOG.J2CsMapping.Collections.IteratorAdapter(factories.GetEnumerator());
                while (iter_3.HasNext())
                {
                    Logln("[" + n_2++ + "] " + iter_3.Next());
                }
            }

            // list only the english display names for es, in reverse order
            // since we're using locale keys, we should get all and only the es
            // locales
            // hmmm, the default toString function doesn't print in sorted order for
            // TreeMap
            {
                SortedList map = service.GetDisplayNames(IBM.ICU.Util.ULocale.US,
                        new ICUServiceTest.Anonymous_C0(), "es");

                Logln("es display names in reverse order " + map);
            }
        }

        [Test]
        public void TestWrapFactory()
        {
            String greeting = "Hello There";
            String greetingID = "greeting";

            ICUService service = new ICUService("wrap");
            service.RegisterObject(greeting, greetingID);

            Logln("test one: " + service.Get(greetingID));


            service.RegisterFactory(new ICUServiceTest.WrapFactory(greetingID));

            ConfirmEqual("wrap test: ", service.Get(greetingID),
                    "A different greeting: \"" + greeting + "\"");
        }

        // misc coverage tests
        [Test]
        public void TestCoverage()
        {
            // Key
            IBM.ICU.Impl.ICUService.Key key = new IBM.ICU.Impl.ICUService.Key("foobar");
            Logln("ID: " + key.Id());
            Logln("canonicalID: " + key.CanonicalID());
            Logln("currentID: " + key.CurrentID());
            Logln("has fallback: " + key.Fallback());

            // SimpleFactory
            Object obj = new Object();
            IBM.ICU.Impl.ICUService.SimpleFactory sf = new IBM.ICU.Impl.ICUService.SimpleFactory(obj, "object");
            try
            {
                sf = new IBM.ICU.Impl.ICUService.SimpleFactory(null, null);
                Errln("didn't throw exception");
            }
            catch (ArgumentException e)
            {
                Logln("OK: " + e.Message);
            }
            catch (Exception e_0)
            {
                Errln("threw wrong exception" + e_0);
            }
            Logln(sf.GetDisplayName("object", null));

            // ICUService
            ICUService service = new ICUService();
            service.RegisterFactory(sf);

            try
            {
                service.Get(null, null);
                Errln("didn't throw exception");
            }
            catch (NullReferenceException e_1)
            {
                Logln("OK: " + e_1.Message);
            }
            /*
             * catch (Exception e) { errln("threw wrong exception" + e); }
             */
            try
            {
                service.RegisterFactory(null);
                Errln("didn't throw exception");
            }
            catch (NullReferenceException e_2)
            {
                Logln("OK: " + e_2.Message);
            }
            catch (Exception e_3)
            {
                Errln("threw wrong exception" + e_3);
            }

            try
            {
                service.UnregisterFactory(null);
                Errln("didn't throw exception");
            }
            catch (NullReferenceException e_4)
            {
                Logln("OK: " + e_4.Message);
            }
            catch (Exception e_5)
            {
                Errln("threw wrong exception" + e_5);
            }

            Logln("object is: " + service.Get("object"));

            Logln("stats: " + service.Stats());

            // ICURWLock

            ICURWLock rwlock = new ICURWLock();
            rwlock.AcquireRead();
            rwlock.ReleaseRead();

            rwlock.AcquireWrite();
            rwlock.ReleaseWrite();
            Logln("stats: " + rwlock.GetStats());
            Logln("stats: " + rwlock.ClearStats());
            rwlock.AcquireRead();
            rwlock.ReleaseRead();
            rwlock.AcquireWrite();
            rwlock.ReleaseWrite();
            Logln("stats: " + rwlock.GetStats());

            try
            {
                rwlock.ReleaseRead();
                Errln("no error thrown");
            }
            catch (InvalidOperationException e_6)
            {
                Logln("OK: " + e_6.Message);
            }

            try
            {
                rwlock.ReleaseWrite();
                Errln("no error thrown");
            }
            catch (InvalidOperationException e_7)
            {
                Logln("OK: " + e_7.Message);
            }

            // ICULocaleService

            // LocaleKey

            // LocaleKey lkey = LocaleKey.create("en_US", "ja_JP");
            // lkey = LocaleKey.create(null, null);
            IBM.ICU.Impl.ICULocaleService.LocaleKey lkey = IBM.ICU.Impl.ICULocaleService.LocaleKey
                    .CreateWithCanonicalFallback("en_US", "ja_JP");
            Logln("lkey: " + lkey);

            lkey = IBM.ICU.Impl.ICULocaleService.LocaleKey.CreateWithCanonicalFallback(null, null);
            Logln("lkey from null,null: " + lkey);

            // LocaleKeyFactory
            IBM.ICU.Impl.ICULocaleService.LocaleKeyFactory lkf = new ICUServiceTest.LKFSubclass(false);
            Logln("lkf: " + lkf);
            Logln("obj: " + lkf.Create(lkey, null));
            Logln(lkf.GetDisplayName("foo", null));
            Logln(lkf.GetDisplayName("bar", null));
            lkf.UpdateVisibleIDs(new Hashtable());

            IBM.ICU.Impl.ICULocaleService.LocaleKeyFactory invisibleLKF = new ICUServiceTest.LKFSubclass(false);
            Logln("obj: " + invisibleLKF.Create(lkey, null));
            Logln(invisibleLKF.GetDisplayName("foo", null));
            Logln(invisibleLKF.GetDisplayName("bar", null));
            invisibleLKF.UpdateVisibleIDs(new Hashtable());

            // ResourceBundleFactory
            IBM.ICU.Impl.ICULocaleService.ICUResourceBundleFactory rbf = new IBM.ICU.Impl.ICULocaleService.ICUResourceBundleFactory();
            Logln("RB: " + rbf.Create(lkey, null));

            // ICUNotifier
            ICUNotifier nf = new ICUServiceTest.ICUNSubclass();
            try
            {
                nf.AddListener(null);
                Errln("added null listener");
            }
            catch (NullReferenceException e_8)
            {
                Logln(e_8.Message);
            }
            catch (Exception e_9)
            {
                Errln("got wrong exception");
            }

            try
            {
                nf.AddListener(new ICUServiceTest.WrongListener());
                Errln("added wrong listener");
            }
            catch (InvalidOperationException e_10)
            {
                Logln(e_10.Message);
            }
            catch (Exception e_11)
            {
                Errln("got wrong exception");
            }

            try
            {
                nf.RemoveListener(null);
                Errln("removed null listener");
            }
            catch (NullReferenceException e_12)
            {
                Logln(e_12.Message);
            }
            catch (Exception e_13)
            {
                Errln("got wrong exception");
            }

            nf.RemoveListener(new ICUServiceTest.MyListener());
            nf.NotifyChanged();
            nf.AddListener(new ICUServiceTest.MyListener());
            nf.RemoveListener(new ICUServiceTest.MyListener());
        }

        internal class MyListener : IEventListener
        {
        }

        internal class WrongListener : IEventListener
        {
        }

        internal class ICUNSubclass : ICUNotifier
        {
            protected override bool AcceptsListener(IEventListener l)
            {
                return l is ICUServiceTest.MyListener;
            }

            // not used, just needed to implement abstract base
            protected override void NotifyListener(IEventListener l)
            {
            }
        }

        internal class LKFSubclass : IBM.ICU.Impl.ICULocaleService.LocaleKeyFactory
        {
            internal LKFSubclass(bool visible)
                : base((visible) ? IBM.ICU.Impl.ICULocaleService.LocaleKeyFactory.VISIBLE : IBM.ICU.Impl.ICULocaleService.LocaleKeyFactory.INVISIBLE)
            {
            }

            protected override ILOG.J2CsMapping.Collections.ISet GetSupportedIDs()
            {
                return ILOG.J2CsMapping.Collections.Generics.Collections.EMPTY_SET;
            }
        }

        internal class WrapFactory : IBM.ICU.Impl.ICUService.Factory
        {
            String greetingID;

            public WrapFactory(String greeting)
            {
                this.greetingID = greeting;
            }

            public virtual Object Create(IBM.ICU.Impl.ICUService.Key key, ICUService serviceArg)
            {
                if (key.CurrentID().Equals(greetingID))
                {
                    Object previous = serviceArg.GetKey(key, null, this);
                    return "A different greeting: \"" + previous + "\"";
                }
                return null;
            }

            public virtual void UpdateVisibleIDs(IDictionary result)
            {
                ILOG.J2CsMapping.Collections.Collections.Put(result, "greeting", this);
            }

            public virtual String GetDisplayName(String id, ULocale locale)
            {
                return "wrap '" + id + "'";
            }
        }
    }
}
