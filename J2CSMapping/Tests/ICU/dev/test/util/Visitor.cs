/*
 *******************************************************************************
 * Copyright (C) 2002-2004, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Charset {
	
	using IBM.ICU.Text;
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	public abstract class Visitor {
	
	    public void DoAt(Object item) {
	        if (item  is  ICollection) {
	            DoAt((ICollection) item);
	        } else if (item  is  IDictionary) {
	            DoAt((IDictionary) item);
	        } else if (item  is  Object[]) {
	            DoAt((Object[]) item);
	        } else if (item  is  UnicodeSet) {
	            DoAt((UnicodeSet) item);
	        } else {
	            DoSimpleAt(item);
	        }
	    }
	
	    public int Count(Object item) {
	        if (item  is  ICollection) {
	            return ((ICollection) item).Count;
	        } else if (item  is  IDictionary) {
	            return ((IDictionary) item).Count;
	        } else if (item  is  Object[]) {
	            return ((Object[]) item).Length;
	        } else if (item  is  UnicodeSet) {
	            return ((UnicodeSet) item).Size();
	        } else {
	            return 1;
	        }
	    }
	
	    // the default implementation boxing
	
	    public void DoAt(int o) {
	        DoSimpleAt(((int)(o)));
	    }
	
	    public void DoAt(double o) {
	        DoSimpleAt((double )(o));
	    }
	
	    public void DoAt(char o) {
	        DoSimpleAt((char)(o));
	    }
	
	    // for subclassing
	
	    protected internal void DoAt(ICollection c) {
	        if (c.Count == 0)
	            DoBefore(c, null);
	        IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(c.GetEnumerator());
	        bool first = true;
	        Object last = null;
	        while (it.HasNext()) {
	            Object item = it.Next();
	            if (first) {
	                DoBefore(c, item);
	                first = false;
	            } else {
	                DoBetween(c, last, item);
	            }
	            DoAt(last = item);
	        }
	        DoAfter(c, last);
	    }
	
	    protected internal void DoAt(IDictionary c) {
	        DoAt(c);
	    }
	
	    protected internal void DoAt(UnicodeSet c) {
	        if (c.Size() == 0)
	            DoBefore(c, null);
	        UnicodeSetIterator it = new UnicodeSetIterator(c);
	        bool first = true;
	        Object last = null;
	        Object item;
	        Visitor.CodePointRange  cpr0 = new Visitor.CodePointRange ();
	        Visitor.CodePointRange  cpr1 = new Visitor.CodePointRange ();
	        Visitor.CodePointRange  cpr;
	
	        while (it.NextRange()) {
	            if (it.codepoint == IBM.ICU.Text.UnicodeSetIterator.IS_STRING) {
	                item = it.str0;
	            } else {
	                cpr = (last == (Object) cpr0) ? cpr1 : cpr0; // make sure we don't override
	                                                  // last
	                cpr.codepoint = it.codepoint;
	                cpr.codepointEnd = it.codepointEnd;
	                item = cpr;
	            }
	            if (!first) {
	                DoBefore(c, item);
	                first = true;
	            } else {
	                DoBetween(c, last, item);
	            }
	            DoAt(last = item);
	        }
	        DoAfter(c, last);
	    }
	
	    protected internal void DoAt(Object[] c) {
	        DoBefore(c, (c.Length == 0) ? null : c[0]);
	        Object last = null;
	        for (int i = 0; i < c.Length; ++i) {
	            if (i != 0)
	                DoBetween(c, last, c[i]);
	            DoAt(last = c[i]);
	        }
	        DoAfter(c, last);
	    }
	
	    public class CodePointRange {
	        public int codepoint, codepointEnd;
	    }
	
	    // ===== MUST BE OVERRIDEN =====
	
	    abstract protected internal void DoBefore(Object container, Object item);
	
	    abstract protected internal void DoBetween(Object container, Object lastItem,
	            Object nextItem);
	
	    abstract protected internal void DoAfter(Object container, Object item);
	
	    abstract protected internal void DoSimpleAt(Object o);
	
	}}
