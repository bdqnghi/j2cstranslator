/* 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/7/10 3:45 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Tests
{

    using ILOG.J2CsMapping.Util;
    using NUnit;
    using ILOG.J2CsMapping.Text;
    using System;
    using ILOG.J2CsMapping.Formatting;

    [NUnit.Framework.TestFixture]
    public class DateFormatTest 
    {


        /// @tests java.text.DateFormat#clone()
        [NUnit.Framework.Test]
        public void Test_clone()
        {
            DateFormat format = DateFormat.GetInstance();
            DateFormat clone = (DateFormat)format.Clone();
            NUnit.Framework.Assert.IsTrue(format.Equals(clone), "Clone not equal");
            clone.GetNumberFormat().SetMinimumFractionDigits(123);
            NUnit.Framework.Assert.IsTrue(!format.Equals(clone), "Clone shares NumberFormat");
        }


        /// @tests java.text.DateFormat#getAvailableLocales()
        [NUnit.Framework.Test]
        public void Test_getAvailableLocales()
        {
            Locale[] locales = DateFormat.GetAvailableLocales();
            NUnit.Framework.Assert.IsTrue(locales.Length > 0, "No locales");
            bool english = false, german = false;
            for (int i = locales.Length; --i >= 0; )
            {
                if (locales[i].Equals(Locale.US))
                    english = true;
                if (locales[i].Equals(Locale.GERMAN))
                    german = true;
                DateFormat f1 = DateFormat.GetDateTimeInstance(DateFormat.SHORT,
                        DateFormat.SHORT, locales[i]);
                NUnit.Framework.Assert.IsTrue((Object)f1.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");
            }
            NUnit.Framework.Assert.IsTrue(english && german, "Missing locales");
        }


        /// @tests java.text.DateFormat#getCalendar()
        [NUnit.Framework.Test]
        public void Test_getCalendar()
        {
            DateFormat format = DateFormat.GetInstance();
            IBM.ICU.Util.Calendar cal1 = format.GetCalendar();
            IBM.ICU.Util.Calendar cal2 = format.GetCalendar();
            NUnit.Framework.Assert.IsTrue(cal1 == cal2, "Calendars not identical");
        }


        /// @tests java.text.DateFormat#getDateInstance()
        [NUnit.Framework.Test]
        public void Test_getDateInstance()
        {
            SimpleDateFormat f2 = (SimpleDateFormat)DateFormat.GetDateInstance();
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.IsTrue(f2.Equals(DateFormat.GetDateInstance(DateFormat.DEFAULT,
                                    Locale.GetDefault())), "Wrong default");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(new DateFormatSymbols()), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");
        }


        /// @tests java.text.DateFormat#getDateInstance(int)
        [NUnit.Framework.Test]
        public void Test_getDateInstanceI()
        {
            NUnit.Framework.Assert.IsTrue(DateFormat.DEFAULT == DateFormat.MEDIUM, "Default not medium");

            SimpleDateFormat f2 = (SimpleDateFormat)DateFormat
                    .GetDateInstance(DateFormat.SHORT);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class1");
            NUnit.Framework.Assert.IsTrue(f2.Equals(DateFormat.GetDateInstance(DateFormat.SHORT,
                                    Locale.GetDefault())), "Wrong default1");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(new DateFormatSymbols()), "Wrong symbols1");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work1");

            f2 = (SimpleDateFormat)DateFormat.GetDateInstance(DateFormat.MEDIUM);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class2");
            NUnit.Framework.Assert.IsTrue(f2.Equals(DateFormat.GetDateInstance(DateFormat.MEDIUM,
                                    Locale.GetDefault())), "Wrong default2");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(new DateFormatSymbols()), "Wrong symbols2");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work2");

            f2 = (SimpleDateFormat)DateFormat.GetDateInstance(DateFormat.LONG);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class3");
            NUnit.Framework.Assert.IsTrue(f2.Equals(DateFormat.GetDateInstance(DateFormat.LONG,
                                    Locale.GetDefault())), "Wrong default3");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(new DateFormatSymbols()), "Wrong symbols3");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work3");

            f2 = (SimpleDateFormat)DateFormat.GetDateInstance(DateFormat.FULL);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class4");
            NUnit.Framework.Assert.IsTrue(f2.Equals(DateFormat.GetDateInstance(DateFormat.FULL,
                                    Locale.GetDefault())), "Wrong default4");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(new DateFormatSymbols()), "Wrong symbols4");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work4");

            // regression test for HARMONY-940
            try
            {
                DateFormat.GetDateInstance(77);
                NUnit.Framework.Assert.Fail("Should throw IAE");
            }
            catch (ArgumentException iae)
            {
                // expected
            }
        }


        /// @tests java.text.DateFormat#getDateInstance(int, java.util.Locale)
        [NUnit.Framework.Test]
        public void Test_getDateInstanceILjava_util_Locale()
        {
            SimpleDateFormat f2 = (SimpleDateFormat)DateFormat.GetDateInstance(
                    DateFormat.SHORT, Locale.GERMAN);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(
                                    new DateFormatSymbols(Locale.GERMAN)), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");

            f2 = (SimpleDateFormat)DateFormat.GetDateInstance(DateFormat.MEDIUM,
                    Locale.GERMAN);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(
                                    new DateFormatSymbols(Locale.GERMAN)), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");

            f2 = (SimpleDateFormat)DateFormat.GetDateInstance(DateFormat.LONG,
                    Locale.GERMAN);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(
                                    new DateFormatSymbols(Locale.GERMAN)), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");

            f2 = (SimpleDateFormat)DateFormat.GetDateInstance(DateFormat.FULL,
                    Locale.GERMAN);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(
                                    new DateFormatSymbols(Locale.GERMAN)), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");

            // regression test for HARMONY-940
            try
            {
                DateFormat.GetDateInstance(77, Locale.GERMAN);
                NUnit.Framework.Assert.Fail("Should throw IAE");
            }
            catch (ArgumentException iae)
            {
                // expected
            }
        }


        /// @tests java.text.DateFormat#getDateTimeInstance()
        [NUnit.Framework.Test]
        public void Test_getDateTimeInstance()
        {
            SimpleDateFormat f2 = (SimpleDateFormat)DateFormat
                    .GetDateTimeInstance();
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.IsTrue(f2.Equals(DateFormat.GetDateTimeInstance(
                            DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.GetDefault())), "Wrong default");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(new DateFormatSymbols()), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");
        }

        private void TestDateTime(int dStyle, int tStyle)
        {
            SimpleDateFormat f2 = (SimpleDateFormat)DateFormat
                    .GetDateTimeInstance(dStyle, tStyle);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            SimpleDateFormat date = (SimpleDateFormat)DateFormat.GetDateInstance(
                    dStyle, Locale.GetDefault());
            SimpleDateFormat time = (SimpleDateFormat)DateFormat.GetTimeInstance(
                    tStyle, Locale.GetDefault());
            NUnit.Framework.Assert.IsTrue(f2.ToPattern()
                                    .Equals(date.ToPattern() + " " + time.ToPattern()), "Wrong default");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(new DateFormatSymbols()), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");
        }


        /// @tests java.text.DateFormat#getDateTimeInstance(int, int)
        [NUnit.Framework.Test]
        public void Test_getDateTimeInstanceII()
        {
            TestDateTime(DateFormat.SHORT, DateFormat.SHORT);
            TestDateTime(DateFormat.SHORT, DateFormat.MEDIUM);
            TestDateTime(DateFormat.SHORT, DateFormat.LONG);
            TestDateTime(DateFormat.SHORT, DateFormat.FULL);

            TestDateTime(DateFormat.MEDIUM, DateFormat.SHORT);
            TestDateTime(DateFormat.MEDIUM, DateFormat.MEDIUM);
            TestDateTime(DateFormat.MEDIUM, DateFormat.LONG);
            TestDateTime(DateFormat.MEDIUM, DateFormat.FULL);

            TestDateTime(DateFormat.LONG, DateFormat.SHORT);
            TestDateTime(DateFormat.LONG, DateFormat.MEDIUM);
            TestDateTime(DateFormat.LONG, DateFormat.LONG);
            TestDateTime(DateFormat.LONG, DateFormat.FULL);

            TestDateTime(DateFormat.FULL, DateFormat.SHORT);
            TestDateTime(DateFormat.FULL, DateFormat.MEDIUM);
            TestDateTime(DateFormat.FULL, DateFormat.LONG);
            TestDateTime(DateFormat.FULL, DateFormat.FULL);

            // regression test for HARMONY-940
            try
            {
                DateFormat.GetDateTimeInstance(77, 66);
                NUnit.Framework.Assert.Fail("Should throw IAE");
            }
            catch (ArgumentException iae)
            {
                // expected
            }
        }

        private void TestDateTimeLocale(int dStyle, int tStyle)
        {
            SimpleDateFormat f2 = (SimpleDateFormat)DateFormat
                    .GetDateTimeInstance(dStyle, tStyle, Locale.GERMAN);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            SimpleDateFormat date = (SimpleDateFormat)DateFormat.GetDateInstance(
                    dStyle, Locale.GERMAN);
            SimpleDateFormat time = (SimpleDateFormat)DateFormat.GetTimeInstance(
                    tStyle, Locale.GERMAN);
            NUnit.Framework.Assert.IsTrue(f2.ToPattern()
                                    .Equals(date.ToPattern() + " " + time.ToPattern()), "Wrong default");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(
                                    new DateFormatSymbols(Locale.GERMAN)), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");
        }


        /// @tests java.text.DateFormat#getDateTimeInstance(int, int,
        /// java.util.Locale)
        [NUnit.Framework.Test]
        public void Test_getDateTimeInstanceIILjava_util_Locale()
        {
            TestDateTimeLocale(DateFormat.SHORT, DateFormat.SHORT);
            TestDateTimeLocale(DateFormat.SHORT, DateFormat.MEDIUM);
            TestDateTimeLocale(DateFormat.SHORT, DateFormat.LONG);
            TestDateTimeLocale(DateFormat.SHORT, DateFormat.FULL);

            TestDateTimeLocale(DateFormat.MEDIUM, DateFormat.SHORT);
            TestDateTimeLocale(DateFormat.MEDIUM, DateFormat.MEDIUM);
            TestDateTimeLocale(DateFormat.MEDIUM, DateFormat.LONG);
            TestDateTimeLocale(DateFormat.MEDIUM, DateFormat.FULL);

            TestDateTimeLocale(DateFormat.LONG, DateFormat.SHORT);
            TestDateTimeLocale(DateFormat.LONG, DateFormat.MEDIUM);
            TestDateTimeLocale(DateFormat.LONG, DateFormat.LONG);
            TestDateTimeLocale(DateFormat.LONG, DateFormat.FULL);

            TestDateTimeLocale(DateFormat.FULL, DateFormat.SHORT);
            TestDateTimeLocale(DateFormat.FULL, DateFormat.MEDIUM);
            TestDateTimeLocale(DateFormat.FULL, DateFormat.LONG);
            TestDateTimeLocale(DateFormat.FULL, DateFormat.FULL);

            // regression test for HARMONY-940
            try
            {
                DateFormat.GetDateTimeInstance(77, 66, Locale.GERMAN);
                NUnit.Framework.Assert.Fail("Should throw IAE");
            }
            catch (ArgumentException iae)
            {
                // expected
            }
        }


        /// @tests java.text.DateFormat#getInstance()
        [NUnit.Framework.Test]
        public void Test_getInstance()
        {
            SimpleDateFormat f2 = (SimpleDateFormat)DateFormat.GetInstance();
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.IsTrue(f2.Equals(DateFormat.GetDateTimeInstance(
                            DateFormat.SHORT, DateFormat.SHORT, Locale.GetDefault())), "Wrong default");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(new DateFormatSymbols()), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");
        }


        /// @tests java.text.DateFormat#getNumberFormat()
        [NUnit.Framework.Test]
        public void Test_getNumberFormat()
        {
            DateFormat format = DateFormat.GetInstance();
            NumberFormat nf1 = format.GetNumberFormat();
            NumberFormat nf2 = format.GetNumberFormat();
            NUnit.Framework.Assert.IsTrue(nf1 == nf2, "NumberFormats not identical");
        }


        /// @tests java.text.DateFormat#getTimeInstance()
        [NUnit.Framework.Test]
        public void Test_getTimeInstance()
        {
            SimpleDateFormat f2 = (SimpleDateFormat)DateFormat.GetTimeInstance();
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.IsTrue(f2.Equals(DateFormat.GetTimeInstance(DateFormat.DEFAULT,
                                    Locale.GetDefault())), "Wrong default");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(new DateFormatSymbols()), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");
        }


        /// @tests java.text.DateFormat#getTimeInstance(int)
        [NUnit.Framework.Test]
        public void Test_getTimeInstanceI()
        {
            SimpleDateFormat f2 = (SimpleDateFormat)DateFormat
                    .GetTimeInstance(DateFormat.SHORT);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class1");
            NUnit.Framework.Assert.IsTrue(f2.Equals(DateFormat.GetTimeInstance(DateFormat.SHORT,
                                    Locale.GetDefault())), "Wrong default1");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(new DateFormatSymbols()), "Wrong symbols1");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work1");

            f2 = (SimpleDateFormat)DateFormat.GetTimeInstance(DateFormat.MEDIUM);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class2");
            NUnit.Framework.Assert.IsTrue(f2.Equals(DateFormat.GetTimeInstance(DateFormat.MEDIUM,
                                    Locale.GetDefault())), "Wrong default2");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(new DateFormatSymbols()), "Wrong symbols2");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work2");

            f2 = (SimpleDateFormat)DateFormat.GetTimeInstance(DateFormat.LONG);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class3");
            NUnit.Framework.Assert.IsTrue(f2.Equals(DateFormat.GetTimeInstance(DateFormat.LONG,
                                    Locale.GetDefault())), "Wrong default3");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(new DateFormatSymbols()), "Wrong symbols3");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work3");

            f2 = (SimpleDateFormat)DateFormat.GetTimeInstance(DateFormat.FULL);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class4");
            NUnit.Framework.Assert.IsTrue(f2.Equals(DateFormat.GetTimeInstance(DateFormat.FULL,
                                    Locale.GetDefault())), "Wrong default4");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(new DateFormatSymbols()), "Wrong symbols4");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work4");

            // regression test for HARMONY-940
            try
            {
                DateFormat.GetTimeInstance(77);
                NUnit.Framework.Assert.Fail("Should throw IAE");
            }
            catch (ArgumentException iae)
            {
                // expected
            }
        }


        /// @tests java.text.DateFormat#getTimeInstance(int, java.util.Locale)
        [NUnit.Framework.Test]
        public void Test_getTimeInstanceILjava_util_Locale()
        {
            SimpleDateFormat f2 = (SimpleDateFormat)DateFormat.GetTimeInstance(
                    DateFormat.SHORT, Locale.GERMAN);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(
                                    new DateFormatSymbols(Locale.GERMAN)), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");

            f2 = (SimpleDateFormat)DateFormat.GetTimeInstance(DateFormat.MEDIUM,
                    Locale.GERMAN);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(
                                    new DateFormatSymbols(Locale.GERMAN)), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");

            f2 = (SimpleDateFormat)DateFormat.GetTimeInstance(DateFormat.LONG,
                    Locale.GERMAN);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(
                                    new DateFormatSymbols(Locale.GERMAN)), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");

            f2 = (SimpleDateFormat)DateFormat.GetTimeInstance(DateFormat.FULL,
                    Locale.GERMAN);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(
                                    new DateFormatSymbols(Locale.GERMAN)), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");

            // regression test for HARMONY-940
            try
            {
                DateFormat.GetTimeInstance(77, Locale.GERMAN);
                NUnit.Framework.Assert.Fail("Should throw IAE");
            }
            catch (ArgumentException iae)
            {
                // expected
            }
        }


        /// @tests java.text.DateFormat#setCalendar(java.util.Calendar)
        [NUnit.Framework.Test]
        public void Test_setCalendarLjava_util_Calendar()
        {
            DateFormat format = DateFormat.GetInstance();
            IBM.ICU.Util.Calendar cal = IBM.ICU.Util.Calendar.GetInstance();
            format.SetCalendar(cal);
            NUnit.Framework.Assert.IsTrue(cal == format.GetCalendar(), "Not identical Calendar");
        }


        /// @tests java.text.DateFormat#setNumberFormat(java.text.NumberFormat)
        [NUnit.Framework.Test]
        public void Test_setNumberFormatLjava_text_NumberFormat()
        {
            DateFormat format = DateFormat.GetInstance();
            NumberFormat f1 = NumberFormat.GetInstance();
            format.SetNumberFormat(f1);
            NUnit.Framework.Assert.IsTrue(f1 == format.GetNumberFormat(), "Not identical NumberFormat");
        }


        /// @tests java.text.DateFormat#parse(String)
        [NUnit.Framework.Test]
        public void Test_parse_LString()
        {
            DateFormat format = DateFormat.GetInstance();
            try
            {
                format.Parse("not a Date");
                NUnit.Framework.Assert.Fail("should throw ParseException first");
            }
            catch (ILOG.J2CsMapping.Util.ParseException e)
            {
                NUnit.Framework.Assert.IsNotNull(e.Message);
            }
        }
    }
}
