/* 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/8/10 10:24 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Tests
{

    using NUnit;
    using System;
    using ILOG.J2CsMapping.Text;
    using System.Text;
    using ILOG.J2CsMapping.Formatting;

    [NUnit.Framework.TestFixture]
    public class ChoiceFormatTest
    {

        public ChoiceFormatTest()
        {
            this.limits = new double[] { 0, 1, ChoiceFormat.NextDouble(1),
	                ChoiceFormat.NextDouble(2) };
            this.formats = new String[] { "Less than one", "one",
	                "Between one and two", "Greater than two" };
            this.f1 = new ChoiceFormat(limits, formats);
        }

        internal double[] limits;

        internal String[] formats;

        internal ChoiceFormat f1;


        /// @tests java.text.ChoiceFormat#ChoiceFormat(double[], java.lang.String[])
        [NUnit.Framework.Test]
        public void Test_Constructor_D_Ljava_lang_String()
        {
            // Test for method java.text.ChoiceFormat(double [], java.lang.String
            // [])
            String formattedString;
            double[] appleLimits = { 1, 2, 3, 4, 5 };
            String[] appleFormats = { "Tiny Apple", "Small Apple", "Medium Apple",
	                "Large Apple", "Huge Apple" };
            ChoiceFormat cf = new ChoiceFormat(appleLimits, appleFormats);

            formattedString = cf.Format(System.Double.NegativeInfinity);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Tiny Apple"), "a) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(0.5d);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Tiny Apple"), "b) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(1d);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Tiny Apple"), "c) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(1.5d);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Tiny Apple"), "d) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(2d);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Small Apple"), "e) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(2.5d);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Small Apple"), "f) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(3d);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Medium Apple"), "g) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(4d);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Large Apple"), "h) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(5d);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Huge Apple"), "i) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(5.5d);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Huge Apple"), "j) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(6.0d);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Huge Apple"), "k) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(System.Double.PositiveInfinity);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Huge Apple"), "l) Incorrect format returned: " + formattedString);
        }


        /// @tests java.text.ChoiceFormat#ChoiceFormat(java.lang.String)
        [NUnit.Framework.Test]
        public void Test_ConstructorLjava_lang_String()
        {
            // Test for method java.text.ChoiceFormat(java.lang.String)
            String formattedString;
            String patternString = "-2#Inverted Orange| 0#No Orange| 0<Almost No Orange| 1#Normal Orange| 2#Expensive Orange";
            ChoiceFormat cf = new ChoiceFormat(patternString);

            formattedString = cf.Format(System.Double.NegativeInfinity);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Inverted Orange"), "a) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(-3);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Inverted Orange"), "b) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(-2);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Inverted Orange"), "c) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(-1);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Inverted Orange"), "d) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(-0);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("No Orange"), "e) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(0);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("No Orange"), "f) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(0.1d);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Almost No Orange"), "g) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(1);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Normal Orange"), "h) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(1.5d);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Normal Orange"), "i) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(2);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Expensive Orange"), "j) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(3);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Expensive Orange"), "k) Incorrect format returned: " + formattedString);
            formattedString = cf.Format(System.Double.PositiveInfinity);
            NUnit.Framework.Assert.IsTrue(formattedString.Equals("Expensive Orange"), "l) Incorrect format returned: " + formattedString);

        }


        /// @tests java.text.ChoiceFormat#applyPattern(java.lang.String)
        [NUnit.Framework.Test]
        public void Test_applyPatternLjava_lang_String()
        {
            // Test for method void
            // java.text.ChoiceFormat.applyPattern(java.lang.String)
            ChoiceFormat f = (ChoiceFormat)f1.Clone();
            f.ApplyPattern("0#0|1#1");
            NUnit.Framework.Assert.IsTrue(ILOG.J2CsMapping.Collections.Arrays.Equals(f.GetLimits(), new double[] { 0, 1 }), "Incorrect limits");
            NUnit.Framework.Assert.IsTrue(ILOG.J2CsMapping.Collections.Arrays.Equals(f.GetFormats(), new String[] { "0", "1" }), "Incorrect formats");

            // Regression for Harmony 540
            double[] choiceLimits = { -1, 0, 1, ChoiceFormat.NextDouble(1) };
            String[] choiceFormats = { "is negative", "is zero or fraction",
	                "is one", "is more than 1" };

            f = new ChoiceFormat("");
            f.ApplyPattern("-1#is negative|0#is zero or fraction|1#is one|1<is more than 1");
            NUnit.Framework.Assert.IsTrue(ILOG.J2CsMapping.Collections.Arrays.Equals(f.GetLimits(), choiceLimits), "Incorrect limits");
            NUnit.Framework.Assert.IsTrue(ILOG.J2CsMapping.Collections.Arrays.Equals(f.GetFormats(), choiceFormats), "Incorrect formats");

            f = new ChoiceFormat("");
            try
            {
                f.ApplyPattern("-1#is negative|0#is zero or fraction|-1#is one|1<is more than 1");
                NUnit.Framework.Assert.Fail("Expected IllegalArgumentException");
            }
            catch (ArgumentException e)
            {
                // Expected
            }

            f = new ChoiceFormat("");
            try
            {
                f.ApplyPattern("-1is negative|0#is zero or fraction|1#is one|1<is more than 1");
                NUnit.Framework.Assert.Fail("Expected IllegalArgumentException");
            }
            catch (ArgumentException e_0)
            {
                // Expected
            }

            f = new ChoiceFormat("");
            f.ApplyPattern("-1<is negative|0#is zero or fraction|1#is one|1<is more than 1");
            choiceLimits[0] = ChoiceFormat.NextDouble(-1);
            NUnit.Framework.Assert.IsTrue(ILOG.J2CsMapping.Collections.Arrays.Equals(f.GetLimits(), choiceLimits), "Incorrect limits");
            NUnit.Framework.Assert.IsTrue(ILOG.J2CsMapping.Collections.Arrays.Equals(f.GetFormats(), choiceFormats), "Incorrect formats");

            f = new ChoiceFormat("");
            f.ApplyPattern("-1#is negative|0#is zero or fraction|1#is one|1<is more than 1");
            String str = "org.apache.harmony.tests.java.text.ChoiceFormat";
            f.ApplyPattern(str);
            String ptrn = f.ToPattern();
            NUnit.Framework.Assert.AreEqual(0, ptrn.Length, "Return value should be empty string for invalid pattern");
        }


        /// @tests java.text.ChoiceFormat#clone()
        [NUnit.Framework.Test]
        public void Test_clone()
        {
            // Test for method java.lang.Object java.text.ChoiceFormat.clone()
            ChoiceFormat f = (ChoiceFormat)f1.Clone();
            NUnit.Framework.Assert.IsTrue(f.Equals(f1), "Not equal");
            f.SetChoices(new double[] { 0, 1, 2 }, new String[] { "0", "1", "2" });
            NUnit.Framework.Assert.IsTrue(!f.Equals(f1), "Equal");
        }


        /// @tests java.text.ChoiceFormat#equals(java.lang.Object)
        [NUnit.Framework.Test]
        public void Test_equalsLjava_lang_Object()
        {
            // Test for method boolean
            // java.text.ChoiceFormat.equals(java.lang.Object)

            String patternString = "-2#Inverted Orange| 0#No Orange| 0<Almost No Orange| 1#Normal Orange| 2#Expensive Orange";
            double[] appleLimits = { 1, 2, 3, 4, 5 };
            String[] appleFormats = { "Tiny Apple", "Small Apple", "Medium Apple",
	                "Large Apple", "Huge Apple" };
            double[] orangeLimits = { -2, 0, ChoiceFormat.NextDouble(0), 1, 2 };
            String[] orangeFormats = { "Inverted Orange", "No Orange",
	                "Almost No Orange", "Normal Orange", "Expensive Orange" };

            ChoiceFormat appleChoiceFormat = new ChoiceFormat(appleLimits,
                    appleFormats);
            ChoiceFormat orangeChoiceFormat = new ChoiceFormat(orangeLimits,
                    orangeFormats);
            ChoiceFormat orangeChoiceFormat2 = new ChoiceFormat(patternString);
            ChoiceFormat hybridChoiceFormat = new ChoiceFormat(appleLimits,
                    orangeFormats);

            NUnit.Framework.Assert.IsTrue(!appleChoiceFormat.Equals(orangeChoiceFormat), "Apples should not equal oranges");
            NUnit.Framework.Assert.IsTrue(!orangeChoiceFormat.Equals(hybridChoiceFormat), "Different limit list--should not appear as equal");
            NUnit.Framework.Assert.IsTrue(!appleChoiceFormat.Equals(hybridChoiceFormat), "Different format list--should not appear as equal");
            NUnit.Framework.Assert.IsTrue(appleChoiceFormat.Equals(appleChoiceFormat), "Should be equal--identical format");
            NUnit.Framework.Assert.IsTrue(orangeChoiceFormat.Equals(orangeChoiceFormat2), "Should be equals--same limits, same formats");

            ChoiceFormat f2 = new ChoiceFormat(
                    "0#Less than one|1#one|1<Between one and two|2<Greater than two");
            NUnit.Framework.Assert.IsTrue(f1.Equals(f2), "Not equal");
        }


        /// @tests java.text.ChoiceFormat#format(double, java.lang.StringBuffer,
        /// java.text.FieldPosition)
        [NUnit.Framework.Test]
        public void Test_formatDLjava_lang_StringBufferLjava_text_FieldPosition()
        {
            // Test for method java.lang.StringBuffer
            // java.text.ChoiceFormat.format(double, java.lang.StringBuffer,
            // java.text.FieldPosition)
            FieldPosition field = new FieldPosition(0);
            StringBuilder buf = new StringBuilder();
            String r = f1.Format(-1, buf, field).ToString();
            NUnit.Framework.Assert.AreEqual("Less than one", r, "Wrong choice for -1");
            buf.Length = 0;
            r = f1.Format(0, buf, field).ToString();
            NUnit.Framework.Assert.AreEqual("Less than one", r, "Wrong choice for 0");
            buf.Length = 0;
            r = f1.Format(1, buf, field).ToString();
            NUnit.Framework.Assert.AreEqual("one", r, "Wrong choice for 1");
            buf.Length = 0;
            r = f1.Format(2, buf, field).ToString();
            NUnit.Framework.Assert.AreEqual("Between one and two", r, "Wrong choice for 2");
            buf.Length = 0;
            r = f1.Format(3, buf, field).ToString();
            NUnit.Framework.Assert.AreEqual("Greater than two", r, "Wrong choice for 3");

            // Regression test for HARMONY-1081
            NUnit.Framework.Assert.AreEqual(0, new ChoiceFormat("|").Format(System.Double.NaN, new StringBuilder(),
                                                    new FieldPosition(6)).Length);
            NUnit.Framework.Assert.AreEqual(0, new ChoiceFormat("|").Format(1, new StringBuilder(),
                                                    new FieldPosition(6)).Length);
            NUnit.Framework.Assert.AreEqual("Less than one", f1.Format(System.Double.NaN, new StringBuilder(), field).ToString());
        }


        /// @tests java.text.ChoiceFormat#format(long, java.lang.StringBuffer,
        /// java.text.FieldPosition)
        [NUnit.Framework.Test]
        public void Test_formatJLjava_lang_StringBufferLjava_text_FieldPosition()
        {
            // Test for method java.lang.StringBuffer
            // java.text.ChoiceFormat.format(long, java.lang.StringBuffer,
            // java.text.FieldPosition)
            FieldPosition field = new FieldPosition(0);
            StringBuilder buf = new StringBuilder();
            String r = f1.Format(0.5d, buf, field).ToString();
            NUnit.Framework.Assert.AreEqual("Less than one", r, "Wrong choice for 0.5");
            buf.Length = 0;
            r = f1.Format(1.5d, buf, field).ToString();
            NUnit.Framework.Assert.AreEqual("Between one and two", r, "Wrong choice for 1.5");
            buf.Length = 0;
            r = f1.Format(2.5d, buf, field).ToString();
            NUnit.Framework.Assert.AreEqual("Greater than two", r, "Wrong choice for 2.5");
        }


        /// @tests java.text.ChoiceFormat#getFormats()
        [NUnit.Framework.Test]
        public void Test_getFormats()
        {
            // Test for method java.lang.Object []
            // java.text.ChoiceFormat.getFormats()
            String[] orgFormats = (String[])formats.Clone();
            String[] f = (String[])f1.GetFormats();
            NUnit.Framework.Assert.IsTrue(f.Equals(formats), "Wrong formats");
            f[0] = "Modified";
            NUnit.Framework.Assert.IsTrue(!f.Equals(orgFormats), "Formats copied");
        }


        /// @tests java.text.ChoiceFormat#getLimits()
        [NUnit.Framework.Test]
        public void Test_getLimits()
        {
            // Test for method double [] java.text.ChoiceFormat.getLimits()
            double[] orgLimits = (double[])limits.Clone();
            double[] l = f1.GetLimits();
            NUnit.Framework.Assert.IsTrue(l.Equals(limits), "Wrong limits");
            l[0] = 3.14527d;
            NUnit.Framework.Assert.IsTrue(!l.Equals(orgLimits), "Limits copied");
        }


        /// @tests java.text.ChoiceFormat#hashCode()
        [NUnit.Framework.Test]
        public void Test_hashCode()
        {
            // Test for method int java.text.ChoiceFormat.hashCode()
            ChoiceFormat f2 = new ChoiceFormat(
                    "0#Less than one|1#one|1<Between one and two|2<Greater than two");
            NUnit.Framework.Assert.IsTrue(f1.GetHashCode() == f2.GetHashCode(), "Different hash");
        }


        /// @tests java.text.ChoiceFormat#nextDouble(double)
        [NUnit.Framework.Test]
        public void Test_nextDoubleD()
        {
            // Test for method double java.text.ChoiceFormat.nextDouble(double)
            NUnit.Framework.Assert.IsTrue(ChoiceFormat.NextDouble(5) > 5, "Not greater 5");
            NUnit.Framework.Assert.IsTrue(ChoiceFormat.NextDouble(0) > 0, "Not greater 0");
            NUnit.Framework.Assert.IsTrue(ChoiceFormat.NextDouble(-5) > -5, "Not greater -5");
            NUnit.Framework.Assert.IsTrue(Double.IsNaN(ChoiceFormat.NextDouble(System.Double.NaN)), "Not NaN");
        }


        /// @tests java.text.ChoiceFormat#nextDouble(double, boolean)
        [NUnit.Framework.Test]
        public void Test_nextDoubleDZ()
        {
            // Test for method double java.text.ChoiceFormat.nextDouble(double,
            // boolean)
            NUnit.Framework.Assert.IsTrue(ChoiceFormat.NextDouble(0, true) > 0, "Not greater 0");
            NUnit.Framework.Assert.IsTrue(ChoiceFormat.NextDouble(0, false) < 0, "Not less 0");
        }


        /// @tests java.text.ChoiceFormat#parse(java.lang.String,
        /// java.text.ParsePosition)
        [NUnit.Framework.Test]
        public void Test_parseLjava_lang_StringLjava_text_ParsePosition()
        {
            // Test for method java.lang.Number
            // java.text.ChoiceFormat.parse(java.lang.String,
            // java.text.ParsePosition)
            ChoiceFormat format = new ChoiceFormat("1#one|2#two|3#three");
            NUnit.Framework.Assert.AreEqual(Double.NaN, System.Convert.ToDouble(format.Parse("One", new ParsePosition(0))), "Case insensitive");

            ParsePosition pos = new ParsePosition(0);
            object result = f1.Parse("Greater than two", pos);
            NUnit.Framework.Assert.IsTrue(result is Double, "Not a Double1");
            NUnit.Framework.Assert.IsTrue(Convert.ToDouble(result) == ChoiceFormat.NextDouble(2), "Wrong value ~>2");
            NUnit.Framework.Assert.AreEqual(16, pos.GetIndex(), "Wrong position ~16");
            pos = new ParsePosition(0);
            NUnit.Framework.Assert.IsTrue(Double.IsNaN(Convert.ToDouble(f1.Parse("12one", pos))), "Incorrect result");
            NUnit.Framework.Assert.AreEqual(0, pos.GetIndex(), "Wrong position ~0");
            pos = new ParsePosition(2);
            result = f1.Parse("12one and two", pos);
            NUnit.Framework.Assert.IsTrue(result is Double, "Not a Double2");
            NUnit.Framework.Assert.AreEqual(1.0D, Convert.ToDouble(result), 0.0D, "Ignored parse position");
            NUnit.Framework.Assert.AreEqual(5, pos.GetIndex(), "Wrong position ~5");
        }


        /// @tests java.text.ChoiceFormat#previousDouble(double)
        [NUnit.Framework.Test]
        public void Test_previousDoubleD()
        {
            // Test for method double java.text.ChoiceFormat.previousDouble(double)
            NUnit.Framework.Assert.IsTrue(ChoiceFormat.PreviousDouble(5) < 5, "Not less 5");
            NUnit.Framework.Assert.IsTrue(ChoiceFormat.PreviousDouble(0) < 0, "Not less 0");
            NUnit.Framework.Assert.IsTrue(ChoiceFormat.PreviousDouble(-5) < -5, "Not less -5");
            NUnit.Framework.Assert.IsTrue(Double.IsNaN(ChoiceFormat.PreviousDouble(System.Double.NaN)), "Not NaN");
        }


        /// @tests java.text.ChoiceFormat#setChoices(double[], java.lang.String[])
        [NUnit.Framework.Test]
        public void Test_setChoices_D_Ljava_lang_String()
        {
            // Test for method void java.text.ChoiceFormat.setChoices(double [],
            // java.lang.String [])
            ChoiceFormat f = (ChoiceFormat)f1.Clone();
            double[] l = new double[] { 0, 1 };
            String[] fs = new String[] { "0", "1" };
            f.SetChoices(l, fs);
            NUnit.Framework.Assert.IsTrue(f.GetLimits() == l, "Limits copied");
            NUnit.Framework.Assert.IsTrue((Object)f.GetFormats() == (Object)fs, "Formats copied");
        }


        /// @tests java.text.ChoiceFormat#toPattern()
        [NUnit.Framework.Test]
        public void Test_toPattern()
        {
            // Regression for HARMONY-59
            ChoiceFormat cf = new ChoiceFormat("");
            NUnit.Framework.Assert.AreEqual("", cf.ToPattern());

            cf = new ChoiceFormat("-1#NEGATIVE_ONE|0#ZERO|1#ONE|1<GREATER_THAN_ONE");
            // format for double issue : NUnit.Framework.Assert.AreEqual("-1.0#NEGATIVE_ONE|0.0#ZERO|1.0#ONE|1.0<GREATER_THAN_ONE", cf.ToPattern());

            MessageFormat mf = new MessageFormat("CHOICE {1,choice}");
            String ptrn = mf.ToPattern();
            NUnit.Framework.Assert.AreEqual("CHOICE {1,choice,}", ptrn, "Unused message format returning incorrect pattern");

            String pattern = f1.ToPattern();
            // format for double issue : NUnit.Framework.Assert.IsTrue(pattern.Equals("0.0#Less than one|1.0#one|1.0<Between one and two|2.0<Greater than two"), "Wrong pattern: " + pattern);

            cf = new ChoiceFormat(
                    "-1#is negative| 0#is zero or fraction | 1#is one |1.0<is 1+|2#is two |2<is more than 2.");
            String str = "org.apache.harmony.tests.java.lang.share.MyResources2";
            cf.ApplyPattern(str);
            ptrn = cf.ToPattern();
            NUnit.Framework.Assert.AreEqual(0, ptrn.Length, "Return value should be empty string for invalid pattern");
        }


        /// @tests java.text.ChoiceFormat#format(long)
        [NUnit.Framework.Test]
        public void Test_formatL()
        {
            ChoiceFormat fmt = new ChoiceFormat(
                    "-1#NEGATIVE_ONE|0#ZERO|1#ONE|1<GREATER_THAN_ONE");

            NUnit.Framework.Assert.AreEqual("NEGATIVE_ONE", fmt.Format(Int64.MinValue));
            NUnit.Framework.Assert.AreEqual("NEGATIVE_ONE", fmt.Format(-1));
            NUnit.Framework.Assert.AreEqual("ZERO", fmt.Format(0));
            NUnit.Framework.Assert.AreEqual("ONE", fmt.Format(1));
            NUnit.Framework.Assert.AreEqual("GREATER_THAN_ONE", fmt.Format(Int64.MaxValue));
        }


        /// @tests java.text.ChoiceFormat#format(double)
        [NUnit.Framework.Test]
        public void Test_formatD()
        {
            ChoiceFormat fmt = new ChoiceFormat(
                    "-1#NEGATIVE_ONE|0#ZERO|1#ONE|1<GREATER_THAN_ONE");
            NUnit.Framework.Assert.AreEqual("NEGATIVE_ONE", fmt.Format(System.Double.NegativeInfinity));
            NUnit.Framework.Assert.AreEqual("NEGATIVE_ONE", fmt.Format(-999999999D));
            NUnit.Framework.Assert.AreEqual("NEGATIVE_ONE", fmt.Format(-1.1d));
            NUnit.Framework.Assert.AreEqual("NEGATIVE_ONE", fmt.Format(-1.0d));
            NUnit.Framework.Assert.AreEqual("NEGATIVE_ONE", fmt.Format(-0.9d));
            NUnit.Framework.Assert.AreEqual("ZERO", fmt.Format(0.0d));
            NUnit.Framework.Assert.AreEqual("ZERO", fmt.Format(0.9d));
            NUnit.Framework.Assert.AreEqual("ONE", fmt.Format(1.0d));
            NUnit.Framework.Assert.AreEqual("GREATER_THAN_ONE", fmt.Format(1.1d));
            NUnit.Framework.Assert.AreEqual("GREATER_THAN_ONE", fmt.Format(999999999D));
            NUnit.Framework.Assert.AreEqual("GREATER_THAN_ONE", fmt.Format(System.Double.PositiveInfinity));
        }
    }
}
