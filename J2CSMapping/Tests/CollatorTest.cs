/* 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110104_01     
// 1/4/11 4:11 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace Tests {
	
	using ILOG.J2CsMapping.Text;
	using ILOG.J2CsMapping.Util;
	using NUnit;
     using System;
     using System.Text;
	
	[NUnit.Framework.TestFixture]
	public class CollatorTest  {
	
	    
	    /// @tests java.text.Collator#clone()
	    [NUnit.Framework.Test]
	    public void Test_clone() {
	        Collator c = ILOG.J2CsMapping.Text.Collator.GetInstance(Locale.GERMAN);
	        Collator c2 = (Collator) c.Clone();
	        NUnit.Framework.Assert.IsTrue(c.Equals(c2),"Clones answered false to equals");
	        NUnit.Framework.Assert.IsTrue(c != c2,"Clones were equivalent");
	    }
	
	    
	    /// @tests java.text.Collator#compare(java.lang.Object, java.lang.Object)
	    [NUnit.Framework.Test]
	    public void Test_compareLjava_lang_ObjectLjava_lang_Object() {
	        Collator c = ILOG.J2CsMapping.Text.Collator.GetInstance(Locale.FRENCH);
	        Object o, o2;
	
	        c.SetStrength(ILOG.J2CsMapping.Text.Collator.IDENTICAL);
	        o = "E";
	        o2 = "F";
	        NUnit.Framework.Assert.IsTrue(c.Compare(o, o2) < 0,"a) Failed on primary difference");
	        o = "e";
	        o2 = "\u00e9";
	        NUnit.Framework.Assert.IsTrue(c.Compare(o, o2) < 0,"a) Failed on secondary difference");
	        o = "e";
	        o2 = "E";
	        NUnit.Framework.Assert.IsTrue(c.Compare(o, o2) < 0,"a) Failed on tertiary difference");
	        o = "\u0001";
	        o2 = "\u0002";
	        NUnit.Framework.Assert.IsTrue(c.Compare(o, o2) < 0,"a) Failed on identical");
	        o = "e";
	        o2 = "e";
	        NUnit.Framework.Assert.AreEqual(0,c.Compare(o, o2),"a) Failed on equivalence");
	        NUnit.Framework.Assert.IsTrue(c.Compare("\u01db", "v") < 0,"a) Failed on primary expansion");
	
	        c.SetStrength(ILOG.J2CsMapping.Text.Collator.TERTIARY);
	        o = "E";
	        o2 = "F";
	        NUnit.Framework.Assert.IsTrue(c.Compare(o, o2) < 0,"b) Failed on primary difference");
	        o = "e";
	        o2 = "\u00e9";
	        NUnit.Framework.Assert.IsTrue(c.Compare(o, o2) < 0,"b) Failed on secondary difference");
	        o = "e";
	        o2 = "E";
	        NUnit.Framework.Assert.IsTrue(c.Compare(o, o2) < 0,"b) Failed on tertiary difference");
	        o = "\u0001";
	        o2 = "\u0002";
	        NUnit.Framework.Assert.AreEqual(0,c.Compare(o, o2),"b) Failed on identical");
	        o = "e";
	        o2 = "e";
	        NUnit.Framework.Assert.AreEqual(0,c.Compare(o, o2),"b) Failed on equivalence");
	
	        c.SetStrength(ILOG.J2CsMapping.Text.Collator.SECONDARY);
	        o = "E";
	        o2 = "F";
	        NUnit.Framework.Assert.IsTrue(c.Compare(o, o2) < 0,"c) Failed on primary difference");
	        o = "e";
	        o2 = "\u00e9";
	        NUnit.Framework.Assert.IsTrue(c.Compare(o, o2) < 0,"c) Failed on secondary difference");
	        o = "e";
	        o2 = "E";
	        NUnit.Framework.Assert.AreEqual(0,c.Compare(o, o2),"c) Failed on tertiary difference");
	        o = "\u0001";
	        o2 = "\u0002";
	        NUnit.Framework.Assert.AreEqual(0,c.Compare(o, o2),"c) Failed on identical");
	        o = "e";
	        o2 = "e";
	        NUnit.Framework.Assert.AreEqual(0,c.Compare(o, o2),"c) Failed on equivalence");
	
	        c.SetStrength(ILOG.J2CsMapping.Text.Collator.PRIMARY);
	        o = "E";
	        o2 = "F";
	        NUnit.Framework.Assert.IsTrue(c.Compare(o, o2) < 0,"d) Failed on primary difference");
	        o = "e";
	        o2 = "\u00e9";
	        NUnit.Framework.Assert.AreEqual(0,c.Compare(o, o2),"d) Failed on secondary difference");
	        o = "e";
	        o2 = "E";
	        NUnit.Framework.Assert.AreEqual(0,c.Compare(o, o2),"d) Failed on tertiary difference");
	        o = "\u0001";
	        o2 = "\u0002";
	        NUnit.Framework.Assert.AreEqual(0,c.Compare(o, o2),"d) Failed on identical");
	        o = "e";
	        o2 = "e";
	        NUnit.Framework.Assert.AreEqual(0,c.Compare(o, o2),"d) Failed on equivalence");
	
	        try {
	            c.Compare("e", new StringBuilder("Blah"));
	        } catch (InvalidCastException e) {
	            // correct
	            return;
	        }
	        NUnit.Framework.Assert.Fail("Failed to throw ClassCastException");
	    }
	
	    
	    /// @tests java.text.Collator#equals(java.lang.Object)
	    [NUnit.Framework.Test]
	    public void Test_equalsLjava_lang_Object() {
	        Collator c = ILOG.J2CsMapping.Text.Collator.GetInstance(Locale.ENGLISH);
	        Collator c2 = (Collator) c.Clone();
	        NUnit.Framework.Assert.IsTrue(c.Equals(c2),"Cloned collators not equal");
	        c2.SetStrength(ILOG.J2CsMapping.Text.Collator.SECONDARY);
	        NUnit.Framework.Assert.IsTrue(!c.Equals(c2),"Collators with different strengths equal");
	    }
	
	    
	    /// @tests java.text.Collator#equals(java.lang.String, java.lang.String)
	    [NUnit.Framework.Test]
	    public void Test_equalsLjava_lang_StringLjava_lang_String() {
	        Collator c = ILOG.J2CsMapping.Text.Collator.GetInstance(Locale.FRENCH);
	
	        c.SetStrength(ILOG.J2CsMapping.Text.Collator.IDENTICAL);
	        NUnit.Framework.Assert.IsTrue(!c.Equals("E", "F"),"a) Failed on primary difference");
	        NUnit.Framework.Assert.IsTrue(!c.Equals("e", "\u00e9"),"a) Failed on secondary difference");
	        NUnit.Framework.Assert.IsTrue(!c.Equals("e", "E"),"a) Failed on tertiary difference");
	        NUnit.Framework.Assert.IsTrue(!c.Equals("\u0001", "\u0002"),"a) Failed on identical");
	        NUnit.Framework.Assert.IsTrue(c.Equals("e", "e"),"a) Failed on equivalence");
	
	        c.SetStrength(ILOG.J2CsMapping.Text.Collator.TERTIARY);
	        NUnit.Framework.Assert.IsTrue(!c.Equals("E", "F"),"b) Failed on primary difference");
	        NUnit.Framework.Assert.IsTrue(!c.Equals("e", "\u00e9"),"b) Failed on secondary difference");
	        NUnit.Framework.Assert.IsTrue(!c.Equals("e", "E"),"b) Failed on tertiary difference");
	        NUnit.Framework.Assert.IsTrue(c.Equals("\u0001", "\u0002"),"b) Failed on identical");
	        NUnit.Framework.Assert.IsTrue(c.Equals("e", "e"),"b) Failed on equivalence");
	
	        c.SetStrength(ILOG.J2CsMapping.Text.Collator.SECONDARY);
	        NUnit.Framework.Assert.IsTrue(!c.Equals("E", "F"),"c) Failed on primary difference");
	        NUnit.Framework.Assert.IsTrue(!c.Equals("e", "\u00e9"),"c) Failed on secondary difference");
	        NUnit.Framework.Assert.IsTrue(c.Equals("e", "E"),"c) Failed on tertiary difference");
	        NUnit.Framework.Assert.IsTrue(c.Equals("\u0001", "\u0002"),"c) Failed on identical");
	        NUnit.Framework.Assert.IsTrue(c.Equals("e", "e"),"c) Failed on equivalence");
	
	        c.SetStrength(ILOG.J2CsMapping.Text.Collator.PRIMARY);
	        NUnit.Framework.Assert.IsTrue(!c.Equals("E", "F"),"d) Failed on primary difference");
	        NUnit.Framework.Assert.IsTrue(c.Equals("e", "\u00e9"),"d) Failed on secondary difference");
	        NUnit.Framework.Assert.IsTrue(c.Equals("e", "E"),"d) Failed on tertiary difference");
	        NUnit.Framework.Assert.IsTrue(c.Equals("\u0001", "\u0002"),"d) Failed on identical");
	        NUnit.Framework.Assert.IsTrue(c.Equals("e", "e"),"d) Failed on equivalence");
	    }
	
	    
	    /// @tests java.text.Collator#getAvailableLocales()
	    // FIXME This test fails on Harmony ClassLibrary
	    public void Failing_test_getAvailableLocales() {
	        Locale[] locales = ILOG.J2CsMapping.Text.Collator.GetAvailableLocales();
	        NUnit.Framework.Assert.IsTrue(locales.Length > 0,"No locales");
	        bool english = false, german = false;
	        for (int i = locales.Length; --i >= 0;) {
	            if (locales[i].Equals(Locale.ENGLISH))
	                english = true;
	            if (locales[i].Equals(Locale.GERMAN))
	                german = true;
	            // Output the working locale to help diagnose a hang
	            Collator c1 = ILOG.J2CsMapping.Text.Collator.GetInstance(locales[i]);
	            NUnit.Framework.Assert.IsTrue(c1.Compare("a", "b") < 0,"Doesn't work");
	            NUnit.Framework.Assert.IsTrue(c1.GetDecomposition() == ILOG.J2CsMapping.Text.Collator.NO_DECOMPOSITION,"Wrong decomposition");
	            NUnit.Framework.Assert.IsTrue(c1.GetStrength() == ILOG.J2CsMapping.Text.Collator.TERTIARY,"Wrong strength");
	            if (c1  is  RuleBasedCollator) {
	                try {
	                    new RuleBasedCollator(((RuleBasedCollator) c1).GetRules());
	                } catch (ParseException e) {
	                    NUnit.Framework.Assert.Fail("ParseException");
	                }
	                // assertTrue("Can't recreate: " + locales[i], temp.equals(c1));
	            }
	        }
	        NUnit.Framework.Assert.IsTrue(english && german,"Missing locales");
	    }
	
	    
	    /// @tests java.text.Collator#getDecomposition()
	    // FIXME This test fails on Harmony ClassLibrary
	    public void Failing_test_getDecomposition() {
	        RuleBasedCollator collator;
	        try {
	            collator = new RuleBasedCollator("; \u0300 < a, A < b < c < d");
	        } catch (ParseException e) {
	            NUnit.Framework.Assert.Fail("ParseException");
	            return;
	        }
	        NUnit.Framework.Assert.IsTrue(collator.GetDecomposition() == ILOG.J2CsMapping.Text.Collator.CANONICAL_DECOMPOSITION,"Wrong default");
	    }
	
	    
	    /// @tests java.text.Collator#getInstance()
	    [NUnit.Framework.Test]
	    public void Test_getInstance() {
	        Collator c1 = ILOG.J2CsMapping.Text.Collator.GetInstance();
	        Collator c2 = ILOG.J2CsMapping.Text.Collator.GetInstance(Locale.GetDefault());
	        NUnit.Framework.Assert.IsTrue(c1.Equals(c2),"Wrong locale");
	    }
	
	    
	    /// @tests java.text.Collator#getInstance(java.util.Locale)
	    [NUnit.Framework.Test]
	    public void Test_getInstanceLjava_util_Locale() {
	        NUnit.Framework.Assert.IsTrue(true,"Used to test");
	    }
	
	    
	    /// @tests java.text.Collator#getStrength()
	    [NUnit.Framework.Test]
	    public void Test_getStrength() {
	        RuleBasedCollator collator;
	        try {
	            collator = new RuleBasedCollator("; \u0300 < a, A < b < c < d");
	        } catch (ParseException e) {
	            NUnit.Framework.Assert.Fail("ParseException");
	            return;
	        }
	        NUnit.Framework.Assert.IsTrue(collator.GetStrength() == ILOG.J2CsMapping.Text.Collator.TERTIARY,"Wrong default");
	    }
	
	    
	    /// @tests java.text.Collator#setDecomposition(int)
	    // FIXME This test fails on Harmony ClassLibrary
	    public void Failing_test_setDecompositionI() {
	        Collator c = ILOG.J2CsMapping.Text.Collator.GetInstance(Locale.FRENCH);
	        c.SetStrength(ILOG.J2CsMapping.Text.Collator.IDENTICAL);
	        c.SetDecomposition(ILOG.J2CsMapping.Text.Collator.NO_DECOMPOSITION);
	        NUnit.Framework.Assert.IsTrue(!c.Equals("\u212B", "\u00C5"),"Collator should not be using decomposition"); // "ANGSTROM SIGN" and "LATIN
	                                                // CAPITAL
	        // LETTER A WITH RING ABOVE"
	        c.SetDecomposition(ILOG.J2CsMapping.Text.Collator.CANONICAL_DECOMPOSITION);
	        NUnit.Framework.Assert.IsTrue(c.Equals("\u212B", "\u00C5"),"Collator should be using decomposition"); // "ANGSTROM SIGN" and "LATIN
	                                               // CAPITAL LETTER A WITH
	        // RING ABOVE"
	        NUnit.Framework.Assert.IsTrue(!c.Equals("\u2163", "IV"),"Should not be equal under canonical decomposition"); // roman number "IV"
	        c.SetDecomposition(ILOG.J2CsMapping.Text.Collator.FULL_DECOMPOSITION);
	        NUnit.Framework.Assert.IsTrue(c.Equals("\u2163", "IV"),"Should be equal under full decomposition"); // roman number "IV"
	    }
	
	    
	    /// @tests java.text.Collator#setStrength(int)
	    [NUnit.Framework.Test]
	    public void Test_setStrengthI() {
	        NUnit.Framework.Assert.IsTrue(true,"Used to test");
	    }
	}
}
