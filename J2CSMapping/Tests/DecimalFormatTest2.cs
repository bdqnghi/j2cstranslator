/* 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/6/10 2:47 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Tests
{

    using System;
    using ILOG.J2CsMapping.IO;
    using ILOG.J2CsMapping.Text;
    using NUnit;
    using ILOG.J2CsMapping.Text;
    using System.Text;
    using IBM.ICU.Util;
    using ILOG.J2CsMapping.Formatting;

    [NUnit.Framework.TestFixture]
    public class DecimalFormatTest
    {

        [NUnit.Framework.Test]
        public void TestAttributedCharacterIterator()
        {
            // Regression for http://issues.apache.org/jira/browse/HARMONY-333
            AttributedCharacterIterator iterator = new DecimalFormat()
                    .FormatToCharacterIterator(((int)(1)));
            NUnit.Framework.Assert.IsNotNull(iterator);
            NUnit.Framework.Assert.IsFalse((iterator.GetAttributes().Count == 0), "attributes should exist");
        }

        /*
         * Test the getter and setter of parseBigDecimal and parseIntegerOnly and
         * test the default value of them.
         */
        [NUnit.Framework.Test]
        public void Test_isParseBigDecimalLjava_lang_Boolean_isParseIntegerOnlyLjava_lang_Boolean()
        {

            // parseBigDecimal default to false
            DecimalFormat form = (DecimalFormat)ILOG.J2CsMapping.Formatting.NumberFormat
                    .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            NUnit.Framework.Assert.IsFalse(form.IsParseBigDecimal());
            form.SetParseBigDecimal(true);
            NUnit.Framework.Assert.IsTrue(form.IsParseBigDecimal());
            form.SetParseBigDecimal(false);
            NUnit.Framework.Assert.IsFalse(form.IsParseBigDecimal());

            // parseIntegerOnly default to false
            NUnit.Framework.Assert.IsFalse(form.IsParseIntegerOnly());
        }

        // Test the type of the returned object

        [NUnit.Framework.Test]
        public void Test_parseLjava_lang_String_Ljava_text_ParsePosition()
        {
            DecimalFormat form = (DecimalFormat)ILOG.J2CsMapping.Formatting.NumberFormat
                  .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            object number = form.Parse("23.1", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Double);

            // Test parsed object of type double when
            // parseBigDecimal is set to true

            form = (DecimalFormat)ILOG.J2CsMapping.Formatting.NumberFormat
                  .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            number = form.Parse("23.1", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Double);

            form.SetParseBigDecimal(true);
            number = form.Parse("23.1", new ParsePosition(0));

            NUnit.Framework.Assert.IsTrue(number is Decimal);
            NUnit.Framework.Assert.AreEqual(Decimal.Parse("23.1"), number);

            // When parseIntegerOnly set to true, all float numbers will be parsed
            // into Long.
            // With the exception that, the value is out of the bound of Long or
            // some special values such as NaN or Infinity.

            form = (DecimalFormat)ILOG.J2CsMapping.Formatting.NumberFormat
                  .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            form.SetParseIntegerOnly(true);
            number = form.Parse("23.1f", new ParsePosition(0));

            NUnit.Framework.Assert.IsTrue(number is Int64);

            number = form.Parse("23.0", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Int64);

            number = form.Parse("-0.0", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Int64);
            NUnit.Framework.Assert.IsTrue(0 == (long) number);

            /* BigInteger
            number = form.Parse("-9,223,372,036,854,775,8080.00",
                    new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Double);
            */

            // Even if parseIntegerOnly is set to true, NaN will be parsed to Double
            form = (DecimalFormat)ILOG.J2CsMapping.Formatting.NumberFormat
                         .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            form.SetParseIntegerOnly(true);
            DecimalFormatSymbols symbols = new DecimalFormatSymbols();
            number = form.Parse(symbols.GetNaN(), new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Double);

            // Even if parseIntegerOnly is set to true, Infinity will still be
            // parsed to Double

            form = (DecimalFormat)ILOG.J2CsMapping.Formatting.NumberFormat
                  .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            form.SetParseIntegerOnly(true);
            symbols = new DecimalFormatSymbols();
            number = form.Parse(symbols.GetInfinity(), new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Double);

            // ParseBigDecimal take precedence of parseBigInteger

            form = (DecimalFormat)ILOG.J2CsMapping.Formatting.NumberFormat
                 .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            form.SetParseIntegerOnly(true);
            form.SetParseBigDecimal(true);

            number = form.Parse("23.1f", new ParsePosition(0));

            NUnit.Framework.Assert.IsTrue(number is Decimal);

            number = form.Parse("23.0", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Decimal);

            /* BigInteger
            number = form.Parse("-9,223,372,036,854,775,8080.00",
                    new ParsePosition(0));
            NUnit.Framework.Assert.IsFalse(number is Int64);
            NUnit.Framework.Assert.IsTrue(number is Decimal);
            */

            // Test whether the parsed object is of type float. (To be specific,
            // they are of type Double)

            form = (DecimalFormat)ILOG.J2CsMapping.Formatting.NumberFormat
                       .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            number = form.Parse("23.1f", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Double);

            form.SetParseBigDecimal(true);
            number = form.Parse("23.1f", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Decimal);
            NUnit.Framework.Assert.AreEqual(Decimal.Parse("23.1"), number);

            // Integer will be parsed to Long, unless parseBigDecimal is set to true

            form = (DecimalFormat)ILOG.J2CsMapping.Formatting.NumberFormat
                       .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            number = form.Parse("123", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Int64);

            form.SetParseBigDecimal(true);
            number = form.Parse("123", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Decimal);
            NUnit.Framework.Assert.AreEqual(Decimal.Parse("123"), number);

            // NaN will be parsed to Double, no matter parseBigDecimal set or not.

            form = (DecimalFormat)ILOG.J2CsMapping.Formatting.NumberFormat
                       .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            symbols = new DecimalFormatSymbols();
            number = form.Parse(symbols.GetNaN() + "", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Double);

            form.SetParseBigDecimal(true);
            number = form.Parse(symbols.GetNaN() + "", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Double);

            // Infinity will be parsed to Double, no matter parseBigDecimal set or
            // not.

            form = (DecimalFormat)ILOG.J2CsMapping.Formatting.NumberFormat
                       .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            symbols = new DecimalFormatSymbols();

            number = form.Parse(symbols.GetInfinity(), new ParsePosition(0));

            NUnit.Framework.Assert.IsTrue(number is Double);
            NUnit.Framework.Assert.AreEqual("Infinity", number.ToString());
            // When set bigDecimal to true, the result of parsing infinity

            form = (DecimalFormat)ILOG.J2CsMapping.Formatting.NumberFormat
                       .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            symbols = new DecimalFormatSymbols();
            form.SetParseBigDecimal(true);

            number = form.Parse(symbols.GetInfinity(), new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Double);
            NUnit.Framework.Assert.AreEqual("Infinity", number.ToString());

            // Negative infinity will be parsed to double no matter parseBigDecimal
            // set or not

            form = (DecimalFormat)ILOG.J2CsMapping.Formatting.NumberFormat
                       .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            symbols = new DecimalFormatSymbols();

            number = form.Parse("-" + symbols.GetInfinity(), new ParsePosition(0));

            NUnit.Framework.Assert.IsTrue(number is Double);
            NUnit.Framework.Assert.AreEqual("-Infinity", number.ToString());

            // When set bigDecimal to true, the result of parsing minus infinity

            form = (DecimalFormat)ILOG.J2CsMapping.Formatting.NumberFormat
                       .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            symbols = new DecimalFormatSymbols();
            form.SetParseBigDecimal(true);

            number = form.Parse("-" + symbols.GetInfinity(), new ParsePosition(0));

            NUnit.Framework.Assert.IsTrue(number is Double);
            NUnit.Framework.Assert.AreEqual("-Infinity", number.ToString());

            // -0.0 will be parsed to different type according to the combination of
            // parseBigDecimal and parseIntegerOnly

            form = (DecimalFormat)ILOG.J2CsMapping.Formatting.NumberFormat
                       .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            // parseBigDecimal == true;
            // parseIntegerOnly == false;
            form.SetParseBigDecimal(true);
            number = form.Parse("-0", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Decimal);

            number = form.Parse("-0.0", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Decimal);

            // parseBigDecimal == false;
            // parseIntegerOnly == true;
            form.SetParseBigDecimal(false);
            form.SetParseIntegerOnly(true);
            number = form.Parse("-0", new ParsePosition(0));

            NUnit.Framework.Assert.IsTrue(number is Int64);

            number = form.Parse("-0.0", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Int64);

            // parseBigDecimal == false;
            // parseIntegerOnly == false;
            form.SetParseBigDecimal(false);
            form.SetParseIntegerOnly(false);
            number = form.Parse("-0", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Double);

            number = form.Parse("-0.0", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Double);

            // parseBigDecimal == true;
            // parseIntegerOnly == true;
            // parseBigDecimal take precedence of parseBigInteger
            form.SetParseBigDecimal(true);
            form.SetParseIntegerOnly(true);
            number = form.Parse("-0", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Decimal);

            number = form.Parse("-0.0", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Decimal);

            number = form.Parse("12.4", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Decimal);

            // When parseBigDecimal is set to false, no matter how massive the
            // mantissa part of a number is, the number will be parsed into Double

            /* BigInteger
            form = (DecimalFormat)ILOG.J2CsMapping.Text2.NumberFormat
                       .GetInstance(Locale.US);
            number = form.Parse("9,223,372,036,854,775,808.00",
                    new ParsePosition(0));
            

            NUnit.Framework.Assert.IsTrue(number is Double);
            NUnit.Framework.Assert.AreEqual("9.223372036854776E18", number.ToString());
            */
            /* BigInteger
            number = form.Parse("-9,223,372,036,854,775,8080.00",
                    new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Double);
            NUnit.Framework.Assert.AreEqual("-9.223372036854776E19", number.ToString());
            */

            // When parseBigDecimal is set to true, if mantissa part of number
            // exceeds Long.MAX_VALUE, the number will be parsed into BigDecimal
             /* BigInteger
            form = (DecimalFormat)ILOG.J2CsMapping.Text2.NumberFormat
                        .GetInstance(Locale.US);
            form.SetParseBigDecimal(true);
            number = form.Parse("9,223,372,036,854,775,808.00",
                    new ParsePosition(0));

            NUnit.Framework.Assert.IsTrue(number is Decimal);

            NUnit.Framework.Assert.AreEqual(9.223372036854776E18d, Convert.ToDouble(number), 0);

            number = form.Parse("-9,223,372,036,854,775,8080.00",
                    new ParsePosition(0));

            NUnit.Framework.Assert.IsTrue(number is Decimal);
            NUnit.Framework.Assert.AreEqual(-9.223372036854776E19d, Convert.ToDouble(number), 0);
            */
            // The minimum value of Long will be parsed to Long when parseBigDecimal
            // is not set

            ParsePosition pos = new ParsePosition(0);
            DecimalFormat df = new DecimalFormat();
            pos = new ParsePosition(0);
            object nb = df.Parse("" + Int64.MinValue, pos);
            NUnit.Framework.Assert.IsTrue(nb is Int64);

            // The maximum value of Long will be parsed to Long when parseBigDecimal
            // is set
            pos = new ParsePosition(0);
            df = new DecimalFormat();
            pos = new ParsePosition(0);
            nb = df.Parse("" + Int64.MaxValue, pos);
            NUnit.Framework.Assert.IsTrue(nb is Int64);

            // When parsing invalid string( which is neither consist of digits nor
            // NaN/Infinity), a null will be returned.

            pos = new ParsePosition(0);
            df = new DecimalFormat();
            try
            {
                nb = df.Parse("invalid", pos);
                NUnit.Framework.Assert.IsNull(nb);
            }
            catch (NullReferenceException e)
            {
                NUnit.Framework.Assert.Fail("Should not throw NPE");
            }
        }

        [NUnit.Framework.Test]
        public void Test_getMaximumFractionDigits()
        {
            NumberFormat nform = DecimalFormat.GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            DecimalFormat form = (DecimalFormat)nform;

            // getMaximumFractionDigits of NumberFormat default to 3
            // getMaximumFractionDigits of DecimalFormat default to 3
            NUnit.Framework.Assert.AreEqual(3, nform.GetMaximumFractionDigits());
            NUnit.Framework.Assert.AreEqual(3, form.GetMaximumFractionDigits());

            // Greater than 340 (critical number used to distinguish
            // BigInteger and BigDecimal)
            nform.SetMaximumFractionDigits(500);
            NUnit.Framework.Assert.AreEqual(500, nform.GetMaximumFractionDigits());
            NUnit.Framework.Assert.AreEqual(500, form.GetMaximumFractionDigits());

            form.SetMaximumFractionDigits(500);
            NUnit.Framework.Assert.AreEqual(500, nform.GetMaximumFractionDigits());
            NUnit.Framework.Assert.AreEqual(500, form.GetMaximumFractionDigits());

            form.Format(12.3d);
            NUnit.Framework.Assert.AreEqual(500, nform.GetMaximumFractionDigits());
            NUnit.Framework.Assert.AreEqual(500, form.GetMaximumFractionDigits());
        }

        [NUnit.Framework.Test]
        public void Test_getMinimumFractionDigits()
        {
            NumberFormat nform = DecimalFormat.GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            DecimalFormat form = (DecimalFormat)nform;

            // getMinimumFractionDigits from NumberFormat (default to 0)
            // getMinimumFractionDigits from DecimalFormat (default to 0)
            NUnit.Framework.Assert.AreEqual(0, nform.GetMinimumFractionDigits());
            NUnit.Framework.Assert.AreEqual(0, form.GetMinimumFractionDigits());

            // Greater than 340 (critical number used to distinguish
            // BigInteger and BigDecimal)
            nform.SetMinimumFractionDigits(500);
            NUnit.Framework.Assert.AreEqual(500, nform.GetMinimumFractionDigits());
            NUnit.Framework.Assert.AreEqual(500, form.GetMinimumFractionDigits());

            form.SetMaximumFractionDigits(400);
            NUnit.Framework.Assert.AreEqual(400, nform.GetMinimumFractionDigits());
            NUnit.Framework.Assert.AreEqual(400, form.GetMinimumFractionDigits());
        }

        // FIXME This test fails on Harmony ClassLibrary
        [NUnit.Framework.Test]
        public void Test_getMaximumIntegerDigits()
        {
            int maxIntDigit = 309;

            // When use default locale, in this case zh_CN
            // the returned instance of NumberFormat is a DecimalFormat
            DecimalFormat form = new DecimalFormat("00.###E0");
            NUnit.Framework.Assert.AreEqual(2, form.GetMaximumIntegerDigits());

            NumberFormat nform = ILOG.J2CsMapping.Formatting.NumberFormat
                        .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            form = null;
            if (nform is DecimalFormat)
            {
                form = (DecimalFormat)nform;
            }

            // Greater than 309 (critical number used to distinguish
            // BigInteger and BigDecimal)
            nform.SetMaximumIntegerDigits(500);
            NUnit.Framework.Assert.AreEqual(500, nform.GetMaximumIntegerDigits());
            NUnit.Framework.Assert.AreEqual(500, form.GetMaximumIntegerDigits());

            form = new DecimalFormat("00.###E0");
            NUnit.Framework.Assert.AreEqual(2, form.GetMaximumIntegerDigits());

            form.SetMaximumIntegerDigits(500);
            NUnit.Framework.Assert.AreEqual(500, nform.GetMaximumIntegerDigits());
            NUnit.Framework.Assert.AreEqual(500, form.GetMaximumIntegerDigits());
            form.Format(12.3d);
            NUnit.Framework.Assert.AreEqual(500, nform.GetMaximumIntegerDigits());
            NUnit.Framework.Assert.AreEqual(500, form.GetMaximumIntegerDigits());

            nform = ILOG.J2CsMapping.Formatting.NumberFormat.GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            form = null;
            if (nform is DecimalFormat)
            {
                form = (DecimalFormat)nform;
            }
            // getMaximumIntegerDigits from NumberFormat default to 309
            // getMaximumIntegerDigits from DecimalFormat default to 309
            // the following 2 assertions will fail on RI implementation, since the
            // implementation of ICU and RI are not identical. RI does not give
            // DecimalFormat an initial bound about its maximumIntegerDigits
            // (default to Integer.MAX_VALUE: 2147483647 )
            NUnit.Framework.Assert.AreEqual(maxIntDigit, nform.GetMaximumIntegerDigits());
            NUnit.Framework.Assert.AreEqual(maxIntDigit, form.GetMaximumIntegerDigits());

            // regression test for HARMONY-878
            // Failed ... NUnit.Framework.Assert.IsTrue(new DecimalFormat("0\t0").GetMaximumIntegerDigits() > 0);
        }

        [NUnit.Framework.Test]
        public void Test_getMinimumIntegerDigits()
        {
            int minIntDigit = 1;
            NumberFormat nform = DecimalFormat.GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            DecimalFormat form = (DecimalFormat)nform;

            // getMaximumIntegerDigits from NumberFormat (default to 1)
            // getMaximumIntegerDigits from DecimalFormat (default to 1)
            NUnit.Framework.Assert.AreEqual(minIntDigit, nform.GetMinimumIntegerDigits());
            NUnit.Framework.Assert.AreEqual(minIntDigit, form.GetMinimumIntegerDigits());

            // Greater than 309 (critical number used to distinguish
            // BigInteger and BigDecimal)
            nform.SetMinimumIntegerDigits(500);
            NUnit.Framework.Assert.AreEqual(500, nform.GetMinimumIntegerDigits());
            NUnit.Framework.Assert.AreEqual(500, form.GetMinimumIntegerDigits());

            form.SetMaximumIntegerDigits(400);
            NUnit.Framework.Assert.AreEqual(400, nform.GetMinimumIntegerDigits());
            NUnit.Framework.Assert.AreEqual(400, form.GetMinimumIntegerDigits());

        }

        [NUnit.Framework.Test]
        public void Test_formatLjava_lang_Obj_Ljava_StringBuffer_Ljava_text_FieldPosition()
        {
            NumberFormat nform = DecimalFormat.GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            DecimalFormat form = (DecimalFormat)nform;

            // If Object(including null) is not of type Number,
            // IllegalArgumentException will be thrown out
            try
            {
                form.FormatObject(new Object(), new StringBuilder(), new FieldPosition(0));
                NUnit.Framework.Assert.Fail("Should throw IAE");
            }
            catch (ArgumentException e)
            {
                // expected
            }
            try
            {
                form.FormatObject(null, new StringBuilder(), new FieldPosition(0));
                NUnit.Framework.Assert.Fail("Should throw IAE");
            }
            catch (ArgumentException e_0)
            {
                // expected
            }

            // When StringBuffer == null || FieldPosition == null
            // NullPointerException will be thrown out.
            try
            {
                form.Format((double)(1.9d), null, new FieldPosition(0));
                NUnit.Framework.Assert.Fail("Should throw NPE");
            }
            catch (NullReferenceException e_1)
            {
                // expected
            }

            try
            {
                form.Format((double)(1.3d), new StringBuilder(), null);
                NUnit.Framework.Assert.Fail("Should throw NPE");
            }
            catch (NullReferenceException e_2)
            {
                // expected
            }

            try
            {
                form.Format((double)(1.4d), null, null);
                NUnit.Framework.Assert.Fail("Should throw NPE");
            }
            catch (NullReferenceException e_3)
            {
                // expected
            }

            try
            {
                form.FormatObject(new Object(), null, null);
                NUnit.Framework.Assert.Fail("Should throw IllegalArgumentException");
            }
            catch (ArgumentException e_4)
            {
                // expected
            }

            FieldPosition pos;
            StringBuilder xout;
            DecimalFormat format = (DecimalFormat)DecimalFormat
                    .GetInstance(ILOG.J2CsMapping.Util.Locale.US);

            // format maxLong
            pos = new FieldPosition(0);
            xout = format.Format((long)(Int64.MaxValue), new StringBuilder(), pos);
            NUnit.Framework.Assert.IsTrue(xout.ToString().Equals("9,223,372,036,854,775,807"), "Wrong result L1: " + xout);

            // format minLong
            pos = new FieldPosition(0);
            xout = format.Format((long)(Int64.MinValue), new StringBuilder(), pos);
            NUnit.Framework.Assert.IsTrue(xout.ToString().Equals("-9,223,372,036,854,775,808"), "Wrong result L2: " + xout);

            // format maxLong of type BigInteger
            pos = new FieldPosition(0);
            xout = format.Format(
                    Int64.Parse(Int64.MaxValue.ToString()),
                    new StringBuilder(), pos);
            NUnit.Framework.Assert.IsTrue(xout.ToString().Equals("9,223,372,036,854,775,807"), "Wrong result BI1: " + xout);

            // format minLong of type BigInteger
            pos = new FieldPosition(0);
            xout = format.Format(
                    Int64.Parse(Int64.MinValue.ToString()),
                    new StringBuilder(), pos);
            NUnit.Framework.Assert.IsTrue(xout.ToString().Equals("-9,223,372,036,854,775,808"), "Wrong result BI2: " + xout);

            // format maxLong + 1
            Int64 big;
            pos = new FieldPosition(0);
            big = Int64.Parse(Int64.MaxValue.ToString()) +
                   Int64.Parse("1");
            xout = format.Format(big, new StringBuilder(), pos);
            // TODO: NUnit.Framework.Assert.IsTrue(xout.ToString().Equals("9,223,372,036,854,775,808"), "Wrong result BI3: " + xout);

            // format minLong - 1
            pos = new FieldPosition(0);
            big = Int64.Parse(Int64.MinValue.ToString()) +
                    Int64.Parse("-1");
            xout = format.Format(big, new StringBuilder(), pos);
            // TODO: NUnit.Framework.Assert.IsTrue(xout.ToString().Equals("-9,223,372,036,854,775,809"), "Wrong result BI4: " + xout);

            // format big decimal
            pos = new FieldPosition(0);
            xout = format.FormatObject(Decimal.Parse("51.348"),
                    new StringBuilder(), pos);
            NUnit.Framework.Assert.IsTrue(xout.ToString().Equals("51.348"), "Wrong result BD1: " + xout);

            // format big decimal
            pos = new FieldPosition(0);
            xout = format.FormatObject(Decimal.Parse("51"), new StringBuilder(),
                    pos);
            NUnit.Framework.Assert.IsTrue(xout.ToString().Equals("51"), "Wrong result BD2: " + xout);

            // format big decimal Double.MAX_VALUE * 2
            Decimal bigDecimal;
            pos = new FieldPosition(0);
            String doubleMax2 = "359,538,626,972,463,141,629,054,847,463,408,"
                    + "713,596,141,135,051,689,993,197,834,953,606,314,521,560,057,077,"
                    + "521,179,117,265,533,756,343,080,917,907,028,764,928,468,642,653,"
                    + "778,928,365,536,935,093,407,075,033,972,099,821,153,102,564,152,"
                    + "490,980,180,778,657,888,151,737,016,910,267,884,609,166,473,806,"
                    + "445,896,331,617,118,664,246,696,549,595,652,408,289,446,337,476,"
                    + "354,361,838,599,762,500,808,052,368,249,716,736";
            /* TODO: bigDecimal = Convert.ToDecimal(Double.MaxValue) + Convert.ToDecimal(
                    System.Double.MaxValue);
            xout = format.FormatObject(bigDecimal, new StringBuilder(), pos);
            NUnit.Framework.Assert.IsTrue(xout.ToString().Equals(doubleMax2), "Wrong result BDmax2: " + xout);
            
            // format big decimal Double.MIN_VALUE + Double.MIN_VALUE
            // and Double.MIN_VALUE - Double.MIN_VALUE
            pos = new FieldPosition(0);

            bigDecimal = new Decimal(System.Double.MinValue) + new Decimal(
                    System.Double.MinValue);
            xout = format.FormatObject(bigDecimal, new StringBuilder(), pos);

            bigDecimal = new Decimal(System.Single.MaxValue) + new Decimal(
                    System.Single.MaxValue);
            xout = format.FormatObject(bigDecimal, new StringBuilder(), pos);
            String BDFloatMax2 = "680,564,693,277,057,719,623,408,366,969,033,850,880";
            NUnit.Framework.Assert.IsTrue(xout.ToString().Equals(BDFloatMax2), "Wrong result BDFloatMax2: " + xout);
             * 
            // format big decimal Float.MIN_VALUE + Float.MIN_VALUE
            // and Float.MIN_VALUE - Float.MIN_VALUE
            bigDecimal = new Decimal(System.Single.MinValue) + new Decimal(
                    System.Single.MinValue);
            xout = format.FormatObject(bigDecimal, new StringBuilder(), pos);
            String BDFloatMin2 = "0";

            bigDecimal = new Decimal(System.Single.MinValue) - new Decimal(
                    System.Single.MinValue);
            xout = format.FormatObject(bigDecimal, new StringBuilder(), pos);

            NUnit.Framework.Assert.IsTrue(xout.ToString().Equals(BDFloatMin2), "Wrong result BDFloatMax2: " + xout);
            */
        }

        [NUnit.Framework.Test]
        public void Test_setMaximumFractionDigitsLjava_lang_Integer()
        {
            NumberFormat nform = DecimalFormat.GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            DecimalFormat form = (DecimalFormat)nform;

            form.SetMaximumFractionDigits(-2);
            NUnit.Framework.Assert.AreEqual(0, form.GetMaximumFractionDigits());

            form.SetMaximumFractionDigits(341);
            NUnit.Framework.Assert.AreEqual(341, form.GetMaximumFractionDigits());
        }

        [NUnit.Framework.Test]
        public void Test_setMinimumFractionDigitsLjava_lang_Integer()
        {
            NumberFormat nform = DecimalFormat.GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            DecimalFormat form = (DecimalFormat)nform;

            form.SetMinimumFractionDigits(-3);
            NUnit.Framework.Assert.AreEqual(0, form.GetMinimumFractionDigits());

            form.SetMinimumFractionDigits(310);
            NUnit.Framework.Assert.AreEqual(310, form.GetMinimumFractionDigits());
        }

        [NUnit.Framework.Test]
        public void Test_setMaximumIntegerDigitsLjava_lang_Integer()
        {
            NumberFormat nform = DecimalFormat.GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            DecimalFormat form = (DecimalFormat)nform;

            form.SetMaximumIntegerDigits(-3);
            NUnit.Framework.Assert.AreEqual(0, form.GetMaximumIntegerDigits());

            form.SetMaximumIntegerDigits(310);
            NUnit.Framework.Assert.AreEqual(310, form.GetMaximumIntegerDigits());
        }

        [NUnit.Framework.Test]
        public void Test_setMinimumIntegerDigitsLjava_lang_Integer()
        {
            NumberFormat nform = DecimalFormat.GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            DecimalFormat form = (DecimalFormat)nform;

            form.SetMinimumIntegerDigits(-3);
            NUnit.Framework.Assert.AreEqual(0, form.GetMinimumIntegerDigits());

            form.SetMinimumIntegerDigits(310);
            NUnit.Framework.Assert.AreEqual(310, form.GetMinimumIntegerDigits());
        }

        // When MaxFractionDigits is set first and less than MinFractionDigits, max
        // will be changed to min value
        [NUnit.Framework.Test]
        public void Test_setMinimumFactionDigitsLjava_lang_Integer_setMaximumFractionDigitsLjava_lang_Integer()
        {
            NumberFormat nform = DecimalFormat.GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            DecimalFormat form = (DecimalFormat)nform;

            form.SetMaximumFractionDigits(100);
            form.SetMinimumFractionDigits(200);

            NUnit.Framework.Assert.AreEqual(200, form.GetMaximumFractionDigits());
            NUnit.Framework.Assert.AreEqual(200, form.GetMinimumFractionDigits());

            form.SetMaximumIntegerDigits(100);
            form.SetMinimumIntegerDigits(200);

            NUnit.Framework.Assert.AreEqual(200, form.GetMaximumIntegerDigits());
            NUnit.Framework.Assert.AreEqual(200, form.GetMinimumIntegerDigits());
        }

        // When MinFractionDigits is set first and less than MaxFractionDigits, min
        // will be changed to max value
        [NUnit.Framework.Test]
        public void Test_setMaximumFactionDigitsLjava_lang_Integer_setMinimumFractionDigitsLjava_lang_Integer()
        {
            NumberFormat nform = DecimalFormat.GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            DecimalFormat form = (DecimalFormat)nform;

            form.SetMinimumFractionDigits(200);
            form.SetMaximumFractionDigits(100);

            NUnit.Framework.Assert.AreEqual(100, form.GetMaximumFractionDigits());
            NUnit.Framework.Assert.AreEqual(100, form.GetMinimumFractionDigits());

            form.SetMinimumIntegerDigits(200);
            form.SetMaximumIntegerDigits(100);

            NUnit.Framework.Assert.AreEqual(100, form.GetMaximumIntegerDigits());
            NUnit.Framework.Assert.AreEqual(100, form.GetMinimumIntegerDigits());
        }

        [NUnit.Framework.Test]
        public void Test_equalsLjava_lang_Object()
        {
            DecimalFormat format = (DecimalFormat)DecimalFormat
                    .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            DecimalFormat cloned = (DecimalFormat)format.Clone();
            cloned.SetDecimalFormatSymbols(new DecimalFormatSymbols(ILOG.J2CsMapping.Util.Locale.US));
            NUnit.Framework.Assert.AreEqual(format, cloned);

            Currency c = Currency.GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            cloned.SetCurrency(c);

            NUnit.Framework.Assert.AreEqual(format, cloned);
        }

        [NUnit.Framework.Test]
        public void Test_setPositivePrefixLjava_lang_String()
        {
            DecimalFormat format = new DecimalFormat();
            NUnit.Framework.Assert.AreEqual("", format.GetPositivePrefix());
        }

        [NUnit.Framework.Test]
        public void Test_setPositiveSuffixLjava_lang_String()
        {
            DecimalFormat format = new DecimalFormat();
            NUnit.Framework.Assert.AreEqual("", format.GetPositiveSuffix());
        }

        [NUnit.Framework.Test]
        public void Test_setNegativePrefixLjava_lang_String()
        {
            DecimalFormat format = new DecimalFormat();
            NUnit.Framework.Assert.AreEqual("-", format.GetNegativePrefix());
        }

        [NUnit.Framework.Test]
        public void Test_setNegativeSuffixLjava_lang_String()
        {
            DecimalFormat format = new DecimalFormat();
            NUnit.Framework.Assert.AreEqual("", format.GetNegativeSuffix());
        }

        [NUnit.Framework.Test]
        public void Test_setGroupingUse()
        {
            DecimalFormat format = new DecimalFormat();
            StringBuilder buf = new StringBuilder();
            format.SetGroupingUsed(false);
            format.Format((long)(1970), buf, new FieldPosition(0));
            NUnit.Framework.Assert.AreEqual("1970", buf.ToString());
            NUnit.Framework.Assert.IsFalse(format.IsGroupingUsed());
        }


        /// @tests java.text.DecimalFormat#DecimalFormat(java.lang.String)
        [NUnit.Framework.Test]
        public void Test_ConstructorLjava_lang_String()
        {
            // Test for method java.text.DecimalFormat(java.lang.String)
            // the constructor form that specifies a pattern is equal to the form
            // constructed with no pattern and applying that pattern using the
            // applyPattern call
            DecimalFormat format = new DecimalFormat("'$'0000.0000");
            DecimalFormat format1 = new DecimalFormat();
            format1.ApplyPattern("'$'0000.0000");
            NUnit.Framework.Assert.IsTrue(format.Equals(format1), "Constructed format did not match applied format object");
        }


        /// @tests java.text.DecimalFormat#applyPattern(java.lang.String)
        [NUnit.Framework.Test]
        public void Test_applyPatternLjava_lang_String()
        {
            DecimalFormat format = new DecimalFormat("#.#");
            NUnit.Framework.Assert.AreEqual("#0.#", format.ToPattern(), "Wrong pattern 1");
            format = new DecimalFormat("#.");
            NUnit.Framework.Assert.AreEqual("#0.", format.ToPattern(), "Wrong pattern 2");
            format = new DecimalFormat("#");
            NUnit.Framework.Assert.AreEqual("#", format.ToPattern(), "Wrong pattern 3");
            format = new DecimalFormat(".#");
            NUnit.Framework.Assert.AreEqual("#.0", format.ToPattern(), "Wrong pattern 4");
        }


        /// @tests java.text.DecimalFormat#clone()
        [NUnit.Framework.Test]
        public void Test_clone()
        {
            DecimalFormat format = (DecimalFormat)DecimalFormat
                    .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            DecimalFormat cloned = (DecimalFormat)format.Clone();
            NUnit.Framework.Assert.AreEqual(cloned.GetDecimalFormatSymbols(), format.GetDecimalFormatSymbols());

            format = new DecimalFormat("'$'0000.0000");
            DecimalFormat format1 = (DecimalFormat)(format.Clone());
            // make sure the objects are equal
            NUnit.Framework.Assert.IsTrue(format.Equals(format1), "Object's clone isn't equal!");
            // change the content of the clone and make sure it's not equal anymore
            // verifies that it's data is now distinct from the original
            format1.ApplyPattern("'$'0000.####");
            NUnit.Framework.Assert.IsTrue(!format.Equals(format1), "Object's changed clone should not be equal!");
        }

        private void Compare(String testName, String format, String expected)
        {
            NUnit.Framework.Assert.IsTrue(format.Equals(expected), testName + " got: " + format + " expected: " + expected);
        }

        private bool Compare(int count, String format, String expected)
        {
            bool result = format.Equals(expected);
            if (!result)
                System.Console.Out.WriteLine("Failure test: " + count + " got: " + format
                        + " expected: " + expected);
            return result;
        }


        /// @tests java.text.DecimalFormat#format(double)
        [NUnit.Framework.Test]
        public void Test_formatD()
        {
            DecimalFormat format = (DecimalFormat)DecimalFormat
                    .GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            format.SetGroupingUsed(false);
            format.SetMaximumFractionDigits(400);
            for (int i = 0; i < 309; i++)
            {
                String tval = "1";
                for (int j = 0; j < i; j++)
                    tval += "0";
                double d = ((Double)Double.Parse(tval, ILOG.J2CsMapping.Util.NumberFormatProvider.NumberFormat));
                String result = format.Format(d);
                NUnit.Framework.Assert.AreEqual(tval, result, i + ") e:" + tval + " r:" + result);
            }
            for (int i_0 = 0; i_0 < 322; i_0++)
            {
                String tval_1 = "0.";
                for (int j_2 = 0; j_2 < i_0; j_2++)
                    tval_1 += "0";
                tval_1 += "1";
                double d_3 = ((Double)Double.Parse(tval_1, ILOG.J2CsMapping.Util.NumberFormatProvider.NumberFormat));
                String result_4 = format.Format(d_3);
                NUnit.Framework.Assert.AreEqual(tval_1, result_4, i_0 + ") e:" + tval_1 + " r:" + result_4);
            }
            NUnit.Framework.Assert.AreEqual("999999999999999", format.Format(999999999999999.0));
            NUnit.Framework.Assert.AreEqual("999999999999999.9", format.Format(999999999999999.9d), "1");
            NUnit.Framework.Assert.AreEqual("99999999999999.98", format.Format(99999999999999.99d), "2");
            NUnit.Framework.Assert.AreEqual("9999999999999.998", format.Format(9999999999999.999d), "3");
            NUnit.Framework.Assert.AreEqual("999999999999.9999", format.Format(999999999999.9999d), "4");
            NUnit.Framework.Assert.AreEqual("99999999999.99998", format.Format(99999999999.99999d), "5");
            NUnit.Framework.Assert.AreEqual("9999999999.999998", format.Format(9999999999.999999d), "6");
            NUnit.Framework.Assert.AreEqual("999999999.9999999", format.Format(999999999.9999999d), "7");
            NUnit.Framework.Assert.AreEqual("99999999.99999999", format.Format(99999999.99999999d), "8");
            NUnit.Framework.Assert.AreEqual("9999999.999999998", format.Format(9999999.999999999d), "9");
            NUnit.Framework.Assert.AreEqual("99999.99999999999", format.Format(99999.99999999999d), "10");
            NUnit.Framework.Assert.AreEqual("9999.999999999998", format.Format(9999.999999999999d), "11");
            NUnit.Framework.Assert.AreEqual("999.9999999999999", format.Format(999.9999999999999d), "12");
            NUnit.Framework.Assert.AreEqual("99.99999999999999", format.Format(99.99999999999999d), "13");
            NUnit.Framework.Assert.AreEqual("9.999999999999998", format.Format(9.999999999999999d), "14");
            NUnit.Framework.Assert.AreEqual("0.9999999999999999", format.Format(.9999999999999999d), "15");
        }


        /// @tests java.text.DecimalFormat#getDecimalFormatSymbols()
        [NUnit.Framework.Test]
        public void Test_getDecimalFormatSymbols()
        {
            DecimalFormat df = (DecimalFormat)NumberFormat
                .GetInstance(ILOG.J2CsMapping.Util.Locale.ENGLISH);
            DecimalFormatSymbols dfs = df.GetDecimalFormatSymbols();
            NUnit.Framework.Assert.IsTrue(dfs != df.GetDecimalFormatSymbols(), "Identical symbols");
        }


        /// @tests java.text.DecimalFormat#getCurrency()
        // FIXME This test fails on Harmony ClassLibrary
        [NUnit.Framework.Test]
        public void Test_getCurrency()
        {
            Currency currK = Currency.GetInstance("KRW");
            Currency currX = Currency.GetInstance("XXX");
            Currency currE = Currency.GetInstance("EUR");
            Currency curr01;

            DecimalFormat df = (DecimalFormat)NumberFormat
                .GetCurrencyInstance(new ILOG.J2CsMapping.Util.Locale("ko", "KR"));
            NUnit.Framework.Assert.IsTrue(df.GetCurrency() == currK, "Test1: Returned incorrect currency");

            df = (DecimalFormat)NumberFormat
                .GetCurrencyInstance(new ILOG.J2CsMapping.Util.Locale("", "KR"));
            NUnit.Framework.Assert.IsTrue(df.GetCurrency() == currK, "Test2: Returned incorrect currency");

            df = (DecimalFormat)NumberFormat
                .GetCurrencyInstance(new ILOG.J2CsMapping.Util.Locale("ko", ""));
            NUnit.Framework.Assert.IsTrue(df.GetCurrency() == currX, "Test3: Returned incorrect currency");

            df = (DecimalFormat)NumberFormat
                .GetCurrencyInstance(new ILOG.J2CsMapping.Util.Locale("fr", "FR"));
            NUnit.Framework.Assert.IsTrue(df.GetCurrency() == currE, "Test4: Returned incorrect currency");

            // Regression for HARMONY-1351
            df = (DecimalFormat)NumberFormat
                .GetCurrencyInstance(new ILOG.J2CsMapping.Util.Locale("QWERTY"));
            NUnit.Framework.Assert.IsTrue(df.GetCurrency() == currX, "Test5: Returned incorrect currency");

            // JDK fails these tests since it doesn't have the PREEURO variant
            // df = (DecimalFormat)NumberFormat.getCurrencyInstance(new Locale("fr",
            // "FR","PREEURO"));
            // assertTrue("Test5: Returned incorrect currency", df.getCurrency() ==
            // currF);
        }


        /// @tests java.text.DecimalFormat#getGroupingSize()
        [NUnit.Framework.Test]
        public void Test_getGroupingSize()
        {
            DecimalFormat df = new DecimalFormat("###0.##");
            NUnit.Framework.Assert.AreEqual(0, df.GetGroupingSize(), "Wrong unset size");
            df = new DecimalFormat("#,##0.##");
            NUnit.Framework.Assert.AreEqual(3, df.GetGroupingSize(), "Wrong set size");
            df = new DecimalFormat("#,###,###0.##");
            NUnit.Framework.Assert.AreEqual(4, df.GetGroupingSize(), "Wrong multiple set size");
        }


        /// @tests java.text.DecimalFormat#getMultiplier()
        [NUnit.Framework.Test]
        public void Test_getMultiplier()
        {
            int defaultMultiplier = 1;
            NumberFormat nform = NumberFormat
                .GetCurrencyInstance(new ILOG.J2CsMapping.Util.Locale("en-us"));
            DecimalFormat form = (DecimalFormat)nform;
            NUnit.Framework.Assert.AreEqual(defaultMultiplier, form.GetMultiplier());

            DecimalFormat df = new DecimalFormat("###0.##");
            NUnit.Framework.Assert.AreEqual(1, df.GetMultiplier(), "Wrong unset multiplier");
            df = new DecimalFormat("###0.##%");
            NUnit.Framework.Assert.AreEqual(100, df.GetMultiplier(), "Wrong percent multiplier");
            df = new DecimalFormat("###0.##\u2030");
            NUnit.Framework.Assert.AreEqual(1000, df.GetMultiplier(), "Wrong mille multiplier");
        }


        /// @tests java.text.DecimalFormat#isDecimalSeparatorAlwaysShown()
        [NUnit.Framework.Test]
        public void Test_isDecimalSeparatorAlwaysShown()
        {
            DecimalFormat df = new DecimalFormat("###0.##");
            NUnit.Framework.Assert.IsTrue(!df.IsDecimalSeparatorAlwaysShown(), "Wrong unset value");
            df = new DecimalFormat("###0.00");
            NUnit.Framework.Assert.IsTrue(!df.IsDecimalSeparatorAlwaysShown(), "Wrong unset2 value");
            df = new DecimalFormat("###0.");
            NUnit.Framework.Assert.IsTrue(df.IsDecimalSeparatorAlwaysShown(), "Wrong set value");
        }


        /// @tests java.text.DecimalFormat#parse(java.lang.String,
        /// java.text.ParsePosition)
        // FIXME This test fails on Harmony ClassLibrary
        [NUnit.Framework.Test]
        public void Test_parseLjava_lang_StringLjava_text_ParsePosition()
        {
            DecimalFormat format = (DecimalFormat)NumberFormat
                    .GetNumberInstance(ILOG.J2CsMapping.Util.Locale.ENGLISH);
            ParsePosition pos = new ParsePosition(0);
            object result = format.Parse("9223372036854775807", pos);
            NUnit.Framework.Assert.IsTrue((Object)result.GetType() == (Object)typeof(Int64), "Wrong result type for Long.MAX_VALUE");
            NUnit.Framework.Assert.IsTrue(Convert.ToInt64(result) == Int64.MaxValue, "Wrong result Long.MAX_VALUE");
            pos = new ParsePosition(0);
            result = format.Parse("-9223372036854775808", pos);
            NUnit.Framework.Assert.IsTrue((Object)result.GetType() == (Object)typeof(Int64), "Wrong result type for Long.MIN_VALUE");
            NUnit.Framework.Assert.IsTrue(Convert.ToInt64(result) == Int64.MinValue, "Wrong result Long.MIN_VALUE: " + Convert.ToInt64(result));
            pos = new ParsePosition(0);
            result = format.Parse("9223372036854775808", pos);
            NUnit.Framework.Assert.IsTrue((Object)result.GetType() == (Object)typeof(Double), "Wrong result type for Long.MAX_VALUE+1");
            NUnit.Framework.Assert.IsTrue(Convert.ToDouble(result) == (double)Int64.MaxValue + 1, "Wrong result Long.MAX_VALUE + 1");
            pos = new ParsePosition(0);
            result = format.Parse("-9223372036854775809", pos);
            NUnit.Framework.Assert.IsTrue((Object)result.GetType() == (Object)typeof(Double), "Wrong result type for Long.MIN_VALUE+1");
            NUnit.Framework.Assert.IsTrue(Convert.ToDouble(result) == (double)Int64.MinValue - 1, "Wrong result Long.MIN_VALUE - 1");

            pos = new ParsePosition(0);
            result = format.Parse("18446744073709551629", pos);
            NUnit.Framework.Assert.IsTrue((Object)result.GetType() == (Object)typeof(Double), "Wrong result type for overflow");
            NUnit.Framework.Assert.IsTrue(Convert.ToDouble(result) == 18446744073709551629d, "Wrong result for overflow");

            pos = new ParsePosition(0);
            result = format.Parse("42325917317067571199", pos);
            NUnit.Framework.Assert.IsTrue((Object)result.GetType() == (Object)typeof(Double), "Wrong result type for overflow a: " + result);
            NUnit.Framework.Assert.IsTrue(Convert.ToDouble(result) == 42325917317067571199d, "Wrong result for overflow a: " + result);
            pos = new ParsePosition(0);
            result = format.Parse("4232591731706757119E1", pos);
            NUnit.Framework.Assert.IsTrue((Object)result.GetType() == (Object)typeof(Double), "Wrong result type for overflow b: " + result);
            NUnit.Framework.Assert.IsTrue(Convert.ToDouble(result) == 42325917317067571190d, "Wrong result for overflow b: " + result);
            pos = new ParsePosition(0);
            result = format.Parse(".42325917317067571199E20", pos);
            NUnit.Framework.Assert.IsTrue((Object)result.GetType() == (Object)typeof(Double), "Wrong result type for overflow c: " + result);
            NUnit.Framework.Assert.IsTrue(Convert.ToDouble(result) == 42325917317067571199d, "Wrong result for overflow c: " + result);
            pos = new ParsePosition(0);
            result = format.Parse("922337203685477580.9E1", pos);
            NUnit.Framework.Assert.IsTrue((Object)result.GetType() == (Object)typeof(Double), "Wrong result type for overflow d: " + result);
            NUnit.Framework.Assert.IsTrue(Convert.ToDouble(result) == 9223372036854775809d, "Wrong result for overflow d: " + result);
            pos = new ParsePosition(0);
            result = format.Parse("9.223372036854775809E18", pos);
            NUnit.Framework.Assert.IsTrue((Object)result.GetType() == (Object)typeof(Double), "Wrong result type for overflow e: " + result);
            NUnit.Framework.Assert.IsTrue(Convert.ToDouble(result) == 9223372036854775809d, "Wrong result for overflow e: " + result);

            // test parse with multipliers
            format.SetMultiplier(100);
            result = format.Parse("9223372036854775807", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue((Object)result.GetType() == (Object)typeof(Int64), "Wrong result type multiplier 100: " + result);
            NUnit.Framework.Assert.IsTrue(Convert.ToInt64(result) == 92233720368547758L, "Wrong result for multiplier 100: " + result);

            format.SetMultiplier(1000);
            result = format.Parse("9223372036854775807", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue((Object)result.GetType() == (Object)typeof(Int64), "Wrong result type multiplier 1000: " + result);
            NUnit.Framework.Assert.IsTrue(Convert.ToInt64(result) == 9223372036854776L, "Wrong result for multiplier 1000: " + result);

            format.SetMultiplier(10000);
            result = format.Parse("9223372036854775807", new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue((Object)result.GetType() == (Object)typeof(Double), "Wrong result type multiplier 10000: " + result);
            NUnit.Framework.Assert.IsTrue(Convert.ToDouble(result) == 922337203685477.5807d, "Wrong result for multiplier 10000: " + result);

        }


        /// @tests java.text.DecimalFormat#setDecimalFormatSymbols(java.text.
        /// DecimalFormatSymbols)
        [NUnit.Framework.Test]
        public void Test_setDecimalFormatSymbolsLjava_text_DecimalFormatSymbols()
        {
            DecimalFormat df = new DecimalFormat("###0.##");
            DecimalFormatSymbols dfs = new DecimalFormatSymbols();
            dfs.SetDecimalSeparator('@');
            df.SetDecimalFormatSymbols(dfs);
            NUnit.Framework.Assert.IsTrue(df.GetDecimalFormatSymbols().Equals(dfs), "Not set");
            NUnit.Framework.Assert.AreEqual("1@2", df.Format(1.2d), "Symbols not used");

            // The returned symbols may be cloned in two spots
            // 1. When set
            // 2. When returned
            DecimalFormat format = new DecimalFormat();
            DecimalFormatSymbols symbols = new DecimalFormatSymbols();
            format.SetDecimalFormatSymbols(symbols);
            DecimalFormatSymbols symbolsOut = format.GetDecimalFormatSymbols();
            NUnit.Framework.Assert.AreNotSame(symbols, symbolsOut);
        }


        /// @tests java.text.DecimalFormat#setDecimalSeparatorAlwaysShown(boolean)
        [NUnit.Framework.Test]
        public void Test_setDecimalSeparatorAlwaysShownZ()
        {
            DecimalFormat df = new DecimalFormat("###0.##",
                                                 new DecimalFormatSymbols(ILOG.J2CsMapping.Util.Locale.US));
            NUnit.Framework.Assert.AreEqual("5", df.Format(5), "Wrong default result");
            df.SetDecimalSeparatorAlwaysShown(true);
            NUnit.Framework.Assert.IsTrue(df.IsDecimalSeparatorAlwaysShown(), "Not set");
            NUnit.Framework.Assert.AreEqual("7.", df.Format(7), "Wrong set result");
        }


        /// @tests java.text.DecimalFormat#setCurrency(java.util.Currency)
        [NUnit.Framework.Test]
        public void Test_setCurrencyLjava_util_Currency()
        {
            ILOG.J2CsMapping.Util.Locale locale = ILOG.J2CsMapping.Util.Locale.CANADA;
            DecimalFormat df = ((DecimalFormat)NumberFormat
                    .GetCurrencyInstance(locale));

            try
            {
                df.SetCurrency(null);
                NUnit.Framework.Assert.Fail("Expected NullPointerException");
            }
            catch (NullReferenceException e)
            {
            }

            Currency currency = Currency.GetInstance("AED");
            df.SetCurrency(currency);
            NUnit.Framework.Assert.IsTrue(currency == df.GetCurrency(), "Returned incorrect currency");
            NUnit.Framework.Assert.IsTrue(currency.GetSymbol(locale).Equals(
                                    df.GetDecimalFormatSymbols().GetCurrencySymbol()), "Returned incorrect currency symbol");
            NUnit.Framework.Assert.IsTrue(currency.GetCurrencyCode().Equals(
                                    df.GetDecimalFormatSymbols()
                                            .GetInternationalCurrencySymbol()), "Returned incorrect international currency symbol");
        }


        /// @tests java.text.DecimalFormat#setGroupingSize(int)
        [NUnit.Framework.Test]
        public void Test_setGroupingSizeI()
        {
            DecimalFormat df = new DecimalFormat("###0.##",
          new DecimalFormatSymbols(ILOG.J2CsMapping.Util.Locale.ENGLISH));
            df.SetGroupingUsed(true);
            df.SetGroupingSize(2);
            NUnit.Framework.Assert.AreEqual(2, df.GetGroupingSize(), "Value not set");
            String result = df.Format(123);
            NUnit.Framework.Assert.IsTrue(result.Equals("1,23"), "Invalid format:" + result);
        }


        /// @tests java.text.DecimalFormat#setMaximumFractionDigits(int)
        [NUnit.Framework.Test]
        public void Test_setMaximumFractionDigitsI()
        {
            DecimalFormat df = new DecimalFormat("###0.##",
                                              new DecimalFormatSymbols(ILOG.J2CsMapping.Util.Locale.US));
            df.SetMaximumFractionDigits(3);
            NUnit.Framework.Assert.AreEqual(3, df.GetMaximumFractionDigits(), "Not set");
            NUnit.Framework.Assert.AreEqual("1.235", df.Format(1.23456d), "Wrong maximum");
            df.SetMinimumFractionDigits(4);
            NUnit.Framework.Assert.AreEqual(4, df.GetMaximumFractionDigits(), "Not changed");
            NUnit.Framework.Assert.AreEqual("456.0000", df.Format(456), "Incorrect fraction");
        }


        /// @tests java.text.DecimalFormat#setMaximumIntegerDigits(int)
        [NUnit.Framework.Test]
        public void Test_setMaximumIntegerDigitsI()
        {
            DecimalFormat df = new DecimalFormat("###0.##");
            df.SetMaximumIntegerDigits(2);
            NUnit.Framework.Assert.AreEqual(2, df.GetMaximumIntegerDigits(), "Not set");
            NUnit.Framework.Assert.AreEqual("34", df.Format(1234), "Wrong maximum");
            df.SetMinimumIntegerDigits(4);
            NUnit.Framework.Assert.AreEqual(4, df.GetMaximumIntegerDigits(), "Not changed");
            NUnit.Framework.Assert.AreEqual("0026", df.Format(26), "Incorrect integer");
        }


        /// @tests java.text.DecimalFormat#setMinimumFractionDigits(int)
        [NUnit.Framework.Test]
        public void Test_setMinimumFractionDigitsI()
        {
            DecimalFormat df = new DecimalFormat("###0.##",
                                             new DecimalFormatSymbols(ILOG.J2CsMapping.Util.Locale.US));
            df.SetMinimumFractionDigits(4);
            NUnit.Framework.Assert.AreEqual(4, df.GetMinimumFractionDigits(), "Not set");
            NUnit.Framework.Assert.AreEqual("1.2300", df.Format(1.23d), "Wrong minimum");
            df.SetMaximumFractionDigits(2);
            NUnit.Framework.Assert.AreEqual(2, df.GetMinimumFractionDigits(), "Not changed");
            NUnit.Framework.Assert.AreEqual("456.00", df.Format(456), "Incorrect fraction");
        }


        /// @tests java.text.DecimalFormat#setMinimumIntegerDigits(int)
        [NUnit.Framework.Test]
        public void Test_setMinimumIntegerDigitsI()
        {
            DecimalFormat df = new DecimalFormat("###0.##",
                                            new DecimalFormatSymbols(ILOG.J2CsMapping.Util.Locale.US));
            df.SetMinimumIntegerDigits(3);
            NUnit.Framework.Assert.AreEqual(3, df.GetMinimumIntegerDigits(), "Not set");
            NUnit.Framework.Assert.AreEqual("012", df.Format(12), "Wrong minimum");
            df.SetMaximumIntegerDigits(2);
            NUnit.Framework.Assert.AreEqual(2, df.GetMinimumIntegerDigits(), "Not changed");
            NUnit.Framework.Assert.AreEqual("00.7", df.Format(0.7d), "Incorrect integer");
        }


        /// @tests java.text.DecimalFormat#setMultiplier(int)
        // FIXME This test fails on Harmony ClassLibrary
        [NUnit.Framework.Test]
        public void Test_setMultiplierI()
        {
            DecimalFormat df = new DecimalFormat("###0.##");
            df.SetMultiplier(10);
            NUnit.Framework.Assert.AreEqual(10, df.GetMultiplier(), "Wrong multiplier");
            NUnit.Framework.Assert.AreEqual("50", df.Format(5), "Wrong format");
            NUnit.Framework.Assert.AreEqual(5, System.Convert.ToInt32(df.Parse("50", new ParsePosition(0))), "Wrong parse");

            // regression test for HARMONY-879
            df.SetMultiplier(-1);
            NUnit.Framework.Assert.AreEqual(-1, df.GetMultiplier(), "Wrong  multiplier for negative value");
        }

        /// <summary>
        /// Test whether DecimalFormat can parse Positive infinity correctly
        /// </summary>
        ///
        [NUnit.Framework.Test]
        public void TestParseInfinityBigDecimalFalse()
        {
            // Regression test for HARMONY-106
            DecimalFormat format = (DecimalFormat)DecimalFormat.GetInstance();
            DecimalFormatSymbols symbols = new DecimalFormatSymbols();
            object number = format.Parse(symbols.GetInfinity(),
                    new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Double);
            NUnit.Framework.Assert.IsTrue(Double.IsInfinity(Convert.ToDouble(number)));
        }

        /// <summary>
        /// Test whether DecimalFormat can parse Negative infinity correctly
        /// </summary>
        ///
        [NUnit.Framework.Test]
        public void TestParseMinusInfinityBigDecimalFalse()
        {
            // Regression test for HARMONY-106
            DecimalFormat format = (DecimalFormat)DecimalFormat.GetInstance();
            DecimalFormatSymbols symbols = new DecimalFormatSymbols();
            object number = format.Parse("-" + symbols.GetInfinity(),
                    new ParsePosition(0));
            NUnit.Framework.Assert.IsTrue(number is Double);
            NUnit.Framework.Assert.IsTrue(Double.IsInfinity(Convert.ToDouble(number)));
        }

        /// <summary>
        /// Test if setDecimalFormatSymbols method wont throw NullPointerException
        /// when it is called with null parameter.
        /// </summary>
        ///
        [NUnit.Framework.Test]
        public void TestSetDecimalFormatSymbolsAsNull()
        {
            // Regression for HARMONY-1070
            DecimalFormat format = (DecimalFormat)DecimalFormat.GetInstance();
            format.SetDecimalFormatSymbols(null);
        }
    }
}
