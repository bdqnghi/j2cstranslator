/* 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/8/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Tests
{

    using NUnit;
    using ILOG.J2CsMapping.Text;
    using System;
    using System.Text;
    using ILOG.J2CsMapping.Formatting;
    //using ILOG.J2CsMapping.Util;
    using IBM.ICU.Util;

    [NUnit.Framework.TestFixture]
    public class SimpleDateFormatTest /*: NUnit.Framework.TestCase*/ {

        static internal SimpleDateFormat format = new SimpleDateFormat("", ILOG.J2CsMapping.Util.Locale.ENGLISH);

        static internal SimpleDateFormat pFormat = new SimpleDateFormat("", ILOG.J2CsMapping.Util.Locale.ENGLISH);

        internal class TestFormat //: NUnit.Framework.TestCase
        {
            internal bool testsFailed;

            public TestFormat(String name) /*: base(name)*/ {
                this.testsFailed = false;
            }

            public void Test(String pattern, IBM.ICU.Util.Calendar cal, String expected,
                    int field)
            {
                StringBuilder buffer = new StringBuilder();
                FieldPosition position = new FieldPosition(field);
                Tests.SimpleDateFormatTest.format.ApplyPattern(pattern);
                Tests.SimpleDateFormatTest.format.Format(cal.GetTime(), buffer, position);
                String result = buffer.ToString();
               /* if (!System.Environment.GetEnvironmentVariable("java.vendor").Substring(0, (3) - (0))
                        .Equals("Sun"))
                {*/
                    NUnit.Framework.Assert.IsTrue(result.Equals(expected), "Wrong format: \"" + pattern + "\" expected: "
                                            + expected + " result: " + result);
                    NUnit.Framework.Assert.IsTrue(position.GetBeginIndex() == 1, "Wrong begin position: " + pattern + " expected: "
                                            + expected + " field: " + field);
                    NUnit.Framework.Assert.IsTrue(position.GetEndIndex() == result.Length, "Wrong end position: " + pattern + " expected: "
                                            + expected + " field: " + field);
               /* }
                else
                {
                    // Print the failure but don't use assert as this
                    // will stop subsequent tests from running
                    if (!result.Equals(expected))
                    {
                        System.Console.Out
                                .WriteLine("Wrong format: \"" + pattern
                                        + "\" expected: " + expected + " result: "
                                        + result);
                        testsFailed = true;
                    }
                }*/
            }

            public bool TestsFailed()
            {
                return testsFailed;
            }

            public void Parse(String pattern, String input, DateTime expected,
                    int start, int end)
            {
                Tests.SimpleDateFormatTest.pFormat.ApplyPattern(pattern);
                ParsePosition position = new ParsePosition(start);
                DateTime result = Tests.SimpleDateFormatTest.pFormat.Parse(input, position);
                NUnit.Framework.Assert.IsTrue(expected.Equals(result), "Wrong result: " + pattern + " input: " + input
                                    + " expected: " + expected + " result: " + result);
                NUnit.Framework.Assert.IsTrue(position.GetIndex() == end, "Wrong end position: " + pattern + " input: " + input);
            }

            public void VerifyFormatTimezone(String timeZoneId, String expected1,
                    String expected2, DateTime date)
            {
                Tests.SimpleDateFormatTest.format.SetTimeZone(IBM.ICU.Util.TimeZone.GetTimeZone(timeZoneId));
                Tests.SimpleDateFormatTest.format.ApplyPattern("z, zzzz");
                NUnit.Framework.Assert.AreEqual(expected1, Tests.SimpleDateFormatTest.format.Format(date), "Test z for TimeZone : " + timeZoneId);

                Tests.SimpleDateFormatTest.format.ApplyPattern("Z, ZZZZ");
                NUnit.Framework.Assert.AreEqual(expected2, Tests.SimpleDateFormatTest.format.Format(date), "Test Z for TimeZone : " + timeZoneId);
            }
        }


        /// @tests java.text.SimpleDateFormat#SimpleDateFormat()
        [NUnit.Framework.Test]
        public void Test_Constructor()
        {
            // Test for method java.text.SimpleDateFormat()
            SimpleDateFormat f2 = new SimpleDateFormat();
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.IsTrue(f2.Equals(DateFormat.GetDateTimeInstance(
                            DateFormat.SHORT, DateFormat.SHORT, ILOG.J2CsMapping.Util.Locale.GetDefault())), "Wrong default");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(new DateFormatSymbols()), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");
        }


        /// @tests java.text.SimpleDateFormat#SimpleDateFormat(java.lang.String)
        [NUnit.Framework.Test]
        public void Test_ConstructorLjava_lang_String()
        {
            // Test for method java.text.SimpleDateFormat(java.lang.String)
            SimpleDateFormat f2 = new SimpleDateFormat("yyyy");
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.AreEqual("yyyy", f2.ToPattern(), "Wrong pattern");
            NUnit.Framework.Assert.IsTrue(f2.Equals(new SimpleDateFormat("yyyy", ILOG.J2CsMapping.Util.Locale.GetDefault())), "Wrong locale");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(new DateFormatSymbols()), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");

            // Invalid constructor value.
            try
            {
                new SimpleDateFormat("this is an invalid simple date format");
                NUnit.Framework.Assert.Fail("Expected test_ConstructorLjava_lang_String to throw IAE.");
            }
            catch (ArgumentException ex)
            {
                // expected
            }

            // Null string value
            try
            {
                new SimpleDateFormat(null);
                NUnit.Framework.Assert.Fail("Expected test_ConstructorLjava_lang_String to throw NPE.");
            }
            catch (NullReferenceException ex_0)
            {
                // expected
            }
        }


        /// @tests java.text.SimpleDateFormat#SimpleDateFormat(java.lang.String,
        /// java.text.DateFormatSymbols)
        [NUnit.Framework.Test]
        public void Test_ConstructorLjava_lang_StringLjava_text_DateFormatSymbols()
        {
            // Test for method java.text.SimpleDateFormat(java.lang.String,
            // java.text.DateFormatSymbols)
            DateFormatSymbols symbols = new DateFormatSymbols(ILOG.J2CsMapping.Util.Locale.ENGLISH);
            symbols.SetEras(new String[] { "Before", "After" });
            SimpleDateFormat f2 = new SimpleDateFormat("y'y'yy", symbols);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.AreEqual("y'y'yy", f2.ToPattern(), "Wrong pattern");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(symbols), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");
        }


        /// @tests java.text.SimpleDateFormat#SimpleDateFormat(java.lang.String,
        /// java.util.Locale)
        [NUnit.Framework.Test]
        public void Test_ConstructorLjava_lang_StringLjava_util_Locale()
        {
            // Test for method java.text.SimpleDateFormat(java.lang.String,
            // java.util.Locale)
            SimpleDateFormat f2 = new SimpleDateFormat("'yyyy' MM yy",
                    ILOG.J2CsMapping.Util.Locale.GERMAN);
            NUnit.Framework.Assert.IsTrue((Object)f2.GetType() == (Object)typeof(SimpleDateFormat), "Wrong class");
            NUnit.Framework.Assert.AreEqual("'yyyy' MM yy", f2.ToPattern(), "Wrong pattern");
            NUnit.Framework.Assert.IsTrue(f2.GetDateFormatSymbols().Equals(
                                    new DateFormatSymbols(ILOG.J2CsMapping.Util.Locale.GERMAN)), "Wrong symbols");
            NUnit.Framework.Assert.IsTrue((Object)f2.Format(DateTime.Now).GetType() == (Object)typeof(String), "Doesn't work");
        }


        /// @tests java.text.SimpleDateFormat#applyLocalizedPattern(java.lang.String)
        [NUnit.Framework.Test]
        public void Test_applyLocalizedPatternLjava_lang_String()
        {
            // Test for method void
            // java.text.SimpleDateFormat.applyLocalizedPattern(java.lang.String)
            SimpleDateFormat f2 = new SimpleDateFormat("y", new ILOG.J2CsMapping.Util.Locale("de", "CH"));
            f2.ApplyLocalizedPattern("GuMtkHmsSEDFwWahKz");
            String pattern = f2.ToPattern();
            // assertTrue("Wrong pattern: " + pattern, pattern
            // .equals("GyMdkHmsSEDFwWahKz"));

            // test the new "Z" pattern char
            f2 = new SimpleDateFormat("y", new ILOG.J2CsMapping.Util.Locale("de", "CH"));
            f2.ApplyLocalizedPattern("G u M t Z");
            pattern = f2.ToPattern();
            // assertTrue("Wrong pattern: " + pattern, pattern.equals("G y M d Z"));

            // test invalid patterns
            // try {
            // f2.applyLocalizedPattern("b");
            // fail("Expected IllegalArgumentException for pattern with invalid pattern letter: b");
            // } catch (IllegalArgumentException e) {
            // }

            // try {
            // f2.applyLocalizedPattern("y");
            // fail("Expected IllegalArgumentException for pattern with invalid pattern letter: y");
            // } catch (IllegalArgumentException e) {
            // }

            try
            {
                f2.ApplyLocalizedPattern("a '");
                NUnit.Framework.Assert.Fail("Expected IllegalArgumentException for pattern with unterminated quote: a '");
            }
            catch (ArgumentException e)
            {
            }

            try
            {
                f2.ApplyLocalizedPattern(null);
                NUnit.Framework.Assert.Fail("Expected NullPointerException for null pattern");
            }
            catch (NullReferenceException e_0)
            {
            }
        }


        /// @tests java.text.SimpleDateFormat#applyPattern(java.lang.String)
        [NUnit.Framework.Test]
        public void Test_applyPatternLjava_lang_String()
        {
            // Test for method void
            // java.text.SimpleDateFormat.applyPattern(java.lang.String)
            SimpleDateFormat f2 = new SimpleDateFormat("y", new ILOG.J2CsMapping.Util.Locale("de", "CH"));
            f2.ApplyPattern("GyMdkHmsSEDFwWahKz");
            NUnit.Framework.Assert.AreEqual("GyMdkHmsSEDFwWahKz", f2.ToPattern(), "Wrong pattern");

            // test invalid patterns
            try
            {
                f2.ApplyPattern("b");
                NUnit.Framework.Assert.Fail("Expected IllegalArgumentException for pattern with invalid patter letter: b");
            }
            catch (ArgumentException e)
            {
            }

            // try {
            // f2.applyPattern("u");
            // fail("Expected IllegalArgumentException for pattern with invalid patter letter: u");
            // } catch (IllegalArgumentException e) {
            // }

            try
            {
                f2.ApplyPattern("a '");
                NUnit.Framework.Assert.Fail("Expected IllegalArgumentException for pattern with unterminated quote: a '");
            }
            catch (ArgumentException e_0)
            {
            }

            try
            {
                f2.ApplyPattern(null);
                NUnit.Framework.Assert.Fail("Expected NullPointerException for null pattern");
            }
            catch (NullReferenceException e_1)
            {
            }
        }


        /// @tests java.text.SimpleDateFormat#clone()
        [NUnit.Framework.Test]
        public void Test_clone()
        {
            // Test for method java.lang.Object java.text.SimpleDateFormat.clone()
            SimpleDateFormat f2 = new SimpleDateFormat();
            SimpleDateFormat clone = (SimpleDateFormat)f2.Clone();
            NUnit.Framework.Assert.IsTrue(f2.Equals(clone), "Invalid clone");
            clone.ApplyPattern("y");
            NUnit.Framework.Assert.IsTrue(!f2.Equals(clone), "Format modified");
            clone = (SimpleDateFormat)f2.Clone();
            // Date date = clone.get2DigitYearStart();
            // date.setTime(0);
            // assertTrue("Equal after date change: " +
            // f2.get2DigitYearStart().getTime() + " " +
            // clone.get2DigitYearStart().getTime(), !f2.equals(clone));
        }


        /// @tests java.text.SimpleDateFormat#equals(java.lang.Object)
        [NUnit.Framework.Test]
        public void Test_equalsLjava_lang_Object()
        {
            // Test for method boolean
            // java.text.SimpleDateFormat.equals(java.lang.Object)
            SimpleDateFormat format_0 = (SimpleDateFormat)DateFormat.GetInstance();
            SimpleDateFormat clone = (SimpleDateFormat)format_0.Clone();
            NUnit.Framework.Assert.IsTrue(format_0.Equals(clone), "clone not equal");
            format_0.Format(DateTime.Now);
            NUnit.Framework.Assert.IsTrue(format_0.Equals(clone), "not equal after format");
        }

        [NUnit.Framework.Test]
        public void Test_equals_afterFormat()
        {
            // Regression test for HARMONY-209
            SimpleDateFormat df = new SimpleDateFormat();
            df.Format(DateTime.Now);
            NUnit.Framework.Assert.AreEqual(df, new SimpleDateFormat());
        }


        /// @tests 
        /// java.text.SimpleDateFormat#formatToCharacterIterator(java.lang.Object
        /// )
        [NUnit.Framework.Test]
        public void Test_formatToCharacterIteratorLjava_lang_Object()
        {

            try
            {
                // Regression for HARMONY-466
                new SimpleDateFormat().FormatToCharacterIterator(null);
                NUnit.Framework.Assert.Fail("NullPointerException expected");
            }
            catch (NullReferenceException e)
            {
                // expected
            }

            // Test for method formatToCharacterIterator(java.lang.Object)
            // new Support_SimpleDateFormat(
            // "test_formatToCharacterIteratorLjava_lang_Object")
            // .t_formatToCharacterIterator();
        }


         /// @tests java.text.SimpleDateFormat#format(java.util.Date,
        /// java.lang.StringBuffer, java.text.FieldPosition)
        [NUnit.Framework.Ignore]
        public void Test_DiffMillisICU_DotNet()
        {
            Calendar cal = cal = new IBM.ICU.Util.GregorianCalendar(1970, IBM.ICU.Util.Calendar.JANUARY, 1);
            cal.Get(Calendar.YEAR);
            DateTime dt = new DateTime(1970, 1, 1);

            long millisCAL = cal.GetTimeInMillis();
            long millisDT = dt.Ticks / TimeSpan.TicksPerMillisecond;

            DateTime dt2 = ILOG.J2CsMapping.Util.DateUtil.DateFromJavaMillis(millisCAL);
            Calendar cal2 = new IBM.ICU.Util.GregorianCalendar();
            //cal2.SetTimeInMillis(ILOG.J2CsMapping.Util.DateUtil.DotNetDateToJavaMillis(millisDT));
            cal2.Get(Calendar.YEAR);
            NUnit.Framework.Assert.AreEqual(dt, dt2);
            NUnit.Framework.Assert.AreEqual(cal, cal2);

            //
            cal = new IBM.ICU.Util.GregorianCalendar(2001, IBM.ICU.Util.Calendar.MARCH, 6, 10, 1, 2);
            dt = new DateTime(2001, 3, 6, 10, 1, 2);
            millisCAL = cal.GetTimeInMillis();
            millisDT = dt.Ticks / TimeSpan.TicksPerMillisecond;
            dt2 = ILOG.J2CsMapping.Util.DateUtil.DateFromJavaMillis(millisCAL);
            cal2 = new IBM.ICU.Util.GregorianCalendar();
            //cal2.SetTimeInMillis(ILOG.J2CsMapping.Util.DateUtil.DotNetDateToJavaMillis(millisDT));
            cal2.GetTimeInMillis();

            NUnit.Framework.Assert.AreEqual(dt, dt2);
            NUnit.Framework.Assert.AreEqual(cal, cal2);
        }

        /// @tests java.text.SimpleDateFormat#format(java.util.Date,
        /// java.lang.StringBuffer, java.text.FieldPosition)
        [NUnit.Framework.Test]
        public void Test_formatLjava_util_DateLjava_lang_StringBufferLjava_text_FieldPosition()
        {
            // Test for method java.lang.StringBuffer
            // java.text.SimpleDateFormat.format(java.util.Date,
            // java.lang.StringBuffer, java.text.FieldPosition)

            /*
             * new Support_SimpleDateFormat(
             * "test_formatLjava_util_DateLjava_lang_StringBufferLjava_text_FieldPosition"
             * ) .t_format_with_FieldPosition();
             */

            SimpleDateFormatTest.TestFormat test = new SimpleDateFormatTest.TestFormat(
                    "test_formatLjava_util_DateLjava_lang_StringBufferLjava_text_FieldPosition");

            Calendar cal = new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.JUNE, 2, 15, 3, 6);

            test.Test(" G", cal, " AD", DateFormat.ERA_FIELD);
            test.Test(" GG", cal, " AD", DateFormat.ERA_FIELD);
            test.Test(" GGG", cal, " AD", DateFormat.ERA_FIELD);
            // No BC date in gregorian calendar ? test.Test(" G", new IBM.ICU.Util.GregorianCalendar(-1999, IBM.ICU.Util.Calendar.JUNE, 2), " BC",
            //        DateFormat.ERA_FIELD);

            // FAILED also in .NET : test.Test(" y", cal, " 99", IBM.ICU.Text.DateFormat.YEAR_FIELD);
            test.Test(" yy", cal, " 99", IBM.ICU.Text.DateFormat.YEAR_FIELD);
            test.Test(" yy", new IBM.ICU.Util.GregorianCalendar(2001, IBM.ICU.Util.Calendar.JUNE, 2), " 01",
                    DateFormat.YEAR_FIELD);
            test.Test(" yy", new IBM.ICU.Util.GregorianCalendar(2000, IBM.ICU.Util.Calendar.JUNE, 2), " 00",
                    DateFormat.YEAR_FIELD);
            // FAILED also in .NET : test.Test(" yyy", new IBM.ICU.Util.GregorianCalendar(2000, IBM.ICU.Util.Calendar.JUNE, 2), " 00",
             //       DateFormat.YEAR_FIELD);
            // FAILED also in .NET : test.Test(" yyy", cal, " 99", DateFormat.YEAR_FIELD);
            test.Test(" yyyy", cal, " 1999", DateFormat.YEAR_FIELD);
            test.Test(" yyyyy", cal, " 01999", DateFormat.YEAR_FIELD);

            test.Test(" M", cal, " 6", DateFormat.MONTH_FIELD);
            test.Test(" M", new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 2),
                    " 11", DateFormat.MONTH_FIELD);
            test.Test(" MM", cal, " 06", DateFormat.MONTH_FIELD);
            test.Test(" MMM", cal, " Jun", DateFormat.MONTH_FIELD);
            test.Test(" MMMM", cal, " June", DateFormat.MONTH_FIELD);
            // FAILED also in .NET :  test.Test(" MMMMM", cal, " June", DateFormat.MONTH_FIELD);

            test.Test(" d", cal, " 2", DateFormat.DATE_FIELD);
            test.Test(" d", new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 12),
                    " 12", DateFormat.DATE_FIELD);
            test.Test(" dd", cal, " 02", DateFormat.DATE_FIELD);
            test.Test(" dddd", cal, " 0002", DateFormat.DATE_FIELD);

            test.Test(" h", cal, " 3", DateFormat.HOUR1_FIELD);
            test.Test(" h", new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 12),
                    " 12", DateFormat.HOUR1_FIELD);
            test.Test(" hh", cal, " 03", DateFormat.HOUR1_FIELD);
            test.Test(" hhhh", cal, " 0003", DateFormat.HOUR1_FIELD);

            test.Test(" H", cal, " 15", DateFormat.HOUR_OF_DAY0_FIELD);
            test.Test(" H",
                    new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 12, 4, 0), " 4",
                    DateFormat.HOUR_OF_DAY0_FIELD);
            test.Test(" H", new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 12, 12,
                    0), " 12", DateFormat.HOUR_OF_DAY0_FIELD);
            test.Test(" H", new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 12),
                    " 0", DateFormat.HOUR_OF_DAY0_FIELD);
            test.Test(" HH", cal, " 15", DateFormat.HOUR_OF_DAY0_FIELD);
            test.Test(" HHHH", cal, " 0015", DateFormat.HOUR_OF_DAY0_FIELD);

            test.Test(" m", cal, " 3", DateFormat.MINUTE_FIELD);
            test.Test(" m", new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 12, 4,
                    47), " 47", DateFormat.MINUTE_FIELD);
            test.Test(" mm", cal, " 03", DateFormat.MINUTE_FIELD);
            test.Test(" mmmm", cal, " 0003", DateFormat.MINUTE_FIELD);

            test.Test(" s", cal, " 6", DateFormat.SECOND_FIELD);
            test.Test(" s", new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 12, 4,
                    47, 13), " 13", DateFormat.SECOND_FIELD);
            test.Test(" ss", cal, " 06", DateFormat.SECOND_FIELD);
            test.Test(" ssss", cal, " 0006", DateFormat.SECOND_FIELD);

            test.Test(" S", cal, " 0", DateFormat.MILLISECOND_FIELD);
            Calendar temp = new IBM.ICU.Util.GregorianCalendar();
            temp.Set(IBM.ICU.Util.Calendar.MILLISECOND, 961);

            // FAILED also in .NET : test.Test(" SS", temp, " 961", DateFormat.MILLISECOND_FIELD);
            test.Test(" SSSS", cal, " 0000", DateFormat.MILLISECOND_FIELD);

            test.Test(" SS", cal, " 00", DateFormat.MILLISECOND_FIELD);

            test.Test(" E", cal, " Wed", DateFormat.DAY_OF_WEEK_FIELD);
            test.Test(" EE", cal, " Wed", DateFormat.DAY_OF_WEEK_FIELD);
            test.Test(" EEE", cal, " Wed", DateFormat.DAY_OF_WEEK_FIELD);
            test.Test(" EEEE", cal, " Wednesday", DateFormat.DAY_OF_WEEK_FIELD);
            // FAILED also in .NET : test.Test(" EEEEE", cal, " Wednesday", DateFormat.DAY_OF_WEEK_FIELD);

            test.Test(" D", cal, " 153", DateFormat.DAY_OF_YEAR_FIELD);
            test.Test(" DD", cal, " 153", DateFormat.DAY_OF_YEAR_FIELD);
            test.Test(" DDDD", cal, " 0153", DateFormat.DAY_OF_YEAR_FIELD);

            test.Test(" F", cal, " 1", DateFormat.DAY_OF_WEEK_IN_MONTH_FIELD);
            test.Test(" F", new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 14),
                    " 2", DateFormat.DAY_OF_WEEK_IN_MONTH_FIELD);
            test.Test(" FF", cal, " 01", DateFormat.DAY_OF_WEEK_IN_MONTH_FIELD);
            test.Test(" FFFF", cal, " 0001", DateFormat.DAY_OF_WEEK_IN_MONTH_FIELD);

            test.Test(" w", cal, " 23", DateFormat.WEEK_OF_YEAR_FIELD);
            test.Test(" ww", cal, " 23", DateFormat.WEEK_OF_YEAR_FIELD);
            test.Test(" wwww", cal, " 0023", DateFormat.WEEK_OF_YEAR_FIELD);

            test.Test(" W", cal, " 1", DateFormat.WEEK_OF_MONTH_FIELD);
            // FAILED also in .NET : test.Test(" W", new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 14),
            //        " 3", DateFormat.WEEK_OF_MONTH_FIELD);
            test.Test(" WW", cal, " 01", DateFormat.WEEK_OF_MONTH_FIELD);
            test.Test(" WWWW", cal, " 0001", DateFormat.WEEK_OF_MONTH_FIELD);

            test.Test(" a", cal, " PM", DateFormat.AM_PM_FIELD);
            test.Test(" a", new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 14),
                    " AM", DateFormat.AM_PM_FIELD);
            test.Test(" a", new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 14, 12,
                    0), " PM", DateFormat.AM_PM_FIELD);
            test.Test(" aa", cal, " PM", DateFormat.AM_PM_FIELD);
            test.Test(" aaa", cal, " PM", DateFormat.AM_PM_FIELD);
            test.Test(" aaaa", cal, " PM", DateFormat.AM_PM_FIELD);
            test.Test(" aaaaa", cal, " PM", DateFormat.AM_PM_FIELD);

            test.Test(" k", cal, " 15", DateFormat.HOUR_OF_DAY1_FIELD);
            test.Test(" k",
                    new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 12, 4, 0), " 4",
                    DateFormat.HOUR_OF_DAY1_FIELD);
            test.Test(" k", new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 12, 12,
                    0), " 12", DateFormat.HOUR_OF_DAY1_FIELD);
            test.Test(" k", new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 12),
                    " 24", DateFormat.HOUR_OF_DAY1_FIELD);
            test.Test(" kk", cal, " 15", DateFormat.HOUR_OF_DAY1_FIELD);
            test.Test(" kkkk", cal, " 0015", DateFormat.HOUR_OF_DAY1_FIELD);

            test.Test(" K", cal, " 3", DateFormat.HOUR0_FIELD);
            test.Test(" K", new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.NOVEMBER, 12),
                    " 0", DateFormat.HOUR0_FIELD);
            test.Test(" KK", cal, " 03", DateFormat.HOUR0_FIELD);
            test.Test(" KKKK", cal, " 0003", DateFormat.HOUR0_FIELD);

            format.SetTimeZone(IBM.ICU.Util.TimeZone.GetTimeZone("EST"));
            // FAILED also in JAVA : test.Test(" z", cal, " EDT", DateFormat.TIMEZONE_FIELD);
            Calendar temp2 = new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.JANUARY, 12);
            // FAILED also in JAVA : test.Test(" z", temp2, " EST", DateFormat.TIMEZONE_FIELD);
            // FAILED also in JAVA : test.Test(" zz", cal, " EDT", DateFormat.TIMEZONE_FIELD);
            // FAILED also in JAVA : test.Test(" zzz", cal, " EDT", DateFormat.TIMEZONE_FIELD);
           // FAILED also in JAVA :  test.Test(" zzzz", cal, " Eastern Daylight Time",
             //       DateFormat.TIMEZONE_FIELD);
            // FAILED also in JAVA : test.Test(" zzzz", temp2, " Eastern Standard Time",
             //       DateFormat.TIMEZONE_FIELD);
            // FAILED also in JAVA : test.Test(" zzzzz", cal, " Eastern Daylight Time",
             //       DateFormat.TIMEZONE_FIELD);

            format.SetTimeZone(new SimpleTimeZone(60000, "ONE MINUTE"));
            // FAILED also in JAVA : test.Test(" z", cal, " GMT+00:01", DateFormat.TIMEZONE_FIELD);
            // FAILED also in JAVA : test.Test(" zzzz", cal, " GMT+00:01", DateFormat.TIMEZONE_FIELD);
            format.SetTimeZone(new SimpleTimeZone(5400000, "ONE HOUR, THIRTY"));
            // FAILED also in JAVA : test.Test(" z", cal, " GMT+01:30", DateFormat.TIMEZONE_FIELD);
            format.SetTimeZone(new SimpleTimeZone(-5400000, "NEG ONE HOUR, THIRTY"));
            // FAILED also in JAVA : test.Test(" z", cal, " GMT-01:30", DateFormat.TIMEZONE_FIELD);

            format.ApplyPattern("'Mkz''':.@5");
            NUnit.Framework.Assert.AreEqual("Mkz':.@5", format.Format(DateTime.Now), "Wrong output");

            NUnit.Framework.Assert.IsTrue(!test.TestsFailed(), "Tests failed");

            // Test invalid args to format.
            SimpleDateFormat dateFormat = new SimpleDateFormat();
            /*try
            {
                dateFormat.Format(default(DateTime), new StringBuilder(), new FieldPosition(1));
                NUnit.Framework.Assert.Fail("Expected test to throw NPE.");
            }
            catch (NullReferenceException ex)
            {
                // expected
            }*/
        }


        /// @tests java.text.SimpleDateFormat#format(java.util.Date)
        [NUnit.Framework.Test]
        public void Test_timeZoneFormatting()
        {
            // tests specific to formatting of timezones
            DateTime summerDate = new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.JUNE, 2, 15, 3,
                    6).GetTime();
            DateTime winterDate = new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.JANUARY, 12)
                    .GetTime();

            SimpleDateFormatTest.TestFormat test = new SimpleDateFormatTest.TestFormat(
                    "test_formatLjava_util_DateLjava_lang_StringBufferLjava_text_FieldPosition");

            test.VerifyFormatTimezone("PST", "PDT, Pacific Daylight Time",
                    "-0700, GMT-07:00", summerDate);
            test.VerifyFormatTimezone("PST", "PST, Pacific Standard Time",
                    "-0800, GMT-08:00", winterDate);

            test.VerifyFormatTimezone("GMT-7", "GMT-07:00, GMT-07:00",
                    "-0700, GMT-07:00", summerDate);
            test.VerifyFormatTimezone("GMT-7", "GMT-07:00, GMT-07:00",
                    "-0700, GMT-07:00", winterDate);

            // Pacific/Kiritimati is one of the timezones supported only in mJava
            test.VerifyFormatTimezone("Pacific/Kiritimati",
                    "GMT+14:00, Line Islands Time", "+1400, GMT+14:00", summerDate);
            test.VerifyFormatTimezone("Pacific/Kiritimati",
                    "GMT+14:00, Line Islands Time", "+1400, GMT+14:00", winterDate);

            test.VerifyFormatTimezone("EST", "GMT-05:00, GMT-05:00",
                    "-0500, GMT-05:00", summerDate);
            test.VerifyFormatTimezone("EST", "GMT-05:00, GMT-05:00",
                    "-0500, GMT-05:00", winterDate);

            test.VerifyFormatTimezone("GMT+14", "GMT+14:00, GMT+14:00",
                    "+1400, GMT+14:00", summerDate);
            test.VerifyFormatTimezone("GMT+14", "GMT+14:00, GMT+14:00",
                    "+1400, GMT+14:00", winterDate);
        }


        /// @tests java.text.SimpleDateFormat#get2DigitYearStart()
        [NUnit.Framework.Test]
        public void Test_get2DigitYearStart()
        {
            // Test for method java.util.Date
            // java.text.SimpleDateFormat.get2DigitYearStart()
            SimpleDateFormat f1 = new SimpleDateFormat("y");
            DateTime date = f1.Get2DigitYearStart();
            Calendar cal = new IBM.ICU.Util.GregorianCalendar();
            int year = cal.Get(IBM.ICU.Util.Calendar.YEAR);
            cal.SetTime(date);
            NUnit.Framework.Assert.IsTrue(cal.Get(IBM.ICU.Util.Calendar.YEAR) == (year - 80), "Wrong default year start");
        }


        /// @tests java.text.SimpleDateFormat#getDateFormatSymbols()
        [NUnit.Framework.Test]
        public void Test_getDateFormatSymbols()
        {
            // Test for method java.text.DateFormatSymbols
            // java.text.SimpleDateFormat.getDateFormatSymbols()
            SimpleDateFormat df = (SimpleDateFormat)DateFormat.GetInstance();
            DateFormatSymbols dfs = df.GetDateFormatSymbols();
            NUnit.Framework.Assert.IsTrue(dfs != df.GetDateFormatSymbols(), "Symbols identical");
        }


        /// @tests java.text.SimpleDateFormat#parse(java.lang.String,
        /// java.text.ParsePosition)
        [NUnit.Framework.Test]
        public void Test_parseLjava_lang_StringLjava_text_ParsePosition()
        {
            // Test for method java.util.Date
            // java.text.SimpleDateFormat.parse(java.lang.String,
            // java.text.ParsePosition)
            SimpleDateFormatTest.TestFormat test = new SimpleDateFormatTest.TestFormat(
                    "test_formatLjava_util_DateLjava_lang_StringBufferLjava_text_FieldPosition");

            Calendar cal = new IBM.ICU.Util.GregorianCalendar(1970, IBM.ICU.Util.Calendar.JANUARY, 1);
            DateTime time = cal.GetTime();
            test.Parse("h", " 12", time, 1, 3);
            test.Parse("H", " 0", time, 1, 2);
            test.Parse("k", " 24", time, 1, 3);
            test.Parse("K", " 0", time, 1, 2);

            cal = new IBM.ICU.Util.GregorianCalendar(1970, IBM.ICU.Util.Calendar.JANUARY, 1, 1, 0);
            time = cal.GetTime();
            test.Parse("h", "1", time, 0, 1);
            test.Parse("H", "1 ", time, 0, 1);
            test.Parse("k", "1", time, 0, 1);
            test.Parse("K", "1", time, 0, 1);

            cal = new IBM.ICU.Util.GregorianCalendar(1970, IBM.ICU.Util.Calendar.JANUARY, 1, 11, 0);
            time = cal.GetTime();
            test.Parse("h", "0011 ", time, 0, 4);
            test.Parse("K", "11", time, 0, 2);
            cal = new IBM.ICU.Util.GregorianCalendar(1970, IBM.ICU.Util.Calendar.JANUARY, 1, 23, 0);
            time = cal.GetTime();
            test.Parse("H", "23", time, 0, 2);
            test.Parse("k", "23", time, 0, 2);

            test.Parse("h a", " 3 AM", new IBM.ICU.Util.GregorianCalendar(1970,
                    IBM.ICU.Util.Calendar.JANUARY, 1, 3, 0).GetTime(), 1, 5);
            test.Parse("K a", " 3 pm ", new IBM.ICU.Util.GregorianCalendar(1970,
                    IBM.ICU.Util.Calendar.JANUARY, 1, 15, 0).GetTime(), 1, 5);
            test.Parse("m:s", "0:59 ", new IBM.ICU.Util.GregorianCalendar(1970,
                    IBM.ICU.Util.Calendar.JANUARY, 1, 0, 0, 59).GetTime(), 0, 4);
            test.Parse("m:s", "59:0", new IBM.ICU.Util.GregorianCalendar(1970, IBM.ICU.Util.Calendar.JANUARY,
                    1, 0, 59, 0).GetTime(), 0, 4);
            // test.parse("ms", "059", new IBM.ICU.Util.GregorianCalendar(1970, Calendar.JANUARY,
            // 1, 0, 0, 59).getTime(), 0, 3);

            cal = new IBM.ICU.Util.GregorianCalendar(1970, IBM.ICU.Util.Calendar.JANUARY, 1);
            test.Parse("S", "0", cal.GetTime(), 0, 1);
            cal.SetTimeZone(IBM.ICU.Util.TimeZone.GetTimeZone("HST"));
            cal.Set(IBM.ICU.Util.Calendar.MILLISECOND, 999);
            test.Parse("S z", "999 HST", cal.GetTime(), 0, 7);

            cal = new IBM.ICU.Util.GregorianCalendar(1970, IBM.ICU.Util.Calendar.JANUARY, 1);
            cal.Set(IBM.ICU.Util.Calendar.ERA, IBM.ICU.Util.GregorianCalendar.BC);
            // test.parse("G", "Bc ", cal.getTime(), 0, 2);

            /*test.Parse("y", "00",
                    new IBM.ICU.Util.GregorianCalendar(2000, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0,
                    2);
            test.Parse("y", "99",
                    new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0,
                    2);*/
            /*test.Parse("y", "1",
                    new IBM.ICU.Util.GregorianCalendar(1, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0, 1);
            test.Parse("y", "-1",
                    new IBM.ICU.Util.GregorianCalendar(-1, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0, 2);
            test.Parse("y", "001",
                    new IBM.ICU.Util.GregorianCalendar(1, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0, 3);*/
            test.Parse("y", "2005",
                    new IBM.ICU.Util.GregorianCalendar(2005, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0,
                    4);
            test.Parse("yy", "00",
                    new IBM.ICU.Util.GregorianCalendar(2000, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0,
                    2);
            test.Parse("yy", "99",
                    new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0,
                    2);
            /*test.Parse("yy", "1",
                    new IBM.ICU.Util.GregorianCalendar(1, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0, 1);
            test.Parse("yy", "-1",
                    new IBM.ICU.Util.GregorianCalendar(-1, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0, 2);
            test.Parse("yy", "001",
                    new IBM.ICU.Util.GregorianCalendar(1, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0, 3);*/
            test.Parse("yy", "2005", new IBM.ICU.Util.GregorianCalendar(2005, IBM.ICU.Util.Calendar.JANUARY,
                    1).GetTime(), 0, 4);
            test.Parse("yyy", "99",
                    new IBM.ICU.Util.GregorianCalendar(99, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0, 2);
           /* test.Parse("yyy", "1",
                    new IBM.ICU.Util.GregorianCalendar(1, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0, 1);
            test.Parse("yyy", "-1",
                    new IBM.ICU.Util.GregorianCalendar(-1, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0, 2);
            test.Parse("yyy", "001",
                    new IBM.ICU.Util.GregorianCalendar(1, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0, 3);*/
            test.Parse("yyy", "2005", new IBM.ICU.Util.GregorianCalendar(2005, IBM.ICU.Util.Calendar.JANUARY,
                    1).GetTime(), 0, 4);
            test.Parse("yyyy", "99",
                    new IBM.ICU.Util.GregorianCalendar(99, IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 0, 2);
            test.Parse("yyyy", "  1999", new IBM.ICU.Util.GregorianCalendar(1999,
                    IBM.ICU.Util.Calendar.JANUARY, 1).GetTime(), 2, 6);
            test.Parse("MM'M'", "4M",
                    new IBM.ICU.Util.GregorianCalendar(1970, IBM.ICU.Util.Calendar.APRIL, 1).GetTime(), 0, 2);
            test.Parse("MMM", "Feb", new IBM.ICU.Util.GregorianCalendar(1970, IBM.ICU.Util.Calendar.FEBRUARY,
                    1).GetTime(), 0, 3);
            test.Parse("MMMM d", "April 14 ", new IBM.ICU.Util.GregorianCalendar(1970,
                    IBM.ICU.Util.Calendar.APRIL, 14).GetTime(), 0, 8);
            test.Parse("MMMMd", "April14 ", new IBM.ICU.Util.GregorianCalendar(1970,
                    IBM.ICU.Util.Calendar.APRIL, 14).GetTime(), 0, 7);
            test.Parse("E w", "Mon 12", new IBM.ICU.Util.GregorianCalendar(1970, IBM.ICU.Util.Calendar.MARCH,
                    16).GetTime(), 0, 6);
            test.Parse("Ew", "Mon12", new IBM.ICU.Util.GregorianCalendar(1970, IBM.ICU.Util.Calendar.MARCH,
                    16).GetTime(), 0, 5);
            test.Parse("M EE ''W", "5 Tue '2", new IBM.ICU.Util.GregorianCalendar(1970,
                    IBM.ICU.Util.Calendar.MAY, 5).GetTime(), 0, 8);
            test.Parse("MEE''W", "5Tue'2", new IBM.ICU.Util.GregorianCalendar(1970,
                    IBM.ICU.Util.Calendar.MAY, 5).GetTime(), 0, 6);
            test.Parse("MMM EEE F", " JUL Sunday 3", new IBM.ICU.Util.GregorianCalendar(1970,
                    IBM.ICU.Util.Calendar.JULY, 19).GetTime(), 1, 13);
            test.Parse("MMMEEEF", " JULSunday3", new IBM.ICU.Util.GregorianCalendar(1970,
                    IBM.ICU.Util.Calendar.JULY, 19).GetTime(), 1, 11);

            cal = new IBM.ICU.Util.GregorianCalendar(1970, IBM.ICU.Util.Calendar.JANUARY, 1);
            cal.SetTimeZone(IBM.ICU.Util.TimeZone.GetTimeZone("GMT+0:1"));
            cal.Set(IBM.ICU.Util.Calendar.DAY_OF_YEAR, 243);
            //test.Parse("D z", "243 GMT+0:0", cal.GetTime(), 0, 11);
            cal.SetTimeZone(IBM.ICU.Util.TimeZone.GetTimeZone("EST"));
            cal.Set(1970, IBM.ICU.Util.Calendar.JANUARY, 1, 4, 30);
            test.Parse("h:m z", "4:30 GMT-5 ", cal.GetTime(), 0, 10);
            //test.Parse("h z", "14 GMT-24 ", new DateTime((51840000)/**10000*/), 0, 9);
            test.Parse("h z", "14 GMT-23 ", ILOG.J2CsMapping.Util.DateUtil.DateFromJavaMillis(133200000), 0, 9);
            //test.Parse("h z", "14 GMT-0001 ", new DateTime((54000000)/**10000*/), 0, 11);
            //test.Parse("h z", "14 GMT+24 ", new DateTime((48960000)/**10000*/), 0, 9);
            test.Parse("h z", "14 GMT+23 ", ILOG.J2CsMapping.Util.DateUtil.DateFromJavaMillis((-32400000)/**10000*/), 0, 9);
            //test.Parse("h z", "14 GMT+0001 ", new DateTime((46800000)/**10000*/), 0, 11);
            //test.Parse("h z", "14 +0001 ", new DateTime((46800000)/**10000*/), 0, 8);
            //test.Parse("h z", "14 -0001 ", new DateTime((54000000)/**10000*/), 0, 8);

            test.Parse("yyyyMMddHHmmss", "19990913171901", new IBM.ICU.Util.GregorianCalendar(
                    1999, IBM.ICU.Util.Calendar.SEPTEMBER, 13, 17, 19, 0x1).GetTime(), 0, 14);

            DateTime d = ILOG.J2CsMapping.Util.DateUtil.DateFromJavaMillis(1015822800000L);
            SimpleDateFormat df = new SimpleDateFormat("", new ILOG.J2CsMapping.Util.Locale("en", "US"));
            df.SetTimeZone(IBM.ICU.Util.TimeZone.GetTimeZone("EST"));

            try
            {
                df.ApplyPattern("dd MMMM yyyy EEEE");
                String output = df.Format(d);
                DateTime date = df.Parse(output);
                NUnit.Framework.Assert.IsTrue(d.Equals(date), "Invalid result 1: " + date);

                df.ApplyPattern("dd MMMM yyyy F");
                output = df.Format(d);
                date = df.Parse(output);
                NUnit.Framework.Assert.IsTrue(d.Equals(date), "Invalid result 2: " + date);

                df.ApplyPattern("dd MMMM yyyy w");
                output = df.Format(d);
                date = df.Parse(output);
                NUnit.Framework.Assert.IsTrue(d.Equals(date), "Invalid result 3: " + date);

                df.ApplyPattern("dd MMMM yyyy W");
                output = df.Format(d);
                date = df.Parse(output);
                NUnit.Framework.Assert.IsTrue(d.Equals(date), "Invalid result 4: " + date);

                df.ApplyPattern("dd MMMM yyyy D");
                date = df.Parse("5 January 2002 70");
                NUnit.Framework.Assert.IsTrue(d.Equals(date), "Invalid result 5: " + date);

                df.ApplyPattern("W w dd MMMM yyyy EEEE");
                output = df.Format(d);
                date = df.Parse("3 12 5 March 2002 Monday");
                // NUnit.Framework.Assert.IsTrue(d.Equals(date), "Invalid result 6: " + date);

                df.ApplyPattern("w W dd MMMM yyyy EEEE");
                output = df.Format(d);
                date = df.Parse("12 3 5 March 2002 Monday");
               //  NUnit.Framework.Assert.IsTrue(d.Equals(date), "Invalid result 6a: " + date);

                df.ApplyPattern("F dd MMMM yyyy EEEE");
                output = df.Format(d);
                date = df.Parse("2 5 March 2002 Monday");
                NUnit.Framework.Assert.IsTrue(d.Equals(date), "Invalid result 7: " + date);

                df.ApplyPattern("w dd MMMM yyyy EEEE");
                output = df.Format(d);
                date = df.Parse("11 5 January 2002 Monday");
                NUnit.Framework.Assert.IsTrue(d.Equals(date), "Invalid result 8: " + date);

                df.ApplyPattern("w dd yyyy EEEE MMMM");
                output = df.Format(d);
                date = df.Parse("11 5 2002 Monday January");
                NUnit.Framework.Assert.IsTrue(d.Equals(date), "Invalid result 9: " + date);

                df.ApplyPattern("w yyyy EEEE MMMM dd");
                output = df.Format(d);
                date = df.Parse("17 2002 Monday March 11");
                NUnit.Framework.Assert.IsTrue(d.Equals(date), "Invalid result 10: " + date);

                df.ApplyPattern("dd D yyyy MMMM");
                output = df.Format(d);
                date = df.Parse("5 70 2002 January");
                NUnit.Framework.Assert.IsTrue(d.Equals(date), "Invalid result 11: " + date);

                df.ApplyPattern("D dd yyyy MMMM");
                output = df.Format(d);
                date = df.Parse("240 11 2002 March");
                NUnit.Framework.Assert.IsTrue(d.Equals(date), "Invalid result 12: " + date);
            }
            catch (ILOG.J2CsMapping.Util.ParseException e)
            {
                NUnit.Framework.Assert.Fail("unexpected: " + e);
            }
        }


        /// @tests java.text.SimpleDateFormat#set2DigitYearStart(java.util.Date)
        [NUnit.Framework.Test]
        public void Test_set2DigitYearStartLjava_util_Date()
        {
            // Test for method void
            // java.text.SimpleDateFormat.set2DigitYearStart(java.util.Date)
            SimpleDateFormat f1 = new SimpleDateFormat("yy");
            f1.Set2DigitYearStart(new IBM.ICU.Util.GregorianCalendar(1950, IBM.ICU.Util.Calendar.JANUARY, 1)
                    .GetTime());
            Calendar cal = new IBM.ICU.Util.GregorianCalendar();
            try
            {
                cal.SetTime(f1.Parse("49"));
                NUnit.Framework.Assert.AreEqual(2049, cal.Get(IBM.ICU.Util.Calendar.YEAR), "Incorrect year 2049");
                cal.SetTime(f1.Parse("50"));
                int year = cal.Get(IBM.ICU.Util.Calendar.YEAR);
                NUnit.Framework.Assert.IsTrue(year == 1950, "Incorrect year 1950: " + year);
                f1.ApplyPattern("y");
                //cal.SetTime(f1.Parse("00"));
                // NUnit.Framework.Assert.AreEqual(2000, cal.Get(IBM.ICU.Util.Calendar.YEAR), "Incorrect year 2000");
                f1.ApplyPattern("yyy");
                cal.SetTime(f1.Parse("50"));
                NUnit.Framework.Assert.AreEqual(50, cal.Get(IBM.ICU.Util.Calendar.YEAR), "Incorrect year 50");
            }
            catch (ILOG.J2CsMapping.Util.ParseException e)
            {
                NUnit.Framework.Assert.Fail("ParseException");
            }
        }


        /// @tests java.text.SimpleDateFormat#setDateFormatSymbols(java.text.
        /// DateFormatSymbols)
        [NUnit.Framework.Test]
        public void Test_setDateFormatSymbolsLjava_text_DateFormatSymbols()
        {
            // Test for method void
            // java.text.SimpleDateFormat.setDateFormatSymbols(java.text.DateFormatSymbols)
            SimpleDateFormat f1 = new SimpleDateFormat("a");
            DateFormatSymbols symbols = new DateFormatSymbols();
            symbols.SetAmPmStrings(new String[] { "morning", "night" });
            f1.SetDateFormatSymbols(symbols);
            DateFormatSymbols newSym = f1.GetDateFormatSymbols();
            NUnit.Framework.Assert.IsTrue(newSym.Equals(symbols), "Set incorrectly");
            NUnit.Framework.Assert.IsTrue(f1.GetDateFormatSymbols() != symbols, "Not a clone");
            String result = f1.Format(new IBM.ICU.Util.GregorianCalendar(1999, IBM.ICU.Util.Calendar.JUNE,
                    12, 3, 0).GetTime());
            NUnit.Framework.Assert.AreEqual("morning", result, "Incorrect symbols used");
            symbols.SetEras(new String[] { "before", "after" });
            NUnit.Framework.Assert.IsTrue(!f1.GetDateFormatSymbols().Equals(symbols), "Identical symbols");
        }


        /// @tests java.text.SimpleDateFormat#toLocalizedPattern()
        [NUnit.Framework.Ignore]
        public void Test_toLocalizedPattern()
        {
            // Test for method java.lang.String
            // java.text.SimpleDateFormat.toLocalizedPattern()
            SimpleDateFormat f2 = new SimpleDateFormat("GyMdkHmsSEDFwWahKz",
                    new ILOG.J2CsMapping.Util.Locale("de", "CH"));
            String pattern = f2.ToLocalizedPattern();
            NUnit.Framework.Assert.IsTrue(pattern.Equals("GuMtkHmsSEDFwWahKz"), "Wrong pattern: " + pattern);

            // test the new "Z" pattern char
            f2 = new SimpleDateFormat("G y M d Z", new ILOG.J2CsMapping.Util.Locale("de", "CH"));
            pattern = f2.ToLocalizedPattern();
            NUnit.Framework.Assert.IsTrue(pattern.Equals("G u M t Z"), "Wrong pattern: " + pattern);
        }


        /// @tests java.text.SimpleDateFormat#parse(java.lang.String,
        /// java.text.ParsePosition)
        [NUnit.Framework.Test]
        public void Test_parse_with_spaces()
        {
            // Regression for HARMONY-502
            SimpleDateFormat df = new SimpleDateFormat("HH:mm:ss");
            df.SetLenient(false);

            char[] allowed_chars = { (char)0x9, (char)0x20 };
            String[] allowed_char_names = { "tab", "space" };
            for (int i = 0; i < allowed_chars.Length; i++)
            {
                DateTime expected = new IBM.ICU.Util.GregorianCalendar(1970, IBM.ICU.Util.Calendar.JANUARY, 1, 9,
                        7, 6).GetTime();
                ParsePosition pp = new ParsePosition(0);
                DateTime d = df.Parse(allowed_chars[i] + "9:07:06", pp);
                NUnit.Framework.Assert.IsNotNull(d, "hour may be prefixed by " + allowed_char_names[i]);
                NUnit.Framework.Assert.AreEqual(expected, d);

                pp = new ParsePosition(0);
                d = df.Parse("09:" + allowed_chars[i] + "7:06", pp);
                NUnit.Framework.Assert.IsNotNull(d, "minute may be prefixed by " + allowed_char_names[i]);
                NUnit.Framework.Assert.AreEqual(expected, d);

                pp = new ParsePosition(0);
                d = df.Parse("09:07:" + allowed_chars[i] + "6", pp);
                NUnit.Framework.Assert.IsNotNull(d, "second may be prefixed by " + allowed_char_names[i]);
                NUnit.Framework.Assert.AreEqual(expected, d);
            }

            char[] not_allowed_chars = { (char) 0x1c, (char) 0x1d, (char) 0x1e, (char) 0x1f, (char) 0xa, (char) 0xb, (char) 0xc,
	                (char) 0xd, (char) 0x2001, (char) 0x2002, (char) 0x2003, (char) 0x2004, (char) 0x2005, (char) 0x2006, (char) 0x2008,
	                (char) 0x2009, (char) 0x200a, (char) 0x200b, (char) 0x2028, (char) 0x2029, (char) 0x3000, (char) 0xA0, (char) 0x2007,
	                (char) 0x202F };

            for (int i_0 = 0; i_0 < not_allowed_chars.Length; i_0++)
            {
                ParsePosition pp_1 = new ParsePosition(0);
                DateTime d_2 = df.Parse(not_allowed_chars[i_0] + "9:07", pp_1);
                NUnit.Framework.Assert.AreEqual(d_2, default(DateTime));

                pp_1 = new ParsePosition(0);
                d_2 = df.Parse("09:" + not_allowed_chars[i_0] + "7", pp_1);
                NUnit.Framework.Assert.AreEqual(d_2, default(DateTime));

                pp_1 = new ParsePosition(0);
                d_2 = df.Parse("09:07:" + not_allowed_chars[i_0] + "6", pp_1);
               // NUnit.Framework.Assert.AreEqual(d_2, default(DateTime));
            }
        }
    }
}
