/* 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 namespace Text2 {
	
	using ILOG.J2CsMapping.IO;
	using ILOG.J2CsMapping.Text;
	using Junit.Framework;
	using NUnit;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Globalization;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	[NUnit.Framework.TestFixture]
	public class DecimalFormatSymbolsTest {
	
		internal NumberFormatInfo dfs;
	
		internal NumberFormatInfo dfsUS;
	
		
		/// @tests java.text.DecimalFormatSymbols#DecimalFormatSymbols()
		[NUnit.Framework.Test]
		public void Test_Constructor() {
			// Test for method java.text.DecimalFormatSymbols()
			// Used in tests
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#DecimalFormatSymbols(java.util.Locale)
		[NUnit.Framework.Test]
		public void Test_ConstructorLjava_util_Locale() {
			NumberFormatInfo dfs_0 = NumberFormatInfo.GetInstance(ILOG.J2CsMapping.Util.Culture.CultureInfoHelper.CreateCultureInfo("en","us"));
			Junit.Framework.Assert.AssertEquals("Returned incorrect symbols", '%', dfs_0.GetPercent());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#equals(java.lang.Object)
		[NUnit.Framework.Test]
		public void Test_equalsLjava_lang_Object() {
			Junit.Framework.Assert.AssertTrue("Equal objects returned false", dfs.Equals(dfs.Clone()));
			dfs.SetDigit('B');
			Junit.Framework.Assert.AssertTrue("Un-Equal objects returned true", !dfs
					.Equals(new NumberFormatInfo()));
	
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#getCurrency()
		[NUnit.Framework.Test]
		public void Test_getCurrency() {
			Currency currency = System.Collections.Currency.GetInstance("USD");
			Junit.Framework.Assert.AssertEquals("Returned incorrect currency", dfsUS.GetCurrency(),
					currency);
	
			Currency currK = System.Collections.Currency.GetInstance("KRW");
			Currency currX = System.Collections.Currency.GetInstance("XXX");
			Currency currE = System.Collections.Currency.GetInstance("EUR");
			// Currency currF = Currency.getInstance("FRF");
	
			NumberFormatInfo dfs1 = NumberFormatInfo.GetInstance(ILOG.J2CsMapping.Util.Culture.CultureInfoHelper.CreateCultureInfo("ko","KR"));
			Junit.Framework.Assert.AssertTrue("Test1: Returned incorrect currency",
					dfs1.GetCurrency() == currK);
			Junit.Framework.Assert.AssertEquals("Test1: Returned incorrect currencySymbol", "\uffe6", dfs1
					.GetCurrencySymbol());
			Junit.Framework.Assert.AssertEquals("Test1: Returned incorrect intlCurrencySymbol", "KRW",
					dfs1.GetInternationalCurrencySymbol());
	
			dfs1 = NumberFormatInfo.GetInstance(ILOG.J2CsMapping.Util.Culture.CultureInfoHelper.CreateCultureInfo("","KR"));
			Junit.Framework.Assert.AssertTrue("Test2: Returned incorrect currency",
					dfs1.GetCurrency() == currK);
			Junit.Framework.Assert.AssertEquals("Test2: Returned incorrect currencySymbol", "KRW", dfs1
					.GetCurrencySymbol());
			Junit.Framework.Assert.AssertEquals("Test2: Returned incorrect intlCurrencySymbol", "KRW",
					dfs1.GetInternationalCurrencySymbol());
	
			dfs1 = NumberFormatInfo.GetInstance(ILOG.J2CsMapping.Util.Culture.CultureInfoHelper.CreateCultureInfo("ko",""));
			Junit.Framework.Assert.AssertTrue("Test3: Returned incorrect currency",
					dfs1.GetCurrency() == currX);
			Junit.Framework.Assert.AssertEquals("Test3: Returned incorrect currencySymbol", "\u00a4", dfs1
					.GetCurrencySymbol());
			Junit.Framework.Assert.AssertEquals("Test3: Returned incorrect intlCurrencySymbol", "XXX",
					dfs1.GetInternationalCurrencySymbol());
	
			dfs1 = NumberFormatInfo.GetInstance(ILOG.J2CsMapping.Util.Culture.CultureInfoHelper.CreateCultureInfo("fr","FR"));
			Junit.Framework.Assert.AssertTrue("Test4: Returned incorrect currency",
					dfs1.GetCurrency() == currE);
			Junit.Framework.Assert.AssertEquals("Test4: Returned incorrect currencySymbol", "\u20ac", dfs1
					.GetCurrencySymbol());
			Junit.Framework.Assert.AssertEquals("Test4: Returned incorrect intlCurrencySymbol", "EUR",
					dfs1.GetInternationalCurrencySymbol());
	
			// RI fails these tests since it doesn't have the PREEURO variant
			// dfs1 = new DecimalFormatSymbols(new Locale("fr", "FR","PREEURO"));
			// assertTrue("Test5: Returned incorrect currency", dfs1.getCurrency()
			// == currF);
			// assertTrue("Test5: Returned incorrect currencySymbol",
			// dfs1.getCurrencySymbol().equals("F"));
			// assertTrue("Test5: Returned incorrect intlCurrencySymbol",
			// dfs1.getInternationalCurrencySymbol().equals("FRF"));
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#getCurrencySymbol()
		[NUnit.Framework.Test]
		public void Test_getCurrencySymbol() {
			Junit.Framework.Assert.AssertEquals("Returned incorrect currencySymbol", "$", dfsUS
					.GetCurrencySymbol());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#getDecimalSeparator()
		[NUnit.Framework.Test]
		public void Test_getDecimalSeparator() {
			dfs.SetDecimalSeparator('*');
			Junit.Framework.Assert.AssertEquals("Returned incorrect DecimalSeparator symbol", '*', dfs.NumberDecimalSeparator[0]);
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#getDigit()
		[NUnit.Framework.Test]
		public void Test_getDigit() {
			dfs.SetDigit('*');
			Junit.Framework.Assert.AssertEquals("Returned incorrect Digit symbol", '*', dfs.GetDigit());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#getGroupingSeparator()
		[NUnit.Framework.Test]
		public void Test_getGroupingSeparator() {
			dfs.SetGroupingSeparator('*');
			Junit.Framework.Assert.AssertEquals("Returned incorrect GroupingSeparator symbol", '*', dfs.NumberGroupSeparator[0]);
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#getInfinity()
		[NUnit.Framework.Test]
		public void Test_getInfinity() {
			dfs.SetInfinity("&");
			Junit.Framework.Assert.AssertTrue("Returned incorrect Infinity symbol",
					dfs.GetInfinity() == "&");
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#getInternationalCurrencySymbol()
		[NUnit.Framework.Test]
		public void Test_getInternationalCurrencySymbol() {
			Junit.Framework.Assert.AssertEquals("Returned incorrect InternationalCurrencySymbol", "USD",
					dfsUS.GetInternationalCurrencySymbol());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#getMinusSign()
		[NUnit.Framework.Test]
		public void Test_getMinusSign() {
			dfs.SetMinusSign('&');
			Junit.Framework.Assert.AssertEquals("Returned incorrect MinusSign symbol", '&', dfs
					.GetMinusSign());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#getNaN()
		[NUnit.Framework.Test]
		public void Test_getNaN() {
			dfs.SetNaN("NAN!!");
			Junit.Framework.Assert.AssertEquals("Returned incorrect nan symbol", "NAN!!", dfs.GetNaN());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#getPatternSeparator()
		[NUnit.Framework.Test]
		public void Test_getPatternSeparator() {
			dfs.SetPatternSeparator('X');
			Junit.Framework.Assert.AssertEquals("Returned incorrect PatternSeparator symbol", 'X', dfs
					.GetPatternSeparator());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#getPercent()
		[NUnit.Framework.Test]
		public void Test_getPercent() {
			dfs.SetPercent('*');
			Junit.Framework.Assert.AssertEquals("Returned incorrect Percent symbol", '*', dfs.GetPercent());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#getPerMill()
		[NUnit.Framework.Test]
		public void Test_getPerMill() {
			dfs.SetPerMill('#');
			Junit.Framework.Assert.AssertEquals("Returned incorrect PerMill symbol", '#', dfs.GetPerMill());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#getZeroDigit()
		[NUnit.Framework.Test]
		public void Test_getZeroDigit() {
			dfs.SetZeroDigit('*');
			Junit.Framework.Assert.AssertEquals("Returned incorrect ZeroDigit symbol", '*', dfs
					.GetZeroDigit());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#setCurrency(java.util.Currency)
		[NUnit.Framework.Test]
		public void Test_setCurrencyLjava_util_Currency() {
			CultureInfo locale = System.Globalization.CultureInfo.CANADA;
			NumberFormatInfo dfs_0 = ((DummyFormat) ILOG.J2CsMapping.Text.NumberFormat
					.GetCurrencyInstance(locale)).GetDecimalFormatSymbols();
	
			try {
				dfs_0.SetCurrency(null);
				Junit.Framework.Assert.Fail("Expected NullPointerException");
			} catch (NullReferenceException e) {
			}
	
			Currency currency = System.Collections.Currency.GetInstance("JPY");
			dfs_0.SetCurrency(currency);
	
			Junit.Framework.Assert.AssertTrue("Returned incorrect currency", currency == dfs_0.GetCurrency());
			Junit.Framework.Assert.AssertEquals("Returned incorrect currency symbol", currency
					.GetSymbol(locale), dfs_0.GetCurrencySymbol());
			Junit.Framework.Assert.AssertTrue("Returned incorrect international currency symbol", currency
					.GetCurrencyCode().Equals(dfs_0.GetInternationalCurrencySymbol()));
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#setDecimalSeparator(char)
		[NUnit.Framework.Test]
		public void Test_setDecimalSeparatorC() {
			dfs.SetDecimalSeparator('*');
			Junit.Framework.Assert.AssertEquals("Returned incorrect DecimalSeparator symbol", '*', dfs.NumberDecimalSeparator[0]);
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#setDigit(char)
		[NUnit.Framework.Test]
		public void Test_setDigitC() {
			dfs.SetDigit('*');
			Junit.Framework.Assert.AssertEquals("Returned incorrect Digit symbol", '*', dfs.GetDigit());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#setGroupingSeparator(char)
		[NUnit.Framework.Test]
		public void Test_setGroupingSeparatorC() {
			dfs.SetGroupingSeparator('*');
			Junit.Framework.Assert.AssertEquals("Returned incorrect GroupingSeparator symbol", '*', dfs.NumberGroupSeparator[0]);
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#setInfinity(java.lang.String)
		[NUnit.Framework.Test]
		public void Test_setInfinityLjava_lang_String() {
			dfs.SetInfinity("&");
			Junit.Framework.Assert.AssertTrue("Returned incorrect Infinity symbol",
					dfs.GetInfinity() == "&");
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#setInternationalCurrencySymbol(java.lang.String)
		[NUnit.Framework.Test]
		public void Test_setInternationalCurrencySymbolLjava_lang_String() {
			CultureInfo locale = System.Globalization.CultureInfo.CANADA;
			NumberFormatInfo dfs_0 = ((DummyFormat) ILOG.J2CsMapping.Text.NumberFormat
					.GetCurrencyInstance(locale)).GetDecimalFormatSymbols();
			Currency currency = System.Collections.Currency.GetInstance("JPY");
			dfs_0.SetInternationalCurrencySymbol(currency.GetCurrencyCode());
	
			Junit.Framework.Assert.AssertTrue("Test1: Returned incorrect currency", currency == dfs_0
					.GetCurrency());
			Junit.Framework.Assert.AssertEquals("Test1: Returned incorrect currency symbol", currency
					.GetSymbol(locale), dfs_0.GetCurrencySymbol());
			Junit.Framework.Assert.AssertTrue("Test1: Returned incorrect international currency symbol",
					currency.GetCurrencyCode().Equals(
							dfs_0.GetInternationalCurrencySymbol()));
	
			dfs_0.SetInternationalCurrencySymbol("bogus");
			// RI support this legacy country code
			// assertNotNull("Test2: Returned incorrect currency", dfs.getCurrency());
			Junit.Framework.Assert.AssertEquals("Test2: Returned incorrect international currency symbol",
					"bogus", dfs_0.GetInternationalCurrencySymbol());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#setMinusSign(char)
		[NUnit.Framework.Test]
		public void Test_setMinusSignC() {
			dfs.SetMinusSign('&');
			Junit.Framework.Assert.AssertEquals("Returned incorrect MinusSign symbol", '&', dfs
					.GetMinusSign());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#setNaN(java.lang.String)
		[NUnit.Framework.Test]
		public void Test_setNaNLjava_lang_String() {
			dfs.SetNaN("NAN!!");
			Junit.Framework.Assert.AssertEquals("Returned incorrect nan symbol", "NAN!!", dfs.GetNaN());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#setPatternSeparator(char)
		[NUnit.Framework.Test]
		public void Test_setPatternSeparatorC() {
			dfs.SetPatternSeparator('X');
			Junit.Framework.Assert.AssertEquals("Returned incorrect PatternSeparator symbol", 'X', dfs
					.GetPatternSeparator());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#setPercent(char)
		[NUnit.Framework.Test]
		public void Test_setPercentC() {
			dfs.SetPercent('*');
			Junit.Framework.Assert.AssertEquals("Returned incorrect Percent symbol", '*', dfs.GetPercent());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#setPerMill(char)
		[NUnit.Framework.Test]
		public void Test_setPerMillC() {
			dfs.SetPerMill('#');
			Junit.Framework.Assert.AssertEquals("Returned incorrect PerMill symbol", '#', dfs.GetPerMill());
		}
	
		
		/// @tests java.text.DecimalFormatSymbols#setZeroDigit(char)
		[NUnit.Framework.Test]
		public void Test_setZeroDigitC() {
			dfs.SetZeroDigit('*');
			Junit.Framework.Assert.AssertEquals("Set incorrect ZeroDigit symbol", '*', dfs.GetZeroDigit());
		}
	
		/// <summary>
		/// Sets up the fixture, for example, open a network connection. This method
		/// is called before a test is executed.
		/// </summary>
		///
		[NUnit.Framework.SetUp]
		protected internal override void SetUp() {
			dfs = new NumberFormatInfo();
			dfsUS = NumberFormatInfo.GetInstance(ILOG.J2CsMapping.Util.Culture.CultureInfoHelper.CreateCultureInfo("en","us"));
		}
	
		/// <summary>
		/// Tears down the fixture, for example, close a network connection. This
		/// method is called after a test is executed.
		/// </summary>
		///
		[NUnit.Framework.TearDown]
		protected internal override void TearDown() {
		}
	
		// Test serialization mechanism of DecimalFormatSymbols
		[NUnit.Framework.Test]
		public void Test_serialization() {
			NumberFormatInfo symbols = NumberFormatInfo.GetInstance(ILOG.J2CsMapping.Util.Culture.CultureInfoHelper.FRANCE);
			Currency currency = symbols.GetCurrency();
			Junit.Framework.Assert.AssertNotNull(currency);
	
			// serialize
			MemoryStream byteOStream = new MemoryStream();
			IlObjectOutputStream objectOStream = new IlObjectOutputStream(byteOStream);
			objectOStream.WriteObject(symbols);
	
			// and deserialize
			IlObjectInputStream objectIStream = new IlObjectInputStream(
					new MemoryStream(byteOStream.ToArray()));
			NumberFormatInfo symbolsD = (NumberFormatInfo) objectIStream
					.ReadObject();
	
			// The associated currency will not persist
			currency = symbolsD.GetCurrency();
			Junit.Framework.Assert.AssertNotNull(currency);
		}
	
		// Use RI to write DecimalFormatSymbols out, use Harmony to read
		// DecimalFormatSymbols in. The read symbol will be equal with those
		// instantiated inside Harmony.
	
		// This assertion will not come into existence the other way around. This is
		// probably caused by different serialization mechanism used by RI and
		// Harmony.
		[NUnit.Framework.Test]
		public void Test_RIHarmony_compatible() {
			IlObjectInputStream i = null;
			try {
				NumberFormatInfo symbols = NumberFormatInfo.GetInstance(ILOG.J2CsMapping.Util.Culture.CultureInfoHelper.FRANCE);
				i = new IlObjectInputStream(
						ILOG.J2CsMapping.IO.IOUtility.GetResourceAsStream(GetType().Assembly,"/serialization/java/text/DecimalFormatSymbols.ser"));
				NumberFormatInfo symbolsD = (NumberFormatInfo) i
						.ReadObject();
				Junit.Framework.Assert.AssertEquals(symbols, symbolsD);
			} finally {
				try {
					if (i != null) {
						((Stream) i).Close();
					}
				} catch (Exception e) {
					// ignore
				}
			}
		}
	}
}
