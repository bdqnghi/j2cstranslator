// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2001-2007, International Business Machines Corporation and    
/// others. All Rights Reserved.                                                
/// </summary>
///
namespace IBM.ICU.Charset {
	
	using IBM.ICU.Impl;
	
	public class ICUServiceThreadTest : TestFmwk {
	    private const bool PRINTSTATS = false;
	
	    public static void Main(String[] args) {
	        ICUServiceThreadTest test = new ICUServiceThreadTest();
	        test.Run(args);
	
	        // get
	        // getvisibleids
	        // getdisplayname(locale)
	        // factories
	
	        // registerFactory
	        // unregisterFactory
	
	        // 1) concurrent access
	        // 2) access while factories change
	        // 3) iteration while factories change
	        // 4) concurrent conflicting access
	    }
	
	    private static readonly String[] countries = { "ab", "bc", "cd", "de", "ef",
	            "fg", "gh", "ji", "ij", "jk" };
	
	    private static readonly String[] languages = { "", "ZY", "YX", "XW", "WV",
	            "VU", "UT", "TS", "SR", "RQ", "QP" };
	
	    private static readonly String[] variants = { "", "", "", "GOLD", "SILVER",
	            "BRONZE" };
	
	    public sealed class Anonymous_C0 : IComparer {
	        public int Compare(Object lhs, Object rhs) {
	            return String.CompareOrdinal(lhs.ToString(),rhs.ToString());
	        }
	    }
	
	    private class TestFactory : IBM.ICU.Impl.ICUService.SimpleFactory  {
	        internal TestFactory(String id) : base(new ULocale(id), id, true) {
	        }
	
	        public override String GetDisplayName(String idForDisplay, ULocale locale) {
	            return (visible && idForDisplay.Equals(this.id)) ? "("
	                    + locale.ToString() + ") " + idForDisplay : null;
	        }
	
	        public override String ToString() {
	            return "Factory_" + id;
	        }
	    }
	
	    /// <summary>
	    /// Convenience override of getDisplayNames(ULocale, Comparator, String) that
	    /// uses the default collator for the locale as the comparator to sort the
	    /// display names, and null for the matchID.
	    /// </summary>
	    ///
	    public static SortedList GetDisplayNames(ICUService service, ULocale locale) {
	        Collator col;
	        try {
	            col = IBM.ICU.Text.Collator.GetInstance(locale);
	        } catch (MissingManifestResourceException e) {
	            // if no collator resources, we can't collate
	            col = null;
	        }
	        return service.GetDisplayNames(locale, col, null);
	    }
	
	    private static readonly Random r = new Random(); // this is a multi thread
	                                                  // test, can't 'unrandomize'
	
	    private static String GetCLV() {
	        String c = countries[r.Next(countries.Length)];
	        String l = languages[r.Next(languages.Length)];
	        String v = variants[r.Next(variants.Length)];
	        return new CultureInfo(c, l, v).ToString();
	    }
	
	    private static bool WAIT = true;
	
	    private static bool GO = false;
	
	    private static long TIME = 5000;
	
	    public static void RunThreads() {
	        RunThreads(TIME);
	    }
	
	    public static void RunThreads(long time) {
	        try {
	            GO = true;
	            WAIT = false;
	
	            ILOG.J2CsMapping.Threading.ThreadWrapper.Sleep(time);
	
	            WAIT = true;
	            GO = false;
	
	            ILOG.J2CsMapping.Threading.ThreadWrapper.Sleep(300);
	        } catch (ThreadInterruptedException e) {
	        }
	    }
	
	    internal class TestThread : ThreadWrapper {
	        // private final String name;
	        protected internal ICUService service;
	
	        private readonly long delay;
	
	        protected internal readonly TestLog log;
	
	        public TestThread(String name, ICUService service_0, long delay_1,
	                TestLog log_2) {
	            // this.name = name + " ";
	            this.service = service_0;
	            this.delay = delay_1;
	            this.log = new AbstractTestLog.DelegatingLog (log_2);
	            this.IsDaemon = true;
	        }
	
	        public override void Run() {
	            while (IBM.ICU.Charset.ICUServiceThreadTest.WAIT) {
	                ILOG.J2CsMapping.Threading.ThreadWrapper.Yield();
	            }
	
	            try {
	                while (IBM.ICU.Charset.ICUServiceThreadTest.GO) {
	                    Iterate();
	                    if (delay > 0) {
	                        ILOG.J2CsMapping.Threading.ThreadWrapper.Sleep(delay);
	                    }
	                }
	            } catch (ThreadInterruptedException e) {
	            }
	        }
	
	        protected internal virtual void Iterate() {
	        }
	
	        /*
	         * public boolean logging() { return log != null; }
	         * 
	         * public void log(String msg) { if (logging()) { log.log(name + msg); }
	         * }
	         * 
	         * public void logln(String msg) { if (logging()) { log.logln(name +
	         * msg); } }
	         * 
	         * public void err(String msg) { if (logging()) { log.err(name + msg); }
	         * }
	         * 
	         * public void errln(String msg) { if (logging()) { log.errln(name +
	         * msg); } }
	         * 
	         * public void warn(String msg) { if (logging()) { log.info(name + msg);
	         * } }
	         * 
	         * public void warnln(String msg) { if (logging()) { log.infoln(name +
	         * msg); } }
	         */
	    }
	
	    internal class RegisterFactoryThread : ICUServiceThreadTest.TestThread  {
	        internal RegisterFactoryThread(String name, ICUService service_0, long delay_1,
	                TestLog log_2) : base("REG " + name, service_0, delay_1, log_2) {
	        }
	
	        protected internal override void Iterate() {
	            IBM.ICU.Impl.ICUService.Factory  f = new ICUServiceThreadTest.TestFactory (IBM.ICU.Charset.ICUServiceThreadTest.GetCLV());
	            service.RegisterFactory(f);
	            log.Logln(f.ToString());
	        }
	    }
	
	    internal class UnregisterFactoryThread : ICUServiceThreadTest.TestThread  {
	        private Random r;
	
	        internal IList factories;
	
	        internal UnregisterFactoryThread(String name, ICUService service_0, long delay_1,
	                TestLog log_2) : base("UNREG " + name, service_0, delay_1, log_2) {
	            r = new Random();
	            factories = service_0.Factories();
	        }
	
	        public override void Iterate() {
	            int s = factories.Count;
	            if (s == 0) {
	                factories = service.Factories();
	            } else {
	                int n = r.Next(s);
	                IBM.ICU.Impl.ICUService.Factory  f = (IBM.ICU.Impl.ICUService.Factory ) ILOG.J2CsMapping.Collections.Collections.RemoveAt(factories,n);
	                bool success = service.UnregisterFactory(f);
	                log.Logln("factory: " + f
	                        + ((success) ? " succeeded." : " *** failed."));
	            }
	        }
	    }
	
	    internal class UnregisterFactoryListThread : ICUServiceThreadTest.TestThread  {
	        internal IBM.ICU.Impl.ICUService.Factory [] factories;
	
	        internal int n;
	
	        internal UnregisterFactoryListThread(String name, ICUService service_0,
	                long delay_1, IBM.ICU.Impl.ICUService.Factory [] factories_2, TestLog log_3) : base("UNREG " + name, service_0, delay_1, log_3) {
	            this.factories = factories_2;
	        }
	
	        public override void Iterate() {
	            if (n < factories.Length) {
	                IBM.ICU.Impl.ICUService.Factory  f = factories[n++];
	                bool success = service.UnregisterFactory(f);
	                log.Logln("factory: " + f
	                        + ((success) ? " succeeded." : " *** failed."));
	            }
	        }
	    }
	
	    internal class GetVisibleThread : ICUServiceThreadTest.TestThread  {
	        internal GetVisibleThread(String name, ICUService service_0, long delay_1,
	                TestLog log_2) : base("VIS " + name, service_0, delay_1, log_2) {
	        }
	
	        protected internal override void Iterate() {
	            ILOG.J2CsMapping.Collections.ISet ids = service.GetVisibleIDs();
	            IIterator iter = new ILOG.J2CsMapping.Collections.IteratorAdapter(ids.GetEnumerator());
	            int n_0 = 10;
	            while (--n_0 >= 0 && iter.HasNext()) {
	                String id = (String) iter.Next();
	                Object result = service.Get(id);
	                log.Logln("iter: " + n_0 + " id: " + id + " result: " + result);
	            }
	        }
	    }
	
	    internal class GetDisplayThread : ICUServiceThreadTest.TestThread  {
	        internal ULocale locale;
	
	        internal GetDisplayThread(String name, ICUService service_0, long delay_1,
	                ULocale locale_2, TestLog log_3) : base("DIS " + name, service_0, delay_1, log_3) {
	            this.locale = locale_2;
	        }
	
	        protected internal override void Iterate() {
	            IDictionary names = IBM.ICU.Charset.ICUServiceThreadTest.GetDisplayNames(service, locale);
	            IIterator iter = new ILOG.J2CsMapping.Collections.IteratorAdapter(names.GetEnumerator());
	            int n_0 = 10;
	            while (--n_0 >= 0 && iter.HasNext()) {
	                DictionaryEntry e = (DictionaryEntry) iter.Next();
	                String dname = (String) ((DictionaryEntry) e).Key;
	                String id = (String) ((DictionaryEntry) e).Value;
	                Object result = service.Get(id);
	
	                // Note: IllegalMonitorStateException is thrown by the code
	                // below on IBM JRE5 for AIX 64bit. For some reason, converting
	                // int to String out of this statement resolves the issue.
	
	                // log.logln(" iter: " + n +
	                String num = ILOG.J2CsMapping.Util.IlNumber.ToString(n_0);
	                log.Logln(" iter: " + num + " dname: " + dname + " id: " + id
	                        + " result: " + result);
	            }
	        }
	    }
	
	    internal class GetThread : ICUServiceThreadTest.TestThread  {
	        private String[] actualID;
	
	        internal GetThread(String name, ICUService service_0, long delay_1, TestLog log_2) : base("GET " + name, service_0, delay_1, log_2) {
	            actualID = new String[1];
	        }
	
	        protected internal override void Iterate() {
	            String id = IBM.ICU.Charset.ICUServiceThreadTest.GetCLV();
	            Object o = service.Get(id, actualID);
	            if (o != null) {
	                log.Logln(" id: " + id + " actual: " + actualID[0]
	                        + " result: " + o);
	            }
	        }
	    }
	
	    internal class GetListThread : ICUServiceThreadTest.TestThread  {
	        private readonly String[] list;
	
	        private int n;
	
	        internal GetListThread(String name, ICUService service_0, long delay_1,
	                String[] list_2, TestLog log_3) : base("GETL " + name, service_0, delay_1, log_3) {
	            this.list = list_2;
	        }
	
	        protected internal override void Iterate() {
	            if (--n < 0) {
	                n = list.Length - 1;
	            }
	            String id = list[n];
	            Object o = service.Get(id);
	            log.Logln(" id: " + id + " result: " + o);
	        }
	    }
	
	    // return a collection of unique factories, might be fewer than requested
	    internal ICollection GetFactoryCollection(int requested) {
	        ILOG.J2CsMapping.Collections.ISet locales = new HashedSet();
	        for (int i = 0; i < requested; ++i) {
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(locales,GetCLV());
	        }
	        IList factories_0 = new ArrayList(locales.Count);
	        IIterator iter = new ILOG.J2CsMapping.Collections.IteratorAdapter(locales.GetEnumerator());
	        while (iter.HasNext()) {
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(factories_0,new ICUServiceThreadTest.TestFactory ((String) iter.Next()));
	        }
	        return factories_0;
	    }
	
	    internal void RegisterFactories(ICUService service_0, ICollection c) {
	        IIterator iter = new ILOG.J2CsMapping.Collections.IteratorAdapter(c.GetEnumerator());
	        while (iter.HasNext()) {
	            service_0.RegisterFactory((IBM.ICU.Impl.ICUService.Factory ) iter.Next());
	        }
	    }
	
	    internal ICUService StableService() {
	        if (stableService == null) {
	            stableService = new ICULocaleService();
	            RegisterFactories(stableService, GetFactoryCollection(50));
	        }
	        return stableService;
	    }
	
	    private ICUService stableService;
	
	    // run multiple get on a stable service
	    public void Test00_ConcurrentGet() {
	        for (int i = 0; i < 10; ++i) {
	            new ICUServiceThreadTest.GetThread ("[" + ILOG.J2CsMapping.Util.IlNumber.ToString(i) + "]", StableService(), 0,
	                    this).Start();
	        }
	        RunThreads();
	        if (PRINTSTATS)
	            System.Console.Out.WriteLine(stableService.Stats());
	    }
	
	    // run multiple getVisibleID on a stable service
	    public void Test01_ConcurrentGetVisible() {
	        for (int i = 0; i < 10; ++i) {
	            new ICUServiceThreadTest.GetVisibleThread ("[" + ILOG.J2CsMapping.Util.IlNumber.ToString(i) + "]",
	                    StableService(), 0, this).Start();
	        }
	        RunThreads();
	        if (PRINTSTATS)
	            System.Console.Out.WriteLine(stableService.Stats());
	    }
	
	    // run multiple getDisplayName on a stable service
	    public void Test02_ConcurrentGetDisplay() {
	        String[] localeNames = { "en", "es", "de", "fr", "zh", "it", "no", "sv" };
	        for (int i = 0; i < localeNames.Length; ++i) {
	            String locale_0 = localeNames[i];
	            new ICUServiceThreadTest.GetDisplayThread ("[" + locale_0 + "]", StableService(), 0,
	                    new ULocale(locale_0), this).Start();
	        }
	        RunThreads();
	        if (PRINTSTATS)
	            System.Console.Out.WriteLine(stableService.Stats());
	    }
	
	    // run register/unregister on a service
	    public void Test03_ConcurrentRegUnreg() {
	        ICUService service_0 = new ICULocaleService();
	        for (int i = 0; i < 5; ++i) {
	            new ICUServiceThreadTest.RegisterFactoryThread ("[" + i + "]", service_0, 0, this).Start();
	        }
	        for (int i_1 = 0; i_1 < 5; ++i_1) {
	            new ICUServiceThreadTest.UnregisterFactoryThread ("[" + i_1 + "]", service_0, 0, this)
	                    .Start();
	        }
	        RunThreads();
	        if (PRINTSTATS)
	            System.Console.Out.WriteLine(service_0.Stats());
	    }
	
	    public void Test04_WitheringService() {
	        ICUService service_0 = new ICULocaleService();
	
	        ICollection fc = GetFactoryCollection(50);
	        RegisterFactories(service_0, fc);
	
	        IBM.ICU.Impl.ICUService.Factory [] factories_1 = (IBM.ICU.Impl.ICUService.Factory []) ILOG.J2CsMapping.Collections.Generics.Collections.ToArray(fc,new IBM.ICU.Impl.ICUService.Factory [fc.Count]);
	        IComparer comp = new ICUServiceThreadTest.Anonymous_C0 ();
	        Array.Sort(factories_1,comp);
	
	        new ICUServiceThreadTest.GetThread ("", service_0, 0, this).Start();
	        new ICUServiceThreadTest.UnregisterFactoryListThread ("", service_0, 3, factories_1, this)
	                .Start();
	
	        RunThreads(2000);
	        if (PRINTSTATS)
	            System.Console.Out.WriteLine(service_0.Stats());
	    }
	
	    // "all hell breaks loose"
	    // one register and one unregister thread, delay 500ms
	    // two display threads with different locales, delay 500ms;
	    // one visible id thread, delay 50ms
	    // fifteen get threads, delay 0
	    // run for ten seconds
	    public void Test05_ConcurrentEverything() {
	        ICUService service_0 = new ICULocaleService();
	
	        new ICUServiceThreadTest.RegisterFactoryThread ("", service_0, 500, this).Start();
	
	        for (int i = 0; i < 15; ++i) {
	            new ICUServiceThreadTest.GetThread ("[" + ILOG.J2CsMapping.Util.IlNumber.ToString(i) + "]", service_0, 0, this)
	                    .Start();
	        }
	
	        new ICUServiceThreadTest.GetVisibleThread ("", service_0, 50, this).Start();
	
	        String[] localeNames = { "en", "de" };
	        for (int i_1 = 0; i_1 < localeNames.Length; ++i_1) {
	            String locale_2 = localeNames[i_1];
	            new ICUServiceThreadTest.GetDisplayThread ("[" + locale_2 + "]", StableService(), 500,
	                    new ULocale(locale_2), this).Start();
	        }
	
	        new ICUServiceThreadTest.UnregisterFactoryThread ("", service_0, 500, this).Start();
	
	        // yoweee!!!
	        RunThreads(10000);
	        if (PRINTSTATS)
	            System.Console.Out.WriteLine(service_0.Stats());
	    }
	}
}
