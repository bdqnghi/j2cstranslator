/*
 *******************************************************************************
 * Copyright (C) 2007, International Business Machines Corporation and         *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:02 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace IBM.ICU.Charset
{

    using IBM.ICU.Text;
    using IBM.ICU.Util;
    using ILOG.J2CsMapping.Collections;
    using ILOG.J2CsMapping.Collections.Generics;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;
    using NUnit.Framework;

    [TestFixture]
    public class DataDrivenCalendarTest : ModuleTest
    {

        public DataDrivenCalendarTest()
            : base("com/ibm/icu/dev/data/testdata/", "calendar")
        {
        }

        /*
         * (non-Javadoc)
         * 
         * @see com.ibm.icu.dev.test.ModuleTest#processModules()
         */
        protected internal override void ProcessModules()
        {
            // String testName = t.getName().toString();

            for (IIterator siter = t.GetSettingsIterator(); siter.HasNext(); )
            {
                // Iterate through and get each of the test case to process
                IBM.ICU.Charset.TestDataModule_Constants.DataMap settings = (IBM.ICU.Charset.TestDataModule_Constants.DataMap)siter.Next();

                String type = settings.GetString("Type");

                if (type.Equals("convert_fwd"))
                {
                    TestConvert(t, settings, true);
                }
                else if (type.Equals("convert_rev"))
                {
                    TestConvert(t, settings, false);
                }
                else if (type.Equals("ops"))
                {
                    TestOps(t, settings);
                }
                else
                {
                    Errln("Unknown type: " + type);
                }
            }
        }

        internal void TestConvert(String caseString, CalendarFieldsSet fromSet,
                Calendar fromCalendar, CalendarFieldsSet toSet,
                Calendar toCalendar, bool forward)
        {
            String thisString = caseString + ((forward) ? "forward" : "reverse")
                    + " " + fromCalendar.GetType() + "->" + toCalendar.GetType()
                    + " ";

            fromCalendar.Clear();

            fromSet.SetOnCalendar(fromCalendar);

            CalendarFieldsSet diffSet = new CalendarFieldsSet();

            diffSet.Clear();
            // Is the calendar sane at the first?
            if (!fromSet.Matches(fromCalendar, diffSet))
            {
                String diffs = diffSet.DiffFrom(fromSet);
                Errln((String)"FAIL: " + thisString
                        + ", SOURCE calendar was not set: Differences: " + diffs);
            }
            else
            {
                Logln("PASS: " + thisString + " SOURCE calendar match.");
            }

            // logln("Set Source calendar: " + from);

            DateTime fromTime = fromCalendar.GetTime();

            diffSet.Clear();
            // Is the calendar sane after being set?
            if (!fromSet.Matches(fromCalendar, diffSet))
            {
                String diffs_0 = diffSet.DiffFrom(fromSet);
                Errln((String)"FAIL: " + thisString
                        + ", SET SOURCE calendar was not set: Differences: "
                        + diffs_0);
            }
            else
            {
                Logln("PASS: " + thisString + " SET SOURCE calendar match.");
            }

            toCalendar.Clear();
            toCalendar.SetTime(fromTime);

            diffSet.Clear();
            if (!toSet.Matches(toCalendar, diffSet))
            {
                String diffs_1 = diffSet.DiffFrom(toSet);
                Errln((String)"FAIL: " + thisString + ", Differences: " + diffs_1);
                DateFormat fmt = new SimpleDateFormat("EEE MMM dd yyyy G");
                String fromString = fmt.Format(fromTime);
                Logln("Source Time: " + fromString + ", Source Calendar: "
                        + fromCalendar.GetType());
            }
            else
            {
                Logln("PASS: " + thisString + " match.");
            }
        }

        private void TestConvert(TestDataModule_Constants.TestData testData,
                IBM.ICU.Charset.TestDataModule_Constants.DataMap settings, bool forward)
        {
            Calendar toCalendar = null;
            // build to calendar
            String testSetting = settings.GetString("ToCalendar");
            ULocale loc = new ULocale(testSetting);
            toCalendar = IBM.ICU.Util.Calendar.GetInstance(loc);
            CalendarFieldsSet fromSet = new CalendarFieldsSet(), toSet = new CalendarFieldsSet();
            // DateFormat fmt = new
            // SimpleDateFormat("EEE MMM dd yyyy / YYYY'-W'ww-ee");
            // Start the processing
            int n = 0;
            for (IIterator iter = testData.GetDataIterator(); iter.HasNext(); )
            {
                ++n;
                IBM.ICU.Charset.TestDataModule_Constants.DataMap currentCase = (IBM.ICU.Charset.TestDataModule_Constants.DataMap)iter.Next();

                String caseString = "[" + testData.GetName() + "#" + n + " " + "]";
                String locale = testSetting = currentCase.GetString("locale");
                ULocale fromLoc = new ULocale(testSetting);
                Calendar fromCalendar = IBM.ICU.Util.Calendar.GetInstance(fromLoc);

                fromSet.Clear();
                toSet.Clear();

                String from = currentCase.GetString("from");
                fromSet.ParseFrom(from);
                String to = currentCase.GetString("to");
                toSet.ParseFrom(to, fromSet);

                // now, do it.
                if (forward)
                {
                    Logln(caseString + " " + locale + "/" + from + " >>> " + loc
                            + "/" + to);
                    TestConvert(caseString, fromSet, fromCalendar, toSet,
                            toCalendar, forward);
                }
                else
                {
                    Logln(caseString + " " + locale + "/" + from + " <<< " + loc
                            + "/" + to);
                    TestConvert(caseString, toSet, toCalendar, fromSet,
                            fromCalendar, forward);
                }
            }
        }

        private const String kADD = "add";

        private const String kROLL = "roll";

        private void TestOps(TestDataModule_Constants.TestData testData, IBM.ICU.Charset.TestDataModule_Constants.DataMap settings)
        {
            // Get 'from' time
            CalendarFieldsSet fromSet = new CalendarFieldsSet(), toSet = new CalendarFieldsSet(), paramsSet = new CalendarFieldsSet(), diffSet = new CalendarFieldsSet();
            // DateFormat fmt = new
            // SimpleDateFormat("EEE MMM dd yyyy / YYYY'-W'ww-ee");
            // Start the processing
            int n = 0;
            for (IIterator iter = testData.GetDataIterator(); iter.HasNext(); )
            {
                ++n;
                IBM.ICU.Charset.TestDataModule_Constants.DataMap currentCase = (IBM.ICU.Charset.TestDataModule_Constants.DataMap)iter.Next();

                String caseString = "[case " + n + "]";
                // build to calendar
                // Headers { "locale","from","operation","params","to" }
                // #1 locale
                String param = "locale";
                String locale;
                String testSetting = currentCase.GetString(param);
                locale = testSetting;
                ULocale loc = new ULocale(locale);
                Calendar fromCalendar = IBM.ICU.Util.Calendar.GetInstance(loc);

                fromSet.Clear();
                // #2 'from' info
                param = "from";
                String from = testSetting = currentCase.GetString(param);
                fromSet.ParseFrom(testSetting);
                // System.err.println("fromset: ["+testSetting+"] >> " + fromSet);

                // #4 'operation' info
                param = "operation";
                String operation = testSetting = currentCase.GetString(param);
                paramsSet.Clear();
                // #3 'params' info
                param = "params";
                String paramsData = testSetting = currentCase.GetString(param);
                paramsSet.ParseFrom(paramsData); // parse with inheritance.
                // System.err.println("paramsSet: ["+testSetting+"] >> " +
                // paramsSet);

                toSet.Clear();
                // #4 'to' info
                param = "to";
                String to = testSetting = currentCase.GetString(param);
                toSet.ParseFrom(testSetting, fromSet); // parse with inheritance.
                // System.err.println("toSet: ["+testSetting+"] >> " + toSet);

                String caseContentsString = locale + ":  from " + from + ": "
                        + operation + " [[[ " + paramsSet + " ]]]   >>> " + to;
                Logln(caseString + ": " + caseContentsString);

                // ------
                // now, do it.

                // / prepare calendar
                fromSet.SetOnCalendar(fromCalendar);

                // from calendar: 'starting date'

                diffSet.Clear();

                // Is the calendar sane after being set?
                if (!fromSet.Matches(fromCalendar, diffSet))
                {
                    String diffs = diffSet.DiffFrom(fromSet);
                    Errln((String)"FAIL: " + caseString
                            + ", SET SOURCE calendar was not set: Differences: "
                            + diffs);
                }
                else
                {
                    Logln(" " + caseString + " SET SOURCE calendar match."); // verifies
                    // that
                    // the
                    // requested
                    // fields
                    // were
                    // set.
                }

                // to calendar - copy of from calendar
                Calendar toCalendar = (Calendar)fromCalendar.Clone();

                // / perform op on 'to calendar'
                for (int q = 0; q < paramsSet.FieldCount(); q++)
                {
                    if (paramsSet.IsSet(q))
                    {
                        if (operation.Equals(kROLL))
                        {
                            toCalendar.Roll(q, paramsSet.Get(q));
                        }
                        else if (operation.Equals(kADD))
                        {
                            toCalendar.Add(q, paramsSet.Get(q));
                        }
                        else
                        {
                            Errln(caseString + " FAIL: unknown operation "
                                    + operation);
                        }
                        Logln(operation + " of " + paramsSet.Get(q));
                    }
                }
                // now - what's the result?
                diffSet.Clear();

                // toset contains 'expected'

                if (!toSet.Matches(toCalendar, diffSet))
                {
                    String diffs_0 = diffSet.DiffFrom(toSet);
                    Errln((String)"FAIL: " + caseString + " - , "
                            + caseContentsString + " Differences: " + diffs_0);
                }
                else
                {
                    Logln("PASS: " + caseString + " matched! ");
                }

            }
        }


        /// <param name="args"></param>
        public static void Main(String[] args)
        {
            new DataDrivenCalendarTest().Run(args);
        }

    }
}
