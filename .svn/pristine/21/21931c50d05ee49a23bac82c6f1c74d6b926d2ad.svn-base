/* 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110104_01     
// 1/4/11 3:58 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace ILOG.J2CsMapping.Text
{
	
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
    using System;
	
	/// <summary>
	/// CollationKey represents the collation order of a particular String for a
	/// specific Collator. CollationKeys can be compared to determine the relative
	/// ordering of their source Strings. This is useful when the Strings must be
	/// compared multiple times, as in sorting.
	/// </summary>
	///
	public sealed class CollationKey : IComparable<CollationKey> {
	
	    private String source;
	
	    private IBM.ICU.Text.CollationKey icuKey;
	
	    internal CollationKey(String source_0, IBM.ICU.Text.CollationKey key) {
	        this.source = source_0;
	        this.icuKey = key;
	    }
	
	    /// <summary>
	    /// Compare the receiver to the specified CollationKey to determine the
	    /// relative ordering.
	    /// </summary>
	    ///
	    /// <param name="value">a CollationKey</param>
	    /// <returns>an int < 0 if this CollationKey is less than the specified
	    /// CollationKey, 0 if they are equal, and > 0 if this CollationKey
	    /// is greater</returns>
	    public int CompareTo(CollationKey value_ren) {
	        return icuKey.CompareTo(value_ren.icuKey);
	    }
	
	    /// <summary>
	    /// Compares the specified object to this CollationKey and answer if they are
	    /// equal. The object must be an instance of CollationKey and have the same
	    /// source string and collation key. The instances of CollationKey must have
	    /// been created by the same Collator.
	    /// </summary>
	    ///
	    /// <param name="object">the object to compare with this object</param>
	    /// <returns>true if the specified object is equal to this CollationKey, false
	    /// otherwise</returns>
	    /// <seealso cref="M:System.CollationKey.HashCode"/>
	    public override bool Equals(Object obj0) {
	        if (!(obj0   is  CollationKey)) {
	            return false;
	        }
	        CollationKey collationKey = (CollationKey) obj0;
	        return icuKey.Equals(collationKey.icuKey);
	    }
	
	    /// <summary>
	    /// Answer the String from which this CollationKey was created.
	    /// </summary>
	    ///
	    /// <returns>a String</returns>
	    public String GetSourceString() {
	        return this.source;
	    }
	
	    /// <summary>
	    /// Answers an integer hash code for the receiver. Objects which are equal
	    /// answer the same value for this method.
	    /// </summary>
	    ///
	    /// <returns>the receiver's hash</returns>
	    /// <seealso cref="M:System.CollationKey.Equals(System.Object)"/>
	    public override int GetHashCode() {
	        return icuKey.GetHashCode();
	    }
	
	    /// <summary>
	    /// Answer the collation key as a byte array.
	    /// </summary>
	    ///
	    /// <returns>an array of bytes</returns>
	    public byte[] ToByteArray() {
	        return icuKey.ToByteArray();
	    }
	}
}
