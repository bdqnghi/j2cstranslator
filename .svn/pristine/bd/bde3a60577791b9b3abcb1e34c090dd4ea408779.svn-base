/*
 ******************************************************************************
 * Copyright (C) 1996-2004, International Business Machines Corporation and   *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// <p>
	/// Interface for enabling iteration over sets of <int index, int value>, where
	/// index is the sorted integer index in ascending order and value, its
	/// associated integer value.
	/// </p>
	/// <p>
	/// The result for each iteration is the consecutive range of <int index, int
	/// value> with the same value. Result is represented by <start, limit, value>
	/// where
	/// </p>
	/// <ul>
	/// <li>start is the starting integer of the result range
	/// <li>limit is 1 after the maximum integer that follows start, such that all
	/// integers between start and (limit - 1), inclusive, have the same associated
	/// integer value.
	/// <li>value is the integer value that all integers from start to (limit - 1)
	/// share in common.
	/// </ul>
	/// <p>
	/// Hence value(start) = value(start + 1) = .... = value(start + n) = .... =
	/// value(limit - 1). However value(start -1) != value(start) and value(limit) !=
	/// value(start).
	/// </p>
	/// <p>
	/// Most implementations will be created by factory methods, such as the
	/// character type iterator in UCharacter.getTypeIterator. See example below.
	/// </p>
	/// Example of use:<br>
	/// <pre>
	/// RangeValueIterator iterator = UCharacter.getTypeIterator();
	/// RangeValueIterator.Element result = new RangeValueIterator.Element();
	/// while (iterator.next(result)) {
	/// System.out.println(&quot;Codepoint \\u&quot; + Integer.toHexString(result.start)
	/// + &quot; to codepoint \\u&quot; + Integer.toHexString(result.limit - 1)
	/// + &quot; has the character type &quot; + result.value);
	/// }
	/// </pre>
	/// </summary>
	///
	/// @stable ICU 2.6
	public interface RangeValueIterator {
	    // public inner class ---------------------------------------------
	
	    /// <summary>
	    /// <p>
	    /// Gets the next maximal result range with a common value and returns true
	    /// if we are not at the end of the iteration, false otherwise.
	    /// </p>
	    /// <p>
	    /// If the return boolean is a false, the contents of elements will not be
	    /// updated.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="element">for storing the result range and value</param>
	    /// <returns>true if we are not at the end of the iteration, false otherwise.</returns>
	    /// <seealso cref="null"/>
	    /// @stable ICU 2.6
	    bool Next(RangeValueIterator_Constants.Element element);
	
	    /// <summary>
	    /// Resets the iterator to the beginning of the iteration.
	    /// </summary>
	    ///
	    /// @stable ICU 2.6
	    void Reset();
	}
}
