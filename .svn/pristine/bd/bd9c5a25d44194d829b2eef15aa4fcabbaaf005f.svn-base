/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 11/30/10 3:38 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace ILOG.J2CsMapping.RegEx {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Represents canonical decomposition of
	/// Hangul syllable. Is used when
	/// CANON_EQ flag of Pattern class
	/// is specified.
	/// </summary>
	///
	internal class HangulDecomposedCharSet : JointSet {
	
		/// <summary>
		/// Decomposed Hangul syllable.
		/// </summary>
		///
		private char[] decomposedChar;
	
		/// <summary>
		/// String representing syllable 
		/// </summary>
		///
		private String decomposedCharUTF16;
	
		/// <summary>
		/// Length of useful part of decomposedChar
		/// decomposedCharLength <= decomposedChar.length
		/// </summary>
		///
		private int decomposedCharLength;
	
		public HangulDecomposedCharSet(char[] decomposedChar_0,
				int decomposedCharLength_1) {
			this.decomposedCharUTF16 = null;
			this.decomposedChar = decomposedChar_0;
			this.decomposedCharLength = decomposedCharLength_1;
		}
	
		/// <summary>
		/// Returns the next.
		/// </summary>
		///
		public override AbstractSet GetNext() {
			return this.next;
		}
	
		/// <summary>
		/// Sets next abstract set.
		/// </summary>
		///
		/// <param name="next">The next to set.</param>
		public override void SetNext(AbstractSet next) {
			this.next = next;
		}
	
		/// <summary>
		/// Give string representation of this.
		/// </summary>
		///
		/// <returns>- string representation.</returns>
		private String GetDecomposedChar() {
			return (decomposedCharUTF16 == null) ? (decomposedCharUTF16 = ILOG.J2CsMapping.Util.StringUtil.NewString(decomposedChar)) : decomposedCharUTF16;
		}

        public override String GetName()
        {
			return "decomposed Hangul syllable:" + GetDecomposedChar(); //$NON-NLS-1$
		}
	
		public override int Matches(int strIndex, String testString,
				MatchResultImpl matchResult) {
	
			/*
			 * All decompositions for Hangul syllables have length that 
			 * is less or equal Lexer.MAX_DECOMPOSITION_LENGTH
			 */
			int rightBound = matchResult.GetRightBound();
			int SyllIndex = 0;
			int[] decompSyllable = new int[ILOG.J2CsMapping.RegEx.Lexer.MAX_HANGUL_DECOMPOSITION_LENGTH];
			int[] decompCurSymb;
			char curSymb;
	
			/*
			 * For details about Hangul composition and decomposition see
			 * http://www.unicode.org/versions/Unicode4.0.0/ch03.pdf
			 * "3.12 Conjoining Jamo Behavior"
			 */
			int LIndex = -1;
			int VIndex = -1;
			int TIndex = -1;
	
			if (strIndex >= rightBound) {
				return -1;
			}
			curSymb = testString[strIndex++];
			decompCurSymb = ILOG.J2CsMapping.RegEx.Lexer.GetHangulDecomposition(curSymb);
	
			if (decompCurSymb == null) {
	
				/*
				 * We deal with ordinary letter or sequence of jamos
				 * at strIndex at testString.
				 */
				decompSyllable[SyllIndex++] = curSymb;
				LIndex = curSymb - ILOG.J2CsMapping.RegEx.Lexer.LBase;
	
				if ((LIndex < 0) || (LIndex >= ILOG.J2CsMapping.RegEx.Lexer.LCount)) {
	
					/*
					 * Ordinary letter, that doesn't match this
					 */
					return -1;
				}
	
				if (strIndex < rightBound) {
					curSymb = testString[strIndex];
					VIndex = curSymb - ILOG.J2CsMapping.RegEx.Lexer.VBase;
				}
	
				if ((VIndex < 0) || (VIndex >= ILOG.J2CsMapping.RegEx.Lexer.VCount)) {
	
					/*
					 * Single L jamo doesn't compose Hangul syllable,
					 * so doesn't match
					 */
					return -1;
				}
				strIndex++;
				decompSyllable[SyllIndex++] = curSymb;
	
				if (strIndex < rightBound) {
					curSymb = testString[strIndex];
					TIndex = curSymb - ILOG.J2CsMapping.RegEx.Lexer.TBase;
				}
	
				if ((TIndex < 0) || (TIndex >= ILOG.J2CsMapping.RegEx.Lexer.TCount)) {
	
					/*
					 * We deal with LV syllable at testString, so
					 * compare it to this
					 */
					return ((decomposedCharLength == 2)
							&& (decompSyllable[0] == decomposedChar[0]) && (decompSyllable[1] == decomposedChar[1])) ? next
							.Matches(strIndex, testString, matchResult) : -1;
				}
				strIndex++;
				decompSyllable[SyllIndex++] = curSymb;
	
				/*
				 * We deal with LVT syllable at testString, so
				 * compare it to this
				 */
				return ((decomposedCharLength == 3)
						&& (decompSyllable[0] == decomposedChar[0])
						&& (decompSyllable[1] == decomposedChar[1]) && (decompSyllable[2] == decomposedChar[2])) ? next
						.Matches(strIndex, testString, matchResult) : -1;
			} else {
	
				/*
				 * We deal with Hangul syllable at strIndex at testString.
				 * So we decomposed it to compare with this. 
				 */
				int i = 0;
	
				if (decompCurSymb.Length != decomposedCharLength) {
					return -1;
				}
	
				for (; i < decomposedCharLength; i++) {
					if (decompCurSymb[i] != decomposedChar[i]) {
						return -1;
					}
				}
				return next.Matches(strIndex, testString, matchResult);
			}
		}
	
		public override bool First(AbstractSet set) {
			return (set  is  HangulDecomposedCharSet) ? ((HangulDecomposedCharSet) set)
					.GetDecomposedChar().Equals(GetDecomposedChar()) : true;
		}
	
		public override bool HasConsumed(MatchResultImpl matchResult) {
			return true;
		}
	}
}
