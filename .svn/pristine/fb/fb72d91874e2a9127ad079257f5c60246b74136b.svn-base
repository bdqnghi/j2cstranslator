/*
 *******************************************************************************
 * Copyright (C) 2007, International Business Machines Corporation and         *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:48 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl {
	
	using IBM.ICU.Text;
	using IBM.ICU.Util;
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	/// <exclude/>
	[Serializable]
	public class RelativeDateFormat : IBM.ICU.Text.DateFormat {
	
	    public sealed class Anonymous_C0 : IComparer {
	        public int Compare(Object o1, Object o2) {
	            RelativeDateFormat.URelativeString  r1 = (RelativeDateFormat.URelativeString ) o1;
	            RelativeDateFormat.URelativeString  r2 = (RelativeDateFormat.URelativeString ) o2;
	
	            if (r1.offset == r2.offset) {
	                return 0;
	            } else if (r1.offset < r2.offset) {
	                return -1;
	            } else {
	                return 1;
	            }
	        }
	    }
	
	    public class URelativeString {
	        internal URelativeString(int offset, String str0) {
	            this.offset = offset;
	            this.str0 = str0;
	        }
	
	        internal URelativeString(String offset, String str0) {
	            this.offset = Int32.Parse(offset);
	            this.str0 = str0;
	        }
	
	        public int offset;
	
	        public String str0;
	    }
	
	    // copy c'tor?
	
	    
	    /// <param name="timeStyle"></param>
	    /// <param name="dateStyle"></param>
	    /// <param name="locale"></param>
	    public RelativeDateFormat(int timeStyle, int dateStyle, ULocale locale) {
	        this.fDates = null;
	        fLocale = locale;
	        fTimeStyle = timeStyle;
	        fDateStyle = dateStyle;
	
	        if (fDateStyle != IBM.ICU.Text.DateFormat.NONE) {
	            int newStyle = fDateStyle & ~IBM.ICU.Text.DateFormat.RELATIVE;
	            fDateFormat = IBM.ICU.Text.DateFormat.GetDateInstance(newStyle, locale);
	        } else {
	            fDateFormat = null;
	        }
	        if (fTimeStyle != IBM.ICU.Text.DateFormat.NONE) {
	            int newStyle_0 = fTimeStyle & ~IBM.ICU.Text.DateFormat.RELATIVE;
	            fTimeFormat = IBM.ICU.Text.DateFormat.GetTimeInstance(newStyle_0, locale);
	        } else {
	            fTimeFormat = null;
	        }
	
	        InitializeCalendar(null, fLocale);
	        LoadDates();
	    }
	
	    /// <summary>
	    /// serial version (generated)
	    /// </summary>
	    ///
	    private const long serialVersionUID = 1131984966440549435L;
	
	    /*
	     * (non-Javadoc)
	     * 
	     * @see com.ibm.icu.text.DateFormat#format(com.ibm.icu.util.Calendar,
	     * java.lang.StringBuffer, java.text.FieldPosition)
	     */
	    public override StringBuilder Format(Calendar cal, StringBuilder toAppendTo,
	            ILOG.J2CsMapping.Text.FieldPosition fieldPosition) {
	        // calculate the difference, in days, between 'cal' and now.
	        int dayDiff = DayDifference(cal);
	
	        // look up string
	        String theString = GetStringForDay(dayDiff);
	
	        if (theString == null) {
	            // didn't find it. Fall through to the fDateFormat
	            if (fDateFormat != null) {
	                return fDateFormat.Format(cal, toAppendTo, fieldPosition);
	            } else {
	                return toAppendTo; // no op
	            }
	        } else {
	            // found a relative string
	            return toAppendTo.Append(theString);
	        }
	    }
	
	    /*
	     * (non-Javadoc)
	     * 
	     * @see com.ibm.icu.text.DateFormat#parse(java.lang.String,
	     * com.ibm.icu.util.Calendar, java.text.ParsePosition)
	     */
	    public override void Parse(String text, Calendar cal, ILOG.J2CsMapping.Text.ParsePosition pos) {
	        throw new NotSupportedException(
	                "Relative Date parse is not implemented yet");
	    }
	
	    private IBM.ICU.Text.DateFormat fDateFormat; // the held date format
	
	    private IBM.ICU.Text.DateFormat fTimeFormat; // the held time format
	
	    private IBM.ICU.Text.MessageFormat fCombinedFormat; // the {0} {1} format.
	
	    internal int fDateStyle;
	
	    internal int fTimeStyle;
	
	    internal ULocale fLocale;
	
	    private RelativeDateFormat.URelativeString [] fDates;
	
	    /// <summary>
	    /// Get the string at a specific offset.
	    /// </summary>
	    ///
	    /// <param name="day">day offset ( -1, 0, 1, etc.. )</param>
	    /// <returns>the string, or NULL if none at that location.</returns>
	    private String GetStringForDay(int day) {
	        if (fDates == null) {
	            LoadDates();
	        }
	        for (int i = 0; i < fDates.Length; i++) {
	            if (fDates[i].offset == day) {
	                return fDates[i].str0;
	            }
	        }
	        return null;
	    }
	
	    /// <summary>
	    /// Load the Date string array
	    /// </summary>
	    ///
	    [MethodImpl(MethodImplOptions.Synchronized)]
	    private void LoadDates() {
	        CalendarData calData = new CalendarData(fLocale, calendar.GetType());
	        UResourceBundle rb = calData.Get("fields", "day", "relative");
	
	        ILOG.J2CsMapping.Collections.ISet datesSet = new SortedSet(new RelativeDateFormat.Anonymous_C0 ());
	
	        for (UResourceBundleIterator i = rb.GetIterator(); i.HasNext();) {
	            UResourceBundle line = i.Next();
	
	            String k = line.GetKey();
	            String v = line.GetString();
	            RelativeDateFormat.URelativeString  rs = new RelativeDateFormat.URelativeString (k, v);
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(datesSet,rs);
	        }
	        fDates = new RelativeDateFormat.URelativeString [0];
	        fDates = (RelativeDateFormat.URelativeString []) ILOG.J2CsMapping.Collections.Generics.Collections.ToArray(datesSet,fDates);
	    }
	
	    
	    /// <returns>the number of days in "until-now"</returns>
	    private static int DayDifference(Calendar until) {
	        Calendar nowCal = (Calendar) until.Clone();
	        DateTime nowDate = new DateTime((DateTime.Now.Millisecond)*10000);
	        nowCal.Clear();
	        nowCal.SetTime(nowDate);
	        int dayDiff = nowCal.FieldDifference(until.GetTime(), IBM.ICU.Util.Calendar.DATE);
	        return dayDiff;
	    }
	
	    /// <summary>
	    /// initializes fCalendar from parameters. Returns fCalendar as a
	    /// convenience.
	    /// </summary>
	    ///
	    /// <param name="zone">Zone to be adopted, or NULL for TimeZone::createDefault().</param>
	    /// <param name="locale">Locale of the calendar</param>
	    /// <param name="status">Error code</param>
	    /// <returns>the newly constructed fCalendar</returns>
	    /// @draft ICU 3.8
	    private Calendar InitializeCalendar(IBM.ICU.Util.TimeZone zone, ULocale locale) {
	        if (calendar == null) {
	            if (zone == null) {
	                calendar = IBM.ICU.Util.Calendar.GetInstance(locale);
	            } else {
	                calendar = IBM.ICU.Util.Calendar.GetInstance(zone, locale);
	            }
	        }
	        return calendar;
	    }
	}
}
