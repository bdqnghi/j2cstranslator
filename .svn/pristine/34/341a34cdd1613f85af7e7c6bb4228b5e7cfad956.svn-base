/*
 ******************************************************************************
 * Copyright (C) 2007, International Business Machines Corporation and   *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/8/10 10:24 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl.Duration {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	public interface PeriodBuilderFactory {
	
	    /// <summary>
	    /// Sets the time units available for use. Default is all units.
	    /// </summary>
	    ///
	    /// <param name="minUnit">the smallest time unit available for use</param>
	    /// <param name="maxUnit">the largest time unit available for use</param>
	    /// <returns>this factory</returns>
	    PeriodBuilderFactory SetAvailableUnitRange(TimeUnit minUnit,
	            TimeUnit maxUnit);
	
	    /// <summary>
	    /// Sets whether the time unit is available for use.
	    /// </summary>
	    ///
	    /// <param name="unit">the time unit</param>
	    /// <param name="available">true if the unit is available for use</param>
	    /// <returns>this factory</returns>
	    PeriodBuilderFactory SetUnitIsAvailable(TimeUnit unit, bool available);
	
	    /// <summary>
	    /// Sets the maximum value for the largest available time unit (as set in
	    /// setUnits). Periods that represent a longer duration than this will be
	    /// pinned to this value of that time unit and return true for 'isMoreThan'.
	    /// Default is no limit. Setting a value of zero restores the default.
	    /// </summary>
	    ///
	    PeriodBuilderFactory SetMaxLimit(float maxLimit);
	
	    /// <summary>
	    /// Sets the minimum value for the smallest available time unit (as set in
	    /// setUnits). Periods that represent a shorter duration than this will be
	    /// pinned to this value of that time unit and return true for 'isLessThan'.
	    /// Default is no limit. Setting a value of zero restores the default.
	    /// </summary>
	    ///
	    PeriodBuilderFactory SetMinLimit(float minLimit);
	
	    /// <summary>
	    /// Sets whether units with a value of zero are represented in a period when
	    /// 'gaps' appear between time units, e.g. '2 hours, 0 minutes, and 33
	    /// seconds'. Default is to not represent these explicitly ('2 hours and 33
	    /// seconds').
	    /// </summary>
	    ///
	    PeriodBuilderFactory SetAllowZero(bool allow);
	
	    /// <summary>
	    /// Set whether weeks are used with other units, or only when weeks are the
	    /// only unit. For example '3 weeks and 2 days' versus '23 days'. Default is
	    /// to use them alone only.
	    /// </summary>
	    ///
	    PeriodBuilderFactory SetWeeksAloneOnly(bool aloneOnly);
	
	    /// <summary>
	    /// Sets the locale for the factory. Setting the locale can adjust the values
	    /// for some or all of the other properties to reflect language or cultural
	    /// conventions. Default is to use the default locale.
	    /// </summary>
	    ///
	    PeriodBuilderFactory SetLocale(String localeName);
	
	    /// <summary>
	    /// Returns a builder that represents durations in terms of the single given
	    /// TimeUnit. If the factory settings don't make the given unit available,
	    /// this will return null.
	    /// </summary>
	    ///
	    /// <param name="unit">the single TimeUnit with which to represent times</param>
	    /// <returns>a builder</returns>
	    PeriodBuilder GetFixedUnitBuilder(TimeUnit unit);
	
	    /// <summary>
	    /// Returns a builder that represents durations in terms of the single
	    /// largest period less than or equal to the duration.
	    /// </summary>
	    ///
	    /// <returns>a builder</returns>
	    PeriodBuilder GetSingleUnitBuilder();
	
	    /// <summary>
	    /// Returns a builder that formats the largest one or two time units,
	    /// starting with the largest period less than or equal to the duration. It
	    /// formats two periods if the first period has a count &lt; 2 and the next
	    /// period has a count &gt;= 1.
	    /// </summary>
	    ///
	    /// <returns>a builder</returns>
	    PeriodBuilder GetOneOrTwoUnitBuilder();
	
	    /// <summary>
	    /// Returns a builder that formats up to the given number of time units,
	    /// starting with the largest unit less than or equal to the duration.
	    /// </summary>
	    ///
	    /// <returns>a builder</returns>
	    PeriodBuilder GetMultiUnitBuilder(int unitCount);
	}
}
