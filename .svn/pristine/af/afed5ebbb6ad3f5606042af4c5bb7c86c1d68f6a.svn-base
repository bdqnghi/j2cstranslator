/*
 ******************************************************************************
 * Copyright (C) 2007, International Business Machines Corporation and   *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/8/10 10:24 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl.Duration {
	
	using IBM.ICU.Impl.Duration.Impl;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// An implementation of PeriodFormatterFactory that provides customization of
	/// formatting behavior. Instances of this factory are created by
	/// BasicPeriodFormatterService.
	/// The settings on BasicPeriodFormatterFactory are:
	/// <ul>
	/// <li><b>setDisplayLimit</b> controls whether phrases like 'more than' or 'less
	/// than' will be displayed when the Period has a defined limit. Default is to
	/// display them.</li>
	/// <li><b>setDisplayPastFuture</b> controls whether phrases like 'ago' or 'from
	/// now' will be displayed to indicate past or future time. Default is to display
	/// them.</li>
	/// <li><b>setSeparatorVariant</b> controls how separators (between count and
	/// period, and multiple periods) will be displayed, when appropriate for the
	/// language. Default is to use full separators.</li>
	/// <li><b>setUnitVariant</b> controls which of various types of unit names to
	/// use. PLURALIZED indicates that full names will be used. MEDIUM indicates that
	/// medium-length (usually 2-3 character) names will be used. SHORT indicates
	/// that short (usually single character) names will be used. If there is no
	/// localization data available for either the SHORT or MEDIUM names, the other
	/// will be used, if neither is available, the PLURALIZED names will be used.
	/// Default is PLURALIZED.</li>
	/// <li><b>setCountVariant</b> controls how the count for the smallest unit will
	/// be formatted: either as an integer, a fraction to the smallest half, or as a
	/// decimal with 1, 2, or 3 decimal points.</li>
	/// Counts for higher units will be formatted as integers.
	/// </ul>
	/// </summary>
	///
	public class BasicPeriodFormatterFactory : PeriodFormatterFactory {
	    private readonly PeriodFormatterDataService ds;
	
	    private PeriodFormatterData data;
	
	    private BasicPeriodFormatterFactory.Customizations  customizations;
	
	    private bool customizationsInUse;
	
	    private String localeName;
	
	    // package-only constructor
	    internal BasicPeriodFormatterFactory(PeriodFormatterDataService ds_0) {
	        this.ds = ds_0;
	        this.customizations = new BasicPeriodFormatterFactory.Customizations ();
	        this.localeName = System.Globalization.CultureInfo.InvariantCulture.ToString();
	    }
	
	    /// <summary>
	    /// Return the default rdf factory as a BasicPeriodFormatterFactory.
	    /// </summary>
	    ///
	    /// <returns>a default BasicPeriodFormatterFactory</returns>
	    public static BasicPeriodFormatterFactory GetDefault() {
	        return (BasicPeriodFormatterFactory) IBM.ICU.Impl.Duration.BasicPeriodFormatterService
	                .GetInstance().NewPeriodFormatterFactory();
	    }
	
	    /// <summary>
	    /// Set the locale for this factory.
	    /// </summary>
	    ///
	    public virtual PeriodFormatterFactory SetLocale(String localeName_0) {
	        data = null;
	        this.localeName = localeName_0;
	        return this;
	    }
	
	    /// <summary>
	    /// Set whether limits will be displayed.
	    /// </summary>
	    ///
	    /// <param name="display">true if limits will be displayed</param>
	    /// <returns>this PeriodFormatterFactory</returns>
	    public virtual PeriodFormatterFactory SetDisplayLimit(bool display) {
	        UpdateCustomizations().displayLimit = display;
	        return this;
	    }
	
	    /// <summary>
	    /// Return true if limits will be displayed.
	    /// </summary>
	    ///
	    /// <returns>true if limits will be displayed</returns>
	    public bool GetDisplayLimit() {
	        return customizations.displayLimit;
	    }
	
	    /// <summary>
	    /// Set whether past and future will be displayed.
	    /// </summary>
	    ///
	    /// <param name="display">true if past and future will be displayed</param>
	    /// <returns>this PeriodFormatterFactory</returns>
	    public virtual PeriodFormatterFactory SetDisplayPastFuture(bool display) {
	        UpdateCustomizations().displayDirection = display;
	        return this;
	    }
	
	    /// <summary>
	    /// Return true if past and future will be displayed.
	    /// </summary>
	    ///
	    /// <returns>true if past and future will be displayed</returns>
	    public bool GetDisplayPastFuture() {
	        return customizations.displayDirection;
	    }
	
	    /// <summary>
	    /// Set how separators will be displayed.
	    /// </summary>
	    ///
	    /// <param name="variant">the variant indicating separators will be displayed</param>
	    /// <returns>this PeriodFormatterFactory</returns>
	    public virtual PeriodFormatterFactory SetSeparatorVariant(int variant) {
	        UpdateCustomizations().separatorVariant = (byte) variant;
	        return this;
	    }
	
	    /// <summary>
	    /// Return the variant indicating how separators will be displayed.
	    /// </summary>
	    ///
	    /// <returns>the variant</returns>
	    public int GetSeparatorVariant() {
	        return customizations.separatorVariant;
	    }
	
	    /// <summary>
	    /// Set the variant of the time unit names to use.
	    /// </summary>
	    ///
	    /// <param name="variant">the variant to use</param>
	    /// <returns>this PeriodFormatterFactory</returns>
	    public virtual PeriodFormatterFactory SetUnitVariant(int variant) {
	        UpdateCustomizations().unitVariant = (byte) variant;
	        return this;
	    }
	
	    /// <summary>
	    /// Return the unit variant.
	    /// </summary>
	    ///
	    /// <returns>the unit variant</returns>
	    public int GetUnitVariant() {
	        return customizations.unitVariant;
	    }
	
	    /// <summary>
	    /// Set the variant of the count to use.
	    /// </summary>
	    ///
	    /// <param name="variant">the variant to use</param>
	    /// <returns>this PeriodFormatterFactory</returns>
	    public virtual PeriodFormatterFactory SetCountVariant(int variant) {
	        UpdateCustomizations().countVariant = (byte) variant;
	        return this;
	    }
	
	    /// <summary>
	    /// Return the count variant.
	    /// </summary>
	    ///
	    /// <returns>the count variant</returns>
	    public int GetCountVariant() {
	        return customizations.countVariant;
	    }
	
	    public virtual PeriodFormatter GetFormatter() {
	        customizationsInUse = true;
	        return new BasicPeriodFormatter(this, localeName, GetData(),
	                customizations);
	    }
	
	    private BasicPeriodFormatterFactory.Customizations  UpdateCustomizations() {
	        if (customizationsInUse) {
	            customizations = customizations.Copy();
	            customizationsInUse = false;
	        }
	        return customizations;
	    }
	
	    // package access only
	    internal PeriodFormatterData GetData() {
	        if (data == null) {
	            data = ds.Get(localeName);
	        }
	        return data;
	    }
	
	    // package access for use by BasicPeriodFormatter
	    internal PeriodFormatterData GetData(String localeName_0) {
	        return ds.Get(localeName_0);
	    }
	
	    // package access for use by BasicPeriodFormatter
	    internal class Customizations {
	        public Customizations() {
	            this.displayLimit = true;
	            this.displayDirection = true;
	            this.separatorVariant = IBM.ICU.Impl.Duration.Impl.DataRecord.ESeparatorVariant.FULL;
	            this.unitVariant = IBM.ICU.Impl.Duration.Impl.DataRecord.EUnitVariant.PLURALIZED;
	            this.countVariant = IBM.ICU.Impl.Duration.Impl.DataRecord.ECountVariant.INTEGER;
	        }
	
	        internal bool displayLimit;
	
	        internal bool displayDirection;
	
	        internal byte separatorVariant;
	
	        internal byte unitVariant;
	
	        internal byte countVariant;
	
	        public BasicPeriodFormatterFactory.Customizations  Copy() {
	            BasicPeriodFormatterFactory.Customizations  result = new BasicPeriodFormatterFactory.Customizations ();
	            result.displayLimit = displayLimit;
	            result.displayDirection = displayDirection;
	            result.separatorVariant = separatorVariant;
	            result.unitVariant = unitVariant;
	            result.countVariant = countVariant;
	            return result;
	        }
	    }
	}
}
