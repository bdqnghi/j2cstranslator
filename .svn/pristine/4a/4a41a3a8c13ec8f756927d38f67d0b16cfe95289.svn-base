// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2005-2007, International Business Machines Corporation and    
/// others. All Rights Reserved.                                                
/// </summary>
///
namespace IBM.ICU.Text {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	/// <summary>
	/// This class represents a charset that has been identified by a CharsetDetector
	/// as a possible encoding for a set of input data. From an instance of this
	/// class, you can ask for a confidence level in the charset identification, or
	/// for Java Reader or String to access the original byte data in Unicode form.
	/// <p/>
	/// Instances of this class are created only by CharsetDetectors.
	/// <p/>
	/// Note: this class has a natural ordering that is inconsistent with equals. The
	/// natural ordering is based on the match confidence value.
	/// </summary>
	///
	/// @stable ICU 3.4
	public class CharsetMatch : IComparable {
	
	    /// <summary>
	    /// Create a java.io.Reader for reading the Unicode character data
	    /// corresponding to the original byte data supplied to the Charset detect
	    /// operation.
	    /// <p/>
	    /// CAUTION: if the source of the byte data was an InputStream, a Reader can
	    /// be created for only one matching char set using this method. If more than
	    /// one charset needs to be tried, the caller will need to reset the
	    /// InputStream and create InputStreamReaders itself, based on the charset
	    /// name.
	    /// </summary>
	    ///
	    /// <returns>the Reader for the Unicode character data.</returns>
	    /// @stable ICU 3.4
	    public TextReader GetReader() {
	        Stream inputStream = fInputStream;
	
	        if (inputStream == null) {
	            inputStream = new MemoryStream(fRawInput, 0, fRawLength);
	        }
	
	        try {
	            // TODO: inputStream.Reset();
                throw new NotImplementedException();
	            return new StreamReader(inputStream,System.Text.Encoding.GetEncoding(GetName()));
	        } catch (IOException e) {
	            return null;
	        }
	    }
	
	    /// <summary>
	    /// Create a Java String from Unicode character data corresponding to the
	    /// original byte data supplied to the Charset detect operation.
	    /// </summary>
	    ///
	    /// <returns>a String created from the converted input data.</returns>
	    /// @stable ICU 3.4
	    public String GetString() {
	        return GetString(-1);
	
	    }
	
	    /// <summary>
	    /// Create a Java String from Unicode character data corresponding to the
	    /// original byte data supplied to the Charset detect operation. The length
	    /// of the returned string is limited to the specified size; the string will
	    /// be trunctated to this length if necessary. A limit value of zero or less
	    /// is ignored, and treated as no limit.
	    /// </summary>
	    ///
	    /// <param name="maxLength">The maximium length of the String to be created when thesource of the data is an input stream, or -1 for unlimitedlength.</param>
	    /// <returns>a String created from the converted input data.</returns>
	    /// @stable ICU 3.4
	    public String GetString(int maxLength) {
	        String result = null;
	        if (fInputStream != null) {
	            StringBuilder sb = new StringBuilder();
	            char[] buffer = new char[1024];
	            TextReader reader = GetReader();
	            int max = (maxLength < 0) ? Int32.MaxValue : maxLength;
	            int bytesRead = 0;
	
	            while ((bytesRead = reader.Read(buffer, 0, Math.Min(max,1024))) >= 0) {
	                sb.Append(buffer, 0, bytesRead);
	                max -= bytesRead;
	            }
	
	            reader.Close();
	
	            return sb.ToString();
	        } else {
	            result = ILOG.J2CsMapping.Util.StringUtil.NewString(fRawInput,GetName());
	        }
	        return result;
	
	    }
	
	    /// <summary>
	    /// Get an indication of the confidence in the charset detected. Confidence
	    /// values range from 0-100, with larger numbers indicating a better match of
	    /// the input data to the characteristics of the charset.
	    /// </summary>
	    ///
	    /// <returns>the confidence in the charset match</returns>
	    /// @stable ICU 3.4
	    public int GetConfidence() {
	        return fConfidence;
	    }
	
	    /// <summary>
	    /// Bit flag indicating the match is based on the the encoding scheme.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Text.CharsetMatch.GetMatchType"/>
	    /// @stable ICU 3.4
	    public const int ENCODING_SCHEME = 1;
	
	    /// <summary>
	    /// Bit flag indicating the match is based on the presence of a BOM.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Text.CharsetMatch.GetMatchType"/>
	    /// @stable ICU 3.4
	    public const int BOM = 2;
	
	    /// <summary>
	    /// Bit flag indicating he match is based on the declared encoding.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Text.CharsetMatch.GetMatchType"/>
	    /// @stable ICU 3.4
	    public const int DECLARED_ENCODING = 4;
	
	    /// <summary>
	    /// Bit flag indicating the match is based on language statistics.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Text.CharsetMatch.GetMatchType"/>
	    /// @stable ICU 3.4
	    public const int LANG_STATISTICS = 8;
	
	    /// <summary>
	    /// Return flags indicating what it was about the input data that caused this
	    /// charset to be considered as a possible match. The result is a bitfield
	    /// containing zero or more of the flags ENCODING_SCHEME, BOM,
	    /// DECLARED_ENCODING, and LANG_STATISTICS. A result of zero means no
	    /// information is available.
	    /// <p>
	    /// Note: currently, this method always returns zero.
	    /// <p>
	    /// </summary>
	    ///
	    /// <returns>the type of match found for this charset.</returns>
	    /// @draft ICU 3.4
	    /// @provisional This API might change or be removed in a future release.
	    public int GetMatchType() {
	        // TODO: create a list of enum-like constants for common combinations of
	        // types of matches.
	        return 0;
	    }
	
	    /// <summary>
	    /// Get the name of the detected charset. The name will be one that can be
	    /// used with other APIs on the platform that accept charset names. It is the
	    /// "Canonical name" as defined by the class java.nio.charset.Charset; for
	    /// charsets that are registered with the IANA charset registry, this is the
	    /// MIME-preferred registerd name.
	    /// </summary>
	    ///
	    /// <seealso cref="T:System.Text.Encoding"/>
	    /// <seealso cref="T:System.IO.StreamReader"/>
	    /// <returns>The name of the charset.</returns>
	    /// @stable ICU 3.4
	    public String GetName() {
	        return fRecognizer.GetName();
	    }
	
	    /// <summary>
	    /// Get the ISO code for the language of the detected charset.
	    /// </summary>
	    ///
	    /// <returns>The ISO code for the language or <c>null</c> if the
	    /// language cannot be determined.</returns>
	    /// @stable ICU 3.4
	    public String GetLanguage() {
	        return fRecognizer.GetLanguage();
	    }
	
	    /// <summary>
	    /// Compare to other CharsetMatch objects. Comparison is based on the match
	    /// confidence value, which allows CharsetDetector.detectAll() to order its
	    /// results.
	    /// </summary>
	    ///
	    /// <param name="o">the CharsetMatch object to compare against.</param>
	    /// <returns>a negative integer, zero, or a positive integer as the confidence
	    /// level of this CharsetMatch is less than, equal to, or greater
	    /// than that of the argument.</returns>
	    /// <exception cref="ClassCastException">if the argument is not a CharsetMatch.</exception>
	    /// @stable ICU 3.4
	    public virtual int CompareTo(Object o) {
	        CharsetMatch other = (CharsetMatch) o;
	        int compareResult = 0;
	        if (this.fConfidence > other.fConfidence) {
	            compareResult = 1;
	        } else if (this.fConfidence < other.fConfidence) {
	            compareResult = -1;
	        }
	        return compareResult;
	    }
	
	    /*
	     * Constructor. Implementation internal
	     */
	    internal CharsetMatch(CharsetDetector det, CharsetRecognizer rec, int conf) {
	        this.fRawInput = null;
	        this.fInputStream = null;
	        fRecognizer = rec;
	        fConfidence = conf;
	
	        // The references to the original aplication input data must be copied
	        // out
	        // of the charset recognizer to here, in case the application resets the
	        // recognizer before using this CharsetMatch.
	        if (det.fInputStream == null) {
	            // We only want the existing input byte data if it came straight
	            // from the user,
	            // not if is just the head of a stream.
	            fRawInput = det.fRawInput;
	            fRawLength = det.fRawLength;
	        }
	        fInputStream = det.fInputStream;
	    }
	
	    //
	    // Private Data
	    //
	    private int fConfidence;
	
	    private CharsetRecognizer fRecognizer;
	
	    private byte[] fRawInput; // Original, untouched input bytes.
	                                     // If user gave us a byte array, this is
	                                     // it.
	
	    private int fRawLength; // Length of data in fRawInput array.
	
	    private Stream fInputStream; // User's input stream, or null if
	                                             // the user
	                                             // gave us a byte array.
	}
}
