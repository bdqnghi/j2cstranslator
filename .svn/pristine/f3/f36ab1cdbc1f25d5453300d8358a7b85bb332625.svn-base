/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 11/30/10 3:38 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace ILOG.J2CsMapping.RegEx {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Back reference node, i.e. \1-9;
	/// </summary>
	///
	internal class BackReferenceSet : CIBackReferenceSet {
	
		public BackReferenceSet(int groupIndex, int consCounter) : base(groupIndex, consCounter) {
		}
	
		public override int Matches(int stringIndex, String testString,
				MatchResultImpl matchResult) {
			String group = GetString(matchResult);
			if (group == null
					|| (stringIndex + group.Length) > matchResult.GetRightBound())
				return -1;
			int shift = (ILOG.J2CsMapping.Util.StringUtil.StartsWith(testString.ToString(),group,stringIndex)) ? group.Length : -1;
	
			if (shift < 0) {
				return -1;
			}
			matchResult.SetConsumed(consCounter, shift);
			return next.Matches(stringIndex + shift, testString, matchResult);
		}
	
		public override int Find(int strIndex, String testString,
				MatchResultImpl matchResult) {
			String group = GetString(matchResult);
			int strLength = matchResult.GetLeftBound();
	
			if (group == null || (strIndex + group.Length) > strLength)
				return -1;
	
			String testStr = testString.ToString();
	
			while (strIndex <= strLength) {
				strIndex = ILOG.J2CsMapping.Util.StringUtil.IndexOf(testStr,group,strIndex);
	
				if (strIndex < 0)
					return -1;
				if (next.Matches(strIndex + group.Length, testString, matchResult) >= 0) {
					return strIndex;
				}
	
				strIndex++;
			}
	
			return -1;
		}
	
		public override int FindBack(int strIndex, int lastIndex, String testString,
				MatchResultImpl matchResult) {
			String group = GetString(matchResult);
	
			if (group == null)
				return -1;
	
			String testStr = testString.ToString();
	
			while (lastIndex >= strIndex) {
				lastIndex = testStr.LastIndexOf(group, lastIndex);
	
				if (lastIndex < 0 || lastIndex < strIndex)
					return -1;
				if (next.Matches(lastIndex + group.Length, testString,
						matchResult) >= 0) {
					return lastIndex;
				}
	
				lastIndex--;
			}
			return -1;
		}
	
		public override bool First(AbstractSet set) {
			return true;
		}
	
		public override String GetName() {
			return "back reference: " + this.groupIndex; //$NON-NLS-1$
		}
	}
}
