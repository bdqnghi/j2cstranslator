/*
 *******************************************************************************
 * Copyright (C) 1996-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:02 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace IBM.ICU.Charset
{

    using IBM.ICU.Text;
    using IBM.ICU.Util;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using System.IO;
    using System.Resources;
    using System.Runtime.CompilerServices;
    using NUnit.Framework;

    /// <summary>
    /// Tests for the <c>HebrewCalendar</c> class.
    /// </summary>
    [TestFixture]
    public class HebrewTest : CalendarTest
    {
        public static void Main(String[] args)
        {
            new HebrewTest().Run(args);
        }

        // Constants to save typing.
        public const int TISHRI = IBM.ICU.Util.HebrewCalendar.TISHRI;

        public const int HESHVAN = IBM.ICU.Util.HebrewCalendar.HESHVAN;

        public const int KISLEV = IBM.ICU.Util.HebrewCalendar.KISLEV;

        public const int TEVET = IBM.ICU.Util.HebrewCalendar.TEVET;

        public const int SHEVAT = IBM.ICU.Util.HebrewCalendar.SHEVAT;

        public const int ADAR_1 = IBM.ICU.Util.HebrewCalendar.ADAR_1;

        public const int ADAR = IBM.ICU.Util.HebrewCalendar.ADAR;

        public const int NISAN = IBM.ICU.Util.HebrewCalendar.NISAN;

        public const int IYAR = IBM.ICU.Util.HebrewCalendar.IYAR;

        public const int SIVAN = IBM.ICU.Util.HebrewCalendar.SIVAN;

        public const int TAMUZ = IBM.ICU.Util.HebrewCalendar.TAMUZ;

        public const int AV = IBM.ICU.Util.HebrewCalendar.AV;

        public const int ELUL = IBM.ICU.Util.HebrewCalendar.ELUL;

        /// <summary>
        /// Test the behavior of HebrewCalendar.roll The only real nastiness with
        /// roll is the MONTH field, since a year can have a variable number of
        /// months.
        /// </summary>
        [Test]
        public void TestRoll()
        {
            int[][] tests = new int[][] {
	                        new int[] {
	                                5759,
	                                HESHVAN,
	                                2,
	                                IBM.ICU.Charset.CalendarTest.MONTH,
	                                1, 5759, KISLEV, 2 },
	                        new int[] {
	                                5759,
	                                SHEVAT,
	                                2,
	                                IBM.ICU.Charset.CalendarTest.MONTH,
	                                1, 5759, ADAR, 2 },
	                        new int[] {
	                                5759,
	                                SHEVAT,
	                                2,
	                                IBM.ICU.Charset.CalendarTest.MONTH,
	                                2, 5759, NISAN, 2 },
	                        new int[] {
	                                5759,
	                                SHEVAT,
	                                2,
	                                IBM.ICU.Charset.CalendarTest.MONTH,
	                                12, 5759, SHEVAT, 2 },
	                        new int[] {
	                                5759,
	                                AV,
	                                1,
	                                IBM.ICU.Charset.CalendarTest.MONTH,
	                                12, 5759, AV, 1 },
	                        new int[] {
	                                5757,
	                                HESHVAN,
	                                2,
	                                IBM.ICU.Charset.CalendarTest.MONTH,
	                                1, 5757, KISLEV, 2 },
	                        new int[] {
	                                5757,
	                                SHEVAT,
	                                2,
	                                IBM.ICU.Charset.CalendarTest.MONTH,
	                                1, 5757, ADAR_1, 2 },
	                        new int[] {
	                                5757,
	                                SHEVAT,
	                                2,
	                                IBM.ICU.Charset.CalendarTest.MONTH,
	                                2, 5757, ADAR, 2 },
	                        new int[] {
	                                5757,
	                                SHEVAT,
	                                2,
	                                IBM.ICU.Charset.CalendarTest.MONTH,
	                                3, 5757, NISAN, 2 },
	                        new int[] {
	                                5757,
	                                SHEVAT,
	                                2,
	                                IBM.ICU.Charset.CalendarTest.MONTH,
	                                12, 5757, TEVET, 2 },
	                        new int[] {
	                                5757,
	                                SHEVAT,
	                                2,
	                                IBM.ICU.Charset.CalendarTest.MONTH,
	                                13, 5757, SHEVAT, 2 },
	                        new int[] {
	                                5757,
	                                AV,
	                                1,
	                                IBM.ICU.Charset.CalendarTest.MONTH,
	                                12, 5757, TAMUZ, 1 },
	                        new int[] {
	                                5757,
	                                KISLEV,
	                                1,
	                                IBM.ICU.Charset.CalendarTest.DATE,
	                                30, 5757, KISLEV, 2 },
	                        new int[] {
	                                5758,
	                                KISLEV,
	                                1,
	                                IBM.ICU.Charset.CalendarTest.DATE,
	                                31, 5758, KISLEV, 2 },
	                        new int[] {
	                                5757,
	                                TISHRI,
	                                1,
	                                IBM.ICU.Charset.CalendarTest.YEAR,
	                                1, 5758, TISHRI, 1 },
	                        new int[] {
	                                5757,
	                                TISHRI,
	                                30,
	                                IBM.ICU.Charset.CalendarTest.MONTH,
	                                1, 5757, HESHVAN, 29 },
	                        new int[] {
	                                5758,
	                                KISLEV,
	                                30,
	                                IBM.ICU.Charset.CalendarTest.YEAR,
	                                -1, 5757, KISLEV, 29 } };
            // try{
            IBM.ICU.Util.HebrewCalendar cal = new IBM.ICU.Util.HebrewCalendar(IBM.ICU.Charset.CalendarTest.UTC, ILOG.J2CsMapping.Util.Locale.GetDefault());

            DoRollAdd(IBM.ICU.Charset.CalendarTest.ROLL, cal, tests);
            // }catch(MissingResourceException ex){
            // warnln("Got Exception: "+ ex.getMessage());
            // }
        }

        /// <summary>
        /// Test the behavior of HebrewCalendar.roll The only real nastiness with
        /// roll is the MONTH field, since a year can have a variable number of
        /// months.
        /// </summary>
        [Test]
        public void TestAdd()
        {
            int[][] tests = new int[][] {
	                new int[] { 5759, HESHVAN, 2,
	                        IBM.ICU.Charset.CalendarTest.MONTH, 1,
	                        5759, KISLEV, 2 },
	                new int[] { 5759, SHEVAT, 2,
	                        IBM.ICU.Charset.CalendarTest.MONTH, 1,
	                        5759, ADAR, 2 },
	                new int[] { 5759, SHEVAT, 2,
	                        IBM.ICU.Charset.CalendarTest.MONTH, 2,
	                        5759, NISAN, 2 },
	                new int[] { 5759, SHEVAT, 2,
	                        IBM.ICU.Charset.CalendarTest.MONTH, 12,
	                        5760, SHEVAT, 2 },
	                new int[] { 5757, HESHVAN, 2,
	                        IBM.ICU.Charset.CalendarTest.MONTH, 1,
	                        5757, KISLEV, 2 },
	                new int[] { 5757, SHEVAT, 2,
	                        IBM.ICU.Charset.CalendarTest.MONTH, 1,
	                        5757, ADAR_1, 2 },
	                new int[] { 5757, SHEVAT, 2,
	                        IBM.ICU.Charset.CalendarTest.MONTH, 2,
	                        5757, ADAR, 2 },
	                new int[] { 5757, SHEVAT, 2,
	                        IBM.ICU.Charset.CalendarTest.MONTH, 3,
	                        5757, NISAN, 2 },
	                new int[] { 5757, SHEVAT, 2,
	                        IBM.ICU.Charset.CalendarTest.MONTH, 12,
	                        5758, TEVET, 2 },
	                new int[] { 5757, SHEVAT, 2,
	                        IBM.ICU.Charset.CalendarTest.MONTH, 13,
	                        5758, SHEVAT, 2 },
	                new int[] { 5762, AV, 1,
	                        IBM.ICU.Charset.CalendarTest.MONTH, 1,
	                        5762, ELUL, 1 },
	                new int[] { 5762, AV, 30,
	                        IBM.ICU.Charset.CalendarTest.DATE, 1,
	                        5762, ELUL, 1 },
	                new int[] { 5762, ELUL, 1,
	                        IBM.ICU.Charset.CalendarTest.DATE, -1,
	                        5762, AV, 30 },
	                new int[] { 5762, ELUL, 1,
	                        IBM.ICU.Charset.CalendarTest.MONTH, -1,
	                        5762, AV, 1 },
	                new int[] { 5757, KISLEV, 1,
	                        IBM.ICU.Charset.CalendarTest.DATE, 30,
	                        5757, TEVET, 2 },
	                new int[] { 5758, KISLEV, 1,
	                        IBM.ICU.Charset.CalendarTest.DATE, 31,
	                        5758, TEVET, 2 } };
            try
            {
                IBM.ICU.Util.HebrewCalendar cal = new IBM.ICU.Util.HebrewCalendar(IBM.ICU.Charset.CalendarTest.UTC, ILOG.J2CsMapping.Util.Locale.GetDefault());

                DoRollAdd(IBM.ICU.Charset.CalendarTest.ADD, cal, tests);
            }
            catch (MissingManifestResourceException ex)
            {
                Warnln("Could not load the locale data");
            }
        }

        /// <summary>
        /// A huge list of test cases to make sure that computeTime and computeFields
        /// work properly for a wide range of data.
        /// </summary>
        [Test]
        public void TestCases()
        {
            try
            {
                /*	            TestCase[] testCases = {
                                        //
                                        // Most of these test cases were taken from the back of
                                        // "Calendrical Calculations", with some extras added to
                                        // help
                                        // debug a few of the problems that cropped up in
                                        // development.
                                        //
                                        // The months in this table are 1-based rather than 0-based,
                                        // because it's easier to edit that way.
                                        //
                                        // Julian Day Era Year Month Day WkDay Hour Min Sec
                                        new TestCase(1507231.5d, 0, 3174, 12, 10, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0),
                                        new TestCase(1660037.5d, 0, 3593, 3, 25, IBM.ICU.Charset.CalendarTest.WED, 0, 0, 0),
                                        new TestCase(1746893.5d, 0, 3831, 1, 3, IBM.ICU.Charset.CalendarTest.WED, 0, 0, 0),
                                        new TestCase(1770641.5d, 0, 3896, 1, 9, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0),
                                        new TestCase(1892731.5d, 0, 4230, 4, 18, IBM.ICU.Charset.CalendarTest.WED, 0, 0, 0),
                                        new TestCase(1931579.5d, 0, 4336, 10, 4, IBM.ICU.Charset.CalendarTest.MON, 0, 0, 0),
                                        new TestCase(1974851.5d, 0, 4455, 2, 13, IBM.ICU.Charset.CalendarTest.SAT, 0, 0, 0),
                                        new TestCase(2091164.5d, 0, 4773, 9, 6, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0),
                                        new TestCase(2121509.5d, 0, 4856, 9, 23, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0),
                                        new TestCase(2155779.5d, 0, 4950, 8, 7, IBM.ICU.Charset.CalendarTest.FRI, 0, 0, 0),
                                        new TestCase(2174029.5d, 0, 5000, 7, 8, IBM.ICU.Charset.CalendarTest.SAT, 0, 0, 0),
                                        new TestCase(2191584.5d, 0, 5048, 8, 21, IBM.ICU.Charset.CalendarTest.FRI, 0, 0, 0),
                                        new TestCase(2195261.5d, 0, 5058, 9, 7, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0),
                                        new TestCase(2229274.5d, 0, 5151, 11, 1, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0),
                                        new TestCase(2245580.5d, 0, 5196, 5, 7, IBM.ICU.Charset.CalendarTest.WED, 0, 0, 0),
                                        new TestCase(2266100.5d, 0, 5252, 8, 3, IBM.ICU.Charset.CalendarTest.SAT, 0, 0, 0),
                                        new TestCase(2288542.5d, 0, 5314, 1, 1, IBM.ICU.Charset.CalendarTest.SAT, 0, 0, 0),
                                        new TestCase(2290901.5d, 0, 5320, 6, 27, IBM.ICU.Charset.CalendarTest.SAT, 0, 0, 0),
                                        new TestCase(2323140.5d, 0, 5408, 10, 20, IBM.ICU.Charset.CalendarTest.WED, 0, 0, 0),
                                        new TestCase(2334551.5d, 0, 5440, 1, 1, IBM.ICU.Charset.CalendarTest.THU, 0, 0, 0),
                                        new TestCase(2334581.5d, 0, 5440, 2, 1, IBM.ICU.Charset.CalendarTest.SAT, 0, 0, 0),
                                        new TestCase(2334610.5d, 0, 5440, 3, 1, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0),
                                        new TestCase(2334639.5d, 0, 5440, 4, 1, IBM.ICU.Charset.CalendarTest.MON, 0, 0, 0),
                                        new TestCase(2334668.5d, 0, 5440, 5, 1, IBM.ICU.Charset.CalendarTest.TUE, 0, 0, 0),
                                        new TestCase(2334698.5d, 0, 5440, 6, 1, IBM.ICU.Charset.CalendarTest.THU, 0, 0, 0),
                                        new TestCase(2334728.5d, 0, 5440, 7, 1, IBM.ICU.Charset.CalendarTest.SAT, 0, 0, 0),
                                        new TestCase(2334757.5d, 0, 5440, 8, 1, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0),
                                        new TestCase(2334787.5d, 0, 5440, 9, 1, IBM.ICU.Charset.CalendarTest.TUE, 0, 0, 0),
                                        new TestCase(2334816.5d, 0, 5440, 10, 1, IBM.ICU.Charset.CalendarTest.WED, 0, 0, 0),
                                        new TestCase(2334846.5d, 0, 5440, 11, 1, IBM.ICU.Charset.CalendarTest.FRI, 0, 0, 0),
                                        new TestCase(2334848.5d, 0, 5440, 11, 3, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0),
                                        new TestCase(2334934.5d, 0, 5441, 1, 1, IBM.ICU.Charset.CalendarTest.TUE, 0, 0, 0),
                                        new TestCase(2348020.5d, 0, 5476, 12, 5, IBM.ICU.Charset.CalendarTest.FRI, 0, 0, 0),
                                        new TestCase(2366978.5d, 0, 5528, 11, 4, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0),
                                        new TestCase(2385648.5d, 0, 5579, 12, 11, IBM.ICU.Charset.CalendarTest.MON, 0, 0, 0),
                                        new TestCase(2392825.5d, 0, 5599, 8, 12, IBM.ICU.Charset.CalendarTest.WED, 0, 0, 0),
                                        new TestCase(2416223.5d, 0, 5663, 8, 22, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0),
                                        new TestCase(2425848.5d, 0, 5689, 12, 19, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0),
                                        new TestCase(2430266.5d, 0, 5702, 1, 8, IBM.ICU.Charset.CalendarTest.MON, 0, 0, 0),
                                        new TestCase(2430833.5d, 0, 5703, 8, 14, IBM.ICU.Charset.CalendarTest.MON, 0, 0, 0),
                                        new TestCase(2431004.5d, 0, 5704, 1, 8, IBM.ICU.Charset.CalendarTest.THU, 0, 0, 0),
                                        new TestCase(2448698.5d, 0, 5752, 7, 12, IBM.ICU.Charset.CalendarTest.TUE, 0, 0, 0),
                                        new TestCase(2450138.5d, 0, 5756, 7, 5, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0),
                                        new TestCase(2465737.5d, 0, 5799, 2, 12, IBM.ICU.Charset.CalendarTest.WED, 0, 0, 0),
                                        new TestCase(2486076.5d, 0, 5854, 12, 5, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0),
	
                                        // Additional test cases for bugs found during development
                                        // G.YY/MM/DD Era Year Month Day WkDay Hour Min Sec
                                        new TestCase(1013, 9, 8, 0, 4774, 1, 1, IBM.ICU.Charset.CalendarTest.TUE, 0, 0, 0),
                                        new TestCase(1239, 9, 1, 0, 5000, 1, 1, IBM.ICU.Charset.CalendarTest.THU, 0, 0, 0),
                                        new TestCase(1240, 9, 18, 0, 5001, 1, 1, IBM.ICU.Charset.CalendarTest.TUE, 0, 0, 0),
	
                                        // Test cases taken from a table of 14 "year types" in the
                                        // Help file
                                        // of the application "Hebrew Calendar"
                                        new TestCase(2456187.5d, 0, 5773, 1, 1, IBM.ICU.Charset.CalendarTest.MON, 0, 0, 0),
                                        new TestCase(2459111.5d, 0, 5781, 1, 1, IBM.ICU.Charset.CalendarTest.SAT, 0, 0, 0),
                                        new TestCase(2453647.5d, 0, 5766, 1, 1, IBM.ICU.Charset.CalendarTest.TUE, 0, 0, 0),
                                        new TestCase(2462035.5d, 0, 5789, 1, 1, IBM.ICU.Charset.CalendarTest.THU, 0, 0, 0),
                                        new TestCase(2458756.5d, 0, 5780, 1, 1, IBM.ICU.Charset.CalendarTest.MON, 0, 0, 0),
                                        new TestCase(2460586.5d, 0, 5785, 1, 1, IBM.ICU.Charset.CalendarTest.THU, 0, 0, 0),
                                        new TestCase(2463864.5d, 0, 5794, 1, 1, IBM.ICU.Charset.CalendarTest.SAT, 0, 0, 0),
                                        new TestCase(2463481.5d, 0, 5793, 1, 1, IBM.ICU.Charset.CalendarTest.MON, 0, 0, 0),
                                        new TestCase(2470421.5d, 0, 5812, 1, 1, IBM.ICU.Charset.CalendarTest.THU, 0, 0, 0),
                                        new TestCase(2460203.5d, 0, 5784, 1, 1, IBM.ICU.Charset.CalendarTest.SAT, 0, 0, 0),
                                        new TestCase(2459464.5d, 0, 5782, 1, 1, IBM.ICU.Charset.CalendarTest.TUE, 0, 0, 0),
                                        new TestCase(2467142.5d, 0, 5803, 1, 1, IBM.ICU.Charset.CalendarTest.MON, 0, 0, 0),
                                        new TestCase(2455448.5d, 0, 5771, 1, 1, IBM.ICU.Charset.CalendarTest.THU, 0, 0, 0),
	
                                        // Test cases for JB#2327
                                        // http://www.fourmilab.com/documents/calendar/
                                        // http://www.calendarhome.com/converter/
                                        // 2452465.5, 2002, JULY, 10, 5762, AV, 1,
                                        // 2452494.5, 2002, AUGUST, 8, 5762, AV, 30,
                                        // 2452495.5, 2002, AUGUST, 9, 5762, ELUL, 1,
                                        // 2452523.5, 2002, SEPTEMBER, 6, 5762, ELUL, 29,
                                        // 2452524.5, 2002, SEPTEMBER, 7, 5763, TISHRI, 1,
                                        // Julian Day Era Year Month Day WkDay Hour Min Sec
                                        new TestCase(2452465.5d, 0, 5762, AV + 1, 1, IBM.ICU.Charset.CalendarTest.WED, 0, 0, 0),
                                        new TestCase(2452494.5d, 0, 5762, AV + 1, 30, IBM.ICU.Charset.CalendarTest.THU, 0, 0, 0),
                                        new TestCase(2452495.5d, 0, 5762, ELUL + 1, 1, IBM.ICU.Charset.CalendarTest.FRI, 0, 0, 0),
                                        new TestCase(2452523.5d, 0, 5762, ELUL + 1, 29, IBM.ICU.Charset.CalendarTest.FRI, 0, 0, 0),
                                        new TestCase(2452524.5d, 0, 5763, TISHRI + 1, 1, IBM.ICU.Charset.CalendarTest.SAT, 0, 0,
                                                0), };
                                DoTestCases(testCases, new HebrewCalendar());*/

            }
            catch (MissingManifestResourceException ex)
            {
                Warnln("Got Exception: " + ex.Message);
            }
        }

        /// <summary>
        /// Problem reported by Armand Bendanan in which setting of the MONTH field
        /// in a Hebrew calendar causes the time fields to go negative.
        /// </summary>
        [Test]
        public void TestTimeFields()
        {
            try
            {
                IBM.ICU.Util.HebrewCalendar calendar = new IBM.ICU.Util.HebrewCalendar(5761, 0, 11, 12, 28,
                        15);
                calendar.Set(IBM.ICU.Util.Calendar.YEAR, 5717);
                calendar.Set(IBM.ICU.Util.Calendar.MONTH, 2);
                calendar.Set(IBM.ICU.Util.Calendar.DAY_OF_MONTH, 23);
                if (calendar.Get(IBM.ICU.Util.Calendar.HOUR_OF_DAY) != 12)
                {
                    Errln("Fail: HebrewCalendar HOUR_OF_DAY = "
                            + calendar.Get(IBM.ICU.Util.Calendar.HOUR_OF_DAY));
                }
            }
            catch (MissingManifestResourceException ex)
            {
                Warnln("Got Exception: " + ex.Message);
            }
        }

        /// <summary>
        /// Problem reported by Armand Bendanan (armand.bendanan@free.fr) in which
        /// setting of the MONTH field in a Hebrew calendar to ELUL on non leap years
        /// causes the date to be set on TISHRI next year.
        /// </summary>
        [Test]
        public void TestElulMonth()
        {
            try
            {
                IBM.ICU.Util.HebrewCalendar cal = new IBM.ICU.Util.HebrewCalendar();
                // Leap years are:
                // 3 6 8 11 14 17 19 (and so on - 19-year cycle)
                for (int year = 1; year < 50; year++)
                {
                    // I hope that year = 0 does not exists
                    // because the test fails for it !
                    cal.Clear();

                    cal.Set(IBM.ICU.Util.Calendar.YEAR, year);
                    cal.Set(IBM.ICU.Util.Calendar.MONTH, ELUL);
                    cal.Set(IBM.ICU.Util.Calendar.DAY_OF_MONTH, 1);

                    int yact = cal.Get(IBM.ICU.Util.Calendar.YEAR);
                    int mact = cal.Get(IBM.ICU.Util.Calendar.MONTH);

                    if (year != yact || ELUL != mact)
                    {
                        Errln("Fail: " + ELUL + "/" + year + " -> " + mact + "/"
                                + yact);
                    }
                }
            }
            catch (MissingManifestResourceException ex)
            {
                Warnln("Got Exception: " + ex.Message);
            }
        }

        /// <summary>
        /// Test of the behavior of the month field. This requires special handling
        /// in the Hebrew calendar because of the pattern of leap years.
        /// </summary>
        [Test]
        public void TestMonthMovement()
        {
            try
            {
                IBM.ICU.Util.HebrewCalendar cal = new IBM.ICU.Util.HebrewCalendar();
                // Leap years are:
                // 3 6 8 11 14 17 19 (and so on - 19-year cycle)
                // We can't test complete() on some lines below because of ADAR_1 --
                // if
                // the calendar is set to ADAR_1 on a non-leap year, the result is
                // undefined.
                int[] DATA = {
	                    // m1/y1 - month/year before (month is 1-based)
	                    // delta - amount to add to month field
	                    // m2/y2 - month/year after add(MONTH, delta)
	                    // m3/y3 - month/year after set(MONTH, m1+delta)
	                    // m1 y1 delta m2 y2 m3 y3
	                    10, 2, +24, 9, 4, 9, 4, 10, 2, +60, 8, 7, 8, 7, 1, 2, +12,
	                    1, 3, 13,
	                    2, // *set != add; also see '*' below
	                    3, 18, -24, 4, 16, 4, 16, 1, 6, -24, 1, 4, 1, 4, 4, 3, +2,
	                    6, 3, 6, 3, // Leap year - no skip 4,5,6,7,8
	                    8, 3, -2, 6, 3, 6, 3, // Leap year - no skip
	                    4, 2, +2, 7, 2, 7, 2, // Skip leap month 4,5,(6),7,8
	                    8, 2, -2, 5, 2, 7, 2, // *Skip leap month going backward
	            };
                for (int i = 0; i < DATA.Length; )
                {
                    int m = DATA[i++], y = DATA[i++];
                    int monthDelta = DATA[i++];
                    int m2 = DATA[i++], y2 = DATA[i++];
                    int m3 = DATA[i++], y3 = DATA[i++];
                    int mact, yact;

                    cal.Clear();
                    cal.Set(IBM.ICU.Util.Calendar.YEAR, y);
                    cal.Set(IBM.ICU.Util.Calendar.MONTH, m - 1);
                    cal.Add(IBM.ICU.Util.Calendar.MONTH, monthDelta);
                    yact = cal.Get(IBM.ICU.Util.Calendar.YEAR);
                    mact = cal.Get(IBM.ICU.Util.Calendar.MONTH) + 1;
                    if (y2 != yact || m2 != mact)
                    {
                        Errln("Fail: " + m + "/" + y + " -> add(MONTH, "
                                + monthDelta + ") -> " + mact + "/" + yact
                                + ", expected " + m2 + "/" + y2);
                        cal.Clear();
                        cal.Set(IBM.ICU.Util.Calendar.YEAR, y);
                        cal.Set(IBM.ICU.Util.Calendar.MONTH, m - 1);
                        Logln("Start: " + m + "/" + y);
                        int delta = (monthDelta > 0) ? 1 : -1;
                        for (int c = 0; c != monthDelta; c += delta)
                        {
                            cal.Add(IBM.ICU.Util.Calendar.MONTH, delta);
                            Logln("+ " + delta + " MONTH -> "
                                    + (cal.Get(IBM.ICU.Util.Calendar.MONTH) + 1) + "/"
                                    + cal.Get(IBM.ICU.Util.Calendar.YEAR));
                        }
                    }

                    cal.Clear();
                    cal.Set(IBM.ICU.Util.Calendar.YEAR, y);
                    cal.Set(IBM.ICU.Util.Calendar.MONTH, m + monthDelta - 1);
                    yact = cal.Get(IBM.ICU.Util.Calendar.YEAR);
                    mact = cal.Get(IBM.ICU.Util.Calendar.MONTH) + 1;
                    if (y3 != yact || m3 != mact)
                    {
                        Errln("Fail: " + (m + monthDelta) + "/" + y
                                + " -> complete() -> " + mact + "/" + yact
                                + ", expected " + m3 + "/" + y3);
                    }
                }
            }
            catch (MissingManifestResourceException ex)
            {
                Warnln("Got Exception: " + ex.Message);
            }
        }

        /**
         * Test handling of ADAR_1.
         */
        /*
         * public void TestAdar1() { HebrewCalendar cal = new HebrewCalendar();
         * cal.clear(); cal.set(Calendar.YEAR, 1903); // leap
         * cal.set(Calendar.MONTH, HebrewCalendar.ADAR_1);
         * logln("1903(leap)/ADAR_1 => " + cal.get(Calendar.YEAR) + "/" +
         * (cal.get(Calendar.MONTH)+1));
         * 
         * cal.clear(); cal.set(Calendar.YEAR, 1904); // non-leap
         * cal.set(Calendar.MONTH, HebrewCalendar.ADAR_1);
         * logln("1904(non-leap)/ADAR_1 => " + cal.get(Calendar.YEAR) + "/" +
         * (cal.get(Calendar.MONTH)+1)); }
         */

        /// <summary>
        /// With no fields set, the calendar should use default values.
        /// </summary>
        [Test]
        public void TestDefaultFieldValues()
        {
            try
            {
                IBM.ICU.Util.HebrewCalendar cal = new IBM.ICU.Util.HebrewCalendar();
                cal.Clear();
                Logln("cal.clear() -> " + cal.GetTime());
            }
            catch (MissingManifestResourceException ex)
            {
                Warnln("could not load the locale data");
            }
        }

        /// <summary>
        /// Test limits of the Hebrew calendar
        /// </summary>
        [Test]
        public void TestLimits()
        {
            IBM.ICU.Util.Calendar cal = IBM.ICU.Util.Calendar.GetInstance();
            cal.Set(2007, IBM.ICU.Util.Calendar.JANUARY, 1);
            IBM.ICU.Util.HebrewCalendar hebrew = new IBM.ICU.Util.HebrewCalendar();
            DoLimitsTest(hebrew, null, cal.GetTime());
            DoTheoreticalLimitsTest(hebrew, true);
        }

        [Test]
        public void TestCoverage()
        {
            try
            {
                {
                    // new HebrewCalendar(TimeZone)
                    IBM.ICU.Util.HebrewCalendar cal = new IBM.ICU.Util.HebrewCalendar(IBM.ICU.Util.TimeZone.GetDefault());
                    if (cal == null)
                    {
                        Errln("could not create HebrewCalendar with TimeZone");
                    }
                }

                {
                    // new HebrewCalendar(ULocale)
                    IBM.ICU.Util.HebrewCalendar cal_0 = new IBM.ICU.Util.HebrewCalendar(IBM.ICU.Util.ULocale.GetDefault());
                    if (cal_0 == null)
                    {
                        Errln("could not create HebrewCalendar with ULocale");
                    }
                }

                {
                    // new HebrewCalendar(Locale)
                    IBM.ICU.Util.HebrewCalendar cal_1 = new IBM.ICU.Util.HebrewCalendar(ILOG.J2CsMapping.Util.Locale.GetDefault());
                    if (cal_1 == null)
                    {
                        Errln("could not create HebrewCalendar with locale");
                    }
                }

                {
                    // new HebrewCalendar(Date)
                    IBM.ICU.Util.HebrewCalendar cal_2 = new IBM.ICU.Util.HebrewCalendar(DateTime.Now);
                    if (cal_2 == null)
                    {
                        Errln("could not create HebrewCalendar with date");
                    }
                }

                {
                    // data
                    IBM.ICU.Util.HebrewCalendar cal_3 = new IBM.ICU.Util.HebrewCalendar(2800,
                            IBM.ICU.Util.HebrewCalendar.SHEVAT, 1);
                    DateTime time = cal_3.GetTime();

                    String[] calendarLocales = { "iw_IL" };

                    String[] formatLocales = { "en", "fi", "fr", "hu", "iw", "nl" };
                    for (int i = 0; i < calendarLocales.Length; ++i)
                    {
                        String calLocName = calendarLocales[i];
                        ILOG.J2CsMapping.Util.Locale calLocale = IBM.ICU.Impl.LocaleUtility
                                .GetLocaleFromName(calLocName);
                        cal_3 = new IBM.ICU.Util.HebrewCalendar(calLocale);

                        for (int j = 0; j < formatLocales.Length; ++j)
                        {
                            String locName = formatLocales[j];
                            ILOG.J2CsMapping.Util.Locale formatLocale = IBM.ICU.Impl.LocaleUtility
                                    .GetLocaleFromName(locName);
                            DateFormat format = IBM.ICU.Text.DateFormat.GetDateTimeInstance(cal_3,
                                    IBM.ICU.Text.DateFormat.FULL, IBM.ICU.Text.DateFormat.FULL, formatLocale);
                            Logln(calLocName + "/" + locName + " --> "
                                    + format.Format(time));
                        }
                    }
                }
            }
            catch (MissingManifestResourceException ex)
            {
                Warnln("Could not load the locale data. " + ex.Message);
            }
        }
    }
}
