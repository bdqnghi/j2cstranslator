/*
 **********************************************************************
 * Copyright (c) 2002-2006, International Business Machines
 * Corporation and others.  All Rights Reserved.
 **********************************************************************
 * Author: Mark Davis
 **********************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Charset {
	
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A Relation is a set of mappings from keys to values. Unlike Map, there is not
	/// guaranteed to be a single value per key. The Map-like APIs return collections
	/// for values.
	/// </summary>
	///
	public class Relation {
	    private IDictionary m;
	
	    private Relation.CollectionFactory  subcollection;
	
	    public Relation(IDictionary mainMap, Relation.CollectionFactory  subcollection_0) {
	        m = mainMap;
	        if (subcollection_0 == null)
	            subcollection_0 = new Relation.CollectionMaker (null);
	        this.subcollection = subcollection_0;
	    }
	
	    public void Clear() {
	        m.Clear();
	    }
	
	    public bool ContainsKey(Object key) {
	        return m.Contains(key);
	    }
	
	    public bool ContainsValue(Object value_ren) {
	        return m.Contains(value_ren);
	    }
	
	    public ILOG.J2CsMapping.Collections.ISet EntrySet() {
            throw new NotImplementedException();
	       // return m.Values;
	    }
	
	    public override bool Equals(Object obj) {
	        return m.Equals(obj);
	    }
	
	    public override int GetHashCode() {
	        return m.GetHashCode();
	    }
	
	    public bool IsEmpty() {
	        return (m.Count==0);
	    }
	
	    public Object Remove(Object key) {
	        return ILOG.J2CsMapping.Collections.Collections.Remove(m,key);
	    }
	
	    public int Size() {
	        return m.Count;
	    }
	
	    public override String ToString() {
	        return m.ToString();
	    }
	
	    public ILOG.J2CsMapping.Collections.ISet KeySet() {
	        return new ILOG.J2CsMapping.Collections.ListSet(m.Keys);
	    }
	
	    /*
	     * public void addAll(Relation t) { for (Iterator it =
	     * t.keySet().iterator(); it.hasNext();) { Object key = it.next(); add(key,
	     * t.get(key)); } }
	     */
	    public ICollection Values() {
	        return m.Values;
	    }
	
	    public ICollection Get(Object key, ICollection output) {
	        ILOG.J2CsMapping.Collections.Generics.Collections.AddAll((ICollection) ILOG.J2CsMapping.Collections.Collections.Get(m,key),output);
	        return output;
	    }
	
	    public void Add(Object key, Object value_ren) {
	        ICollection o = (ICollection) ILOG.J2CsMapping.Collections.Collections.Get(m,key);
	        if (o == null)
	            ILOG.J2CsMapping.Collections.Collections.Put(m,key,o = subcollection.Make());
	        ILOG.J2CsMapping.Collections.Collections.Add(o,value_ren);
	    }
	
	    public IIterator Iterator() {
	        return new ILOG.J2CsMapping.Collections.IteratorAdapter(new ILOG.J2CsMapping.Collections.ListSet(m.Keys).GetEnumerator());
	    }
	
	    public interface CollectionFactory {
	        ICollection Make();
	    }
	
	    /// <summary>
	    /// This is just temporary, and may change!!
	    /// </summary>
	    ///
	    public class CollectionMaker : Relation.CollectionFactory  {
	        public const int HASH = 0, TREE = 1;
	
	        private IComparer comparator;
	
	        private int type;
	
	        public CollectionMaker(int type_0) {
	            this.comparator = null;
	            this.type = HASH;
	            this.type = type_0;
	        }
	
	        public CollectionMaker(IComparer comparator_0) {
	            this.comparator = null;
	            this.type = HASH;
	            this.comparator = comparator_0;
	        }
	
	        public virtual ICollection Make() {
	            if (comparator != null)
	                return new SortedSet(comparator);
	            else if (type == HASH)
	                return new HashedSet();
	            else
	                return new SortedSet();
	        }
	    }
	}}
