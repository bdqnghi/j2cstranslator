/*
 *******************************************************************************
 * Copyright (C) 2007, International Business Machines Corporation and         *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:02 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace IBM.ICU.Charset
{

    using IBM.ICU.Impl;
    using ILOG.J2CsMapping.Collections;
    using ILOG.J2CsMapping.Collections.Generics;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;
    using System.Text;
    using NUnit.Framework;

    [TestFixture]
    public class TextTrieMapTest : TestFmwk
    {

        private static readonly Int32 SUN = ((int)(1));

        private static readonly Int32 MON = ((int)(2));

        private static readonly Int32 TUE = ((int)(3));

        private static readonly Int32 WED = ((int)(4));

        private static readonly Int32 THU = ((int)(5));

        private static readonly Int32 FRI = ((int)(6));

        private static readonly Int32 SAT = ((int)(7));

        private static readonly Int32 FOO = ((int)(-1));

        private static readonly Int32 BAR = ((int)(-2));

        private static readonly Object[][] TESTDATA = { new Object[] { "Sunday", SUN }, new Object[] { "Monday", MON },
	            new Object[] { "Tuesday", TUE }, new Object[] { "Wednesday", WED },
	            new Object[] { "Thursday", THU }, new Object[] { "Friday", FRI },
	            new Object[] { "Saturday", SAT }, new Object[] { "Sun", SUN },
	            new Object[] { "Mon", MON }, new Object[] { "Tue", TUE },
	            new Object[] { "Wed", WED }, new Object[] { "Thu", THU },
	            new Object[] { "Fri", FRI }, new Object[] { "Sat", SAT },
	            new Object[] { "S", SUN }, new Object[] { "M", MON },
	            new Object[] { "T", TUE }, new Object[] { "W", WED },
	            new Object[] { "T", THU }, new Object[] { "F", FRI },
	            new Object[] { "S", SAT } };

        private static readonly Object[][] TESTCASES = {
	            new Object[] { "Sunday", SUN, SUN },
	            new Object[] { "sunday", null, SUN },
	            new Object[] { "Mo", MON, MON },
	            new Object[] { "mo", null, MON },
	            new Object[] { "Thursday Friday", THU, THU },
	            new Object[] { "T", new Object[] { TUE, THU },
	                    new Object[] { TUE, THU } },
	            new Object[] { "TEST", new Object[] { TUE, THU },
	                    new Object[] { TUE, THU } },
	            new Object[] { "SUN", new Object[] { SUN, SAT }, SUN },
	            new Object[] { "super", null, SUN },
	            new Object[] { "NO", null, null } };

        public static void Main(String[] args)
        {
            TextTrieMapTest test = new TextTrieMapTest();
            test.Run(args);
        }

        [Test]
        public void TestCaseSensitive()
        {
            IIterator itr = null;
            TextTrieMap map = new TextTrieMap(false);
            for (int i = 0; i < TESTDATA.Length; i++)
            {
                map.Put((String)TESTDATA[i][0], TESTDATA[i][1]);
            }

            Logln("Test for get(String)");
            for (int i_0 = 0; i_0 < TESTCASES.Length; i_0++)
            {
                itr = map.Get((String)TESTCASES[i_0][0]);
                CheckResult(itr, TESTCASES[i_0][1]);
            }

            Logln("Test for get(String, int)");
            StringBuilder textBuf = new StringBuilder();
            for (int i_1 = 0; i_1 < TESTCASES.Length; i_1++)
            {
                textBuf.Length = 0;
                for (int j = 0; j < i_1; j++)
                {
                    textBuf.Append('X');
                }
                textBuf.Append(TESTCASES[i_1][0]);
                itr = map.Get(textBuf.ToString(), i_1);
                CheckResult(itr, TESTCASES[i_1][1]);
            }

            // Add duplicated entry
            map.Put("Sunday", FOO);
            // Add duplicated entry with different casing
            map.Put("sunday", BAR);

            // Make sure the all entries are returned
            itr = map.Get("Sunday");
            CheckResult(itr, new Object[] { FOO, SUN });
        }
        [Test]
        public void TestCaseInsensitive()
        {
            IIterator itr = null;
            TextTrieMap map = new TextTrieMap(true);
            for (int i = 0; i < TESTDATA.Length; i++)
            {
                map.Put((String)TESTDATA[i][0], TESTDATA[i][1]);
            }

            Logln("Test for get(String)");
            for (int i_0 = 0; i_0 < TESTCASES.Length; i_0++)
            {
                itr = map.Get((String)TESTCASES[i_0][0]);
                CheckResult(itr, TESTCASES[i_0][2]);
            }

            Logln("Test for get(String, int)");
            StringBuilder textBuf = new StringBuilder();
            for (int i_1 = 0; i_1 < TESTCASES.Length; i_1++)
            {
                textBuf.Length = 0;
                for (int j = 0; j < i_1; j++)
                {
                    textBuf.Append('X');
                }
                textBuf.Append(TESTCASES[i_1][0]);
                itr = map.Get(textBuf.ToString(), i_1);
                CheckResult(itr, TESTCASES[i_1][2]);
            }

            // Add duplicated entry
            map.Put("Sunday", FOO);
            // Add duplicated entry with different casing
            map.Put("sunday", BAR);

            // Make sure the all entries are returned
            itr = map.Get("Sunday");
            CheckResult(itr, new Object[] { SUN, FOO, BAR });
        }

        private bool Eql(Object o1, Object o2)
        {
            if (o1 == null || o2 == null)
            {
                if (o1 == null && o2 == null)
                {
                    return true;
                }
                return false;
            }
            return o1.Equals(o2);
        }

        private void CheckResult(IIterator itr, Object expected)
        {
            if (itr == null)
            {
                if (expected != null)
                {
                    Errln("FAIL: Empty results - Expected: " + expected);
                }
                return;
            }
            if (expected == null && itr != null)
            {
                Errln("FAIL: Empty result is expected");
                return;
            }

            Object[] exp;
            if (expected is Object[])
            {
                exp = (Object[])expected;
            }
            else
            {
                exp = new Object[] { expected };
            }

            bool[] found = new bool[exp.Length];
            while (itr.HasNext())
            {
                Object val = itr.Next();
                for (int i = 0; i < exp.Length; i++)
                {
                    if (Eql(exp[i], val))
                    {
                        found[i] = true;
                    }
                }
            }
            for (int i_0 = 0; i_0 < exp.Length; i_0++)
            {
                if (found[i_0] == false)
                {
                    Errln("FAIL: The search result does not contain " + exp[i_0]);
                }
            }
        }
    }
}
