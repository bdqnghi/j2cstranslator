// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 1996-2007, International Business Machines Corporation and    
/// others. All Rights Reserved.                                                
/// </summary>
///
namespace IBM.ICU.Text {
	
	using IBM.ICU.Impl;
	using IBM.ICU.Util;
	using ILOG.J2CsMapping.IO;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// <p>
	/// Internal reader class for ICU data file uca.icu containing Unicode Collation
	/// Algorithm data.
	/// </p>
	/// <p>
	/// This class simply reads uca.icu, authenticates that it is a valid ICU data
	/// file and split its contents up into blocks of data for use in <a
	/// href=Collator.html>com.ibm.icu.text.Collator</a>.
	/// </p>
	/// <p>
	/// uca.icu which is in big-endian format is jared together with this package.
	/// </p>
	/// </summary>
	///
	/// @draft 2.2
	
	internal sealed class CollatorReader {
	    public sealed class Anonymous_C1 : ICUBinary.Authenticate {
	        public bool IsDataVersionAcceptable(byte[] version) {
	            return version[0] == IBM.ICU.Text.CollatorReader.DATA_FORMAT_VERSION_[0]
	                    && version[1] >= IBM.ICU.Text.CollatorReader.DATA_FORMAT_VERSION_[1];
	            // Too harsh
	            // && version[1] == DATA_FORMAT_VERSION_[1]
	            // && version[2] == DATA_FORMAT_VERSION_[2]
	            // && version[3] == DATA_FORMAT_VERSION_[3];
	        }
	    }
	
	    public sealed class Anonymous_C0 : ICUBinary.Authenticate {
	        public bool IsDataVersionAcceptable(byte[] version) {
	            return version[0] == IBM.ICU.Text.CollatorReader.INVERSE_UCA_DATA_FORMAT_VERSION_[0]
	                    && version[1] >= IBM.ICU.Text.CollatorReader.INVERSE_UCA_DATA_FORMAT_VERSION_[1];
	        }
	    }
	
	    static internal char[] Read(RuleBasedCollator rbc, IBM.ICU.Text.RuleBasedCollator.UCAConstants  ucac) {
	        Stream i = IBM.ICU.Impl.ICUData.GetRequiredStream(
                IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME /* +
                IBM.ICU.Impl.ICUResourceBundle.ICU_BUNDLE */
	                + "/ucadata.icu");
	        BufferedStream b = new BufferedStream(i,90000);
	        CollatorReader reader = new CollatorReader(b);
	        char[] result = reader.ReadImp(rbc, ucac);
	        b.Close();
	        return result;
	    }
	
	    static internal void InitRBC(RuleBasedCollator rbc, byte[] data) {
	        int MIN_BINARY_DATA_SIZE_ = (42 + 25) << 2;
	
	        Stream i = new MemoryStream(data);
	        BufferedStream b = new BufferedStream(i);
	        CollatorReader reader = new CollatorReader(b, false);
	        if (data.Length > MIN_BINARY_DATA_SIZE_) {
	            reader.ReadImp(rbc, null);
	        } else {
	            reader.ReadHeader(rbc);
	            reader.ReadOptions(rbc);
	            // duplicating UCA_'s data
	            rbc.SetWithUCATables();
	        }
	    }
	
	    static internal IBM.ICU.Text.CollationParsedRuleBuilder.InverseUCA  GetInverseUCA() {
	        IBM.ICU.Text.CollationParsedRuleBuilder.InverseUCA  result = null;
	        Stream i = IBM.ICU.Impl.ICUData.GetRequiredStream(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME
	                + "/invuca.icu");
	        // try {
	        // String invdat = "/com/ibm/icu/impl/data/invuca.icu";
	        // InputStream i =
	        // CollationParsedRuleBuilder.class.getResourceAsStream(invdat);
	        BufferedStream b = new BufferedStream(i,110000);
	        result = CollatorReader.ReadInverseUCA(b);
	        b.Close();
	        i.Close();
	        return result;
	        // } catch (Exception e) {
	        // throw new RuntimeException(e.getMessage());
	        // }
	    }
	
	    // protected constructor ---------------------------------------------
	
	    /// <summary>
	    /// <p>
	    /// Protected constructor.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="inputStream">ICU collator file input stream</param>
	    /// <exception cref="IOException">throw if data file fails authentication</exception>
	    /// @draft 2.1
	    private CollatorReader(Stream inputStream) : this(inputStream, true) {
	    }
	
	    /// <summary>
	    /// <p>
	    /// Protected constructor.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="inputStream">ICU uprops.icu file input stream</param>
	    /// <param name="readICUHeader">flag to indicate if the ICU header has to be read</param>
	    /// <exception cref="IOException">throw if data file fails authentication</exception>
	    /// @draft 2.1
	    private CollatorReader(Stream inputStream, bool readICUHeader) {
	        if (readICUHeader) {
	            byte[] UnicodeVersion = IBM.ICU.Impl.ICUBinary.ReadHeader(inputStream,
	                    DATA_FORMAT_ID_, UCA_AUTHENTICATE_);
	            // weiv: check that we have the correct Unicode version in
	            // binary files
	            VersionInfo UCDVersion = IBM.ICU.Lang.UCharacter.GetUnicodeVersion();
	            if (UnicodeVersion[0] != UCDVersion.GetMajor()
	                    || UnicodeVersion[1] != UCDVersion.GetMinor()) {
	                throw new IOException(WRONG_UNICODE_VERSION_ERROR_);
	            }
	        }
	        m_dataInputStream_ = new DataInputStream(inputStream);
	    }
	
	    // protected methods -------------------------------------------------
	
	    /// <summary>
	    /// Read and break up the header stream of data passed in as arguments into
	    /// meaningful Collator data.
	    /// </summary>
	    ///
	    /// <param name="rbc">RuleBasedCollator to populate with header information</param>
	    /// <exception cref="IOException">thrown when there's a data error.</exception>
	    private void ReadHeader(RuleBasedCollator rbc) {
	        m_size_ = m_dataInputStream_.ReadInt();
	        // all the offsets are in bytes
	        // to get the address add to the header address and cast properly
	        // Default options int options
	        m_headerSize_ = m_dataInputStream_.ReadInt(); // start of options
	        int readcount = 8; // for size and headersize
	        // structure which holds values for indirect positioning and implicit
	        // ranges
	        int UCAConst = m_dataInputStream_.ReadInt();
	        readcount += 4;
	        // this one is needed only for UCA, to copy the appropriate
	        // contractions
	        m_dataInputStream_.SkipBytes(4);
	        readcount += 4;
	        // reserved for future use
	        m_dataInputStream_.SkipBytes(4);
	        readcount += 4;
	        // const uint8_t *mappingPosition;
	        int mapping = m_dataInputStream_.ReadInt();
	        readcount += 4;
	        // uint32_t *expansion;
	        rbc.m_expansionOffset_ = m_dataInputStream_.ReadInt();
	        readcount += 4;
	        // UChar *contractionIndex;
	        rbc.m_contractionOffset_ = m_dataInputStream_.ReadInt();
	        readcount += 4;
	        // uint32_t *contractionCEs;
	        int contractionCE = m_dataInputStream_.ReadInt();
	        readcount += 4;
	        // needed for various closures int contractionSize
	        /* int contractionSize = */m_dataInputStream_.ReadInt();
	        readcount += 4;
	        // array of last collation element in expansion
	        int expansionEndCE = m_dataInputStream_.ReadInt();
	        readcount += 4;
	        // array of maximum expansion size corresponding to the expansion
	        // collation elements with last element in expansionEndCE
	        int expansionEndCEMaxSize = m_dataInputStream_.ReadInt();
	        readcount += 4;
	        // size of endExpansionCE int expansionEndCESize
	        m_dataInputStream_.SkipBytes(4);
	        readcount += 4;
	        // hash table of unsafe code points
	        int // hash table of unsafe code points
	                unsaf0 = m_dataInputStream_.ReadInt();
	        readcount += 4;
	        // hash table of final code points in contractions.
	        int contractionEnd = m_dataInputStream_.ReadInt();
	        readcount += 4;
	        // int CEcount = m_dataInputStream_.readInt();
	        m_dataInputStream_.SkipBytes(4);
	        readcount += 4;
	        // is jamoSpecial
	        rbc.m_isJamoSpecial_ = m_dataInputStream_.ReadBoolean();
	        readcount++;
	        // padding
	        m_dataInputStream_.SkipBytes(3);
	        readcount += 3;
	        rbc.m_version_ = ReadVersion(m_dataInputStream_);
	        readcount += 4;
	        rbc.m_UCA_version_ = ReadVersion(m_dataInputStream_);
	        readcount += 4;
	        rbc.m_UCD_version_ = ReadVersion(m_dataInputStream_);
	        readcount += 4;
	        // byte charsetName[] = new byte[32]; // for charset CEs
	        m_dataInputStream_.SkipBytes(32);
	        readcount += 32;
	        m_dataInputStream_.SkipBytes(56); // for future use
	        readcount += 56;
	        if (m_headerSize_ < readcount) {
	            throw new IOException("Internal Error: Header size error");
	        }
	        m_dataInputStream_.SkipBytes(m_headerSize_ - readcount);
	
	        if (rbc.m_contractionOffset_ == 0) { // contraction can be null
	            rbc.m_contractionOffset_ = mapping;
	            contractionCE = mapping;
	        }
	        m_optionSize_ = rbc.m_expansionOffset_ - m_headerSize_;
	        m_expansionSize_ = rbc.m_contractionOffset_ - rbc.m_expansionOffset_;
	        m_contractionIndexSize_ = contractionCE - rbc.m_contractionOffset_;
	        m_contractionCESize_ = mapping - contractionCE;
	        // m_trieSize_ = expansionEndCE - mapping;
	        m_expansionEndCESize_ = expansionEndCEMaxSize - expansionEndCE;
	        m_expansionEndCEMaxSizeSize_ = unsaf0 - expansionEndCEMaxSize;
	        m_unsafeSize_ = contractionEnd - unsaf0;
	        m_UCAValuesSize_ = m_size_ - UCAConst; // UCA value, will be handled
	                                               // later
	        // treat it as normal collator first
	        // for normal collator there is no UCA contraction
	        m_contractionEndSize_ = m_size_ - contractionEnd;
	
	        rbc.m_contractionOffset_ >>= 1; // casting to ints
	        rbc.m_expansionOffset_ >>= 2; // casting to chars
	    }
	
	    /// <summary>
	    /// Read and break up the collation options passed in the stream of data and
	    /// update the argument Collator with the results
	    /// </summary>
	    ///
	    /// <param name="rbc">RuleBasedCollator to populate</param>
	    /// <exception cref="IOException">thrown when there's a data error.</exception>
	    /// @draft 2.2
	    private void ReadOptions(RuleBasedCollator rbc) {
	        int readcount = 0;
	        rbc.m_defaultVariableTopValue_ = m_dataInputStream_.ReadInt();
	        readcount += 4;
	        rbc.m_defaultIsFrenchCollation_ = (m_dataInputStream_.ReadInt() == IBM.ICU.Text.RuleBasedCollator.AttributeValue.ON_);
	        readcount += 4;
	        rbc.m_defaultIsAlternateHandlingShifted_ = (m_dataInputStream_
	                .ReadInt() == IBM.ICU.Text.RuleBasedCollator.AttributeValue.SHIFTED_);
	        readcount += 4;
	        rbc.m_defaultCaseFirst_ = m_dataInputStream_.ReadInt();
	        readcount += 4;
	        rbc.m_defaultIsCaseLevel_ = (m_dataInputStream_.ReadInt() == IBM.ICU.Text.RuleBasedCollator.AttributeValue.ON_);
	        readcount += 4;
	        int value_ren = m_dataInputStream_.ReadInt();
	        readcount += 4;
	        if (value_ren == IBM.ICU.Text.RuleBasedCollator.AttributeValue.ON_) {
	            value_ren = IBM.ICU.Text.Collator.CANONICAL_DECOMPOSITION;
	        } else {
	            value_ren = IBM.ICU.Text.Collator.NO_DECOMPOSITION;
	        }
	        rbc.m_defaultDecomposition_ = value_ren;
	        rbc.m_defaultStrength_ = m_dataInputStream_.ReadInt();
	        readcount += 4;
	        rbc.m_defaultIsHiragana4_ = (m_dataInputStream_.ReadInt() == IBM.ICU.Text.RuleBasedCollator.AttributeValue.ON_);
	        readcount += 4;
	        rbc.m_defaultIsNumericCollation_ = (m_dataInputStream_.ReadInt() == IBM.ICU.Text.RuleBasedCollator.AttributeValue.ON_);
	        readcount += 4;
            m_dataInputStream_.SkipBytes(60); // reserved for future use
	        readcount += 60;
	        m_dataInputStream_.SkipBytes(m_optionSize_ - readcount);
	        if (m_optionSize_ < readcount) {
	            throw new IOException("Internal Error: Option size error");
	        }
	    }
	
	    /// <summary>
	    /// Read and break up the stream of data passed in as arguments into
	    /// meaningful Collator data.
	    /// </summary>
	    ///
	    /// <param name="rbc">RuleBasedCollator to populate</param>
	    /// <param name="UCAConst">object to fill up with UCA constants if we are reading the UCAcollator, if not use a null</param>
	    /// <returns>UCAContractions array filled up with the UCA contractions if we
	    /// are reading the UCA collator</returns>
	    /// <exception cref="IOException">thrown when there's a data error.</exception>
	    /// @draft 2.2
	    private char[] ReadImp(RuleBasedCollator rbc,
	            RuleBasedCollator.UCAConstants UCAConst) {
	        ReadHeader(rbc);
	        // header size has been checked by readHeader
	        int readcount = m_headerSize_;
	        // option size has been checked by readOptions
	        ReadOptions(rbc);
	        readcount += m_optionSize_;
	        m_expansionSize_ >>= 2;
	        rbc.m_expansion_ = new int[m_expansionSize_];
	        for (int i = 0; i < m_expansionSize_; i++) {
	            rbc.m_expansion_[i] = m_dataInputStream_.ReadInt();
	        }
	        readcount += (m_expansionSize_ << 2);
	        if (m_contractionIndexSize_ > 0) {
	            m_contractionIndexSize_ >>= 1;
	            rbc.m_contractionIndex_ = new char[m_contractionIndexSize_];
	            for (int i_0 = 0; i_0 < m_contractionIndexSize_; i_0++) {
	                rbc.m_contractionIndex_[i_0] = m_dataInputStream_.ReadChar();
	            }
	            readcount += (m_contractionIndexSize_ << 1);
	            m_contractionCESize_ >>= 2;
	            rbc.m_contractionCE_ = new int[m_contractionCESize_];
	            for (int i_1 = 0; i_1 < m_contractionCESize_; i_1++) {
	                rbc.m_contractionCE_[i_1] = m_dataInputStream_.ReadInt();
	            }
	            readcount += (m_contractionCESize_ << 2);
	        }
	        rbc.m_trie_ = new IntTrie(m_dataInputStream_,
	                IBM.ICU.Text.RuleBasedCollator.DataManipulate.GetInstance());
	        if (!rbc.m_trie_.IsLatin1Linear()) {
	            throw new IOException("Data corrupted, "
	                    + "Collator Tries expected to have linear "
	                    + "latin one data arrays");
	        }
	        readcount += rbc.m_trie_.GetSerializedDataSize();
	        m_expansionEndCESize_ >>= 2;
	        rbc.m_expansionEndCE_ = new int[m_expansionEndCESize_];
	        for (int i_2 = 0; i_2 < m_expansionEndCESize_; i_2++) {
	            rbc.m_expansionEndCE_[i_2] = m_dataInputStream_.ReadInt();
	        }
	        readcount += (m_expansionEndCESize_ << 2);
	        rbc.m_expansionEndCEMaxSize_ = new sbyte[m_expansionEndCEMaxSizeSize_];
	        for (int i_3 = 0; i_3 < m_expansionEndCEMaxSizeSize_; i_3++) {
	            rbc.m_expansionEndCEMaxSize_[i_3] = m_dataInputStream_.ReadByte();
	        }
	        readcount += m_expansionEndCEMaxSizeSize_;
	        rbc.m_unsafe_ = new sbyte[m_unsafeSize_];
	        for (int i_4 = 0; i_4 < m_unsafeSize_; i_4++) {
	            rbc.m_unsafe_[i_4] = m_dataInputStream_.ReadByte();
	        }
	        readcount += m_unsafeSize_;
	        if (UCAConst != null) {
	            // we are reading the UCA
	            // unfortunately the UCA offset in any collator data is not 0 and
	            // only refers to the UCA data
	            m_contractionEndSize_ -= m_UCAValuesSize_;
	        }
	        rbc.m_contractionEnd_ = new sbyte[m_contractionEndSize_];
	        for (int i_5 = 0; i_5 < m_contractionEndSize_; i_5++) {
	            rbc.m_contractionEnd_[i_5] = m_dataInputStream_.ReadByte();
	        }
	        readcount += m_contractionEndSize_;
	        if (UCAConst != null) {
	            UCAConst.FIRST_TERTIARY_IGNORABLE_[0] = m_dataInputStream_
	                    .ReadInt();
	            int readUCAConstcount = 4;
	            UCAConst.FIRST_TERTIARY_IGNORABLE_[1] = m_dataInputStream_
	                    .ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.LAST_TERTIARY_IGNORABLE_[0] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.LAST_TERTIARY_IGNORABLE_[1] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.FIRST_PRIMARY_IGNORABLE_[0] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.FIRST_PRIMARY_IGNORABLE_[1] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.FIRST_SECONDARY_IGNORABLE_[0] = m_dataInputStream_
	                    .ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.FIRST_SECONDARY_IGNORABLE_[1] = m_dataInputStream_
	                    .ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.LAST_SECONDARY_IGNORABLE_[0] = m_dataInputStream_
	                    .ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.LAST_SECONDARY_IGNORABLE_[1] = m_dataInputStream_
	                    .ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.LAST_PRIMARY_IGNORABLE_[0] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.LAST_PRIMARY_IGNORABLE_[1] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.FIRST_VARIABLE_[0] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.FIRST_VARIABLE_[1] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.LAST_VARIABLE_[0] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.LAST_VARIABLE_[1] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.FIRST_NON_VARIABLE_[0] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.FIRST_NON_VARIABLE_[1] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.LAST_NON_VARIABLE_[0] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.LAST_NON_VARIABLE_[1] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.RESET_TOP_VALUE_[0] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.RESET_TOP_VALUE_[1] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.FIRST_IMPLICIT_[0] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.FIRST_IMPLICIT_[1] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.LAST_IMPLICIT_[0] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.LAST_IMPLICIT_[1] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.FIRST_TRAILING_[0] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.FIRST_TRAILING_[1] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.LAST_TRAILING_[0] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.LAST_TRAILING_[1] = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.PRIMARY_TOP_MIN_ = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.PRIMARY_IMPLICIT_MIN_ = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.PRIMARY_IMPLICIT_MAX_ = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.PRIMARY_TRAILING_MIN_ = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.PRIMARY_TRAILING_MAX_ = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.PRIMARY_SPECIAL_MIN_ = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            UCAConst.PRIMARY_SPECIAL_MAX_ = m_dataInputStream_.ReadInt();
	            readUCAConstcount += 4;
	            int resultsize = (m_UCAValuesSize_ - readUCAConstcount) >> 1;
	            char[] result = new char[resultsize];
	            for (int i_6 = 0; i_6 < resultsize; i_6++) {
	                result[i_6] = m_dataInputStream_.ReadChar();
	            }
	            readcount += m_UCAValuesSize_;
	            if (readcount != m_size_) {
	                throw new IOException("Internal Error: Data file size error");
	            }
	            return result;
	        }
	        if (readcount != m_size_) {
	            throw new IOException("Internal Error: Data file size error");
	        }
	        return null;
	    }
	
	    /// <summary>
	    /// Reads in the inverse uca data
	    /// </summary>
	    ///
	    /// <param name="input">input stream with the inverse uca data</param>
	    /// <returns>an object containing the inverse uca data</returns>
	    /// <exception cref="IOException">thrown when error occurs while reading the inverse uca</exception>
	    private static CollationParsedRuleBuilder.InverseUCA ReadInverseUCA(
	            Stream inputStream) {
	        byte[] UnicodeVersion = IBM.ICU.Impl.ICUBinary.ReadHeader(inputStream,
	                INVERSE_UCA_DATA_FORMAT_ID_, INVERSE_UCA_AUTHENTICATE_);
	
	        // weiv: check that we have the correct Unicode version in
	        // binary files
	        VersionInfo UCDVersion = IBM.ICU.Lang.UCharacter.GetUnicodeVersion();
	        if (UnicodeVersion[0] != UCDVersion.GetMajor()
	                || UnicodeVersion[1] != UCDVersion.GetMinor()) {
	            throw new IOException(WRONG_UNICODE_VERSION_ERROR_);
	        }
	
	        CollationParsedRuleBuilder.InverseUCA result = new CollationParsedRuleBuilder.InverseUCA();
	        DataInputStream input = new DataInputStream(inputStream);
	        input.ReadInt(); // bytesize
	        int tablesize = input.ReadInt(); // in int size
	        int contsize = input.ReadInt(); // in char size
	        input.ReadInt(); // table in bytes
	        input.ReadInt(); // conts in bytes
	        result.m_UCA_version_ = ReadVersion(input);
	        input.SkipBytes(8); // skip padding
	
	        int size = tablesize * 3; // one column for each strength
	        result.m_table_ = new int[size];
	        result.m_continuations_ = new char[contsize];
	
	        for (int i = 0; i < size; i++) {
	            result.m_table_[i] = input.ReadInt();
	        }
	        for (int i_0 = 0; i_0 < contsize; i_0++) {
	            result.m_continuations_[i_0] = input.ReadChar();
	        }
	       // input.Close();
	        return result;
	    }
	
	    /// <summary>
	    /// Reads four bytes from the input and returns a VersionInfo object. Use it
	    /// to read different collator versions.
	    /// </summary>
	    ///
	    /// <param name="input">already instantiated DataInputStream, positioned at the startof four version bytes</param>
	    /// <returns>a ready VersionInfo object</returns>
	    /// <exception cref="IOException">thrown when error occurs while reading version bytes</exception>
	
	    protected static internal VersionInfo ReadVersion(DataInputStream input) {
	        sbyte[] version = new sbyte[4];
	        version[0] = input.ReadByte();
	        version[1] = input.ReadByte();
	        version[2] = input.ReadByte();
	        version[3] = input.ReadByte();
	
	        VersionInfo result = IBM.ICU.Util.VersionInfo.GetInstance((int) version[0],
	                (int) version[1], (int) version[2], (int) version[3]);
	
	        return result;
	    }
	
	    // private inner class -----------------------------------------------
	
	    // private variables -------------------------------------------------
	
	    /// <summary>
	    /// Authenticate uca data format version
	    /// </summary>
	    ///
	    private static readonly ICUBinary.Authenticate UCA_AUTHENTICATE_ = new CollatorReader.Anonymous_C1 ();
	
	    /// <summary>
	    /// Authenticate uca data format version
	    /// </summary>
	    ///
	    private static readonly ICUBinary.Authenticate INVERSE_UCA_AUTHENTICATE_ = new CollatorReader.Anonymous_C0 ();
	
	    /// <summary>
	    /// Data input stream for uca.icu
	    /// </summary>
	    ///
	    private DataInputStream m_dataInputStream_;
	
	    /// <summary>
	    /// File format version and id that this class understands. No guarantees are made if a older version is used
	    /// </summary>
	    ///
	    private static readonly byte[] DATA_FORMAT_VERSION_ = { (byte) 0x2,
	            (byte) 0x2, (byte) 0x0, (byte) 0x0 };
	
	    private static readonly byte[] DATA_FORMAT_ID_ = { (byte) 0x55, (byte) 0x43,
	            (byte) 0x6f, (byte) 0x6c };
	
	    /// <summary>
	    /// Inverse UCA file format version and id that this class understands. No guarantees are made if a older version is used
	    /// </summary>
	    ///
	    private static readonly byte[] INVERSE_UCA_DATA_FORMAT_VERSION_ = {
	            (byte) 0x2, (byte) 0x1, (byte) 0x0, (byte) 0x0 };
	
	    private static readonly byte[] INVERSE_UCA_DATA_FORMAT_ID_ = { (byte) 0x49,
	            (byte) 0x6e, (byte) 0x76, (byte) 0x43 };
	
	    /// <summary>
	    /// Wrong unicode version error string
	    /// </summary>
	    ///
	    private const String WRONG_UNICODE_VERSION_ERROR_ = "Unicode version in binary image is not compatible with the current Unicode version";
	
	    /// <summary>
	    /// Size of expansion table in bytes
	    /// </summary>
	    ///
	    private int m_expansionSize_;
	
	    /// <summary>
	    /// Size of contraction index table in bytes
	    /// </summary>
	    ///
	    private int m_contractionIndexSize_;
	
	    /// <summary>
	    /// Size of contraction table in bytes
	    /// </summary>
	    ///
	    private int m_contractionCESize_;
	
	    /*
	     * Size of the Trie in bytes
	     */
	    // private int m_trieSize_;
	    /// <summary>
	    /// Size of the table that contains information about collation elements that
	    /// end with an expansion
	    /// </summary>
	    ///
	    private int m_expansionEndCESize_;
	
	    /// <summary>
	    /// Size of the table that contains information about the maximum size of
	    /// collation elements that end with a particular expansion CE corresponding
	    /// to the ones in expansionEndCE
	    /// </summary>
	    ///
	    private int m_expansionEndCEMaxSizeSize_;
	
	    /// <summary>
	    /// Size of the option table that contains information about the collation
	    /// options
	    /// </summary>
	    ///
	    private int m_optionSize_;
	
	    /// <summary>
	    /// Size of the whole data file minusing the ICU header
	    /// </summary>
	    ///
	    private int m_size_;
	
	    /// <summary>
	    /// Size of the collation data header
	    /// </summary>
	    ///
	    private int m_headerSize_;
	
	    /// <summary>
	    /// Size of the table that contains information about the "Unsafe" codepoints
	    /// </summary>
	    ///
	    private int m_unsafeSize_;
	
	    /// <summary>
	    /// Size of the table that contains information about codepoints that ends
	    /// with a contraction
	    /// </summary>
	    ///
	    private int m_contractionEndSize_;
	
	    /// <summary>
	    /// Size of the table that contains UCA contraction information
	    /// </summary>
	    ///
	    private int m_UCAValuesSize_;
	
	    // private methods ---------------------------------------------------
	
	}
}
