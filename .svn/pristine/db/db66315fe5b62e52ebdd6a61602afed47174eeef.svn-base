/*
 *******************************************************************************
 * Copyright (C) 1996-2006, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// UnicodeSetIterator iterates over the contents of a UnicodeSet. It iterates
	/// over either code points or code point ranges. After all code points or ranges
	/// have been returned, it returns the multicharacter strings of the UnicodSet,
	/// if any.
	/// <p>
	/// To iterate over code points, use a loop like this:
	/// <pre>
	/// UnicodeSetIterator it = new UnicodeSetIterator(set);
	/// while (set.next()) {
	/// if (set.codepoint != UnicodeSetIterator.IS_STRING) {
	/// processCodepoint(set.codepoint);
	/// } else {
	/// processString(set.string);
	/// }
	/// }
	/// </pre>
	/// <p>
	/// To iterate over code point ranges, use a loop like this:
	/// <pre>
	/// UnicodeSetIterator it = new UnicodeSetIterator(set);
	/// while (set.nextRange()) {
	/// if (set.codepoint != UnicodeSetIterator.IS_STRING) {
	/// processCodepointRange(set.codepoint, set.codepointEnd);
	/// } else {
	/// processString(set.string);
	/// }
	/// }
	/// </pre>
	/// </summary>
	///
	/// @stable ICU 2.0
	public class UnicodeSetIterator {
	
	    /// <summary>
	    /// Value of <tt>codepoint</tt> if the iterator points to a string. If
	    /// <tt>codepoint == IS_STRING</tt>, then examine <tt>string</tt> for the
	    /// current iteration result.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public static int IS_STRING = -1;
	
	    /// <summary>
	    /// Current code point, or the special value <tt>IS_STRING</tt>, if the
	    /// iterator points to a string.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public int codepoint;
	
	    /// <summary>
	    /// When iterating over ranges using <tt>nextRange()</tt>,
	    /// <tt>codepointEnd</tt> contains the inclusive end of the iteration range,
	    /// if <tt>codepoint != IS_STRING</tt>. If iterating over code points using
	    /// <tt>next()</tt>, or if <tt>codepoint == IS_STRING</tt>, then the value of
	    /// <tt>codepointEnd</tt> is undefined.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public int codepointEnd;
	
	    /// <summary>
	    /// If <tt>codepoint == IS_STRING</tt>, then <tt>string</tt> points to the
	    /// current string. If <tt>codepoint != IS_STRING</tt>, the value of
	    /// <tt>string</tt> is undefined.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public String str0;
	
	    /// <summary>
	    /// Create an iterator over the given set.
	    /// </summary>
	    ///
	    /// <param name="set">set to iterate over</param>
	    /// @stable ICU 2.0
	    public UnicodeSetIterator(UnicodeSet set) {
	        this.endRange = 0;
	        this.range = 0;
	        this.stringIterator = null;
	        Reset(set);
	    }
	
	    /// <summary>
	    /// Create an iterator over nothing. <tt>next()</tt> and <tt>nextRange()</tt>
	    /// return false. This is a convenience constructor allowing the target to be
	    /// set later.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public UnicodeSetIterator() {
	        this.endRange = 0;
	        this.range = 0;
	        this.stringIterator = null;
	        Reset(new UnicodeSet());
	    }
	
	    /// <summary>
	    /// Returns the next element in the set, either a single code point or a
	    /// string. If there are no more elements in the set, return false. If
	    /// <tt>codepoint == IS_STRING</tt>, the value is a string in the
	    /// <tt>string</tt> field. Otherwise the value is a single code point in the
	    /// <tt>codepoint</tt> field.
	    /// <p>
	    /// The order of iteration is all code points in sorted order, followed by
	    /// all strings sorted order. <tt>codepointEnd</tt> is undefined after
	    /// calling this method. <tt>string</tt> is undefined unless
	    /// <tt>codepoint == IS_STRING</tt>. Do not mix calls to <tt>next()</tt> and
	    /// <tt>nextRange()</tt> without calling <tt>reset()</tt> between them. The
	    /// results of doing so are undefined.
	    /// </summary>
	    ///
	    /// <returns>true if there was another element in the set and this object
	    /// contains the element.</returns>
	    /// @stable ICU 2.0
	    public bool Next() {
	        if (nextElement <= endElement) {
	            codepoint = codepointEnd = nextElement++;
	            return true;
	        }
	        if (range < endRange) {
	            LoadRange(++range);
	            codepoint = codepointEnd = nextElement++;
	            return true;
	        }
	
	        // stringIterator == null iff there are no string elements remaining
	
	        if (stringIterator == null)
	            return false;
	        codepoint = IS_STRING; // signal that value is actually a string
	        str0 = (String) stringIterator.Next();
	        if (!stringIterator.HasNext())
	            stringIterator = null;
	        return true;
	    }
	
	    /// <summary>
	    /// Returns the next element in the set, either a code point range or a
	    /// string. If there are no more elements in the set, return false. If
	    /// <tt>codepoint == IS_STRING</tt>, the value is a string in the
	    /// <tt>string</tt> field. Otherwise the value is a range of one or more code
	    /// points from <tt>codepoint</tt> to <tt>codepointeEnd</tt> inclusive.
	    /// <p>
	    /// The order of iteration is all code points ranges in sorted order,
	    /// followed by all strings sorted order. Ranges are disjoint and
	    /// non-contiguous. <tt>string</tt> is undefined unless
	    /// <tt>codepoint == IS_STRING</tt>. Do not mix calls to <tt>next()</tt> and
	    /// <tt>nextRange()</tt> without calling <tt>reset()</tt> between them. The
	    /// results of doing so are undefined.
	    /// </summary>
	    ///
	    /// <returns>true if there was another element in the set and this object
	    /// contains the element.</returns>
	    /// @stable ICU 2.0
	    public bool NextRange() {
	        if (nextElement <= endElement) {
	            codepointEnd = endElement;
	            codepoint = nextElement;
	            nextElement = endElement + 1;
	            return true;
	        }
	        if (range < endRange) {
	            LoadRange(++range);
	            codepointEnd = endElement;
	            codepoint = nextElement;
	            nextElement = endElement + 1;
	            return true;
	        }
	
	        // stringIterator == null iff there are no string elements remaining
	
	        if (stringIterator == null)
	            return false;
	        codepoint = IS_STRING; // signal that value is actually a string
	        str0 = (String) stringIterator.Next();
	        if (!stringIterator.HasNext())
	            stringIterator = null;
	        return true;
	    }
	
	    /// <summary>
	    /// Sets this iterator to visit the elements of the given set and resets it
	    /// to the start of that set. The iterator is valid only so long as
	    /// <tt>set</tt> is valid.
	    /// </summary>
	    ///
	    /// <param name="set">the set to iterate over.</param>
	    /// @stable ICU 2.0
	    public void Reset(UnicodeSet set) {
	        this.set = set;
	        Reset();
	    }
	
	    /// <summary>
	    /// Resets this iterator to the start of the set.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public void Reset() {
	        endRange = set.GetRangeCount() - 1;
	        range = 0;
	        endElement = -1;
	        nextElement = 0;
	        if (endRange >= 0) {
	            LoadRange(range);
	        }
	        stringIterator = null;
	        if (set.strings != null) {
	            stringIterator = new ILOG.J2CsMapping.Collections.IteratorAdapter(set.strings.GetEnumerator());
	            if (!stringIterator.HasNext())
	                stringIterator = null;
	        }
	    }
	
	    /// <exclude/>
	    /// <summary>
	    /// Gets the current string from the iterator. Only use after calling next(),
	    /// not nextRange().
	    /// </summary>
	    ///
	    public String GetString() {
	        if (codepoint != IS_STRING) {
	            return IBM.ICU.Text.UTF16.ValueOf(codepoint);
	        }
	        return str0;
	    }
	
	    // ======================= PRIVATES ===========================
	
	    private UnicodeSet set;
	
	    private int endRange;
	
	    private int range;
	
	    /// <exclude/>
	    protected internal int endElement;
	
	    /// <exclude/>
	    protected internal int nextElement;
	
	    private IIterator stringIterator;
	
	    /**
	     * Invariant: stringIterator is null when there are no (more) strings
	     * remaining
	     */
	
	    /// <exclude/>
	    protected internal void LoadRange(int range_0) {
	        nextElement = set.GetRangeStart(range_0);
	        endElement = set.GetRangeEnd(range_0);
	    }
	}
}
