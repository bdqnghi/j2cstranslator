/*
 *******************************************************************************
 * Copyright (C) 1996-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:02 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Charset {
	
	using IBM.ICU.Util;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Testing class for VersionInfo
	/// </summary>
	///
	public sealed class VersionInfoTest : TestFmwk {
	    // constructor ---------------------------------------------------
	
	    /// <summary>
	    /// Constructor
	    /// </summary>
	    ///
	    public VersionInfoTest() {
	    }
	
	    // public methods -----------------------------------------------
	
	    public static void Main(String[] arg) {
	        VersionInfoTest test = new VersionInfoTest();
	        try {
	            test.Run(arg);
	        } catch (Exception e) {
	            test.Errln("Error testing VersionInfo");
	        }
	    }
	
	    /// <summary>
	    /// Test that the instantiation works
	    /// </summary>
	    ///
	    public void TestInstance() {
	        for (int i = 0; i < INSTANCE_INVALID_STRING_.Length; i++) {
	            try {
	                IBM.ICU.Util.VersionInfo.GetInstance(INSTANCE_INVALID_STRING_[i]);
	                Errln("\"" + INSTANCE_INVALID_STRING_[i]
	                        + "\" should produce an exception");
	            } catch (Exception e) {
	                Logln("PASS: \"" + INSTANCE_INVALID_STRING_[i]
	                        + "\" failed as expected");
	            }
	        }
	        for (int i_0 = 0; i_0 < INSTANCE_VALID_STRING_.Length; i_0++) {
	            try {
	                IBM.ICU.Util.VersionInfo.GetInstance(INSTANCE_VALID_STRING_[i_0]);
	            } catch (Exception e_1) {
	                Errln("\"" + INSTANCE_VALID_STRING_[i_0]
	                        + "\" should produce an valid version");
	            }
	        }
	        for (int i_2 = 0; i_2 < INSTANCE_INVALID_INT_.Length; i_2++) {
	            try {
	                GetInstance(INSTANCE_INVALID_INT_[i_2]);
	                Errln("invalid ints should produce an exception");
	            } catch (Exception e_3) {
	                Logln("PASS: \"" + INSTANCE_INVALID_INT_[i_2]
	                        + "\" failed as expected");
	            }
	        }
	        for (int i_4 = 0; i_4 < INSTANCE_VALID_INT_.Length; i_4++) {
	            try {
	                GetInstance(INSTANCE_VALID_INT_[i_4]);
	            } catch (Exception e_5) {
	                Errln("valid ints should not produce an exception");
	            }
	        }
	    }
	
	    /// <summary>
	    /// Test that the comparison works
	    /// </summary>
	    ///
	    public void TestCompare() {
	        for (int i = 0; i < COMPARE_NOT_EQUAL_STRING_.Length; i += 2) {
	            VersionInfo v1 = IBM.ICU.Util.VersionInfo
	                    .GetInstance(COMPARE_NOT_EQUAL_STRING_[i]);
	            VersionInfo v2 = IBM.ICU.Util.VersionInfo
	                    .GetInstance(COMPARE_NOT_EQUAL_STRING_[i + 1]);
	            if (v1.CompareTo(v2) == 0) {
	                Errln(COMPARE_NOT_EQUAL_STRING_[i] + " should not equal "
	                        + COMPARE_NOT_EQUAL_STRING_[i + 1]);
	            }
	        }
	        for (int i_0 = 0; i_0 < COMPARE_NOT_EQUAL_INT_.Length; i_0 += 2) {
	            VersionInfo v1_1 = GetInstance(COMPARE_NOT_EQUAL_INT_[i_0]);
	            VersionInfo v2_2 = GetInstance(COMPARE_NOT_EQUAL_INT_[i_0 + 1]);
	            if (v1_1.CompareTo(v2_2) == 0) {
	                Errln(COMPARE_NOT_EQUAL_INT_[i_0] + " should not equal "
	                        + COMPARE_NOT_EQUAL_INT_[i_0 + 1]);
	            }
	        }
	        for (int i_3 = 0; i_3 < COMPARE_EQUAL_STRING_.Length - 1; i_3++) {
	            VersionInfo v1_4 = IBM.ICU.Util.VersionInfo.GetInstance(COMPARE_EQUAL_STRING_[i_3]);
	            VersionInfo v2_5 = IBM.ICU.Util.VersionInfo
	                    .GetInstance(COMPARE_EQUAL_STRING_[i_3 + 1]);
	            if (v1_4.CompareTo(v2_5) != 0) {
	                Errln(COMPARE_EQUAL_STRING_[i_3] + " should equal "
	                        + COMPARE_EQUAL_STRING_[i_3 + 1]);
	            }
	        }
	        for (int i_6 = 0; i_6 < COMPARE_EQUAL_INT_.Length - 1; i_6++) {
	            VersionInfo v1_7 = GetInstance(COMPARE_EQUAL_INT_[i_6]);
	            VersionInfo v2_8 = GetInstance(COMPARE_EQUAL_INT_[i_6 + 1]);
	            if (v1_7.CompareTo(v2_8) != 0) {
	                Errln(COMPARE_EQUAL_INT_[i_6] + " should equal "
	                        + COMPARE_EQUAL_INT_[i_6 + 1]);
	            }
	        }
	        for (int i_9 = 0; i_9 < COMPARE_LESS_.Length - 1; i_9++) {
	            VersionInfo v1_10 = IBM.ICU.Util.VersionInfo.GetInstance(COMPARE_LESS_[i_9]);
	            VersionInfo v2_11 = IBM.ICU.Util.VersionInfo.GetInstance(COMPARE_LESS_[i_9 + 1]);
	            if (v1_10.CompareTo(v2_11) >= 0) {
	                Errln(COMPARE_LESS_[i_9] + " should be less than "
	                        + COMPARE_LESS_[i_9 + 1]);
	            }
	            if (v2_11.CompareTo(v1_10) <= 0) {
	                Errln(COMPARE_LESS_[i_9 + 1] + " should be greater than "
	                        + COMPARE_LESS_[i_9]);
	            }
	        }
	    }
	
	    /// <summary>
	    /// Test that the getter function works
	    /// </summary>
	    ///
	    public void TestGetter() {
	        for (int i = 0; i < GET_STRING_.Length; i++) {
	            VersionInfo v = IBM.ICU.Util.VersionInfo.GetInstance(GET_STRING_[i]);
	            if (v.GetMajor() != GET_RESULT_[i << 2]
	                    || v.GetMinor() != GET_RESULT_[(i << 2) + 1]
	                    || v.GetMilli() != GET_RESULT_[(i << 2) + 2]
	                    || v.GetMicro() != GET_RESULT_[(i << 2) + 3]) {
	                Errln(GET_STRING_[i] + " should return major="
	                        + GET_RESULT_[i << 2] + " minor="
	                        + GET_RESULT_[(i << 2) + 1] + " milli="
	                        + GET_RESULT_[(i << 2) + 2] + " micro="
	                        + GET_RESULT_[(i << 2) + 3]);
	            }
	            v = GetInstance(GET_INT_[i]);
	            if (v.GetMajor() != GET_RESULT_[i << 2]
	                    || v.GetMinor() != GET_RESULT_[(i << 2) + 1]
	                    || v.GetMilli() != GET_RESULT_[(i << 2) + 2]
	                    || v.GetMicro() != GET_RESULT_[(i << 2) + 3]) {
	                Errln(GET_STRING_[i] + " should return major="
	                        + GET_RESULT_[i << 2] + " minor="
	                        + GET_RESULT_[(i << 2) + 1] + " milli="
	                        + GET_RESULT_[(i << 2) + 2] + " micro="
	                        + GET_RESULT_[(i << 2) + 3]);
	            }
	        }
	    }
	
	    /// <summary>
	    /// Test toString()
	    /// </summary>
	    ///
	    public void TesttoString() {
	        for (int i = 0; i < TOSTRING_STRING_.Length; i++) {
	            VersionInfo v = IBM.ICU.Util.VersionInfo.GetInstance(TOSTRING_STRING_[i]);
	            if (!v.ToString().Equals(TOSTRING_RESULT_[i])) {
	                Errln("toString() for " + TOSTRING_STRING_[i]
	                        + " should produce " + TOSTRING_RESULT_[i]);
	            }
	            v = GetInstance(TOSTRING_INT_[i]);
	            if (!v.ToString().Equals(TOSTRING_RESULT_[i])) {
	                Errln("toString() for " + TOSTRING_INT_[i] + " should produce "
	                        + TOSTRING_RESULT_[i]);
	            }
	        }
	    }
	
	    // private methods --------------------------------------------------
	
	    /// <summary>
	    /// int array versioninfo creation
	    /// </summary>
	    ///
	    private static VersionInfo GetInstance(int[] data) {
	        switch (data.Length) {
	        case 1:
	            return IBM.ICU.Util.VersionInfo.GetInstance(data[0]);
	        case 2:
	            return IBM.ICU.Util.VersionInfo.GetInstance(data[0], data[1]);
	        case 3:
	            return IBM.ICU.Util.VersionInfo.GetInstance(data[0], data[1], data[2]);
	        default:
	            return IBM.ICU.Util.VersionInfo.GetInstance(data[0], data[1], data[2], data[3]);
	        }
	    }
	
	    // private data members --------------------------------------------
	
	    /// <summary>
	    /// Test instance data
	    /// </summary>
	    ///
	    private static readonly String[] INSTANCE_INVALID_STRING_ = { "a", "-1",
	            "-1.0", "-1.0.0", "-1.0.0.0", "0.-1", "0.0.-1", "0.0.0.-1", "256",
	            "256.0", "256.0.0", "256.0.0.0", "0.256", "0.0.256", "0.0.0.256",
	            "1.2.3.4.5" };
	
	    private static readonly String[] INSTANCE_VALID_STRING_ = { "255", "255.255",
	            "255.255.255", "255.255.255.255" };
	
	    private static readonly int[][] INSTANCE_INVALID_INT_ = { new int[] { -1 },
	            new int[] { -1, 0 }, new int[] { -1, 0, 0 },
	            new int[] { -1, 0, 0, 0 }, new int[] { 0, -1 },
	            new int[] { 0, 0, -1 }, new int[] { 0, 0, 0, -1 },
	            new int[] { 256 }, new int[] { 256, 0 }, new int[] { 256, 0, 0 },
	            new int[] { 256, 0, 0, 0 }, new int[] { 0, 256 },
	            new int[] { 0, 0, 256 }, new int[] { 0, 0, 0, 256 } };
	
	    private static readonly int[][] INSTANCE_VALID_INT_ = { new int[] { 255 },
	            new int[] { 255, 255 }, new int[] { 255, 255, 255 },
	            new int[] { 255, 255, 255, 255 } };
	
	    /// <summary>
	    /// Test compare data
	    /// </summary>
	    ///
	    private static readonly String[] COMPARE_NOT_EQUAL_STRING_ = { "2.0.0.0",
	            "3.0.0.0" };
	
	    private static readonly int[][] COMPARE_NOT_EQUAL_INT_ = {
	            new int[] { 2, 0, 0, 0 }, new int[] { 3, 0, 0, 0 } };
	
	    private static readonly String[] COMPARE_EQUAL_STRING_ = { "2.0.0.0", "2.0.0",
	            "2.0", "2" };
	
	    private static readonly int[][] COMPARE_EQUAL_INT_ = { new int[] { 2 },
	            new int[] { 2, 0 }, new int[] { 2, 0, 0 }, new int[] { 2, 0, 0, 0 } };
	
	    private static readonly String[] COMPARE_LESS_ = { "0", "0.0.0.1", "0.0.1",
	            "0.1", "1", "2", "2.1", "2.1.1", "2.1.1.1" };
	
	    /// <summary>
	    /// Test Getter data
	    /// </summary>
	    ///
	    private static readonly String[] GET_STRING_ = { "0", "1.1", "2.1.255",
	            "3.1.255.100" };
	
	    private static readonly int[][] GET_INT_ = { new int[] { 0 },
	            new int[] { 1, 1 }, new int[] { 2, 1, 255 },
	            new int[] { 3, 1, 255, 100 } };
	
	    private static readonly int[] GET_RESULT_ = { 0, 0, 0, 0, 1, 1, 0, 0, 2, 1,
	            255, 0, 3, 1, 255, 100 };
	
	    /// <summary>
	    /// Test toString data
	    /// </summary>
	    ///
	    private static readonly String[] TOSTRING_STRING_ = { "0", "1.1", "2.1.255",
	            "3.1.255.100" };
	
	    private static readonly int[][] TOSTRING_INT_ = { new int[] { 0 },
	            new int[] { 1, 1 }, new int[] { 2, 1, 255 },
	            new int[] { 3, 1, 255, 100 } };
	
	    private static readonly String[] TOSTRING_RESULT_ = { "0.0.0.0", "1.1.0.0",
	            "2.1.255.0", "3.1.255.100" };
	}}
