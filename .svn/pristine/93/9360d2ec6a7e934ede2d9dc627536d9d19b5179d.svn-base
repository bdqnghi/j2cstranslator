//##header J2SE15
/*
 *   Copyright (C) 1996-2007, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace IBM.ICU.Text
{

    using IBM.ICU.Impl;
    using IBM.ICU.Util;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using System.IO;
    using System.Resources;
    using System.Runtime.CompilerServices;
    using System.Text;
    using ILOG.J2CsMapping.Util;
    using ILOG.J2CsMapping.Text;
    using ILOG.J2CsMapping.Formatting;

    /// <summary>
    /// DateFormat is an abstract class for date/time formatting subclasses which
    /// formats and parses dates or time in a language-independent manner. The
    /// date/time formatting subclass, such as SimpleDateFormat, allows for
    /// formatting (i.e., date -> text), parsing (text -> date), and normalization.
    /// The date is represented as a <c>Date</c> object or as the milliseconds
    /// since January 1, 1970, 00:00:00 GMT.
    /// <p>
    /// DateFormat provides many class methods for obtaining default date/time
    /// formatters based on the default or a given loacle and a number of formatting
    /// styles. The formatting styles include FULL, LONG, MEDIUM, and SHORT. More
    /// detail and examples of using these styles are provided in the method
    /// descriptions.
    /// <p>
    /// DateFormat helps you to format and parse dates for any locale. Your code can
    /// be completely independent of the locale conventions for months, days of the
    /// week, or even the calendar format: lunar vs. solar.
    /// <p>
    /// To format a date for the current Locale, use one of the static factory
    /// methods:
    /// <pre>
    /// myString = DateFormat.getDateInstance().format(myDate);
    /// </pre>
    /// <p>
    /// If you are formatting multiple numbers, it is more efficient to get the
    /// format and use it multiple times so that the system doesn't have to fetch the
    /// information about the local language and country conventions multiple times.
    /// <pre>
    /// DateFormat df = DateFormat.getDateInstance();
    /// for (int i = 0; i &lt; a.length; ++i) {
    /// output.println(df.format(myDate[i]) + &quot;; &quot;);
    /// }
    /// </pre>
    /// <p>
    /// To format a number for a different Locale, specify it in the call to
    /// getDateInstance().
    /// <pre>
    /// DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE);
    /// </pre>
    /// <p>
    /// You can use a DateFormat to parse also.
    /// <pre>
    /// myDate = df.parse(myString);
    /// </pre>
    /// <p>
    /// Use getDateInstance to get the normal date format for that country. There are
    /// other static factory methods available. Use getTimeInstance to get the time
    /// format for that country. Use getDateTimeInstance to get a date and time
    /// format. You can pass in different options to these factory methods to control
    /// the length of the result; from SHORT to MEDIUM to LONG to FULL. The exact
    /// result depends on the locale, but generally:
    /// <ul>
    /// <li>SHORT is completely numeric, such as 12.13.52 or 3:30pm
    /// <li>MEDIUM is longer, such as Jan 12, 1952
    /// <li>LONG is longer, such as January 12, 1952 or 3:30:32pm
    /// <li>FULL is pretty completely specified, such as Tuesday, April 12, 1952 AD
    /// or 3:30:42pm PST.
    /// </ul>
    /// <p>
    /// You can also set the time zone on the format if you wish. If you want even
    /// more control over the format or parsing, (or want to give your users more
    /// control), you can try casting the DateFormat you get from the factory methods
    /// to a SimpleDateFormat. This will work for the majority of countries; just
    /// remember to put it in a try block in case you encounter an unusual one.
    /// <p>
    /// You can also use forms of the parse and format methods with ParsePosition and
    /// FieldPosition to allow you to
    /// <ul>
    /// <li>progressively parse through pieces of a string.
    /// <li>align any particular field, or find out where it is for selection on the
    /// screen.
    /// </ul>
    /// <h4>Synchronization</h4>
    /// Date formats are not synchronized. It is recommended to create separate
    /// format instances for each thread. If multiple threads access a format
    /// concurrently, it must be synchronized externally.
    /// </summary>
    ///
    /// <seealso cref="T:IBM.ICU.Text.UFormat"/>
    /// <seealso cref="T:IBM.ICU.Text.NumberFormat"/>
    /// <seealso cref="T:IBM.ICU.Text.SimpleDateFormat"/>
    /// <seealso cref="T:IBM.ICU.Text.Calendar"/>
    /// <seealso cref="T:IBM.ICU.Text.GregorianCalendar"/>
    /// <seealso cref="T:IBM.ICU.Text.TimeZone"/>
    /// @stable ICU 2.0
    public abstract class DateFormat : UFormat
    {

        /// <summary>
        /// The calendar that <c>DateFormat</c> uses to produce the time field
        /// values needed to implement date and time formatting. Subclasses should
        /// initialize this to a calendar appropriate for the locale associated with
        /// this <c>DateFormat</c>.
        /// </summary>
        ///
        /// @serial
        /// @stable ICU 2.0
        protected internal IBM.ICU.Util.Calendar calendar;

        /// <summary>
        /// The number formatter that <c>DateFormat</c> uses to format numbers
        /// in dates and times. Subclasses should initialize this to a number format
        /// appropriate for the locale associated with this <c>DateFormat</c>.
        /// </summary>
        ///
        /// @serial
        /// @stable ICU 2.0
        protected internal NumberFormat numberFormat;

        /// <summary>
        /// FieldPosition selector for 'G' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int ERA_FIELD = 0;

        /// <summary>
        /// FieldPosition selector for 'y' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int YEAR_FIELD = 1;

        /// <summary>
        /// FieldPosition selector for 'M' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int MONTH_FIELD = 2;

        /// <summary>
        /// FieldPosition selector for 'd' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int DATE_FIELD = 3;

        /// <summary>
        /// FieldPosition selector for 'k' field alignment, corresponding to the<see cref="null"/> field. HOUR_OF_DAY1_FIELD is used for the
        /// one-based 24-hour clock. For example, 23:59 + 01:00 results in 24:59.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int HOUR_OF_DAY1_FIELD = 4;

        /// <summary>
        /// FieldPosition selector for 'H' field alignment, corresponding to the<see cref="null"/> field. HOUR_OF_DAY0_FIELD is used for the
        /// zero-based 24-hour clock. For example, 23:59 + 01:00 results in 00:59.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int HOUR_OF_DAY0_FIELD = 5;

        /// <summary>
        /// FieldPosition selector for 'm' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int MINUTE_FIELD = 6;

        /// <summary>
        /// FieldPosition selector for 's' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int SECOND_FIELD = 7;

        /// <summary>
        /// FieldPosition selector for 'S' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 3.0
        public const int FRACTIONAL_SECOND_FIELD = 8;

        /// <summary>
        /// Alias for FRACTIONAL_SECOND_FIELD.
        /// </summary>
        ///
        public const int MILLISECOND_FIELD = FRACTIONAL_SECOND_FIELD;

        /// <summary>
        /// FieldPosition selector for 'E' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int DAY_OF_WEEK_FIELD = 9;

        /// <summary>
        /// FieldPosition selector for 'D' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int DAY_OF_YEAR_FIELD = 10;

        /// <summary>
        /// FieldPosition selector for 'F' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int DAY_OF_WEEK_IN_MONTH_FIELD = 11;

        /// <summary>
        /// FieldPosition selector for 'w' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int WEEK_OF_YEAR_FIELD = 12;

        /// <summary>
        /// FieldPosition selector for 'W' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int WEEK_OF_MONTH_FIELD = 13;

        /// <summary>
        /// FieldPosition selector for 'a' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int AM_PM_FIELD = 14;

        /// <summary>
        /// FieldPosition selector for 'h' field alignment, corresponding to the<see cref="null"/> field. HOUR1_FIELD is used for the one-based
        /// 12-hour clock. For example, 11:30 PM + 1 hour results in 12:30 AM.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int HOUR1_FIELD = 15;

        /// <summary>
        /// FieldPosition selector for 'K' field alignment, corresponding to the<see cref="null"/> field. HOUR0_FIELD is used for the zero-based
        /// 12-hour clock. For example, 11:30 PM + 1 hour results in 00:30 AM.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int HOUR0_FIELD = 16;

        /// <summary>
        /// FieldPosition selector for 'z' field alignment, corresponding to the<see cref="null"/> and <see cref="null"/> fields.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int TIMEZONE_FIELD = 17;

        /// <summary>
        /// FieldPosition selector for 'Y' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 3.0
        public const int YEAR_WOY_FIELD = 18;

        /// <summary>
        /// FieldPosition selector for 'e' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 3.0
        public const int DOW_LOCAL_FIELD = 19;

        /// <summary>
        /// FieldPosition selector for 'u' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 3.0
        public const int EXTENDED_YEAR_FIELD = 20;

        /// <summary>
        /// FieldPosition selector for 'g' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 3.0
        public const int JULIAN_DAY_FIELD = 21;

        /// <summary>
        /// FieldPosition selector for 'A' field alignment, corresponding to the<see cref="null"/> field.
        /// </summary>
        ///
        /// @stable ICU 3.0
        public const int MILLISECONDS_IN_DAY_FIELD = 22;

        /// <summary>
        /// FieldPosition selector for 'Z' field alignment, corresponding to the<see cref="null"/> and <see cref="null"/> fields.
        /// </summary>
        ///
        /// @stable ICU 3.0
        public const int TIMEZONE_RFC_FIELD = 23;

        /// <summary>
        /// FieldPosition selector for 'v' field alignment, corresponding to the<see cref="null"/> and <see cref="null"/> fields. This
        /// displays the generic zone name, if available.
        /// </summary>
        ///
        /// @stable ICU 3.4
        public const int TIMEZONE_GENERIC_FIELD = 24;

        /// <summary>
        /// FieldPosition selector for 'c' field alignment, corresponding to the<see cref="null"/> field. This displays the stand alone day
        /// name, if available.
        /// </summary>
        ///
        /// @stable ICU 3.4
        public const int STANDALONE_DAY_FIELD = 25;

        /// <summary>
        /// FieldPosition selector for 'L' field alignment, corresponding to the<see cref="null"/> field. This displays the stand alone month name,
        /// if available.
        /// </summary>
        ///
        /// @stable ICU 3.4
        public const int STANDALONE_MONTH_FIELD = 26;

        /// <summary>
        /// FieldPosition selector for 'Q' field alignment, corresponding to the<see cref="null"/> field. This displays the quarter.
        /// </summary>
        ///
        /// @draft ICU 3.6
        /// @provisional This API might change or be removed in a future release.
        public const int QUARTER_FIELD = 27;

        /// <summary>
        /// FieldPosition selector for 'q' field alignment, corresponding to the<see cref="null"/> field. This displays the stand alone quarter, if
        /// available.
        /// </summary>
        ///
        /// @draft ICU 3.6
        /// @provisional This API might change or be removed in a future release.
        public const int STANDALONE_QUARTER_FIELD = 28;

        /// <summary>
        /// FieldPosition selector for 'V' field alignment, corresponding to the<see cref="null"/> and <see cref="null"/> fields. This
        /// displays the fallback timezone name when VVVV is specified, and the short
        /// standard or daylight timezone name ignoring commonlyUsed when a single V
        /// is specified.
        /// </summary>
        ///
        /// @stable ICU 3.8
        public const int TIMEZONE_SPECIAL_FIELD = 29;

        /// <summary>
        /// Number of FieldPosition selectors for DateFormat. Valid selectors range
        /// from 0 to FIELD_COUNT-1.
        /// </summary>
        ///
        /// @stable ICU 3.0
        public const int FIELD_COUNT = 30; // must ==
        // DateFormatSymbols.patternChars.length()

        // Proclaim serial compatibility with 1.1 FCS
        private const long serialVersionUID = 7218322306649953788L;

        /// <summary>
        /// Overrides Format. Formats a time object into a time string. Examples of
        /// time objects are a time value expressed in milliseconds and a Date
        /// object.
        /// </summary>
        ///
        /// <param name="obj">must be a Number or a Date or a Calendar.</param>
        /// <param name="toAppendTo">the string buffer for the returning time string.</param>
        /// <returns>the formatted time string.</returns>
        /// <param name="fieldPosition">keeps track of the position of the field within the returnedstring. On input: an alignment field, if desired. On output:the offsets of the alignment field. For example, given a timetext "1996.07.10 AD at 15:08:56 PDT", if the givenfieldPosition is DateFormat.YEAR_FIELD, the begin index andend index of fieldPosition will be set to 0 and 4,respectively. Notice that if the same time field appears morethan once in a pattern, the fieldPosition will be set for thefirst occurence of that time field. For instance, formatting aDate to the time string "1 PM PDT (Pacific Daylight Time)"using the pattern "h a z (zzzz)" and the alignment fieldDateFormat.TIMEZONE_FIELD, the begin index and end index offieldPosition will be set to 5 and 8, respectively, for thefirst occurence of the timezone pattern character 'z'.</param>
        /// <seealso cref="T:ILOG.J2CsMapping.Text.IlFormat"/>
        /// @stable ICU 2.0
        public sealed override StringBuilder FormatObject(Object obj, StringBuilder toAppendTo,
                FieldPosition fieldPosition)
        {
            if (obj is IBM.ICU.Util.Calendar)
                return Format((IBM.ICU.Util.Calendar)obj, toAppendTo, fieldPosition);
            else if (obj is DateTime)
                return Format((DateTime)obj, toAppendTo, fieldPosition);
            else if (obj is object)
                return Format(new DateTime((Convert.ToInt64(((object)obj))) * 10000), toAppendTo,
                        fieldPosition);
            else
                throw new ArgumentException("Cannot format given Object ("
                        + obj.GetType().FullName + ") as a Date");
        }

        /// <summary>
        /// Formats a date into a date/time string.
        /// </summary>
        ///
        /// <param name="cal">a Calendar set to the date and time to be formatted into adate/time string.</param>
        /// <param name="toAppendTo">the string buffer for the returning date/time string.</param>
        /// <param name="fieldPosition">keeps track of the position of the field within the returnedstring. On input: an alignment field, if desired. On output:the offsets of the alignment field. For example, given a timetext "1996.07.10 AD at 15:08:56 PDT", if the givenfieldPosition is DateFormat.YEAR_FIELD, the begin index andend index of fieldPosition will be set to 0 and 4,respectively. Notice that if the same time field appears morethan once in a pattern, the fieldPosition will be set for thefirst occurence of that time field. For instance, formatting aDate to the time string "1 PM PDT (Pacific Daylight Time)"using the pattern "h a z (zzzz)" and the alignment fieldDateFormat.TIMEZONE_FIELD, the begin index and end index offieldPosition will be set to 5 and 8, respectively, for thefirst occurence of the timezone pattern character 'z'.</param>
        /// <returns>the formatted date/time string.</returns>
        /// @stable ICU 2.0
        public abstract StringBuilder Format(IBM.ICU.Util.Calendar cal, StringBuilder toAppendTo,
                FieldPosition fieldPosition);

        /// <summary>
        /// Formats a Date into a date/time string.
        /// </summary>
        ///
        /// <param name="date">a Date to be formatted into a date/time string.</param>
        /// <param name="toAppendTo">the string buffer for the returning date/time string.</param>
        /// <param name="fieldPosition">keeps track of the position of the field within the returnedstring. On input: an alignment field, if desired. On output:the offsets of the alignment field. For example, given a timetext "1996.07.10 AD at 15:08:56 PDT", if the givenfieldPosition is DateFormat.YEAR_FIELD, the begin index andend index of fieldPosition will be set to 0 and 4,respectively. Notice that if the same time field appears morethan once in a pattern, the fieldPosition will be set for thefirst occurence of that time field. For instance, formatting aDate to the time string "1 PM PDT (Pacific Daylight Time)"using the pattern "h a z (zzzz)" and the alignment fieldDateFormat.TIMEZONE_FIELD, the begin index and end index offieldPosition will be set to 5 and 8, respectively, for thefirst occurence of the timezone pattern character 'z'.</param>
        /// <returns>the formatted date/time string.</returns>
        /// @stable ICU 2.0
        public StringBuilder Format(DateTime date, StringBuilder toAppendTo,
                FieldPosition fieldPosition)
        {
            // Use our Calendar object
            calendar.SetTime(date);
            return Format(calendar, toAppendTo, fieldPosition);
        }

        /// <summary>
        /// Formats a Date into a date/time string.
        /// </summary>
        ///
        /// <param name="date">the time value to be formatted into a time string.</param>
        /// <returns>the formatted time string.</returns>
        /// @stable ICU 2.0
        public String Format(DateTime date)
        {
            return Format(date, new StringBuilder(64), new FieldPosition(0))
                    .ToString();
        }

        /// <summary>
        /// Parse a date/time string.
        /// </summary>
        ///
        /// <param name="text">The date/time string to be parsed</param>
        /// <returns>A Date, or null if the input could not be parsed</returns>
        /// <exception cref="ParseException">If the given string cannot be parsed as a date.</exception>
        /// <seealso cref="M:IBM.ICU.Text.DateFormat.Parse(System.String, null)"/>
        /// @stable ICU 2.0
        public DateTime Parse(String text)
        {
            ParsePosition pos = new ParsePosition(0);
            DateTime result = Parse(text, pos);
            if (pos.GetIndex() == 0) // ICU4J
                throw new ILOG.J2CsMapping.Util.ParseException("Unparseable date: \"" + text + "\"" + pos.GetErrorIndex()); // ICU4J
            return result;
        }

        /// <summary>
        /// Parse a date/time string according to the given parse position. For
        /// example, a time text "07/10/96 4:5 PM, PDT" will be parsed into a
        /// Calendar that is equivalent to Date(837039928046). The caller should
        /// clear the calendar before calling this method, unless existing field
        /// information is to be kept.
        /// <p>
        /// By default, parsing is lenient: If the input is not in the form used by
        /// this object's format method but can still be parsed as a date, then the
        /// parse succeeds. Clients may insist on strict adherence to the format by
        /// calling setLenient(false).
        /// </summary>
        ///
        /// <seealso cref="M:IBM.ICU.Text.DateFormat.SetLenient(System.Boolean)"/>
        /// <param name="text">The date/time string to be parsed</param>
        /// <param name="cal">The calendar into which parsed data will be stored. Ingeneral, this should be cleared before calling this method. Ifthis parse fails, the calendar may still have been modified.</param>
        /// <param name="pos">On input, the position at which to start parsing; on output,the position at which parsing terminated, or the startposition if the parse failed.</param>
        /// @stable ICU 2.0
        public abstract void Parse(String text, IBM.ICU.Util.Calendar cal, ParsePosition pos);

        /// <summary>
        /// Parse a date/time string according to the given parse position. For
        /// example, a time text "07/10/96 4:5 PM, PDT" will be parsed into a Date
        /// that is equivalent to Date(837039928046).
        /// <p>
        /// By default, parsing is lenient: If the input is not in the form used by
        /// this object's format method but can still be parsed as a date, then the
        /// parse succeeds. Clients may insist on strict adherence to the format by
        /// calling setLenient(false).
        /// </summary>
        ///
        /// <seealso cref="M:IBM.ICU.Text.DateFormat.SetLenient(System.Boolean)"/>
        /// <param name="text">The date/time string to be parsed</param>
        /// <param name="pos">On input, the position at which to start parsing; on output,the position at which parsing terminated, or the startposition if the parse failed.</param>
        /// <returns>A Date, or null if the input could not be parsed</returns>
        /// @stable ICU 2.0
        public DateTime Parse(String text, ParsePosition pos)
        {
            DateTime result = default(DateTime);
            int start = pos.GetIndex();
            IBM.ICU.Util.TimeZone tzsav = calendar.GetTimeZone();
            calendar.Clear();
            Parse(text, calendar, pos);
            if (pos.GetIndex() != start)
            {
                try
                {
                    result = calendar.GetTime();
                }
                catch (ArgumentException e)
                {
                    // This occurs if the calendar is non-lenient and there is
                    // an out-of-range field. We don't know which field was
                    // illegal so we set the error index to the start.
                    pos.SetIndex(start);
                    pos.SetErrorIndex(start);
                }
            }
            // Restore TimeZone
            calendar.SetTimeZone(tzsav);
            return result;
        }

        /// <summary>
        /// Parse a date/time string into an Object. This convenience method simply
        /// calls parse(String, ParsePosition).
        /// </summary>
        ///
        /// <seealso cref="M:IBM.ICU.Text.DateFormat.Parse(System.String, null)"/>
        /// @stable ICU 2.0
        public override Object ParseObject(String source, ParsePosition pos)
        {
            return Parse(source, pos);
        }

        /// <summary>
        /// Constant for empty style pattern.
        /// </summary>
        ///
        /// @draft ICU 3.8
        public const int NONE = -1;

        /// <summary>
        /// Constant for full style pattern.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int FULL = 0;

        /// <summary>
        /// Constant for long style pattern.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int LONG = 1;

        /// <summary>
        /// Constant for medium style pattern.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int MEDIUM = 2;

        /// <summary>
        /// Constant for short style pattern.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int SHORT = 3;

        /// <summary>
        /// Constant for default style pattern. Its value is MEDIUM.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public const int DEFAULT = MEDIUM;

        /// <summary>
        /// Constant for relative style mask.
        /// </summary>
        ///
        /// @draft ICU 3.8
        public const int RELATIVE = (1 << 7);

        /// <summary>
        /// Constant for relative full style pattern.
        /// </summary>
        ///
        /// @draft ICU 3.8
        public const int RELATIVE_FULL = RELATIVE | FULL;

        /// <summary>
        /// Constant for relative style pattern.
        /// </summary>
        ///
        /// @draft ICU 3.8
        public const int RELATIVE_LONG = RELATIVE | LONG;

        /// <summary>
        /// Constant for relative style pattern.
        /// </summary>
        ///
        /// @draft ICU 3.8
        public const int RELATIVE_MEDIUM = RELATIVE | MEDIUM;

        /// <summary>
        /// Constant for relative style pattern.
        /// </summary>
        ///
        /// @draft ICU 3.8
        public const int RELATIVE_SHORT = RELATIVE | SHORT;

        /// <summary>
        /// Constant for relative default style pattern.
        /// </summary>
        ///
        /// @draft ICU 3.8
        public const int RELATIVE_DEFAULT = RELATIVE | DEFAULT;

        /// <summary>
        /// Gets the time formatter with the default formatting style for the default
        /// locale.
        /// </summary>
        ///
        /// <returns>a time formatter.</returns>
        /// @stable ICU 2.0
        public static DateFormat GetTimeInstance()
        {
            return Get(-1, DEFAULT, IBM.ICU.Util.ULocale.GetDefault());
        }

        /// <summary>
        /// Gets the time formatter with the given formatting style for the default
        /// locale.
        /// </summary>
        ///
        /// <param name="style">the given formatting style. For example, SHORT for "h:mm a" inthe US locale.</param>
        /// <returns>a time formatter.</returns>
        /// @stable ICU 2.0
        public static DateFormat GetTimeInstance(int style)
        {
            return Get(-1, style, IBM.ICU.Util.ULocale.GetDefault());
        }

        /// <summary>
        /// Gets the time formatter with the given formatting style for the given
        /// locale.
        /// </summary>
        ///
        /// <param name="style">the given formatting style. For example, SHORT for "h:mm a" inthe US locale.</param>
        /// <param name="aLocale">the given locale.</param>
        /// <returns>a time formatter.</returns>
        /// @stable ICU 2.0
        public static DateFormat GetTimeInstance(int style, Locale aLocale)
        {
            return Get(-1, style, IBM.ICU.Util.ULocale.ForLocale(aLocale));
        }

        /// <summary>
        /// Gets the time formatter with the given formatting style for the given
        /// locale.
        /// </summary>
        ///
        /// <param name="style">the given formatting style. For example, SHORT for "h:mm a" inthe US locale.</param>
        /// <param name="locale">the given ulocale.</param>
        /// <returns>a time formatter.</returns>
        /// @stable ICU 3.2
        public static DateFormat GetTimeInstance(int style, ULocale locale)
        {
            return Get(-1, style, locale);
        }

        /// <summary>
        /// Gets the date formatter with the default formatting style for the default
        /// locale.
        /// </summary>
        ///
        /// <returns>a date formatter.</returns>
        /// @stable ICU 2.0
        public static DateFormat GetDateInstance()
        {
            return Get(DEFAULT, -1, IBM.ICU.Util.ULocale.GetDefault());
        }

        /// <summary>
        /// Gets the date formatter with the given formatting style for the default
        /// locale.
        /// </summary>
        ///
        /// <param name="style">the given formatting style. For example, SHORT for "M/d/yy" inthe US locale.</param>
        /// <returns>a date formatter.</returns>
        /// @stable ICU 2.0
        public static DateFormat GetDateInstance(int style)
        {
            return Get(style, -1, IBM.ICU.Util.ULocale.GetDefault());
        }

        /// <summary>
        /// Gets the date formatter with the given formatting style for the given
        /// locale.
        /// </summary>
        ///
        /// <param name="style">the given formatting style. For example, SHORT for "M/d/yy" inthe US locale.</param>
        /// <param name="aLocale">the given locale.</param>
        /// <returns>a date formatter.</returns>
        /// @stable ICU 2.0
        public static DateFormat GetDateInstance(int style, Locale aLocale)
        {
            return Get(style, -1, IBM.ICU.Util.ULocale.ForLocale(aLocale));
        }

        /// <summary>
        /// Gets the date formatter with the given formatting style for the given
        /// locale.
        /// </summary>
        ///
        /// <param name="style">the given formatting style. For example, SHORT for "M/d/yy" inthe US locale.</param>
        /// <param name="locale">the given ulocale.</param>
        /// <returns>a date formatter.</returns>
        /// @stable ICU 3.2
        public static DateFormat GetDateInstance(int style, ULocale locale)
        {
            return Get(style, -1, locale);
        }

        /// <summary>
        /// Gets the date/time formatter with the default formatting style for the
        /// default locale.
        /// </summary>
        ///
        /// <returns>a date/time formatter.</returns>
        /// @stable ICU 2.0
        public static DateFormat GetDateTimeInstance()
        {
            return Get(DEFAULT, DEFAULT, IBM.ICU.Util.ULocale.GetDefault());
        }

        /// <summary>
        /// Gets the date/time formatter with the given date and time formatting
        /// styles for the default locale.
        /// </summary>
        ///
        /// <param name="dateStyle">the given date formatting style. For example, SHORT for"M/d/yy" in the US locale.</param>
        /// <param name="timeStyle">the given time formatting style. For example, SHORT for"h:mm a" in the US locale.</param>
        /// <returns>a date/time formatter.</returns>
        /// @stable ICU 2.0
        public static DateFormat GetDateTimeInstance(int dateStyle,
                int timeStyle)
        {
            return Get(dateStyle, timeStyle, IBM.ICU.Util.ULocale.GetDefault());
        }

        /// <summary>
        /// Gets the date/time formatter with the given formatting styles for the
        /// given locale.
        /// </summary>
        ///
        /// <param name="dateStyle">the given date formatting style.</param>
        /// <param name="timeStyle">the given time formatting style.</param>
        /// <param name="aLocale">the given locale.</param>
        /// <returns>a date/time formatter.</returns>
        /// @stable ICU 2.0
        public static DateFormat GetDateTimeInstance(int dateStyle,
                int timeStyle, Locale aLocale)
        {
            return Get(dateStyle, timeStyle, IBM.ICU.Util.ULocale.ForLocale(aLocale));
        }

        /// <summary>
        /// Gets the date/time formatter with the given formatting styles for the
        /// given locale.
        /// </summary>
        ///
        /// <param name="dateStyle">the given date formatting style.</param>
        /// <param name="timeStyle">the given time formatting style.</param>
        /// <param name="locale">the given ulocale.</param>
        /// <returns>a date/time formatter.</returns>
        /// @draft ICU 3.2
        /// @provisional This API might change or be removed in a future release.
        public static DateFormat GetDateTimeInstance(int dateStyle,
                int timeStyle, ULocale locale)
        {
            return Get(dateStyle, timeStyle, locale);
        }

        /// <summary>
        /// Get a default date/time formatter that uses the SHORT style for both the
        /// date and the time.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public static DateFormat GetInstance()
        {
            return GetDateTimeInstance(SHORT, SHORT);
        }

        /// <summary>
        /// Gets the set of locales for which DateFormats are installed.
        /// </summary>
        ///
        /// <returns>the set of locales for which DateFormats are installed.</returns>
        /// @stable ICU 2.0
        public static Locale[] GetAvailableLocales()
        {
            return IBM.ICU.Impl.ICUResourceBundle
                    .GetAvailableLocales(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME);
        }

        /// <summary>
        /// Gets the set of locales for which DateFormats are installed.
        /// </summary>
        ///
        /// <returns>the set of locales for which DateFormats are installed.</returns>
        /// @draft ICU 3.2
        /// @provisional This API might change or be removed in a future release.
        public static ULocale[] GetAvailableULocales()
        {
            return IBM.ICU.Impl.ICUResourceBundle
                    .GetAvailableULocales(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME);
        }

        /// <summary>
        /// Set the calendar to be used by this date format. Initially, the default
        /// calendar for the specified or default locale is used.
        /// </summary>
        ///
        /// <param name="newCalendar">the new Calendar to be used by the date format</param>
        /// @stable ICU 2.0
        public void SetCalendar(IBM.ICU.Util.Calendar newCalendar)
        {
            this.calendar = newCalendar;
        }

        /// <summary>
        /// Gets the calendar associated with this date/time formatter.
        /// </summary>
        ///
        /// <returns>the calendar associated with this date/time formatter.</returns>
        /// @stable ICU 2.0
        public IBM.ICU.Util.Calendar GetCalendar()
        {
            return calendar;
        }

        /// <summary>
        /// Allows you to set the number formatter.
        /// </summary>
        ///
        /// <param name="newNumberFormat">the given new NumberFormat.</param>
        /// @stable ICU 2.0
        public virtual void SetNumberFormat(NumberFormat newNumberFormat)
        {
            this.numberFormat = newNumberFormat;
            /*
             * In order to parse String like "11.10.2001" to DateTime correctly in
             * Locale("fr","CH") [Richard/GCL]
             */
            this.numberFormat.SetParseIntegerOnly(true);
        }

        /// <summary>
        /// Gets the number formatter which this date/time formatter uses to format
        /// and parse a time.
        /// </summary>
        ///
        /// <returns>the number formatter which this date/time formatter uses.</returns>
        /// @stable ICU 2.0
        public NumberFormat GetNumberFormat()
        {
            return numberFormat;
        }

        /// <summary>
        /// Sets the time zone for the calendar of this DateFormat object.
        /// </summary>
        ///
        /// <param name="zone">the given new time zone.</param>
        /// @stable ICU 2.0
        public void SetTimeZone(IBM.ICU.Util.TimeZone zone)
        {
            calendar.SetTimeZone(zone);
        }

        /// <summary>
        /// Gets the time zone.
        /// </summary>
        ///
        /// <returns>the time zone associated with the calendar of DateFormat.</returns>
        /// @stable ICU 2.0
        public IBM.ICU.Util.TimeZone GetTimeZone()
        {
            return calendar.GetTimeZone();
        }

        /// <summary>
        /// Specify whether or not date/time parsing is to be lenient. With lenient
        /// parsing, the parser may use heuristics to interpret inputs that do not
        /// precisely match this object's format. With strict parsing, inputs must
        /// match this object's format.
        /// </summary>
        ///
        /// <param name="lenient">when true, parsing is lenient</param>
        /// <seealso cref="M:IBM.ICU.Text.Calendar.SetLenient(System.Boolean)"/>
        /// @stable ICU 2.0
        public void SetLenient(bool lenient)
        {
            calendar.SetLenient(lenient);
        }

        /// <summary>
        /// Tell whether date/time parsing is to be lenient.
        /// </summary>
        ///
        /// @stable ICU 2.0
        public bool IsLenient()
        {
            return calendar.IsLenient();
        }

        /// <summary>
        /// Overrides hashCode
        /// </summary>
        ///
        /// @stable ICU 2.0
        // /CLOVER:OFF
        // turn off code coverage since all subclasses override this
        public override int GetHashCode()
        {
            return numberFormat.GetHashCode();
            // just enough fields for a reasonable distribution
        }

        // /CLOVER:ON

        /// <summary>
        /// Overrides equals
        /// </summary>
        ///
        /// @stable ICU 2.0
        public override bool Equals(Object obj)
        {
            if ((Object)this == obj)
                return true;
            if (obj == null || (Object)GetType() != (Object)obj.GetType())
                return false;
            DateFormat other = (DateFormat)obj;
            return (calendar.IsEquivalentTo(other.calendar) && numberFormat
                    .Equals(other.numberFormat));
        }

        /// <summary>
        /// Overrides Cloneable
        /// </summary>
        ///
        /// @stable ICU 2.0
        public override Object Clone()
        {
            DateFormat other = (DateFormat)base.Clone();
            other.calendar = (IBM.ICU.Util.Calendar)calendar.Clone();
            other.numberFormat = (NumberFormat)numberFormat.Clone();
            return other;
        }

        /// <summary>
        /// Creates a DateFormat with the given time and/or date style in the given
        /// locale.
        /// </summary>
        ///
        /// <param name="dateStyle">a value from 0 to 3 indicating the time format, or -1 toindicate no date</param>
        /// <param name="timeStyle">a value from 0 to 3 indicating the time format, or -1 toindicate no time</param>
        /// <param name="loc">the locale for the format</param>
        private static DateFormat Get(int dateStyle, int timeStyle, ULocale loc)
        {
            if ((timeStyle != -1 && (timeStyle & RELATIVE) > 0)
                    || (dateStyle != -1 && (dateStyle & RELATIVE) > 0))
            {
                RelativeDateFormat r = new RelativeDateFormat(timeStyle,
                        dateStyle /* offset? */, loc);
                return r;
            }

            if (timeStyle < -1 || timeStyle > 3)
            {
                throw new ArgumentException("Illegal time style "
                        + timeStyle);
            }
            if (dateStyle < -1 || dateStyle > 3)
            {
                throw new ArgumentException("Illegal date style "
                        + dateStyle);
            }
            try
            {
                IBM.ICU.Util.Calendar cal = IBM.ICU.Util.Calendar.GetInstance(loc);
                DateFormat result = cal
                        .GetDateTimeFormat(dateStyle, timeStyle, loc);
                result.SetLocale(cal.GetLocale(IBM.ICU.Util.ULocale.VALID_LOCALE),
                        cal.GetLocale(IBM.ICU.Util.ULocale.ACTUAL_LOCALE));
                return result;
            }
            catch (MissingManifestResourceException e)
            {
                // /CLOVER:OFF
                // coverage requires separate run with no data, so skip
                return new SimpleDateFormat("M/d/yy h:mm a");
                // /CLOVER:ON
            }
        }

        /// <summary>
        /// Create a new date format.
        /// </summary>
        ///
        /// @stable ICU 2.0
        protected internal DateFormat()
        {
        }

        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        // -------------------------------------------------------------------------
        // Public static interface for creating custon DateFormats for different
        // types of Calendars.
        // -------------------------------------------------------------------------

        /// <summary>
        /// Create a <see cref="T:IBM.ICU.Text.DateFormat"/> object that can be used to format dates in
        /// the calendar system specified by <c>cal</c>.
        /// <p>
        /// </summary>
        ///
        /// <param name="cal">The calendar system for which a date format is desired.</param>
        /// <param name="dateStyle">The type of date format desired. This can be<see cref="M:IBM.ICU.Text.DateFormat.SHORT"/>, <see cref="M:IBM.ICU.Text.DateFormat.MEDIUM"/>, etc.</param>
        /// <param name="locale">The locale for which the date format is desired.</param>
        /// @stable ICU 2.0
        static public DateFormat GetDateInstance(IBM.ICU.Util.Calendar cal, int dateStyle,
                Locale locale)
        {
            return GetDateTimeInstance(cal, dateStyle, -1,
                    IBM.ICU.Util.ULocale.ForLocale(locale));
        }

        /// <summary>
        /// Create a <see cref="T:IBM.ICU.Text.DateFormat"/> object that can be used to format dates in
        /// the calendar system specified by <c>cal</c>.
        /// <p>
        /// </summary>
        ///
        /// <param name="cal">The calendar system for which a date format is desired.</param>
        /// <param name="dateStyle">The type of date format desired. This can be<see cref="M:IBM.ICU.Text.DateFormat.SHORT"/>, <see cref="M:IBM.ICU.Text.DateFormat.MEDIUM"/>, etc.</param>
        /// <param name="locale">The locale for which the date format is desired.</param>
        /// @stable ICU 3.2
        static public DateFormat GetDateInstance(IBM.ICU.Util.Calendar cal, int dateStyle,
                ULocale locale)
        {
            return GetDateTimeInstance(cal, dateStyle, -1, locale);
        }

        /// <summary>
        /// Create a <see cref="T:IBM.ICU.Text.DateFormat"/> object that can be used to format times in
        /// the calendar system specified by <c>cal</c>.
        /// <p>
        /// <b>Note:</b> When this functionality is moved into the core JDK, this
        /// method will probably be replaced by a new overload of<see cref="M:IBM.ICU.Text.DateFormat.GetInstance"/>.
        /// <p>
        /// </summary>
        ///
        /// <param name="cal">The calendar system for which a time format is desired.</param>
        /// <param name="timeStyle">The type of time format desired. This can be<see cref="M:IBM.ICU.Text.DateFormat.SHORT"/>, <see cref="M:IBM.ICU.Text.DateFormat.MEDIUM"/>, etc.</param>
        /// <param name="locale">The locale for which the time format is desired.</param>
        /// <seealso cref="M:IBM.ICU.Text.DateFormat.GetTimeInstance"/>
        /// @stable ICU 2.0
        static public DateFormat GetTimeInstance(IBM.ICU.Util.Calendar cal, int timeStyle,
                Locale locale)
        {
            return GetDateTimeInstance(cal, -1, timeStyle,
                    IBM.ICU.Util.ULocale.ForLocale(locale));
        }

        /// <summary>
        /// Create a <see cref="T:IBM.ICU.Text.DateFormat"/> object that can be used to format times in
        /// the calendar system specified by <c>cal</c>.
        /// <p>
        /// <b>Note:</b> When this functionality is moved into the core JDK, this
        /// method will probably be replaced by a new overload of<see cref="M:IBM.ICU.Text.DateFormat.GetInstance"/>.
        /// <p>
        /// </summary>
        ///
        /// <param name="cal">The calendar system for which a time format is desired.</param>
        /// <param name="timeStyle">The type of time format desired. This can be<see cref="M:IBM.ICU.Text.DateFormat.SHORT"/>, <see cref="M:IBM.ICU.Text.DateFormat.MEDIUM"/>, etc.</param>
        /// <param name="locale">The locale for which the time format is desired.</param>
        /// <seealso cref="M:IBM.ICU.Text.DateFormat.GetTimeInstance"/>
        /// @stable ICU 3.2
        static public DateFormat GetTimeInstance(IBM.ICU.Util.Calendar cal, int timeStyle,
                ULocale locale)
        {
            return GetDateTimeInstance(cal, -1, timeStyle, locale);
        }

        /// <summary>
        /// Create a <see cref="T:IBM.ICU.Text.DateFormat"/> object that can be used to format dates and
        /// times in the calendar system specified by <c>cal</c>.
        /// <p>
        /// <b>Note:</b> When this functionality is moved into the core JDK, this
        /// method will probably be replaced by a new overload of<see cref="M:IBM.ICU.Text.DateFormat.GetInstance"/>.
        /// <p>
        /// </summary>
        ///
        /// <param name="cal">The calendar system for which a date/time format is desired.</param>
        /// <param name="dateStyle">The type of date format desired. This can be<see cref="M:IBM.ICU.Text.DateFormat.SHORT"/>, <see cref="M:IBM.ICU.Text.DateFormat.MEDIUM"/>, etc.</param>
        /// <param name="timeStyle">The type of time format desired. This can be<see cref="M:IBM.ICU.Text.DateFormat.SHORT"/>, <see cref="M:IBM.ICU.Text.DateFormat.MEDIUM"/>, etc.</param>
        /// <param name="locale">The locale for which the date/time format is desired.</param>
        /// <seealso cref="M:IBM.ICU.Text.DateFormat.GetDateTimeInstance"/>
        /// @stable ICU 2.0
        static public DateFormat GetDateTimeInstance(IBM.ICU.Util.Calendar cal,
                int dateStyle, int timeStyle, Locale locale)
        {
            return cal.GetDateTimeFormat(dateStyle, timeStyle,
                    IBM.ICU.Util.ULocale.ForLocale(locale));
        }

        /// <summary>
        /// Create a <see cref="T:IBM.ICU.Text.DateFormat"/> object that can be used to format dates and
        /// times in the calendar system specified by <c>cal</c>.
        /// <p>
        /// <b>Note:</b> When this functionality is moved into the core JDK, this
        /// method will probably be replaced by a new overload of<see cref="M:IBM.ICU.Text.DateFormat.GetInstance"/>.
        /// <p>
        /// </summary>
        ///
        /// <param name="cal">The calendar system for which a date/time format is desired.</param>
        /// <param name="dateStyle">The type of date format desired. This can be<see cref="M:IBM.ICU.Text.DateFormat.SHORT"/>, <see cref="M:IBM.ICU.Text.DateFormat.MEDIUM"/>, etc.</param>
        /// <param name="timeStyle">The type of time format desired. This can be<see cref="M:IBM.ICU.Text.DateFormat.SHORT"/>, <see cref="M:IBM.ICU.Text.DateFormat.MEDIUM"/>, etc.</param>
        /// <param name="locale">The locale for which the date/time format is desired.</param>
        /// <seealso cref="M:IBM.ICU.Text.DateFormat.GetDateTimeInstance"/>
        /// @stable ICU 3.2
        static public DateFormat GetDateTimeInstance(IBM.ICU.Util.Calendar cal,
                int dateStyle, int timeStyle, ULocale locale)
        {
            return cal.GetDateTimeFormat(dateStyle, timeStyle, locale);
        }

        /// <summary>
        /// Convenience overload
        /// </summary>
        ///
        /// @stable ICU 2.0
        static public DateFormat GetInstance(IBM.ICU.Util.Calendar cal, Locale locale)
        {
            return GetDateTimeInstance(cal, SHORT, SHORT, IBM.ICU.Util.ULocale.ForLocale(locale));
        }

        /// <summary>
        /// Convenience overload
        /// </summary>
        ///
        /// @draft ICU 3.2
        /// @provisional This API might change or be removed in a future release.
        static public DateFormat GetInstance(IBM.ICU.Util.Calendar cal, ULocale locale)
        {
            return GetDateTimeInstance(cal, SHORT, SHORT, locale);
        }

        /// <summary>
        /// Convenience overload
        /// </summary>
        ///
        /// @stable ICU 2.0
        static public DateFormat GetInstance(IBM.ICU.Util.Calendar cal)
        {
            return GetInstance(cal, IBM.ICU.Util.ULocale.GetDefault());
        }

        /// <summary>
        /// Convenience overload
        /// </summary>
        ///
        /// @stable ICU 2.0
        static public DateFormat GetDateInstance(IBM.ICU.Util.Calendar cal, int dateStyle)
        {
            return GetDateInstance(cal, dateStyle, IBM.ICU.Util.ULocale.GetDefault());
        }

        /// <summary>
        /// Convenience overload
        /// </summary>
        ///
        /// @stable ICU 2.0
        static public DateFormat GetTimeInstance(IBM.ICU.Util.Calendar cal, int timeStyle)
        {
            return GetTimeInstance(cal, timeStyle, IBM.ICU.Util.ULocale.GetDefault());
        }

        /// <summary>
        /// Convenience overload
        /// </summary>
        ///
        /// @stable ICU 2.0
        static public DateFormat GetDateTimeInstance(IBM.ICU.Util.Calendar cal,
                int dateStyle, int timeStyle)
        {
            return GetDateTimeInstance(cal, dateStyle, timeStyle,
                    IBM.ICU.Util.ULocale.GetDefault());
        }

        // #if defined(FOUNDATION10) || defined(J2SE13)
        // #else
        /// <summary>
        /// The instances of this inner class are used as attribute keys and values
        /// in AttributedCharacterIterator that
        /// DateFormat.formatToCharacterIterator() method returns.
        /// <p>
        /// There is no public constructor to this class, the only instances are the
        /// constants defined here.
        /// <p>
        /// </summary>
        ///
        /// @stable ICU 3.8
        [Serializable]
        public class Field : Format.Field
        {

            private const long serialVersionUID = -3627456821000730829L;

            // Max number of calendar fields
            private static readonly int CAL_FIELD_COUNT;

            // Table for mapping calendar field number to DateFormat.Field
            private static readonly DateFormat.Field[] CAL_FIELDS = new DateFormat.Field[CAL_FIELD_COUNT];

            // Map for resolving DateFormat.Field by name
            private static readonly IDictionary FIELD_NAME_MAP = new Hashtable(CAL_FIELD_COUNT);

            /// <summary>
            /// Constant identifying the time of day indicator(am/pm).
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field AM_PM = new DateFormat.Field("am pm", IBM.ICU.Util.Calendar.AM_PM);

            /// <summary>
            /// Constant identifying the day of month field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field DAY_OF_MONTH = new DateFormat.Field("day of month",
                    IBM.ICU.Util.Calendar.DAY_OF_MONTH);

            /// <summary>
            /// Constant identifying the day of week field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field DAY_OF_WEEK = new DateFormat.Field("day of week",
                    IBM.ICU.Util.Calendar.DAY_OF_WEEK);

            /// <summary>
            /// Constant identifying the day of week in month field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field DAY_OF_WEEK_IN_MONTH = new DateFormat.Field(
                    "day of week in month", IBM.ICU.Util.Calendar.DAY_OF_WEEK_IN_MONTH);

            /// <summary>
            /// Constant identifying the day of year field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field DAY_OF_YEAR = new DateFormat.Field("day of year",
                    IBM.ICU.Util.Calendar.DAY_OF_YEAR);

            /// <summary>
            /// Constant identifying the era field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field ERA = new DateFormat.Field("era", IBM.ICU.Util.Calendar.ERA);

            /// <summary>
            /// Constant identifying the hour(0-23) of day field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field HOUR_OF_DAY0 = new DateFormat.Field("hour of day",
                    IBM.ICU.Util.Calendar.HOUR_OF_DAY);

            /// <summary>
            /// Constant identifying the hour(1-24) of day field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field HOUR_OF_DAY1 = new DateFormat.Field("hour of day 1", -1);

            /// <summary>
            /// Constant identifying the hour(0-11) field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field HOUR0 = new DateFormat.Field("hour", IBM.ICU.Util.Calendar.HOUR);

            /// <summary>
            /// Constant identifying the hour(1-12) field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field HOUR1 = new DateFormat.Field("hour 1", -1);

            /// <summary>
            /// Constant identifying the millisecond field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field MILLISECOND = new DateFormat.Field("millisecond",
                    IBM.ICU.Util.Calendar.MILLISECOND);

            /// <summary>
            /// Constant identifying the minute field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field MINUTE = new DateFormat.Field("minute", IBM.ICU.Util.Calendar.MINUTE);

            /// <summary>
            /// Constant identifying the month field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field MONTH = new DateFormat.Field("month", IBM.ICU.Util.Calendar.MONTH);

            /// <summary>
            /// Constant identifying the second field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field SECOND = new DateFormat.Field("second", IBM.ICU.Util.Calendar.SECOND);

            /// <summary>
            /// Constant identifying the time zone field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field TIME_ZONE = new DateFormat.Field("time zone", -1);

            /// <summary>
            /// Constant identifying the week of month field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field WEEK_OF_MONTH = new DateFormat.Field("week of month",
                    IBM.ICU.Util.Calendar.WEEK_OF_MONTH);

            /// <summary>
            /// Constant identifying the week of year field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field WEEK_OF_YEAR = new DateFormat.Field("week of year",
                    IBM.ICU.Util.Calendar.WEEK_OF_YEAR);

            /// <summary>
            /// Constant identifying the year field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field YEAR = new DateFormat.Field("year", IBM.ICU.Util.Calendar.YEAR);

            // ICU only fields -------------------

            /// <summary>
            /// Constant identifying the local day of week field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field DOW_LOCAL = new DateFormat.Field("local day of week",
                    IBM.ICU.Util.Calendar.DOW_LOCAL);

            /// <summary>
            /// Constant identifying the extended year field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field EXTENDED_YEAR = new DateFormat.Field("extended year",
                    IBM.ICU.Util.Calendar.EXTENDED_YEAR);

            /// <summary>
            /// Constant identifying the Julian day field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field JULIAN_DAY = new DateFormat.Field("Julian day",
                    IBM.ICU.Util.Calendar.JULIAN_DAY);

            /// <summary>
            /// Constant identifying the milliseconds in day field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field MILLISECONDS_IN_DAY = new DateFormat.Field(
                    "milliseconds in day", IBM.ICU.Util.Calendar.MILLISECONDS_IN_DAY);

            /// <summary>
            /// Constant identifying the year used with week of year field.
            /// </summary>
            ///
            /// @stable ICU 3.8
            public static readonly DateFormat.Field YEAR_WOY = new DateFormat.Field("year for week of year",
                    IBM.ICU.Util.Calendar.YEAR_WOY);

            /// <summary>
            /// Constant identifying the quarter field.
            /// </summary>
            ///
            /// @draft ICU 3.8
            /// @provisional This API might change or be removed in a future release.
            public static readonly DateFormat.Field QUARTER = new DateFormat.Field("quarter", -1);

            // Stand alone types are variants for its base types. So we do not
            // define Field for
            // them.
            /*
             * public static final Field STANDALONE_DAY = new
             * Field("stand alone day of week", Calendar.DAY_OF_WEEK); public static
             * final Field STANDALONE_MONTH = new Field("stand alone month",
             * Calendar.MONTH); public static final Field STANDALONE_QUARTER = new
             * Field("stand alone quarter", -1);
             */

            // Corresponding calendar field
            private readonly int calendarField;

            /// <summary>
            /// Constructs a <c>DateFormat.Field</c> with the given name and
            /// the <c>Calendar</c> field which this attribute represents. Use
            /// -1 for <c>calendarField</c> if this field does not have a
            /// corresponding <c>Calendar</c> field.
            /// </summary>
            ///
            /// <param name="name">Name of the attribute</param>
            /// <param name="calendarField_0"><c>Calendar</c> field constant</param>
            /// @stable ICU 3.8
            protected internal Field(String name, int calendarField_0)
                : base(name)
            {
                this.calendarField = calendarField_0;
                if ((Object)this.GetType() == (Object)typeof(DateFormat.Field))
                {
                    ILOG.J2CsMapping.Collections.Collections.Put(FIELD_NAME_MAP, name, this);
                    if (calendarField_0 >= 0 && calendarField_0 < CAL_FIELD_COUNT)
                    {
                        CAL_FIELDS[calendarField_0] = this;
                    }
                }
            }

            /// <summary>
            /// Returns the <c>Field</c> constant that corresponds to the
            /// <code>
            /// Calendar</code> field <c>calendarField</c>. If there is no
            /// corresponding <c>Field</c> is available, null is returned.
            /// </summary>
            ///
            /// <param name="calendarField_0"><c>Calendar</c> field constant</param>
            /// <returns><c>Field</c> associated with the
            /// <c>calendarField</c>, or null if no associated
            /// <c>Field</c> is available.</returns>
            /// <exception cref="IllegalArgumentException">if <c>calendarField</c> is not a valid<c>Calendar</c> field constant.</exception>
            /// @stable ICU 3.8
            public static DateFormat.Field OfCalendarField(int calendarField_0)
            {
                if (calendarField_0 < 0 || calendarField_0 >= CAL_FIELD_COUNT)
                {
                    throw new ArgumentException(
                            "Calendar field number is out of range");
                }
                return CAL_FIELDS[calendarField_0];
            }

            /// <summary>
            /// Returns the <c>Calendar</c> field associated with this
            /// attribute. If there is no corresponding <c>Calendar</c>
            /// available, this will return -1.
            /// </summary>
            ///
            /// <returns><c>Calendar</c> constant for this attribute.</returns>
            /// @stable ICU 3.8
            public int GetCalendarField()
            {
                return calendarField;
            }

            /// <summary>
            /// Resolves instances being deserialized to the predefined constants.
            /// </summary>
            ///
            /// <exception cref="InvalidObjectException">if the constant could not be resolved.</exception>
            /// @stable ICU 3.8
            protected internal override Object ReadResolve()
            {
                // /CLOVER:OFF
                if ((Object)this.GetType() != (Object)typeof(DateFormat.Field))
                {
                    throw new IOException(
                            "A subclass of DateFormat.Field must implement readResolve.");
                }
                // /CLOVER:ON
                Object o = ILOG.J2CsMapping.Collections.Collections.Get(FIELD_NAME_MAP, this.GetName());
                // /CLOVER:OFF
                if (o == null)
                {
                    throw new IOException("Unknown attribute name.");
                }
                // /CLOVER:ON
                return o;
            }

            static Field()
            {
                IBM.ICU.Util.GregorianCalendar cal = new IBM.ICU.Util.GregorianCalendar();
                CAL_FIELD_COUNT = cal.GetFieldCount();
//                CAL_FIELDS = new DateFormat.Field[CAL_FIELD_COUNT];
//                 FIELD_NAME_MAP = new Hashtable(CAL_FIELD_COUNT);
            }
        }
        // #endif
    }
}
