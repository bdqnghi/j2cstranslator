/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110104_01     
// 1/4/11 4:11 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Tests
{

    using ILOG.J2CsMapping.Text;
    using ILOG.J2CsMapping.Util;
    using NUnit;
    using System;

    [NUnit.Framework.TestFixture]
    public class RuleBasedCollatorTest
    {

        [NUnit.Framework.Test]
        public void Test_getCollationKeyLjava_lang_String()
        {
            // Regression test for HARMONY-28
            String source = null;
            RuleBasedCollator rbc = null;
            try
            {
                String Simple = "< a< b< c< d";
                rbc = new RuleBasedCollator(Simple);
            }
            catch (ParseException e)
            {
                NUnit.Framework.Assert.Fail("Assert 0: Unexpected format exception " + e);
            }
            CollationKey ck = rbc.GetCollationKey(source);
            NUnit.Framework.Assert.IsNull(ck, "Assert 1: getCollationKey (null) does not return null");
        }

        [NUnit.Framework.Test]
        public void TestHashCode()
        {
            {
                String rule = "< a < b < c < d";
                RuleBasedCollator coll = new RuleBasedCollator(rule);
                NUnit.Framework.Assert.AreEqual(rule.GetHashCode(), coll.GetHashCode());
            }

            {
                String rule_0 = "< a < b < c < d < e";
                RuleBasedCollator coll_1 = new RuleBasedCollator(rule_0);
                NUnit.Framework.Assert.AreEqual(rule_0.GetHashCode(), coll_1.GetHashCode());
            }

        }

        [NUnit.Framework.Test]
        public void TestClone()
        {
            RuleBasedCollator coll = (RuleBasedCollator)ILOG.J2CsMapping.Text.Collator
                    .GetInstance(Locale.US);
            RuleBasedCollator clone = (RuleBasedCollator)coll.Clone();
            NUnit.Framework.Assert.AreNotSame(coll, clone);
            NUnit.Framework.Assert.AreEqual(coll.GetRules(), clone.GetRules());
            NUnit.Framework.Assert.AreEqual(coll.GetDecomposition(), clone.GetDecomposition());
            NUnit.Framework.Assert.AreEqual(coll.GetStrength(), clone.GetStrength());
        }

        /*
         * Class under test for boolean equals(java.lang.Object)
         */
        [NUnit.Framework.Test]
        public void TestEqualsObject()
        {
            String rule = "< a < b < c < d < e";
            RuleBasedCollator coll = new RuleBasedCollator(rule);

            NUnit.Framework.Assert.AreEqual(ILOG.J2CsMapping.Text.Collator.TERTIARY, coll.GetStrength());
            NUnit.Framework.Assert.AreEqual(ILOG.J2CsMapping.Text.Collator.NO_DECOMPOSITION, coll.GetDecomposition());
            RuleBasedCollator other = new RuleBasedCollator(rule);
            NUnit.Framework.Assert.IsTrue(coll.Equals(other));

            coll.SetStrength(ILOG.J2CsMapping.Text.Collator.PRIMARY);
            NUnit.Framework.Assert.IsFalse(coll.Equals(other));

            coll.SetStrength(ILOG.J2CsMapping.Text.Collator.TERTIARY);
            coll.SetDecomposition(ILOG.J2CsMapping.Text.Collator.CANONICAL_DECOMPOSITION);
            NUnit.Framework.Assert.IsFalse(coll.Equals(other));
        }

        /*
         * Class under test for int compare(java.lang.String, java.lang.String)
         */
        [NUnit.Framework.Test]
        public void TestCompareStringString()
        {
            String rule = "< c < b < a";
            RuleBasedCollator coll = new RuleBasedCollator(rule);
            NUnit.Framework.Assert.AreEqual(-1, coll.Compare("c", "a"));
        }

        [NUnit.Framework.Test]
        public void TestGetCollationKey()
        {
            RuleBasedCollator coll = (RuleBasedCollator)ILOG.J2CsMapping.Text.Collator
                    .GetInstance(Locale.GERMAN);
            String source = "abc";
            CollationKey key1 = coll.GetCollationKey(source);
            NUnit.Framework.Assert.AreEqual(source, key1.GetSourceString());
            String source2 = "abb";
            CollationKey key2 = coll.GetCollationKey(source2);
            NUnit.Framework.Assert.AreEqual(source2, key2.GetSourceString());
            NUnit.Framework.Assert.IsTrue(key1.CompareTo(key2) > 0);
            NUnit.Framework.Assert.IsTrue(coll.Compare(source, source2) > 0);

        }

        [NUnit.Framework.Test]
        public void TestGetRules()
        {
            String rule = "< a = b < c";
            RuleBasedCollator coll = new RuleBasedCollator(rule);
            NUnit.Framework.Assert.AreEqual(rule, coll.GetRules());
        }

        /*
         * Class under test for java.text.CollationElementIterator
         * getCollationElementIterator(java.lang.String)
         */
        [NUnit.Framework.Test]
        public void TestGetCollationElementIteratorString()
        {
            {
                Locale locale = new Locale("es", "", "TRADITIONAL");
                RuleBasedCollator coll = (RuleBasedCollator)ILOG.J2CsMapping.Text.Collator
                        .GetInstance(locale);
                String source = "cha";
                CollationElementIterator iterator = coll
                        .GetCollationElementIterator(source);
                int[] e_offset = { 0, 1, 2, 3 };
                int offset = iterator.GetOffset();
                int i = 0;
                NUnit.Framework.Assert.AreEqual(e_offset[i++], offset);
                while (offset != source.Length)
                {
                    iterator.Next();
                    offset = iterator.GetOffset();
                    NUnit.Framework.Assert.AreEqual(e_offset[i++], offset);
                }
            }

            {
                Locale locale_0 = new Locale("de", "DE");
                RuleBasedCollator coll_1 = (RuleBasedCollator)ILOG.J2CsMapping.Text.Collator
                        .GetInstance(locale_0);
                String source_2 = "\u00E6b";
                CollationElementIterator iterator_3 = coll_1
                        .GetCollationElementIterator(source_2);
                int[] e_offset_4 = { 0, 1, 1, 2 };
                int offset_5 = iterator_3.GetOffset();
                int i_6 = 0;
                NUnit.Framework.Assert.AreEqual(e_offset_4[i_6++], offset_5);
                while (offset_5 != source_2.Length)
                {
                    iterator_3.Next();
                    offset_5 = iterator_3.GetOffset();
                    NUnit.Framework.Assert.AreEqual(e_offset_4[i_6++], offset_5);
                }
            }
            // Regression for HARMONY-1352
            try
            {
                new RuleBasedCollator("< a< b< c< d")
                        .GetCollationElementIterator((String)null);
                NUnit.Framework.Assert.Fail("NullPointerException expected");
            }
            catch (NullReferenceException e)
            {
                // expected
            }
        }

        /*
         * Class under test for java.text.CollationElementIterator
         * getCollationElementIterator(java.text.CharacterIterator)
         */
        [NUnit.Framework.Test]
        public void TestGetCollationElementIteratorCharacterIterator()
        {
            {
                Locale locale = new Locale("es", "", "TRADITIONAL");
                RuleBasedCollator coll = (RuleBasedCollator)ILOG.J2CsMapping.Text.Collator
                        .GetInstance(locale);
                String text = "cha";
                StringCharacterIterator source = new StringCharacterIterator(
                        text);
                CollationElementIterator iterator = coll
                        .GetCollationElementIterator(source);
                int[] e_offset = { 0, 1, 2, 3 };
                int offset = iterator.GetOffset();
                int i = 0;
                NUnit.Framework.Assert.AreEqual(e_offset[i++], offset);
                while (offset != text.Length)
                {
                    iterator.Next();
                    offset = iterator.GetOffset();
                    // System.out.println(offset);
                    NUnit.Framework.Assert.AreEqual(e_offset[i++], offset);
                }
            }

            {
                Locale locale_0 = new Locale("de", "DE");
                RuleBasedCollator coll_1 = (RuleBasedCollator)ILOG.J2CsMapping.Text.Collator
                        .GetInstance(locale_0);
                String text_2 = "\u00E6b";
                StringCharacterIterator source_3 = new StringCharacterIterator(
                        text_2);
                CollationElementIterator iterator_4 = coll_1
                        .GetCollationElementIterator(source_3);
                int[] e_offset_5 = { 0, 1, 1, 2 };
                int offset_6 = iterator_4.GetOffset();
                int i_7 = 0;
                NUnit.Framework.Assert.AreEqual(e_offset_5[i_7++], offset_6);
                while (offset_6 != text_2.Length)
                {
                    iterator_4.Next();
                    offset_6 = iterator_4.GetOffset();
                    NUnit.Framework.Assert.AreEqual(e_offset_5[i_7++], offset_6);
                }
            }
            // Regression for HARMONY-1352
            try
            {
                new RuleBasedCollator("< a< b< c< d")
                        .GetCollationElementIterator((CharacterIterator)null);
                NUnit.Framework.Assert.Fail("NullPointerException expected");
            }
            catch (NullReferenceException e)
            {
                // expected
            }
        }

        [NUnit.Framework.Test]
        public void TestStrength()
        {
            RuleBasedCollator coll = (RuleBasedCollator)ILOG.J2CsMapping.Text.Collator
                    .GetInstance(Locale.US);
            for (int i = 0; i < 4; i++)
            {
                coll.SetStrength(i);
                NUnit.Framework.Assert.AreEqual(i, coll.GetStrength());
            }

        }

        [NUnit.Framework.Test]
        public void TestDecomposition()
        {
            RuleBasedCollator coll = (RuleBasedCollator)ILOG.J2CsMapping.Text.Collator
                    .GetInstance(Locale.US);
            for (int i = 0; i < 2; i++)
            {
                coll.SetDecomposition(i);
                NUnit.Framework.Assert.AreEqual(i, coll.GetDecomposition());
            }
        }

        [NUnit.Framework.Test]
        public void TestCollator_GetInstance()
        {
            Collator coll = ILOG.J2CsMapping.Text.Collator.GetInstance();
            Object obj1 = "a";
            Object obj2 = "b";
            NUnit.Framework.Assert.AreEqual(-1, coll.Compare(obj1, obj2));

            ILOG.J2CsMapping.Text.Collator.GetInstance();
            NUnit.Framework.Assert.IsFalse(coll.Equals("A", "\uFF21"));
        }

        [NUnit.Framework.Test]
        public void TestGetAvailableLocales()
        {
            // Locale[] locales = Collator.getAvailableLocales();
            // for (int i = 0; i < locales.length; i++) {
            // Locale locale = locales[i];
            // }
        }

        // Test CollationKey
        [NUnit.Framework.Test]
        public void TestCollationKey()
        {
            Collator coll = ILOG.J2CsMapping.Text.Collator.GetInstance(Locale.US);
            String text = "abc";
            CollationKey key = coll.GetCollationKey(text);
            key.GetHashCode();

            CollationKey key2 = coll.GetCollationKey("abc");

            NUnit.Framework.Assert.AreEqual(0, key.CompareTo(key2));
        }


        /// @tests java.text.RuleBasedCollator.RuleBasedCollator(java.lang.String)
        [NUnit.Framework.Test]
        public void TestNullPointerException()
        {
            // Regression for HARMONY-241
            try
            {
                new RuleBasedCollator(null);
                NUnit.Framework.Assert.Fail("Constructor RuleBasedCollator(null) "
                        + "should throw NullPointerException");
            }
            catch (NullReferenceException e)
            {
            }
        }


        /// @tests java.text.RuleBasedCollator.compare(java.lang.String,
        /// java.lang.String)
        [NUnit.Framework.Test]
        public void TestCompareNull()
        {
            // Regression for HARMONY-836
            try
            {
                new RuleBasedCollator("< a").Compare(null, null);
                NUnit.Framework.Assert.Fail("RuleBasedCollator.compare(null, null) "
                        + "should throw NullPointerException");
            }
            catch (NullReferenceException e)
            {
            }
        }


        /// @tests java.text.RuleBasedCollator.RuleBasedCollator(java.lang.String)
        [NUnit.Framework.Test]
        public void TestEmptyStringException()
        {
            // Regression for HARMONY-241
            try
            {
                new RuleBasedCollator("");
                NUnit.Framework.Assert.Fail("Constructor RuleBasedCollator(\"\") "
                        + "should throw ParseException");
            }
            catch (ParseException e)
            {
                NUnit.Framework.Assert.AreEqual("ILOG.J2CsMapping.Util.ParseException", e.GetType().FullName);
                NUnit.Framework.Assert.AreEqual(0, e.GetErrorOffset());
            }
        }

    }
}
