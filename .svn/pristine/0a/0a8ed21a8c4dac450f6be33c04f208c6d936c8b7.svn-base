/*
 ******************************************************************************
 * Copyright (C) 2003-2007, International Business Machines Corporation and   *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 *
 * Created on May 2, 2003
 *
 * To change the template for this generated file go to
 * Window>Preferences>Java>Code Generation>Code and Comments
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl {
	
	using ILOG.J2CsMapping.IO;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	public sealed class StringPrepDataReader : ICUBinary.Authenticate {
	    private static readonly bool debug = IBM.ICU.Impl.ICUDebug
	            .Enabled("NormalizerDataReader");
	
	    /// <summary>
	    /// <p>
	    /// private constructor.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="inputStream">ICU uprop.dat file input stream</param>
	    /// <exception cref="IOException">throw if data file fails authentication</exception>
	    /// @draft 2.1
	    public StringPrepDataReader(Stream inputStream) {
	        /*if (debug)
	            System.Console.Out.WriteLine("Bytes in inputStream "
	                    + inputStream.Available());*/
	
	        unicodeVersion = IBM.ICU.Impl.ICUBinary
	                .ReadHeader(inputStream, DATA_FORMAT_ID, this);
	
	        /*if (debug)
	            System.Console.Out.WriteLine("Bytes left in inputStream "
	                    + inputStream.Available());*/
	
	        dataInputStream = new DataInputStream(inputStream);
	
	        /*if (debug)
	            System.Console.Out.WriteLine("Bytes left in dataInputStream "
	                    + dataInputStream.Available());*/
	    }
	
	    public void Read(byte[] idnaBytes, char[] mappingTable) {
	
	        // Read the bytes that make up the idnaTrie
	        dataInputStream.ReadFully(idnaBytes);
	
	        // Read the extra data
	        for (int i = 0; i < mappingTable.Length; i++) {
	            mappingTable[i] = dataInputStream.ReadChar();
	        }
	    }
	
	    public byte[] GetDataFormatVersion() {
	        return DATA_FORMAT_VERSION;
	    }
	
	    public bool IsDataVersionAcceptable(byte[] version) {
	        return version[0] == DATA_FORMAT_VERSION[0]
	                && version[2] == DATA_FORMAT_VERSION[2]
	                && version[3] == DATA_FORMAT_VERSION[3];
	    }
	
	    public int[] ReadIndexes(int length) {
	        int[] indexes = new int[length];
	        // Read the indexes
	        for (int i = 0; i < length; i++) {
	            indexes[i] = dataInputStream.ReadInt();
	        }
	        return indexes;
	    }
	
	    public byte[] GetUnicodeVersion() {
	        return unicodeVersion;
	    }
	
	    // private data members -------------------------------------------------
	
	    /// <summary>
	    /// ICU data file input stream
	    /// </summary>
	    ///
	    private DataInputStream dataInputStream;
	
	    private byte[] unicodeVersion;
	
	    /// <summary>
	    /// File format version that this class understands. No guarantees are made if a older version is used see store.c of gennorm for more information and values
	    /// </summary>
	    ///
	    private static readonly byte[] DATA_FORMAT_ID = { (byte) 0x53, (byte) 0x50,
	            (byte) 0x52, (byte) 0x50 };
	
	    private static readonly byte[] DATA_FORMAT_VERSION = { (byte) 0x3, (byte) 0x2,
	            (byte) 0x5, (byte) 0x2 };
	
	}
}
