/*
 **********************************************************************
 * Copyright (c) 2002-2006, International Business Machines
 * Corporation and others.  All Rights Reserved.
 **********************************************************************
 * Author: Alan Liu
 * Created: November 5 2002
 * Since: ICU 2.4
 **********************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:48 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl {
	
	using ILOG.J2CsMapping.IO;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A DataInputStream that implements random-access seeking. For this to work,
	/// the size of the data stream must be known in advance, or the data must be
	/// supplied as a raw byte[] array.
	/// Seeking doesn't work directly on all streams. If a given stream doesn't
	/// support seeking, extract the bytes into a byte[] array and use the byte[]
	/// constructor.
	/// </summary>
	///
	internal class ICUBinaryStream : DataInputStream {
	
	    /// <summary>
	    /// Construct a stream from the given stream and size.
	    /// </summary>
	    ///
	    /// <param name="stream">the stream of data</param>
	    /// <param name="size">the number of bytes that should be made available for seeking.Bytes beyond this may be read, but seeking will not work foroffset >= size.</param>
	    public ICUBinaryStream(Stream stream, int size) : base(stream) {
	        Mark(size);
	    }
	
	    /// <summary>
	    /// Construct a stream from the given raw bytes.
	    /// </summary>
	    ///
	    public ICUBinaryStream(byte[] raw) : this(new MemoryStream(raw), raw.Length) {
	    }
	
	    /// <summary>
	    /// Seek to the given offset. Offset is from the position of the stream
	    /// passed to the constructor, or from the start of the byte[] array.
	    /// </summary>
	    ///
	    public void Seek(int offset) {
	        Reset();
	        int actual = SkipBytes(offset);
	        if (actual != offset) {
	            throw new InvalidOperationException("Skip(" + offset
	                    + ") only skipped " + actual + " bytes");
	        }
	        if (false)
	            System.Console.Out.WriteLine("(seek " + offset + ")");
	    }
	}
}
