//##header J2SE15
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:02 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2001-2007, International Business Machines Corporation and    
/// others. All Rights Reserved.                                                
/// </summary>
///
namespace IBM.ICU.Charset
{

    using IBM.ICU.Impl;
    using IBM.ICU.Util;
    using ILOG.J2CsMapping.Collections;
    using ILOG.J2CsMapping.Collections.Generics;
    //using ILOG.J2CsMapping.IO.Jar;
    using ILOG.J2CsMapping.NIO;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Net;
    using System.Reflection;
    using System.Resources;
    using System.Runtime.CompilerServices;
    using System.Security;
    using NUnit.Framework;

    [TestFixture]
    public sealed class ICUResourceBundleTest : TestFmwk
    {
        private static readonly Assembly testLoader = typeof(ICUResourceBundleTest).Assembly;

        public static void Main(String[] args)
        {
            ICUResourceBundleTest test = new ICUResourceBundleTest();
            test.Run(args);

        }

        [Test]
        public void TestGetResources()
        {
            /* try
             {
                 // It does not work well in eclipse plug-in test because of class
                 // loader configuration??
                 // For now, specify resource path explicitly in this test case
                 // Enumeration en = testLoader.getResources("META-INF");
                 IIterator en = testLoader.GetResources("com.ibm.icu.dev.data");
                 for (; en.HasNext(); )
                 {
                     Uri url = (Uri)en.Next();
                     if (url == null)
                     {
                         Warnln("could not load resource data");
                         return;
                     }
                     WebRequest c = WebRequest.Create(url);

                     if (c is JarURLConnection)
                     {
                         JarURLConnection jc = (JarURLConnection)c;
                         JarEntry je = jc.GetJarEntry();
                         Logln("jar entry: " + je.ToString());
                     }
                     else
                     {
                         Stream mask0 = c.GetResponse().GetResponseStream();
                         Logln("input stream:");
                         StreamReader r = new StreamReader(mask0);
                         TextReader br = r;
                         String line = null;
                         int n = 0;
                         while ((line = br.ReadLine()) != null)
                         {
                             Logln("  " + ++n + ": " + line);
                         }
                     }
                 }
             }
             catch (SecurityException ex)
             {
                 Warnln("could not load resource data: " + ex);
                 Console.Error.WriteLine(ex.StackTrace);
             }
             catch (NullReferenceException ex_0)
             {
                 // thrown by ibm 1.4.2 windows jvm security manager
                 Warnln("could not load resource data: " + ex_0);
             }
             catch (Exception ex_1)
             {
                 Console.Error.WriteLine(ex_1.StackTrace);
                 Errln("Unexpected exception: " + ex_1);
             }*/
        }

        [Test]
        public void TestResourceBundleWrapper()
        {
            UResourceBundle bundle = IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                    "IBM.ICU.Impl.Data.HolidayBundle", "da_DK");
            Object o = bundle.GetObject("holidays");
            if (o is Holiday[])
            {
                Logln("wrapper mechanism works for Weekend data");
            }
            else
            {
                Errln("Did not get the expected output for Weekend data");
            }

            bundle = IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                    IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME, "bogus");
            if (bundle is UResourceBundle
                    && bundle.GetULocale().Equals("en_US"))
            {
                Logln("wrapper mechanism works for bogus locale");
            }
            else
            {
                Errln("wrapper mechanism failed for bogus locale.");
            }

            try
            {
                bundle = IBM.ICU.Util.UResourceBundle.GetBundleInstance("bogus", "bogus");
                if (bundle != null)
                {
                    Errln("Did not get the expected exception");
                }
            }
            catch (MissingManifestResourceException ex)
            {
                Logln("got the expected exception");
            }

        }

        [Test]
        public void TestJB3879()
        {
            // this tests tests loading of root bundle when a resource bundle
            // for the default locale is requested
            try
            {
                UResourceBundle bundle = (UResourceBundle)IBM.ICU.Util.UResourceBundle
                        .GetBundleInstance("com/ibm/icu/dev/data/testdata", IBM.ICU.Util.ULocale
                                .GetDefault().ToString(), testLoader);
                if (bundle == null)
                {
                    Errln("could not create the resource bundle");
                }
            }
            catch (MissingManifestResourceException ex)
            {
                Warnln("could not load test data: " + ex.Message);
            }
        }

        [Test]
        public void TestOpen()
        {
            UResourceBundle bundle = (UResourceBundle)IBM.ICU.Util.UResourceBundle
                    .GetBundleInstance(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME,
                            "en_US_POSIX");

            if (bundle == null)
            {
                Errln("could not create the resource bundle");
            }

            UResourceBundle obj = bundle.Get("NumberPatterns");

            int size = obj.GetSize();
            int type = obj.GetType();
            if (type == IBM.ICU.Util.UResourceBundle.ARRAY)
            {
                UResourceBundle sub;
                for (int i = 0; i < size; i++)
                {
                    sub = obj.Get(i);
                    String temp = sub.GetString();
                    if (temp.Length == 0)
                    {
                        Errln("Failed to get the items from NumberPatterns array in bundle: "
                                + bundle.GetULocale().GetBaseName());
                    }
                    // System.out.println("\""+prettify(temp)+"\"");
                }

            }
            String[] strings = bundle.GetStringArray("NumberPatterns");
            if (size != strings.Length)
            {
                Errln("Failed to get the items from NumberPatterns array in bundle: "
                        + bundle.GetULocale().GetBaseName());
            }
            {
                obj = bundle.Get("NumberElements");

                size = obj.GetSize();
                type = obj.GetType();
                if (type == IBM.ICU.Util.UResourceBundle.ARRAY)
                {
                    UResourceBundle sub_0;
                    for (int i_1 = 0; i_1 < size; i_1++)
                    {
                        sub_0 = obj.Get(i_1);
                        String temp_2 = sub_0.GetString();
                        if (temp_2.Length == 0)
                        {
                            Errln("Failed to get the items from NumberPatterns array in bundle: "
                                    + bundle.GetULocale().GetBaseName());
                        }
                        // System.out.println("\""+prettify(temp)+"\"");
                    }

                }
            }
            if (bundle == null)
            {
                Errln("could not create the resource bundle");
            }
            bundle = (UResourceBundle)IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                    IBM.ICU.Impl.ICUResourceBundle.ICU_COLLATION_BASE_NAME, "en_US_POSIX");
            if (bundle == null)
            {
                Errln("could not load the stream");
            }
            bundle = (UResourceBundle)IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                    IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME,
                    "zzz_ZZ_very_very_very_long_bogus_bundle");
            if (!bundle.GetULocale().Equals(IBM.ICU.Util.ULocale.GetDefault()))
            {
                Errln("UResourceBundle did not load the default bundle when bundle was not found. Default: "
                        + IBM.ICU.Util.ULocale.GetDefault()
                        + ", Bundle locale: "
                        + bundle.GetULocale());
            }

        }

        [Test]
        public void TestBasicTypes()
        {
            UResourceBundle bundle = null;
            try
            {
                bundle = (UResourceBundle)IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                        "com/ibm/icu/dev/data/testdata", "testtypes", testLoader);
            }
            catch (MissingManifestResourceException e)
            {
                Warnln("could not load test data: " + e.Message);
                return;
            }
            {
                String expected = "abc\u0000def";
                UResourceBundle sub = bundle.Get("zerotest");
                if (!expected.Equals(sub.GetString()))
                {
                    Errln("Did not get the expected string for key zerotest in bundle testtypes");
                }
                sub = bundle.Get("emptyexplicitstring");
                expected = "";
                if (!expected.Equals(sub.GetString()))
                {
                    Errln("Did not get the expected string for key emptyexplicitstring in bundle testtypes");
                }
                sub = bundle.Get("emptystring");
                expected = "";
                if (!expected.Equals(sub.GetString()))
                {
                    Errln("Did not get the expected string for key emptystring in bundle testtypes");
                }
            }
            {
                int expected_0 = 123;
                UResourceBundle sub_1 = bundle.Get("onehundredtwentythree");
                if (expected_0 != sub_1.GetInt())
                {
                    Errln("Did not get the expected int value for key onehundredtwentythree in bundle testtypes");
                }
                sub_1 = bundle.Get("emptyint");
                expected_0 = 0;
                if (expected_0 != sub_1.GetInt())
                {
                    Errln("Did not get the expected int value for key emptyint in bundle testtypes");
                }
            }
            {
                int expected_2 = 1;
                UResourceBundle sub_3 = bundle.Get("one");
                if (expected_2 != sub_3.GetInt())
                {
                    Errln("Did not get the expected int value for key one in bundle testtypes");
                }
            }
            {
                int expected_4 = -1;
                UResourceBundle sub_5 = bundle.Get("minusone");
                int got = sub_5.GetInt();
                if (expected_4 != got)
                {
                    Errln("Did not get the expected int value for key minusone in bundle testtypes");
                }
                expected_4 = 0xFFFFFFF;
                got = sub_5.GetUInt();
                if (expected_4 != got)
                {
                    Errln("Did not get the expected int value for key minusone in bundle testtypes");
                }
            }
            {
                int expected_6 = 1;
                UResourceBundle sub_7 = bundle.Get("plusone");
                if (expected_6 != sub_7.GetInt())
                {
                    Errln("Did not get the expected int value for key minusone in bundle testtypes");
                }

            }
            {
                int[] expected_8 = new int[] { 1, 2, 3, -3, 4, 5, 6, 7 };
                UResourceBundle sub_9 = bundle.Get("integerarray");
                if (!IBM.ICU.Impl.Utility.ArrayEquals(expected_8, sub_9.GetIntVector()))
                {
                    Errln("Did not get the expected int vector value for key integerarray in bundle testtypes");
                }
                sub_9 = bundle.Get("emptyintv");
                expected_8 = new int[0];
                if (!IBM.ICU.Impl.Utility.ArrayEquals(expected_8, sub_9.GetIntVector()))
                {
                    Errln("Did not get the expected int vector value for key emptyintv in bundle testtypes");
                }

            }
            {
                /*UResourceBundle sub_10 = bundle.Get("binarytest");
                ByteBuffer got_11 = sub_10.GetBinary();
                if (got_11.Remaining() != 15)
                {
                    Errln("Did not get the expected length for the binary ByteBuffer");
                }
                for (int i = 0; i < got_11.Remaining(); i++)
                {
                    byte b = got_11.Get();
                    if (b != i)
                    {
                        Errln("Did not get the expected value for binary buffer at index: "
                                + i);
                    }
                }
                sub_10 = bundle.Get("emptybin");
                got_11 = sub_10.GetBinary();
                if (got_11.Remaining() != 0)
                {
                    Errln("Did not get the expected length for the emptybin ByteBuffer");
                }*/

            }
            {
                UResourceBundle sub_12 = bundle.Get("emptyarray");
                String key = sub_12.GetKey();
                if (!key.Equals("emptyarray"))
                {
                    Errln("Did not get the expected key for emptytable item");
                }
                if (sub_12.GetSize() != 0)
                {
                    Errln("Did not get the expected length for emptytable item");
                }
            }
            {
                UResourceBundle sub_13 = bundle.Get("menu");
                String key_14 = sub_13.GetKey();
                if (!key_14.Equals("menu"))
                {
                    Errln("Did not get the expected key for menu item");
                }
                UResourceBundle sub1 = sub_13.Get("file");
                key_14 = sub1.GetKey();
                if (!key_14.Equals("file"))
                {
                    Errln("Did not get the expected key for file item");
                }
                UResourceBundle sub2 = sub1.Get("open");
                key_14 = sub2.GetKey();
                if (!key_14.Equals("open"))
                {
                    Errln("Did not get the expected key for file item");
                }
                String value_ren = sub2.GetString();
                if (!value_ren.Equals("Open"))
                {
                    Errln("Did not get the expected value for key for oen item");
                }

                sub_13 = bundle.Get("emptytable");
                key_14 = sub_13.GetKey();
                if (!key_14.Equals("emptytable"))
                {
                    Errln("Did not get the expected key for emptytable item");
                }
                if (sub_13.GetSize() != 0)
                {
                    Errln("Did not get the expected length for emptytable item");
                }
                sub_13 = bundle.Get("menu").Get("file");
                int size = sub_13.GetSize();
                String expected_15;
                for (int i_16 = 0; i_16 < size; i_16++)
                {
                    sub1 = sub_13.Get(i_16);

                    switch (i_16)
                    {
                        case 0:
                            expected_15 = "exit";
                            break;
                        case 1:
                            expected_15 = "open";
                            break;
                        case 2:
                            expected_15 = "save";
                            break;
                        default:
                            expected_15 = "";
                            break;
                    }
                    String got_17 = sub1.GetKey();
                    if (!expected_15.Equals(got_17))
                    {
                        Errln("Did not get the expected key at index" + i_16
                                + ". Expected: " + expected_15 + " Got: " + got_17);
                    }
                    else
                    {
                        Logln("Got the expected key at index: " + i_16);
                    }
                }
            }

        }

        private sealed class TestCase
        {
            internal String key;

            internal int value_ren;

            internal TestCase(String key_0, int value_ren)
            {
                this.key = key_0;
                this.value_ren = value_ren;
            }
        }

        [Test]
        public void TestTable32()
        {
            ICUResourceBundleTest.TestCase[] arr = new ICUResourceBundleTest.TestCase[] { new ICUResourceBundleTest.TestCase ("ooooooooooooooooo", 0),
	                new ICUResourceBundleTest.TestCase ("oooooooooooooooo1", 1),
	                new ICUResourceBundleTest.TestCase ("ooooooooooooooo1o", 2),
	                new ICUResourceBundleTest.TestCase ("oo11ooo1ooo11111o", 25150),
	                new ICUResourceBundleTest.TestCase ("oo11ooo1ooo111111", 25151),
	                new ICUResourceBundleTest.TestCase ("o1111111111111111", 65535),
	                new ICUResourceBundleTest.TestCase ("1oooooooooooooooo", 65536),
	                new ICUResourceBundleTest.TestCase ("1ooooooo11o11ooo1", 65969),
	                new ICUResourceBundleTest.TestCase ("1ooooooo11o11oo1o", 65970),
	                new ICUResourceBundleTest.TestCase ("1ooooooo111oo1111", 65999) };
            UResourceBundle bundle = null;
            try
            {
                bundle = (UResourceBundle)IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                        "com/ibm/icu/dev/data/testdata", "testtable32", testLoader);
            }
            catch (MissingManifestResourceException ex)
            {
                Warnln("could not load resource data: " + ex.Message);
                return;
            }

            if (bundle.GetType() != IBM.ICU.Util.UResourceBundle.TABLE)
            {
                Errln("Could not get the correct type for bundle testtable32");
            }
            int size = bundle.GetSize();
            if (size != 66000)
            {
                Errln("Could not get the correct size for bundle testtable32");
            }
            for (int i = 0; i < size; i++)
            {
                UResourceBundle item = bundle.Get(i);
                String key_0 = item.GetKey();
                int parsedNumber = ParseTable32Key(key_0);
                int number = -1;
                switch (item.GetType())
                {
                    case IBM.ICU.Util.UResourceBundle.STRING:
                        String value_ren = item.GetString();
                        number = IBM.ICU.Text.UTF16.CharAt(value_ren, 0);
                        break;
                    case IBM.ICU.Util.UResourceBundle.INT:
                        number = item.GetInt();
                        break;
                    default:
                        Errln("Got unexpected resource type in testtable32");
                        break;

                }
                if (number != parsedNumber)
                {
                    Errln("Did not get expected value in testtypes32 for key" + key_0
                            + ". Expected: " + parsedNumber + " Got:" + number);
                }

            }
            for (int i_1 = 0; i_1 < arr.Length; i_1++)
            {
                String expected = arr[i_1].key;
                UResourceBundle item_2 = bundle.Get(expected);
                int number_3 = 0;
                String key_4 = item_2.GetKey();
                int parsedNumber_5 = ParseTable32Key(key_4);
                if (!key_4.Equals(expected))
                {
                    Errln("Did not get the expected key. Expected: " + expected
                            + " Got:" + key_4);
                }
                switch (item_2.GetType())
                {
                    case IBM.ICU.Util.UResourceBundle.STRING:
                        String value_6 = item_2.GetString();
                        number_3 = IBM.ICU.Text.UTF16.CharAt(value_6, 0);
                        break;
                    case IBM.ICU.Util.UResourceBundle.INT:
                        number_3 = item_2.GetInt();
                        break;
                    default:
                        Errln("Got unexpected resource type in testtable32");
                        break;
                }

                if (number_3 != parsedNumber_5)
                {
                    Errln("Did not get expected value in testtypes32 for key" + key_4
                            + ". Expected: " + parsedNumber_5 + " Got:" + number_3);
                }
            }
        }

        private static int ParseTable32Key(String key_0)
        {
            int number;
            char c;

            number = 0;
            for (int i = 0; i < key_0.Length; i++)
            {
                c = key_0[i];
                number <<= 1;
                if (c == '1')
                {
                    number |= 1;
                }
            }
            return number;
        }

        [Test]
        public void TestAliases()
        {
            String simpleAlias = "Open";

            UResourceBundle rb = (UResourceBundle)IBM.ICU.Util.UResourceBundle
                    .GetBundleInstance("com/ibm/icu/dev/data/testdata",
                            "testaliases", testLoader);
            if (rb == null)
            {
                Warnln("could not load testaliases data");
                return;
            }
            UResourceBundle sub = rb.Get("simplealias");
            String s1 = sub.GetString("simplealias");
            if (s1.Equals(simpleAlias))
            {
                Logln("Alias mechanism works for simplealias");
            }
            else
            {
                Errln("Did not get the expected output for simplealias");
            }
            {
                try
                {
                    rb = (UResourceBundle)IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                            "com/ibm/icu/dev/data/testdata", "testaliases",
                            testLoader);
                    sub = rb.Get("nonexisting");
                    Errln("Did not get the expected exception for nonexisting");
                }
                catch (MissingManifestResourceException ex)
                {
                    Logln("Alias mechanism works for nonexisting alias");
                }
            }
            {
                rb = (UResourceBundle)IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                        "com/ibm/icu/dev/data/testdata", "testaliases", testLoader);
                sub = rb.Get("referencingalias");
                s1 = sub.GetString();
                if (s1.Equals("Hani"))
                {
                    Logln("Alias mechanism works for referencingalias");
                }
                else
                {
                    Errln("Did not get the expected output for referencingalias");
                }
            }
            {
                rb = (UResourceBundle)IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                        "com/ibm/icu/dev/data/testdata", "testaliases", testLoader);
                sub = rb.Get("boundaries");
                String word = sub.GetString("word");

                if (word.Equals("word_ja.brk"))
                {
                    Logln("Got the expected output for boundaries/word");
                }
                else
                {
                    Errln("Did not get the expected type for boundaries/word");
                }

            }
            {
                UResourceBundle rb1 = (UResourceBundle)IBM.ICU.Util.UResourceBundle
                        .GetBundleInstance("com/ibm/icu/dev/data/testdata",
                                "testaliases", testLoader);
                if (rb1 != rb)
                {
                    Errln("Caching of the resource bundle failed");
                }
                else
                {
                    Logln("Caching of resource bundle passed");
                }
                sub = rb1.Get("testGetStringByKeyAliasing");

                s1 = sub.Get("KeyAlias0PST").GetString();
                if (s1.Equals("America/Los_Angeles"))
                {
                    Logln("Alias mechanism works for KeyAlias0PST");
                }
                else
                {
                    Errln("Did not get the expected output for KeyAlias0PST");
                }

                s1 = sub.GetString("KeyAlias1PacificStandardTime");
                if (s1.Equals("Pacific Standard Time"))
                {
                    Logln("Alias mechanism works for KeyAlias1PacificStandardTime");
                }
                else
                {
                    Errln("Did not get the expected output for KeyAlias1PacificStandardTime");
                }
                s1 = sub.GetString("KeyAlias2PDT");
                if (s1.Equals("PDT"))
                {
                    Logln("Alias mechanism works for KeyAlias2PDT");
                }
                else
                {
                    Errln("Did not get the expected output for KeyAlias2PDT");
                }

                s1 = sub.GetString("KeyAlias3LosAngeles");
                if (s1.Equals("Los Angeles"))
                {
                    Logln("Alias mechanism works for KeyAlias3LosAngeles. Got: "
                            + s1);
                }
                else
                {
                    Errln("Did not get the expected output for KeyAlias3LosAngeles. Got: "
                            + s1);
                }
            }
            {
                sub = rb.Get("testGetStringByIndexAliasing");
                s1 = sub.GetString(0);
                if (s1.Equals("America/Los_Angeles"))
                {
                    Logln("Alias mechanism works for testGetStringByIndexAliasing/0. Got: "
                            + s1);
                }
                else
                {
                    Errln("Did not get the expected output for testGetStringByIndexAliasing/0. Got: "
                            + s1);
                }
                s1 = sub.GetString(1);
                if (s1.Equals("Pacific Standard Time"))
                {
                    Logln("Alias mechanism works for testGetStringByIndexAliasing/1");
                }
                else
                {
                    Errln("Did not get the expected output for testGetStringByIndexAliasing/1");
                }
                s1 = sub.GetString(2);
                if (s1.Equals("PDT"))
                {
                    Logln("Alias mechanism works for testGetStringByIndexAliasing/2");
                }
                else
                {
                    Errln("Did not get the expected output for testGetStringByIndexAliasing/2");
                }

                s1 = sub.GetString(3);
                if (s1.Equals("Los Angeles"))
                {
                    Logln("Alias mechanism works for testGetStringByIndexAliasing/3. Got: "
                            + s1);
                }
                else
                {
                    Errln("Did not get the expected output for testGetStringByIndexAliasing/3. Got: "
                            + s1);
                }
            }
            {
                sub = rb.Get("testAliasToTree");

                ByteBuffer buf = sub.Get("standard").Get("%%CollationBin")
                        .GetBinary();
                if (buf == null)
                {
                    Errln("Did not get the expected output for %%CollationBin");
                }
            }
            // should not get an exception
            rb = (UResourceBundle)IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                    IBM.ICU.Impl.ICUResourceBundle.ICU_RBNF_BASE_NAME, "fr_BE");
            String str = rb.GetString("SpelloutRules");
            if (str != null || str.Length > 0)
            {
                Logln("Alias mechanism works");
            }
            else
            {
                Errln("Alias mechanism failed for fr_BE SpelloutRules");
            }
            rb = (UResourceBundle)IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                    IBM.ICU.Impl.ICUResourceBundle.ICU_COLLATION_BASE_NAME, "zh_TW");
            UResourceBundle b = (UResourceBundle)rb.GetObject("collations");
            if (b != null)
            {
                if (b.Get(0).GetKey().Equals("default"))
                {
                    Logln("Alias mechanism works");
                }
                else
                {
                    Errln("Alias mechanism failed for zh_TW collations");
                }
            }
            else
            {
                Errln("Did not get the expected object for collations");
            }

        }

        [Test]
        public void TestAlias()
        {
            Logln("Testing %%ALIAS");
            UResourceBundle rb = (UResourceBundle)IBM.ICU.Util.UResourceBundle
                    .GetBundleInstance(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME, "iw_IL");
            UResourceBundle b = rb.Get("NumberPatterns");
            if (b != null)
            {
                if (b.GetSize() > 0)
                {
                    Logln("%%ALIAS mechanism works");
                }
                else
                {
                    Errln("%%ALIAS mechanism failed for iw_IL collations");
                }
            }
            else
            {
                Errln("%%ALIAS mechanism failed for iw_IL");
            }
        }

        [Test]
        public void TestXPathAlias()
        {
            UResourceBundle rb = (UResourceBundle)IBM.ICU.Util.UResourceBundle
                    .GetBundleInstance("com/ibm/icu/dev/data/testdata", "te_IN",
                            testLoader);
            UResourceBundle b = rb.Get("aliasClient");
            String result = b.GetString();
            String expResult = "correct";

            if (!result.Equals(expResult))
            {
                Errln("Did not get the expected result for XPath style alias");
            }
            try
            {
                UResourceBundle c = rb.Get("rootAliasClient");
                result = c.GetString();
                expResult = "correct";
                if (!result.Equals(expResult))
                {
                    Errln("Did not get the expected result for XPath style alias for rootAliasClient");
                }
            }
            catch (MissingManifestResourceException ex)
            {
                Errln("Could not get rootAliasClient");
            }
        }

        [Test]
        public void TestCircularAliases()
        {
            try
            {
                UResourceBundle rb = (UResourceBundle)IBM.ICU.Util.UResourceBundle
                        .GetBundleInstance("com/ibm/icu/dev/data/testdata",
                                "testaliases", testLoader);
                UResourceBundle sub = rb.Get("aaa");
                String s1 = sub.GetString();
                if (s1 != null)
                {
                    Errln("Did not get the expected exception");
                }
            }
            catch (ArgumentException ex)
            {
                Logln("got expected exception for circular references");
            }
            catch (MissingManifestResourceException ex_0)
            {
                Warnln("could not load resource data: " + ex_0.Message);
            }
        }

        [Test]
        public void TestGetWithFallback()
        {
            /*
             * UResourceBundle bundle =(UResourceBundle)
             * UResourceBundle.getBundleInstance
             * ("com/ibm/icu/dev/data/testdata","te_IN"); String key =
             * bundle.getStringWithFallback("Keys/collation");
             * if(!key.equals("COLLATION")){ errln(
             * "Did not get the expected result from getStringWithFallback method."
             * ); } String type =
             * bundle.getStringWithFallback("Types/collation/direct");
             * if(!type.equals("DIRECT")){ errln(
             * "Did not get the expected result form getStringWithFallback method."
             * ); }
             */
            ICUResourceBundle bundle = null;
            String key_0 = null;
            try
            {
                bundle = (ICUResourceBundle)IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                        IBM.ICU.Impl.ICUResourceBundle.ICU_COLLATION_BASE_NAME,
                        IBM.ICU.Util.ULocale.Canonicalize("de__PHONEBOOK"));

                if (!bundle.GetULocale().Equals("de"))
                {
                    Errln("did not get the expected bundle");
                }
                key_0 = bundle.GetStringWithFallback("collations/collation/default");
                if (!key_0.Equals("phonebook"))
                {
                    Errln("Did not get the expected result from getStringWithFallback method.");
                }

            }
            catch (MissingManifestResourceException ex)
            {
                Logln("got the expected exception");
            }

            bundle = (ICUResourceBundle)IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                    IBM.ICU.Impl.ICUResourceBundle.ICU_COLLATION_BASE_NAME, "fr_FR");
            key_0 = bundle.GetStringWithFallback("collations/default");
            if (!key_0.Equals("standard"))
            {
                Errln("Did not get the expected result from getStringWithFallback method.");
            }
            bundle = (ICUResourceBundle)IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                    IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME, "fr_FR");
            ICUResourceBundle b1 = bundle.GetWithFallback("calendar");
            String defaultCal = b1.GetStringWithFallback("default");
            if (!defaultCal.Equals("gregorian"))
            {
                Errln("Did not get the expected default calendar string: Expected: gregorian, Got: "
                        + defaultCal);
            }
            ICUResourceBundle b2 = b1.GetWithFallback(defaultCal);
            ICUResourceBundle b3 = b2.GetWithFallback("monthNames");
            String defaultContext = b3.GetStringWithFallback("default");
            ICUResourceBundle b4 = b3.GetWithFallback(defaultContext);
            String defaultWidth = b4.GetStringWithFallback("default");
            ICUResourceBundle b5 = b4.GetWithFallback(defaultWidth);
            if (b5.GetSize() != 12)
            {
                Errln("Did not get the expected size for the default monthNames");
            }
        }

        private const String COLLATION_RESNAME = "collations";

        private const String COLLATION_KEYWORD = "collation";

        private const String DEFAULT_NAME = "default";

        private const String STANDARD_NAME = "standard";

        [Test]
        public void TestKeywordValues()
        {
            String[] kwVals;
            bool foundStandard = false;
            int n;

            Logln("Testing getting collation values:");
            kwVals = IBM.ICU.Impl.ICUResourceBundle.GetKeywordValues(
                    IBM.ICU.Impl.ICUResourceBundle.ICU_COLLATION_BASE_NAME, COLLATION_RESNAME);
            for (n = 0; n < kwVals.Length; n++)
            {
                Logln(((int)(n)).ToString() + ": " + kwVals[n]);
                if (DEFAULT_NAME.Equals(kwVals[n]))
                {
                    Errln("getKeywordValues for collation returned 'default' in the list.");
                }
                else if (STANDARD_NAME.Equals(kwVals[n]))
                {
                    if (foundStandard == false)
                    {
                        foundStandard = true;
                        Logln("found 'standard'");
                    }
                    else
                    {
                        Errln("Error - 'standard' is in the keyword list twice!");
                    }
                }
            }

            if (foundStandard == false)
            {
                Errln("Error - 'standard' was not in the collation tree as a keyword.");
            }
            else
            {
                Logln("'standard' was found as a collation keyword.");
            }
        }

        [Test]
        public void TestLocaleDisplayNames()
        {
            ULocale[] locales = IBM.ICU.Util.ULocale.GetAvailableLocales();
            for (int i = 0; i < locales.Length; ++i)
            {
                if (!HasLocalizedCountryFor(IBM.ICU.Util.ULocale.ENGLISH, locales[i]))
                {
                    Errln("Could not get localized country for " + locales[i]);
                }
                if (!HasLocalizedLanguageFor(IBM.ICU.Util.ULocale.ENGLISH, locales[i]))
                {
                    Errln("Could not get localized language for " + locales[i]);
                }
                if (!HasLocalizedCountryFor(locales[i], locales[i]))
                {
                    Errln("Could not get localized country for " + locales[i]);
                    HasLocalizedCountryFor(locales[i], locales[i]);
                }
                if (!HasLocalizedLanguageFor(locales[i], locales[i]))
                {
                    Errln("Could not get localized language for " + locales[i]);
                }

                Logln(locales[i] + "\t"
                        + locales[i].GetDisplayName(IBM.ICU.Util.ULocale.ENGLISH) + "\t"
                        + locales[i].GetDisplayName(locales[i]));
            }
        }

        private static bool HasLocalizedLanguageFor(ULocale locale,
                ULocale otherLocale)
        {
            String lang = otherLocale.GetLanguage();
            String localizedVersion = otherLocale.GetDisplayLanguage(locale);
            return !lang.Equals(localizedVersion);
        }

        private static bool HasLocalizedCountryFor(ULocale locale,
                ULocale otherLocale)
        {
            String country = otherLocale.GetCountry();
            if (country.Equals(""))
                return true;
            String localizedVersion = otherLocale.GetDisplayCountry(locale);
            return !country.Equals(localizedVersion);
        }

        [Test]
        public void TestFunctionalEquivalent()
        {
            String[] testCases = {
	                // avail locale equiv
	                "f", "de_US_CALIFORNIA", "de", "f", "zh_TW@collation=stroke",
	                "zh@collation=stroke", /* alias of zh_Hant_TW */
	                "t", "zh_Hant_TW@collation=stroke", "zh@collation=stroke", "f",
	                "de_CN@collation=pinyin", "de", "t", "zh@collation=pinyin",
	                "zh", "f", "zh_CN@collation=pinyin", "zh", /*
	                                                            * alias of
	                                                            * zh_Hans_CN
	                                                            */
	                "t", "zh_Hans_CN@collation=pinyin", "zh", "f",
	                "zh_HK@collation=pinyin", "zh", /* alias of zh_Hant_HK */
	                "t", "zh_Hant_HK@collation=pinyin", "zh", "f",
	                "zh_HK@collation=stroke", "zh@collation=stroke", /*
	                                                                  * alias of
	                                                                  * zh_Hant_HK
	                                                                  */
	                "t", "zh_Hant_HK@collation=stroke", "zh@collation=stroke", "f",
	                "zh_HK", "zh@collation=stroke", /* alias of zh_Hant_HK */
	                "t", "zh_Hant_HK", "zh@collation=stroke", "f", "zh_MO",
	                "zh@collation=stroke", /* alias of zh_Hant_MO */
	                "t", "zh_Hant_MO", "zh@collation=stroke", "f", "zh_TW_STROKE",
	                "zh@collation=stroke", "f", "zh_TW_STROKE@collation=big5han",
	                "zh@collation=big5han", "f", "de_CN@calendar=japanese", "de",
	                "t", "de@calendar=japanese", "de", "f",
	                "zh_TW@collation=big5han", "zh@collation=big5han", /*
	                                                                    * alias of
	                                                                    * zh_Hant_TW
	                                                                    */
	                "t", "zh_Hant_TW@collation=big5han", "zh@collation=big5han",
	                "f", "zh_TW@collation=gb2312han", "zh@collation=gb2312han", /*
	                                                                             * alias
	                                                                             * of
	                                                                             * zh_Hant_TW
	                                                                             */
	                "t", "zh_Hant_TW@collation=gb2312han",
	                "zh@collation=gb2312han", "f", "zh_CN@collation=big5han",
	                "zh@collation=big5han", /* alias of zh_Hans_CN */
	                "t", "zh_Hans_CN@collation=big5han", "zh@collation=big5han",
	                "f", "zh_CN@collation=gb2312han", "zh@collation=gb2312han", /*
	                                                                             * alias
	                                                                             * of
	                                                                             * zh_Hans_CN
	                                                                             */
	                "t", "zh_Hans_CN@collation=gb2312han",
	                "zh@collation=gb2312han", "t", "zh@collation=big5han",
	                "zh@collation=big5han", "t", "zh@collation=gb2312han",
	                "zh@collation=gb2312han", "t", "hi_IN@collation=direct",
	                "hi@collation=direct", "t", "hi@collation=standard", "hi", "t",
	                "hi@collation=direct", "hi@collation=direct", "f",
	                "hi_AU@collation=direct;currency=CHF;calendar=buddhist",
	                "hi@collation=direct", "f",
	                "hi_AU@collation=standard;currency=CHF;calendar=buddhist",
	                "hi", "t", "de_DE@collation=pinyin", "de", /* bug 4582 tests */
	                "f", "de_DE_BONN@collation=pinyin", "de", "t", "nl", "root",
	                "t", "nl_NL", "root", "f", "nl_NL_EEXT", "root", "t",
	                "nl@collation=stroke", "root", "t", "nl_NL@collation=stroke",
	                "root", "f", "nl_NL_EEXT@collation=stroke", "root", };

            // String F_STR = "f";
            String T_STR = "t";
            bool[] isAvail = new bool[1];
            int i;

            Logln("Testing functional equivalents...");
            for (i = 0; i < testCases.Length; i += 3)
            {
                bool expectAvail = T_STR.Equals(testCases[i + 0]);
                ULocale inLocale = new ULocale(testCases[i + 1]);
                ULocale expectLocale = new ULocale(testCases[i + 2]);

                Logln(((int)(i / 3)).ToString() + ": "
                        + (expectAvail).ToString() + "\t\t"
                        + inLocale.ToString() + "\t\t" + expectLocale.ToString());

                ULocale equivLocale = IBM.ICU.Impl.ICUResourceBundle.GetFunctionalEquivalent(
                        IBM.ICU.Impl.ICUResourceBundle.ICU_COLLATION_BASE_NAME,
                        COLLATION_RESNAME, COLLATION_KEYWORD, inLocale, isAvail);
                bool gotAvail = isAvail[0];

                if ((gotAvail != expectAvail) || !equivLocale.Equals(expectLocale))
                {
                    Errln(((int)(i / 3)).ToString()
                            + ":  Error, expected  Equiv="
                            + (expectAvail).ToString() + "\t\t"
                            + inLocale.ToString() + "\t\t--> "
                            + expectLocale.ToString() + ",  but got "
                            + (gotAvail).ToString() + " "
                            + equivLocale.ToString());
                }
            }

            Logln("Testing error conditions:");
            try
            {
                IBM.ICU.Impl.ICUResourceBundle.GetFunctionalEquivalent(
                        IBM.ICU.Impl.ICUResourceBundle.ICU_COLLATION_BASE_NAME, "calendar",
                        "calendar", new ULocale("ar_EG@calendar=islamic"),
                        new bool[1]);
                Errln("Err: expected MissingResourceException");
            }
            catch (MissingManifestResourceException t)
            {
                Logln("expected MissingResourceException caught (PASS): "
                        + t.ToString());
            }
        }

        [Test]
        public void TestNorwegian()
        {
            try
            {
                UResourceBundle rb = IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                        IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME, "no_NO_NY");
                UResourceBundle sub = rb.Get("Countries");
                String s1 = sub.GetString("NO");
                if (s1.Equals("Noreg"))
                {
                    Logln("got expected output ");
                }
                else
                {
                    Errln("did not get the expected result");
                }
            }
            catch (ArgumentException ex)
            {
                Errln("Caught an unexpected expected");
            }
        }

        [Test]
        public void TestJB4102()
        {
            try
            {
                ICUResourceBundle root = (ICUResourceBundle)IBM.ICU.Util.UResourceBundle
                        .GetBundleInstance(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME, "root");
                ICUResourceBundle t = null;
                // AmPmMarkers now exist in root/islamic calendar, so this test is
                // rendered useless.
                // try{
                // t = root.getWithFallback("calendar/islamic-civil/AmPmMarkers");
                // errln("Second resource does not exist. How did it get here?\n");
                // }catch(MissingResourceException ex){
                // logln("Got the expected exception");
                // }
                try
                {
                    t = root.GetWithFallback("calendar/islamic-civil/eras/abbreviated/0/mikimaus/pera");
                    Errln("Second resource does not exist. How did it get here?\n");
                }
                catch (MissingManifestResourceException ex)
                {
                    Logln("Got the expected exception");
                }
                if (t != null)
                {
                    Errln("t is not null!");
                }
            }
            catch (MissingManifestResourceException e)
            {
                Warnln("Could not load the locale data: " + e.Message);
            }
        }

        [Test]
        public void TestCLDRStyleAliases()
        {
            String result = null;
            String expected = null;
            String[] expects = new String[] { "", "a41", "a12", "a03", "ar4" };

            Logln("Testing CLDR style aliases......\n");

            UResourceBundle rb = IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                    "com/ibm/icu/dev/data/testdata", "te_IN_REVISED", testLoader);
            ICUResourceBundle alias = (ICUResourceBundle)rb.Get("a");

            for (int i = 1; i < 5; i++)
            {
                String resource = "a" + i;
                UResourceBundle a = (alias).GetWithFallback(resource);
                result = a.GetString();
                if (result.Equals(expected))
                {
                    Errln("CLDR style aliases failed resource with name "
                            + resource + "resource, exp " + expects[i] + " , got "
                            + result);
                }
            }

        }

        private String GetLSString(int status)
        {
            switch (status)
            {
                case IBM.ICU.Impl.ICUResourceBundle.FROM_FALLBACK:
                    return "FROM_FALLBACK";
                case IBM.ICU.Impl.ICUResourceBundle.FROM_DEFAULT:
                    return "FROM_DEFAULT";
                case IBM.ICU.Impl.ICUResourceBundle.FROM_ROOT:
                    return "FROM_ROOT";
                case IBM.ICU.Impl.ICUResourceBundle.FROM_LOCALE:
                    return "FROM_LOCALE";
                default:
                    return "UNKNOWN";
            }
        }

        [Test]
        public void TestLoadingStatus()
        {
            ICUResourceBundle bundle = (ICUResourceBundle)IBM.ICU.Util.UResourceBundle
                    .GetBundleInstance(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME, "yi_IL");
            int status = bundle.GetLoadingStatus();
            if (status != IBM.ICU.Impl.ICUResourceBundle.FROM_DEFAULT)
            {
                Errln("Did not get the expected value for loading status. Expected "
                        + GetLSString(IBM.ICU.Impl.ICUResourceBundle.FROM_DEFAULT)
                        + " Got: "
                        + GetLSString(status));
            }
            bundle = (ICUResourceBundle)IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                    IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME, "eo_DE");
            status = bundle.GetLoadingStatus();
            if (status != IBM.ICU.Impl.ICUResourceBundle.FROM_FALLBACK)
            {
                Errln("Did not get the expected value for loading status. Expected "
                        + GetLSString(IBM.ICU.Impl.ICUResourceBundle.FROM_FALLBACK)
                        + " Got: "
                        + GetLSString(status));
            }

            Logln("Test to verify loading status of get(String)");
            bundle = (ICUResourceBundle)IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                    IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME, "te_IN");
            UResourceBundle countries = bundle.Get("Countries");
            status = ((ICUResourceBundle)countries).GetLoadingStatus();
            if (status != IBM.ICU.Impl.ICUResourceBundle.FROM_FALLBACK)
            {
                Errln("Did not get the expected value for loading status. Expected "
                        + GetLSString(IBM.ICU.Impl.ICUResourceBundle.FROM_FALLBACK)
                        + " Got: "
                        + GetLSString(status));
            }
            /*
             * UResourceBundle auxExemplar = bundle.get("AuxExemplarCharacters");
             * status = auxExemplar.getLoadingStatus(); if(status !=
             * UResourceBundle.FROM_ROOT){
             * errln("Did not get the expected value for loading status. Expected "+
             * getLSString(UResourceBundle.FROM_ROOT) + " Got: " +
             * getLSString(status)); }
             */
            Logln("Test to verify loading status of get(int)");
            ICUResourceBundle ms = (ICUResourceBundle)bundle
                    .Get("MeasurementSystem");
            status = ms.GetLoadingStatus();
            if (status != IBM.ICU.Impl.ICUResourceBundle.FROM_ROOT)
            {
                Errln("Did not get the expected value for loading status. Expected "
                        + GetLSString(IBM.ICU.Impl.ICUResourceBundle.FROM_ROOT)
                        + " Got: "
                        + GetLSString(status));
            }

            Logln("Test to verify loading status of getwithFallback");
            bundle = (ICUResourceBundle)IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                    "com/ibm/icu/dev/data/testdata", "sh_YU", testLoader);
            ICUResourceBundle temp = (ICUResourceBundle)bundle
                    .GetWithFallback("a/a2");
            status = temp.GetLoadingStatus();
            if (status != IBM.ICU.Impl.ICUResourceBundle.FROM_LOCALE)
            {
                Errln("Did not get the expected value for loading status. Expected "
                        + GetLSString(IBM.ICU.Impl.ICUResourceBundle.FROM_LOCALE)
                        + " Got: "
                        + GetLSString(status));
            }
            temp = bundle.GetWithFallback("a/a1");
            status = temp.GetLoadingStatus();
            if (status != IBM.ICU.Impl.ICUResourceBundle.FROM_FALLBACK)
            {
                Errln("Did not get the expected value for loading status. Expected "
                        + GetLSString(IBM.ICU.Impl.ICUResourceBundle.FROM_FALLBACK)
                        + " Got: "
                        + GetLSString(status));
            }
            temp = bundle.GetWithFallback("a/a4");
            status = temp.GetLoadingStatus();
            if (status != IBM.ICU.Impl.ICUResourceBundle.FROM_ROOT)
            {
                Errln("Did not get the expected value for loading status. Expected "
                        + GetLSString(IBM.ICU.Impl.ICUResourceBundle.FROM_ROOT)
                        + " Got: "
                        + GetLSString(status));
            }
        }

        [Test]
        public void TestCoverage()
        {
            UResourceBundle bundle;
            bundle = IBM.ICU.Util.UResourceBundle
                    .GetBundleInstance(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME);
            if (bundle == null)
            {
                Errln("UResourceBundle.getBundleInstance(String baseName) failed");
            }
            bundle = null;
            bundle = IBM.ICU.Util.UResourceBundle.GetBundleInstance(IBM.ICU.Util.ULocale.GetDefault());
            if (bundle == null)
            {
                Errln("UResourceBundle.getBundleInstance(ULocale) failed");
                return;
            }
            if (new UResourceTypeMismatchException("coverage") == null)
            {
                Errln("Create UResourceTypeMismatchException error");
            }

            ICUResourceBundleTest.Stub stub = new ICUResourceBundleTest.Stub();

            if (!stub.GetLocale().Equals(IBM.ICU.Util.ULocale.ROOT.ToLocale()))
            {
                Errln("UResourceBundle.getLoclae(Locale) should delegate to (ULocale)");
            }
        }

        [Test]
        public void TestJavaULocaleBundleLoading()
        {
            String baseName = "com.ibm.icu.dev.data.resources.TestDataElements";
            String locName = "en_Latn_US";
            UResourceBundle bundle = IBM.ICU.Util.UResourceBundle.GetBundleInstance(baseName,
                    locName, testLoader);
            String fromRoot = bundle.GetString("from_root");
            if (!fromRoot.Equals("This data comes from root"))
            {
                Errln("Did not get the expected string for from_root");
            }
            String fromEn = bundle.GetString("from_en");
            if (!fromEn.Equals("This data comes from en"))
            {
                Errln("Did not get the expected string for from_en");
            }
            String fromEnLatn = bundle.GetString("from_en_Latn");
            if (!fromEnLatn.Equals("This data comes from en_Latn"))
            {
                Errln("Did not get the expected string for from_en_Latn");
            }
            String fromEnLatnUs = bundle.GetString("from_en_Latn_US");
            if (!fromEnLatnUs.Equals("This data comes from en_Latn_US"))
            {
                Errln("Did not get the expected string for from_en_Latn_US");
            }
            UResourceBundle bundle1 = IBM.ICU.Util.UResourceBundle.GetBundleInstance(baseName,
                    new ULocale(locName), testLoader);
            if (!bundle1.Equals(bundle))
            {
                Errln("Did not get the expected bundle for " + baseName + "."
                        + locName);
            }
            if (bundle1 != bundle)
            {
                Errln("Did not load the bundle from cache");
            }

            UResourceBundle bundle2 = IBM.ICU.Util.UResourceBundle.GetBundleInstance(baseName,
                    "en_IN", testLoader);
            if (!bundle2.GetLocale().ToString().Equals("en"))
            {
                Errln("Did not get the expected fallback locale. Expected: en Got: "
                        + bundle2.GetLocale().ToString());
            }
            UResourceBundle bundle3 = IBM.ICU.Util.UResourceBundle.GetBundleInstance(baseName,
                    "te_IN", testLoader);
            if (!bundle3.GetLocale().ToString().Equals("te"))
            {
                Errln("Did not get the expected fallback locale. Expected: te Got: "
                        + bundle2.GetLocale().ToString());
            }
            // non-existent bundle .. should return default
            UResourceBundle defaultBundle = IBM.ICU.Util.UResourceBundle.GetBundleInstance(
                    baseName, "hi_IN", testLoader);
            ULocale defaultLocale = IBM.ICU.Util.ULocale.GetDefault();
            if (!defaultBundle.GetULocale().Equals(defaultLocale))
            {
                Errln("Did not get the default bundle for non-existent bundle");
            }
            // non-existent bundle, non-existent default locale
            // so return the root bundle.
            IBM.ICU.Util.ULocale.SetDefault(IBM.ICU.Util.ULocale.CANADA_FRENCH);
            UResourceBundle root = IBM.ICU.Util.UResourceBundle.GetBundleInstance(baseName,
                    "hi_IN", testLoader);
            if (!root.GetULocale().ToString().Equals(""))
            {
                Errln("Did not get the root bundle for non-existent default bundle for non-existent bundle");
            }
            // reset the default
            IBM.ICU.Util.ULocale.SetDefault(defaultLocale);
            IIterator keys = bundle.GetKeys();
            int i = 0;
            while (keys.HasNext())
            {
                Logln("key: " + keys.Next());
                i++;
            }
            if (i != 4)
            {
                Errln("Did not get the expected number of keys: got " + i
                        + ", expected 4");
            }
            UResourceBundle bundle4 = IBM.ICU.Util.UResourceBundle.GetBundleInstance(baseName,
                    "fr_Latn_FR", testLoader);
            if (bundle4 == null)
            {
                Errln("Could not load bundle fr_Latn_FR");
            }
        }

        [Test]
        public void TestAliasFallback()
        {
            try
            {
                ULocale loc = new ULocale("en_US");
                ICUResourceBundle b = (ICUResourceBundle)IBM.ICU.Util.UResourceBundle
                        .GetBundleInstance(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME, loc);
                ICUResourceBundle b1 = (ICUResourceBundle)b
                        .GetWithFallback("calendar/hebrew/monthNames/format/abbreviated");
                if (b1 != null)
                {
                    Logln("loaded data for abbreviated month names: " + b1.GetKey());
                }
            }
            catch (MissingManifestResourceException ex)
            {
                Warnln("Failed to load data for abbreviated month names");
            }
        }

        internal class Stub : UResourceBundle
        {
            public override ULocale GetULocale()
            {
                return IBM.ICU.Util.ULocale.ROOT;
            }

            protected override String GetLocaleID()
            {
                return null;
            }

            protected override String GetBaseName()
            {
                return null;
            }

            public override UResourceBundle GetParent()
            {
                return null;
            }

            public override void SetLoadingStatus(int newStatus)
            {
            }

            public override IIterator<string> GetKeys()
            {
                return null;
            }

            public override Object HandleGetObject(String key_0)
            {
                return null;
            }
        }
    }
}
