/*
 **********************************************************************
 * Copyright (c) 2002-2007, International Business Machines
 * Corporation and others.  All Rights Reserved.
 **********************************************************************
 * Author: Alan Liu
 * Created: December 18 2002
 * Since: ICU 2.4
 **********************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:02 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace IBM.ICU.Charset
{

    using IBM.ICU.Text;
    using IBM.ICU.Util;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using System.IO;
    using System.Runtime.CompilerServices;
    using NUnit.Framework;

    /// @test
    /// @summary General test of Currency
    [TestFixture]
    public class CurrencyTest : TestFmwk
    {

        public static void Main(String[] args)
        {
            new CurrencyTest().Run(args);
        }

        /// <summary>
        /// Test of basic API.
        /// </summary>
        [Test]
        public void TestAPI()
        {
            Currency usd = IBM.ICU.Util.Currency.GetInstance("USD");
            /* int hash = */
            usd.GetHashCode();
            Currency jpy = IBM.ICU.Util.Currency.GetInstance("JPY");
            if (usd.Equals(jpy))
            {
                Errln("FAIL: USD == JPY");
            }
            if (usd.Equals("abc"))
            {
                Errln("FAIL: USD == (String)");
            }
            if (usd.Equals(null))
            {
                Errln("FAIL: USD == (null)");
            }
            if (!usd.Equals(usd))
            {
                Errln("FAIL: USD != USD");
            }

            ILOG.J2CsMapping.Util.Locale[] avail = IBM.ICU.Util.Currency.GetAvailableLocales();
            if (avail == null)
            {
                Errln("FAIL: getAvailableLocales returned null");
            }

            try
            {
                usd.GetName(IBM.ICU.Util.ULocale.US, 5, new bool[1]);
                Errln("expected getName with invalid type parameter to throw exception");
            }
            catch (Exception e)
            {
                Logln("PASS: getName failed as expected");
            }
        }

        /// <summary>
        /// Test registration.
        /// </summary>
        [Test]
        public void TestRegistration()
        {
            Currency jpy = IBM.ICU.Util.Currency.GetInstance("JPY");
            Currency usd = IBM.ICU.Util.Currency.GetInstance(new ILOG.J2CsMapping.Util.Locale("en-us"));

            try
            {
                IBM.ICU.Util.Currency.Unregister(null); // should fail, coverage
                Errln("expected unregister of null to throw exception");
            }
            catch (Exception e)
            {
                Logln("PASS: unregister of null failed as expected");
            }

            if (IBM.ICU.Util.Currency.Unregister(""))
            { // coverage
                Errln("unregister before register erroneously succeeded");
            }

            ULocale fu_FU = new ULocale("fu_FU");

            Object key1 = IBM.ICU.Util.Currency.RegisterInstance(jpy, IBM.ICU.Util.ULocale.US);
            Object key2 = IBM.ICU.Util.Currency.RegisterInstance(jpy, fu_FU);

            Currency nus = IBM.ICU.Util.Currency.GetInstance(ILOG.J2CsMapping.Util.Locale.US);
            if (!nus.Equals(jpy))
            {
                Errln("expected " + jpy + " but got: " + nus);
            }

            // converage, make sure default factory works
            Currency nus1 = IBM.ICU.Util.Currency.GetInstance(ILOG.J2CsMapping.Util.Locale.JAPAN);
            if (!nus1.Equals(jpy))
            {
                Errln("expected " + jpy + " but got: " + nus1);
            }

            ULocale[] locales = IBM.ICU.Util.Currency.GetAvailableULocales();
            bool found = false;
            for (int i = 0; i < locales.Length; ++i)
            {
                if (locales[i].Equals(fu_FU))
                {
                    found = true;
                    break;
                }
            }
            if (!found)
            {
                Errln("did not find locale" + fu_FU + " in currency locales");
            }

            if (!IBM.ICU.Util.Currency.Unregister(key1))
            {
                Errln("unable to unregister currency using key1");
            }
            if (!IBM.ICU.Util.Currency.Unregister(key2))
            {
                Errln("unable to unregister currency using key2");
            }

            Currency nus2 = IBM.ICU.Util.Currency.GetInstance(new ILOG.J2CsMapping.Util.Locale("en-us"));
            if (!nus2.Equals(usd))
            {
                Errln("expected " + usd + " but got: " + nus2);
            }

            locales = IBM.ICU.Util.Currency.GetAvailableULocales();
            found = false;
            for (int i_0 = 0; i_0 < locales.Length; ++i_0)
            {
                if (locales[i_0].Equals(fu_FU))
                {
                    found = true;
                    break;
                }
            }
            if (found)
            {
                Errln("found locale" + fu_FU
                        + " in currency locales after unregister");
            }
        }

        /// <summary>
        /// Test names.
        /// </summary>
        [Test]
        public void TestNames()
        {
            // Do a basic check of getName()
            // USD { "US$", "US Dollar" } // 04/04/1792-
            ULocale en = IBM.ICU.Util.ULocale.ENGLISH;
            bool[] isChoiceFormat = new bool[1];
            Currency usd = IBM.ICU.Util.Currency.GetInstance("USD");
            // Warning: HARD-CODED LOCALE DATA in this test. If it fails, CHECK
            // THE LOCALE DATA before diving into the code.
            if (!NoData())
            {
                AssertEquals("USD.getName(SYMBOL_NAME)", "$",
                        usd.GetName(en, IBM.ICU.Util.Currency.SYMBOL_NAME, isChoiceFormat));
                AssertEquals("USD.getName(LONG_NAME)", "US Dollar",
                        usd.GetName(en, IBM.ICU.Util.Currency.LONG_NAME, isChoiceFormat));
            }
            // TODO add more tests later
        }
        [Test]
        public void TestCoverage()
        {
            Currency usd = IBM.ICU.Util.Currency.GetInstance("USD");
            if (!NoData())
            {
                AssertEquals("USD.getSymbol()", "$", usd.GetSymbol());
            }
            AssertEquals("USD.getLocale()", IBM.ICU.Util.ULocale.ROOT, usd.GetLocale(null));
        }
        [Test]
        public void TestCurrencyKeyword()
        {
            ULocale locale = new ULocale("th_TH@collation=traditional;currency=QQQ");
            Currency currency = IBM.ICU.Util.Currency.GetInstance(locale);
            String result = currency.GetCurrencyCode();
            if (!"QQQ".Equals(result))
            {
                Errln("got unexpected currency: " + result);
            }
        }
        [Test]
        public void TestDeprecatedCurrencyFormat()
        {
            // bug 5952
            ILOG.J2CsMapping.Util.Locale locale = new ILOG.J2CsMapping.Util.Locale("sr", "QQ");
            DecimalFormatSymbols icuSymbols = new IBM.ICU.Text.DecimalFormatSymbols(
                    locale);
            String symbol = icuSymbols.GetCurrencySymbol();
            Currency currency = icuSymbols.GetCurrency();
            String expectCur = null;
            String expectSym = "\u00A4";
            if (!symbol.ToString().Equals(expectSym) || currency != null)
            {
                Errln("for " + locale + " expected " + expectSym + "/" + expectCur
                        + " but got " + symbol + "/" + currency);
            }
            else
            {
                Logln("for " + locale + " expected " + expectSym + "/" + expectCur
                        + " and got " + symbol + "/" + currency);
            }
        }
    }
}
