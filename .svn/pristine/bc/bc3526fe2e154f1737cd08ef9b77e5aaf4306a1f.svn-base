//##header J2SE15
/*
 *******************************************************************************
 * Copyright (C) 2004-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using IBM.ICU.Impl;
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using ILOG.J2CsMapping.NIO;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Globalization;
	using System.IO;
	using System.Reflection;
	using System.Resources;
	using System.Runtime.CompilerServices;
     using ILOG.J2CsMapping.Util;
     using ILOG.J2CsMapping.Util;
	
	/// <summary>
	/// A class representing a collection of resource information pertaining to a
	/// given locale. A resource bundle provides a way of accessing locale- specific
	/// information in a data file. You create a resource bundle that manages the
	/// resources for a given locale and then ask it for individual resources.
	/// <P>
	/// In ResourceBundle class, an object is created and the sub items are fetched
	/// using getString, getObject methods. In UResourceBundle,each individual
	/// element of a resource is a resource by itself.
	/// <P>
	/// Resource bundles in ICU are currently defined using text files which conform
	/// to the following <a href=
	/// "http://source.icu-project.org/repos/icu/icuhtml/trunk/design/bnf_rb.txt">BNF
	/// definition</a>. More on resource bundle concepts and syntax can be found in
	/// the <a
	/// href="http://www.icu-project.org/userguide/ResourceManagement.html">Users
	/// Guide</a>.
	/// <P>
	/// The packaging of ICU///.res files can be of two types ICU4C:
	/// <pre>
	/// root.res
	/// |
	/// --------
	/// |        |
	/// fr.res  en.res
	/// |
	/// --------
	/// |        |
	/// fr_CA.res fr_FR.res
	/// </pre>
	/// JAVA/JDK:
	/// <pre>
	/// LocaleElements.res
	/// |
	/// -------------------
	/// |                   |
	/// LocaleElements_fr.res  LocaleElements_en.res
	/// |
	/// ---------------------------
	/// |                            |
	/// LocaleElements_fr_CA.res   LocaleElements_fr_FR.res
	/// </pre>
	/// Depending on the organization of your resources, the syntax to
	/// getBundleInstance will change. To open ICU style organization use:
	/// <pre>
	/// UResourceBundle bundle = UResourceBundle.getBundleInstance(
	/// &quot;com/mycompany/resources&quot;, &quot;en_US&quot;, myClassLoader);
	/// </pre>
	/// To open Java/JDK style organization use:
	/// <pre>
	/// UResourceBundle bundle = UResourceBundle.getBundleInstance(
	/// &quot;com.mycompany.resources.LocaleElements&quot;, &quot;en_US&quot;, myClassLoader);
	/// </pre>
	/// <note> Please use pass a class loader for loading non-ICU resources. Java
	/// security does not allow loading of resources across jar files. You must
	/// provide your class loader to load the resources </note>
	/// </summary>
	///
	/// @stable ICU 3.0
     public abstract class UResourceBundle : ResourceBundle
     {
	
	    /// <summary>
	    /// Creates a resource bundle using the specified base name and locale.
	    /// ICU_DATA_CLASS is used as the default root.
	    /// </summary>
	    ///
	    /// <param name="baseName">the base name of the resource bundle, a fully qualified classname</param>
	    /// <param name="localeName">the locale for which a resource bundle is desired</param>
	    /// <exception cref="MissingResourceException">if no resource bundle for the specified base name can befound</exception>
	    /// <returns>a resource bundle for the given base name and locale</returns>
	    /// @stable ICU 3.0
	    public static UResourceBundle GetBundleInstance(String baseName,
	            String localeName) {
	        return GetBundleInstance(baseName, localeName,
	                IBM.ICU.Impl.ICUResourceBundle.ICU_DATA_CLASS_LOADER, false);
	    }
	
	    /// <summary>
	    /// Creates a resource bundle using the specified base name, locale, and
	    /// class root.
	    /// </summary>
	    ///
	    /// <param name="baseName">the base name of the resource bundle, a fully qualified classname</param>
	    /// <param name="localeName">the locale for which a resource bundle is desired</param>
	    /// <param name="root">the class object from which to load the resource bundle</param>
	    /// <exception cref="MissingResourceException">if no resource bundle for the specified base name can befound</exception>
	    /// <returns>a resource bundle for the given base name and locale</returns>
	    /// @stable ICU 3.0
	    public static UResourceBundle GetBundleInstance(String baseName,
	            String localeName, Assembly root) {
	        return GetBundleInstance(baseName, localeName, root, false);
	    }
	
	    /// <summary>
	    /// Creates a resource bundle using the specified base name, locale, and
	    /// class root.
	    /// </summary>
	    ///
	    /// <param name="baseName">the base name of the resource bundle, a fully qualified classname</param>
	    /// <param name="localeName">the locale for which a resource bundle is desired</param>
	    /// <param name="root">the class object from which to load the resource bundle</param>
	    /// <param name="disableFallback">Option to disable locale inheritence. If true the fallbackchain will not be built.</param>
	    /// <exception cref="MissingResourceException">if no resource bundle for the specified base name can befound</exception>
	    /// <returns>a resource bundle for the given base name and locale</returns>
	    /// @stable ICU 3.0
	    protected static internal UResourceBundle GetBundleInstance(String baseName,
	            String localeName, Assembly root, bool disableFallback) {
	        return InstantiateBundle(baseName, localeName, root, disableFallback);
	    }
	
	    /// <summary>
	    /// Sole constructor. (For invocation by subclass constructors, typically
	    /// implicit.) This is public for compatibility with Java, whose compiler
	    /// will generate public default constructors for an abstract class.
	    /// </summary>
	    ///
	    /// @stable ICU 3.0
	    public UResourceBundle() {
	        this.keys = null;
	        this.size = 1;
	        this.resource = RES_BOGUS;
	        this.isTopLevel = false;
	    }
	
	    /// <summary>
	    /// Creates a UResourceBundle for the locale specified, from which users can
	    /// extract resources by using their corresponding keys.
	    /// </summary>
	    ///
	    /// <param name="locale">specifies the locale for which we want to open the resource.If null the bundle for default locale is opened.</param>
	    /// <returns>a resource bundle for the given locale</returns>
	    /// @stable ICU 3.0
	    public static UResourceBundle GetBundleInstance(ULocale locale) {
	        if (locale == null) {
	            locale = IBM.ICU.Util.ULocale.GetDefault();
	        }
	        return GetBundleInstance(IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME,
	                locale.ToString(), IBM.ICU.Impl.ICUResourceBundle.ICU_DATA_CLASS_LOADER,
	                false);
	    }
	
	    /// <summary>
	    /// Creates a UResourceBundle for the default locale and specified base name,
	    /// from which users can extract resources by using their corresponding keys.
	    /// </summary>
	    ///
	    /// <param name="baseName">specifies the locale for which we want to open the resource.If null the bundle for default locale is opened.</param>
	    /// <returns>a resource bundle for the given base name and default locale</returns>
	    /// @stable ICU 3.0
	    public static UResourceBundle GetBundleInstance(String baseName) {
	        if (baseName == null) {
	            baseName = IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME;
	        }
	        ULocale uloc = IBM.ICU.Util.ULocale.GetDefault();
	        return GetBundleInstance(baseName, uloc.ToString(),
	                IBM.ICU.Impl.ICUResourceBundle.ICU_DATA_CLASS_LOADER, false);
	    }
	
	    /// <summary>
	    /// Creates a UResourceBundle for the specified locale and specified base
	    /// name, from which users can extract resources by using their corresponding
	    /// keys.
	    /// </summary>
	    ///
	    /// <param name="baseName">specifies the locale for which we want to open the resource.If null the bundle for default locale is opened.</param>
	    /// <param name="locale">specifies the locale for which we want to open the resource.If null the bundle for default locale is opened.</param>
	    /// <returns>a resource bundle for the given base name and locale</returns>
	    /// @stable ICU 3.0
	
	    public static UResourceBundle GetBundleInstance(String baseName,
                Locale locale)
        {
	        if (baseName == null) {
	            baseName = IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME;
	        }
	        ULocale uloc = (locale == null) ? IBM.ICU.Util.ULocale.GetDefault() : IBM.ICU.Util.ULocale
	                .ForLocale(locale);
	
	        return GetBundleInstance(baseName, uloc.ToString(),
	                IBM.ICU.Impl.ICUResourceBundle.ICU_DATA_CLASS_LOADER, false);
	    }
	
	    /// <summary>
	    /// Creates a UResourceBundle, from which users can extract resources by
	    /// using their corresponding keys.
	    /// </summary>
	    ///
	    /// <param name="baseName">string containing the name of the data package. If null thedefault ICU package name is used.</param>
	    /// <param name="locale">specifies the locale for which we want to open the resource.If null the bundle for default locale is opened.</param>
	    /// <returns>a resource bundle for the given base name and locale</returns>
	    /// @stable ICU 3.0
	    public static UResourceBundle GetBundleInstance(String baseName,
	            ULocale locale) {
	        if (baseName == null) {
	            baseName = IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME;
	        }
	        if (locale == null) {
	            locale = IBM.ICU.Util.ULocale.GetDefault();
	        }
	        return GetBundleInstance(baseName, locale.ToString(),
	                IBM.ICU.Impl.ICUResourceBundle.ICU_DATA_CLASS_LOADER, false);
	    }
	
	    /// <summary>
	    /// Creates a UResourceBundle for the specified locale and specified base
	    /// name, from which users can extract resources by using their corresponding
	    /// keys.
	    /// </summary>
	    ///
	    /// <param name="baseName">specifies the locale for which we want to open the resource.If null the bundle for default locale is opened.</param>
	    /// <param name="locale">specifies the locale for which we want to open the resource.If null the bundle for default locale is opened.</param>
	    /// <param name="loader">the loader to use</param>
	    /// <returns>a resource bundle for the given base name and locale</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public static UResourceBundle GetBundleInstance(String baseName,
                Locale locale, Assembly loader)
        {
	        if (baseName == null) {
	            baseName = IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME;
	        }
	        ULocale uloc = (locale == null) ? IBM.ICU.Util.ULocale.GetDefault() : IBM.ICU.Util.ULocale
	                .ForLocale(locale);
	        return GetBundleInstance(baseName, uloc.ToString(), loader, false);
	    }
	
	    /// <summary>
	    /// Creates a UResourceBundle, from which users can extract resources by
	    /// using their corresponding keys.<br>
	    /// <br>
	    /// Note: Please use this API for loading non-ICU resources. Java security
	    /// does not allow loading of resources across jar files. You must provide
	    /// your class loader to load the resources
	    /// </summary>
	    ///
	    /// <param name="baseName">string containing the name of the data package. If null thedefault ICU package name is used.</param>
	    /// <param name="locale">specifies the locale for which we want to open the resource.If null the bundle for default locale is opened.</param>
	    /// <param name="loader">the loader to use</param>
	    /// <returns>a resource bundle for the given base name and locale</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public static UResourceBundle GetBundleInstance(String baseName,
	            ULocale locale, Assembly loader) {
	        if (baseName == null) {
	            baseName = IBM.ICU.Impl.ICUResourceBundle.ICU_BASE_NAME;
	        }
	        if (locale == null) {
	            locale = IBM.ICU.Util.ULocale.GetDefault();
	        }
	        return GetBundleInstance(baseName, locale.ToString(), loader, false);
	    }
	
	    /// <summary>
	    /// Returns the RFC 3066 conformant locale id of this resource bundle. This
	    /// method can be used after a call to getBundleInstance() to determine
	    /// whether the resource bundle returned really corresponds to the requested
	    /// locale or is a fallback.
	    /// </summary>
	    ///
	    /// <returns>the locale of this resource bundle</returns>
	    /// @stable ICU 3.0
	    public abstract ULocale GetULocale();
	
	    /// <summary>
	    /// Gets the localeID
	    /// </summary>
	    ///
	    /// <returns>The string representation of the localeID</returns>
	    /// @stable ICU 3.0
	    protected abstract internal String GetLocaleID();
	
	    /// <summary>
	    /// Gets the base name of the resource bundle
	    /// </summary>
	    ///
	    /// <returns>The string representation of the base name</returns>
	    /// @stable ICU 3.0
	    protected abstract internal String GetBaseName();
	
	    /// <summary>
	    /// Gets the parent bundle
	    /// </summary>
	    ///
	    /// <returns>The parent bundle</returns>
	    /// @stable ICU 3.0
	    public abstract UResourceBundle GetParent();
	
	    /// <summary>
	    /// Get the locale of this bundle
	    /// </summary>
	    ///
	    /// <returns>the locale of this resource bundle</returns>
	    /// @stable ICU 3.0
        public override Locale GetLocale()
        {
	        return GetULocale().ToLocale();
	    }
	
	    // Cache for ResourceBundle instantiation
	    private static WeakReference BUNDLE_CACHE;
	
	    private static void AddToCache(UResourceBundle.ResourceCacheKey  key, UResourceBundle b) {
	        IDictionary m = null;
	        if (BUNDLE_CACHE != null) {
	            m = (IDictionary) BUNDLE_CACHE.Target;
	        }
	        if (m == null) {
	            m = new Hashtable();
	            BUNDLE_CACHE = new WeakReference(m);
	        }
	        ILOG.J2CsMapping.Collections.Collections.Put(m,key,b);
	    }
	
	    /// <exclude/>
	    /// <summary>
	    /// Method used by subclasses to add the a particular resource bundle object
	    /// to the managed cache
	    /// </summary>
	    ///
	    protected static internal void AddToCache(Assembly cl, String fullName,
	            ULocale defaultLocale, UResourceBundle b) {
	         lock (cacheKey) {
	                    cacheKey.SetKeyValues(cl, fullName, defaultLocale);
	                    AddToCache((UResourceBundle.ResourceCacheKey ) cacheKey.Clone(), b);
	                }
	    }
	
	    /// <exclude/>
	    /// <summary>
	    /// Method used by sub classes to load a resource bundle object from the
	    /// managed cache
	    /// </summary>
	    ///
	    protected static internal UResourceBundle LoadFromCache(Assembly cl,
	            String fullName, ULocale defaultLocale) {
	         lock (cacheKey) {
	                    cacheKey.SetKeyValues(cl, fullName, defaultLocale);
	                    return LoadFromCache(cacheKey);
	                }
	    }
	
	    private static UResourceBundle LoadFromCache(UResourceBundle.ResourceCacheKey  key) {
	        if (BUNDLE_CACHE != null) {
	            IDictionary m = (IDictionary) BUNDLE_CACHE.Target;
	            if (m != null) {
	                return (UResourceBundle) ILOG.J2CsMapping.Collections.Collections.Get(m,key);
	            }
	        }
	        return null;
	    }
	
	    /// <summary>
	    /// Key used for cached resource bundles. The key checks the resource name,
	    /// the class root, and the default locale to determine if the resource is a
	    /// match to the requested one. The root may be null, but the searchName and
	    /// the default locale must have a non-null value. Note that the default
	    /// locale may change over time, and lookup should always be based on the
	    /// current default locale (if at all).
	    /// </summary>
	    ///
	    private sealed class ResourceCacheKey : ICloneable {
	        private WeakReference loaderRef;
	
	        private String searchName;
	
	        private ULocale defaultLocale;
	
	        private int hashCodeCache;
	
	        // /CLOVER:OFF
	        public override bool Equals(Object other) {
	            if ((Object) this == other) {
	                return true;
	            }
	            try {
	                UResourceBundle.ResourceCacheKey  otherEntry = (UResourceBundle.ResourceCacheKey ) other;
	                // quick check to see if they are not equal
	                if (hashCodeCache != otherEntry.hashCodeCache) {
	                    return false;
	                }
	                // are the names the same?
	                if (!searchName.Equals(otherEntry.searchName)) {
	                    return false;
	                }
	                // are the default locales the same?
	                if (defaultLocale == null) {
	                    if (otherEntry.defaultLocale != null) {
	                        return false;
	                    }
	                } else {
	                    if (!defaultLocale.Equals(otherEntry.defaultLocale)) {
	                        return false;
	                    }
	                }
	                // are refs (both non-null) or (both null)?
	                if (loaderRef == null) {
	                    return otherEntry.loaderRef == null;
	                } else {
	                    return (otherEntry.loaderRef != null)
	                            && (loaderRef.Target == otherEntry.loaderRef.Target);
	                }
	            } catch (NullReferenceException e) {
	                return false;
	            } catch (InvalidCastException e_0) {
	                return false;
	            }
	        }
	
	        public override int GetHashCode() {
	            return hashCodeCache;
	        }
	
	        public Object Clone() {
	            try {
	                return base.MemberwiseClone();
	            } catch (Exception e) {
	                // this should never happen
	                throw new InvalidOperationException();
	            }
	        }
	
	        // /CLOVER:ON
	        [MethodImpl(MethodImplOptions.Synchronized)]
	        public void SetKeyValues(Assembly root,
	                String searchName_0, ULocale defaultLocale_1) {
	            this.searchName = searchName_0;
	            hashCodeCache = searchName_0.GetHashCode();
	            this.defaultLocale = defaultLocale_1;
	            if (defaultLocale_1 != null) {
	                hashCodeCache ^= defaultLocale_1.GetHashCode();
	            }
	            if (root == null) {
	                this.loaderRef = null;
	            } else {
	                loaderRef = new WeakReference(root);
	                hashCodeCache ^= root.GetHashCode();
	            }
	        }
	        /*
	         * private void clear() { setKeyValues(null, "", null); }
	         */
	    }
	
	    private static readonly UResourceBundle.ResourceCacheKey  cacheKey = new UResourceBundle.ResourceCacheKey ();
	
	    private const int ROOT_MISSING = 0;
	
	    private const int ROOT_ICU = 1;
	
	    private const int ROOT_JAVA = 2;
	
	    private static WeakReference ROOT_CACHE;
	
	    private static int GetRootType(String baseName, Assembly root) {
	        IDictionary m = null;
            Object rootType = null;
	
	        if (ROOT_CACHE != null) {
	            m = (IDictionary) ROOT_CACHE.Target;
	        }
	
	        if (m == null) {
	            m = new Hashtable();
	            ROOT_CACHE = new WeakReference(m);
	        }
	
	        rootType = ILOG.J2CsMapping.Collections.Collections.Get(m,baseName);

	        if (rootType == null) {
	            String rootLocale = (baseName.IndexOf('.') == -1) ? "root" : "";
	            int rt = ROOT_MISSING; // value set on success
	            try {
	                IBM.ICU.Impl.ICUResourceBundle.GetBundleInstance(baseName, rootLocale, root,
	                        true);
	                rt = ROOT_ICU;
	            } catch (MissingManifestResourceException ex) {
	                try {
	                    IBM.ICU.Impl.ResourceBundleWrapper.GetBundleInstance(baseName,
	                            rootLocale, root, true);
	                    rt = ROOT_JAVA;
	                } catch (MissingManifestResourceException e) {
	                    // throw away the exception
	                }
	            }
	
	            rootType = ((int)(rt));
	            ILOG.J2CsMapping.Collections.Collections.Put(m,baseName,rootType);
	        }
	
	        return (int) rootType;
	    }
	
	    private static void SetRootType(String baseName, int rootType) {
	        Int32 rt = ((int)(rootType));
	        IDictionary m = null;
	
	        if (ROOT_CACHE != null) {
	            m = (IDictionary) ROOT_CACHE.Target;
	        } else {
	            m = new Hashtable();
	            ROOT_CACHE = new WeakReference(m);
	        }
	
	        ILOG.J2CsMapping.Collections.Collections.Put(m,baseName,rt);
	    }
	
	    /// <summary>
	    /// Loads a new resource bundle for the give base name, locale and class
	    /// loader. Optionally will disable loading of fallback bundles.
	    /// </summary>
	    ///
	    /// <param name="baseName">the base name of the resource bundle, a fully qualified classname</param>
	    /// <param name="localeName">the locale for which a resource bundle is desired</param>
	    /// <param name="root">the class object from which to load the resource bundle</param>
	    /// <param name="disableFallback">disables loading of fallback lookup chain</param>
	    /// <exception cref="MissingResourceException">if no resource bundle for the specified base name can befound</exception>
	    /// <returns>a resource bundle for the given base name and locale</returns>
	    /// @stable ICU 3.0
	    protected static internal UResourceBundle InstantiateBundle(String baseName,
	            String localeName, Assembly root, bool disableFallback) {
	        UResourceBundle b = null;
	        int rootType = GetRootType(baseName, root);
	
	        ULocale defaultLocale_0 = IBM.ICU.Util.ULocale.GetDefault();
	
	        switch (rootType) {
	        case ROOT_ICU:
	            if (disableFallback) {
	                String fullName = IBM.ICU.Impl.ICUResourceBundleReader.GetFullName(baseName,
	                        localeName);
	                 lock (cacheKey) {
	                                    cacheKey.SetKeyValues(root, fullName, defaultLocale_0);
	                                    b = LoadFromCache(cacheKey);
	                                }
	
	                if (b == null) {
	                    b = IBM.ICU.Impl.ICUResourceBundle.GetBundleInstance(baseName,
	                            localeName, root, disableFallback);
	                    // cacheKey.setKeyValues(root, fullName, defaultLocale);
	                    AddToCache(cacheKey, b);
	                }
	            } else {
	                b = IBM.ICU.Impl.ICUResourceBundle.GetBundleInstance(baseName, localeName,
	                        root, disableFallback);
	            }
	
	            return b;
	
	        case ROOT_JAVA:
	            return IBM.ICU.Impl.ResourceBundleWrapper.GetBundleInstance(baseName,
	                    localeName, root, disableFallback);
	
	        default:
	            try {
	                b = IBM.ICU.Impl.ICUResourceBundle.GetBundleInstance(baseName, localeName,
	                        root, disableFallback);
	                SetRootType(baseName, ROOT_ICU);
	            } catch (MissingManifestResourceException ex) {
	                b = IBM.ICU.Impl.ResourceBundleWrapper.GetBundleInstance(baseName,
	                        localeName, root, disableFallback);
	                SetRootType(baseName, ROOT_JAVA);
	            }
	            return b;
	        }
	    }
	
	    /// <summary>
	    /// Returns a binary data from a binary resource.
	    /// </summary>
	    ///
	    /// <returns>a pointer to a chuck of unsigned bytes which live in a memory
	    /// mapped/DLL file.</returns>
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetIntVector"/>
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetInt"/>
	    /// <exception cref="MissingResourceException"></exception>
	    /// <exception cref="UResourceTypeMismatchException"></exception>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual ByteBuffer GetBinary() {
	        throw new UResourceTypeMismatchException("");
	    }
	
	    /// <summary>
	    /// Returns a string from a string resource type
	    /// </summary>
	    ///
	    /// <returns>a string</returns>
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetBinary"/>
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetIntVector"/>
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetInt"/>
	    /// <exception cref="MissingResourceException"></exception>
	    /// <exception cref="UResourceTypeMismatchException"></exception>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual String GetString() {
	        throw new UResourceTypeMismatchException("");
	    }
	
	    /// <summary>
	    /// Returns a string array from a array resource type
	    /// </summary>
	    ///
	    /// <returns>a string</returns>
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetString"/>
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetIntVector"/>
	    /// <exception cref="MissingResourceException"></exception>
	    /// <exception cref="UResourceTypeMismatchException"></exception>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual String[] GetStringArray() {
	        throw new UResourceTypeMismatchException("");
	    }
	
	    /// <summary>
	    /// Returns a binary data from a binary resource.
	    /// </summary>
	    ///
	    /// <param name="ba">The byte array to write the bytes to. A null variable is OK.</param>
	    /// <returns>an array bytes containing the binary data from the resource.</returns>
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetIntVector"/>
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetInt"/>
	    /// <exception cref="MissingResourceException"></exception>
	    /// <exception cref="UResourceTypeMismatchException"></exception>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual sbyte[] GetBinary(sbyte[] ba) {
	        throw new UResourceTypeMismatchException("");
	    }
	
	    /// <summary>
	    /// Returns a 32 bit integer array from a resource.
	    /// </summary>
	    ///
	    /// <returns>a pointer to a chunk of unsigned bytes which live in a memory
	    /// mapped/DLL file.</returns>
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetBinary"/>
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetInt"/>
	    /// <exception cref="MissingResourceException"></exception>
	    /// <exception cref="UResourceTypeMismatchException"></exception>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual int[] GetIntVector() {
	        throw new UResourceTypeMismatchException("");
	    }
	
	    /// <summary>
	    /// Returns a signed integer from a resource.
	    /// </summary>
	    ///
	    /// <returns>an integer value</returns>
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetIntVector"/>
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetBinary"/>
	    /// <exception cref="MissingResourceException"></exception>
	    /// <exception cref="UResourceTypeMismatchException"></exception>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual int GetInt() {
	        throw new UResourceTypeMismatchException("");
	    }
	
	    /// <summary>
	    /// Returns a unsigned integer from a resource. This integer is originally 28
	    /// bit and the sign gets propagated.
	    /// </summary>
	    ///
	    /// <returns>an integer value</returns>
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetIntVector"/>
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetBinary"/>
	    /// <exception cref="MissingResourceException"></exception>
	    /// <exception cref="UResourceTypeMismatchException"></exception>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual int GetUInt() {
	        throw new UResourceTypeMismatchException("");
	    }
	
	    /// <summary>
	    /// Returns a resource in a given resource that has a given key.
	    /// </summary>
	    ///
	    /// <param name="key">a key associated with the wanted resource</param>
	    /// <returns>a resource bundle object representing rhe resource</returns>
	    /// <exception cref="MissingResourceException"></exception>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public UResourceBundle Get(String key) {
	        UResourceBundle obj = HandleGet(key, null, this);
	        UResourceBundle res = this;
	        if (obj == null) {
	            while ((res = res.GetParent()) != null && obj == null) {
	                // call the get method to recursively fetch the resource
	                obj = res.HandleGet(key, null, this);
	            }
	            if (obj == null) {
	                String fullName = IBM.ICU.Impl.ICUResourceBundleReader.GetFullName(
	                        GetBaseName(), GetLocaleID());
	                throw new MissingManifestResourceException("Can't find resource for bundle " + fullName + ", key "
	                                                + key);
	            }
	        }
	        IBM.ICU.Impl.ICUResourceBundle.SetLoadingStatus(obj, GetLocaleID());
	        return obj;
	    }
	
	    /// <summary>
	    /// Returns the string in a given resource at the specified index.
	    /// </summary>
	    ///
	    /// <param name="index">an index to the wanted string.</param>
	    /// <returns>a string which lives in the resource.</returns>
	    /// <exception cref="IndexOutOfBoundsException"></exception>
	    /// <exception cref="UResourceTypeMismatchException"></exception>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public String GetString(int index) {
	        ICUResourceBundle temp = (ICUResourceBundle) Get(index);
	        if (temp.GetType() == STRING) {
	            return temp.GetString();
	        }
	        throw new UResourceTypeMismatchException("");
	    }
	
	    /// <summary>
	    /// Returns the resource in a given resource at the specified index.
	    /// </summary>
	    ///
	    /// <param name="index">an index to the wanted resource.</param>
	    /// <returns>the sub resource UResourceBundle object</returns>
	    /// <exception cref="IndexOutOfBoundsException"></exception>
	    /// <exception cref="MissingResourceException"></exception>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public UResourceBundle Get(int index) {
	        UResourceBundle obj = HandleGet(index, null, this);
	        if (obj == null) {
	            obj = (ICUResourceBundle) GetParent();
	            if (obj != null) {
	                obj = obj.Get(index);
	            }
	            if (obj == null)
	                throw new MissingManifestResourceException("Can't find resource for bundle "
	                                                + ((object) this).GetType().FullName + ", key "
	                                                + GetKey());
	        }
	        IBM.ICU.Impl.ICUResourceBundle.SetLoadingStatus(obj, GetLocaleID());
	        return obj;
	    }
	
	    /// <summary>
	    /// Returns the keys in this bundle as an enumeration
	    /// </summary>
	    ///
	    /// <returns>an enumeration containing key strings</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public override IIterator<String> GetKeys() {
	        InitKeysVector();
	        return new ILOG.J2CsMapping.Collections.Generics.IteratorAdapter<String>(keys.GetEnumerator());
	    }
	
	    private List<String> keys;
	
	    [MethodImpl(MethodImplOptions.Synchronized)]
	    private void InitKeysVector() {
	        if (keys != null) {
	            return;
	        }
	        // ICUResourceBundle current = this;
            keys = new List<String>();
	        IIterator e = this.HandleGetKeys();
	        while (e.HasNext()) {
	            String elem = (String) e.Next();
	            if (!keys.Contains(elem)) {
	                keys.Add(elem);
	            }
	        }
	    }
	
	    /// <summary>
	    /// Returns the size of a resource. Size for scalar types is always 1, and
	    /// for vector/table types is the number of child resources. <br>
	    /// <b><font color='red'>Warning: </font></b> Integer array is treated as a
	    /// scalar type. There are no APIs to access individual members of an integer
	    /// array. It is always returned as a whole.
	    /// </summary>
	    ///
	    /// <returns>number of resources in a given resource.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public int GetSize() {
	        return size;
	    }
	
	    /// <summary>
	    /// Returns the type of a resource. Available types are <see cref="M:IBM.ICU.Util.UResourceBundle.INT INT"/>,<see cref="M:IBM.ICU.Util.UResourceBundle.ARRAY ARRAY"/>, <see cref="M:IBM.ICU.Util.UResourceBundle.BINARY BINARY"/>, <see cref="M:IBM.ICU.Util.UResourceBundle.INT_VECTORINT_VECTOR"/>, <see cref="M:IBM.ICU.Util.UResourceBundle.STRING STRING"/>, <see cref="M:IBM.ICU.Util.UResourceBundle.TABLE TABLE"/>.
	    /// </summary>
	    ///
	    /// <returns>type of the given resource.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public int GetType() {
	        int type = IBM.ICU.Impl.ICUResourceBundle.RES_GET_TYPE(resource);
	        if (type == TABLE32) {
	            return TABLE; // Mask the table32's real type
	        }
	        return type;
	    }
	
	    /// <summary>
	    /// Return the version number associated with this UResourceBundle as an
	    /// VersionInfo object.
	    /// </summary>
	    ///
	    /// <returns>VersionInfo object containing the version of the bundle</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public VersionInfo GetVersion() {
	        return null;
	    }
	
	    /// <summary>
	    /// Returns the iterator which iterates over this resource bundle
	    /// </summary>
	    ///
	    /// <returns>UResourceBundleIterator that iterates over the resources in the
	    /// bundle</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public UResourceBundleIterator GetIterator() {
	        return new UResourceBundleIterator(this);
	    }
	
	    /// <summary>
	    /// Returns the key associated with a given resource. Not all the resources
	    /// have a key - only those that are members of a table.
	    /// </summary>
	    ///
	    /// <returns>a key associated to this resource, or null if it doesn't have a
	    /// key</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public String GetKey() {
	        return key;
	    }
	
	    /// <summary>
	    /// Resource type constant for "no resource".
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int NONE = -1;
	
	    /// <summary>
	    /// Resource type constant for strings.
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int STRING = 0;
	
	    /// <summary>
	    /// Resource type constant for binary data.
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int BINARY = 1;
	
	    /// <summary>
	    /// Resource type constant for tables of key-value pairs.
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int TABLE = 2;
	
	    /// <exclude/>
	    /// <summary>
	    /// Resource type constant for aliases; internally stores a string which
	    /// identifies the actual resource storing the data (can be in a different
	    /// resource bundle). Resolved internally before delivering the actual
	    /// resource through the API.
	    /// </summary>
	    ///
	    protected internal const int ALIAS = 3;
	
	    /// <exclude/>
	    /// <summary>
	    /// Internal use only. Alternative resource type constant for tables of
	    /// key-value pairs. Never returned by getType().
	    /// </summary>
	    ///
	    protected internal const int TABLE32 = 4;
	
	    /// <summary>
	    /// Resource type constant for a single 28-bit integer, interpreted as signed
	    /// or unsigned by the getInt() function.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetInt"/>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int INT = 7;
	
	    /// <summary>
	    /// Resource type constant for arrays of resources.
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int ARRAY = 8;
	
	    /// <summary>
	    /// Resource type constant for vectors of 32-bit integers.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Util.UResourceBundle.GetIntVector"/>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public const int INT_VECTOR = 14;
	
	    // ====== protected members ==============
	    /// <exclude/>
	    /// <summary>
	    /// Data member where the subclasses store the key
	    /// </summary>
	    ///
	    protected internal String key;
	
	    /// <exclude/>
	    /// <summary>
	    /// Data member where the subclasses store the size of resources
	    /// </summary>
	    ///
	    protected internal int size;
	
	    /// <exclude/>
	    /// <summary>
	    /// Data member where the subclasses store the offset within resource data
	    /// </summary>
	    ///
	    protected internal long resource;
	
	    /// <exclude/>
	    /// <summary>
	    /// Data member where the subclasses store whether the resource is top level
	    /// </summary>
	    ///
	    protected internal bool isTopLevel;
	
	    private const long RES_BOGUS = -1;
	
	    /// <summary>
	    /// Actual worker method for fetching a resource based on the given key. Sub
	    /// classes must override this method if they support resources with keys.
	    /// </summary>
	    ///
	    /// <param name="key_0">the key string of the resource to be fetched</param>
	    /// <param name="table">hastable object to hold references of resources already seen</param>
	    /// <param name="requested">the original resource bundle object on which the get methodwas invoked. The requested bundle and the bundle on which thismethod is invoked are the same, except in the cases wherealiases are involved.</param>
	    /// <returns>UResourceBundle a resource assoicated with the key</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    protected internal virtual UResourceBundle HandleGet(String key_0, Hashtable table,
	            UResourceBundle requested) {
	        return null;
	    }
	
	    /// <summary>
	    /// Actual worker method for fetching a resource based on the given index.
	    /// Sub classes must override this method if they support arrays of
	    /// resources.
	    /// </summary>
	    ///
	    /// <param name="index">the index of the resource to be fetched</param>
	    /// <param name="table">hastable object to hold references of resources already seen</param>
	    /// <param name="requested">the original resource bundle object on which the get methodwas invoked. The requested bundle and the bundle on which thismethod is invoked are the same, except in the cases wherealiases are involved.</param>
	    /// <returns>UResourceBundle a resource assoicated with the index</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    protected internal virtual UResourceBundle HandleGet(int index, Hashtable table,
	            UResourceBundle requested) {
	        return null;
	    }
	
	    /// <summary>
	    /// Actual worker method for fetching the array of strings in a resource. Sub
	    /// classes must override this method if they support arrays of strings.
	    /// </summary>
	    ///
	    /// <returns>String[] An array of strings containing strings</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    protected internal virtual String[] HandleGetStringArray() {
	        return null;
	    }
	
	    /// <summary>
	    /// Actual worker method for fetching the keys of resources contained in the
	    /// resource. Sub classes must override this method if they support keys and
	    /// associated resources.
	    /// </summary>
	    ///
	    /// <returns>Enumeration An enumeration of all the keys in this resource.</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    protected internal IIterator HandleGetKeys() {
	        ArrayList keys_0 = new ArrayList();
	        UResourceBundle item = null;
	        for (int i = 0; i < size; i++) {
	            item = Get(i);
	            keys_0.Add(item.GetKey());
	        }
	        return new ILOG.J2CsMapping.Collections.IteratorAdapter(keys_0.GetEnumerator());
	    }
	
	    /// <summary>
	    /// 
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    // this method is declared in ResourceBundle class
	    // so cannot change the signature
	    // Override this method
	    public override Object HandleGetObject(String key_0) {
	        return HandleGetObjectImpl(key_0, this);
	    }
	
	    /// <summary>
	    /// Override the superclass method
	    /// </summary>
	    ///
	    // To facilitate XPath style aliases we need a way to pass the reference
	    // to requested locale. The only way I could figure out is to implement
	    // the look up logic here. This has a disadvantage that if the client
	    // loads an ICUResourceBundle, calls ResourceBundle.getObject method
	    // with a key that does not exist in the bundle then the lookup is
	    // done twice before throwing a MissingResourceExpection.
	    private Object HandleGetObjectImpl(String key_0, UResourceBundle requested) {
	        Object obj = ResolveObject(key_0, requested);
	        if (obj == null) {
	            UResourceBundle parent = GetParent();
	            if (parent != null) {
	                obj = parent.HandleGetObjectImpl(key_0, requested);
	            }
	            if (obj == null)
	                throw new MissingManifestResourceException("Can't find resource for bundle "
	                                                + ((object) this).GetType().FullName + ", key " + key_0);
	        }
	        return obj;
	    }
	
	    // Routine for figuring out the type of object to be returned
	    // string or string array
	    private Object ResolveObject(String key_0, UResourceBundle requested) {
	        if (GetType() == STRING) {
	            return GetString();
	        }
	        UResourceBundle obj = HandleGet(key_0, null, requested);
	        if (obj != null) {
	            if (obj.GetType() == STRING) {
	                return obj.GetString();
	            }
	            try {
	                if (obj.GetType() == ARRAY) {
	                    return obj.HandleGetStringArray();
	                }
	            } catch (UResourceTypeMismatchException ex) {
	                return obj;
	            }
	        }
	        return obj;
	    }
	
	    /// <exclude/>
	    /// <summary>
	    /// This method is for setting the loading status of the resource. The status
	    /// is analogous to the warning status in ICU4C.
	    /// </summary>
	    ///
	    public abstract void SetLoadingStatus(int newStatus);
	}
}
