/*
 **********************************************************************
 *   Copyright (c) 2002, International Business Machines Corporation
 *   and others.  All Rights Reserved.
 **********************************************************************
 *   Date        Name        Description
 *   01/14/2002  aliu        Creation.
 **********************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// <c>UnicodeReplacer</c> defines a protocol for objects that replace a
	/// range of characters in a Replaceable string with output text. The replacement
	/// is done via the Replaceable API so as to preserve out-of-band data.
	/// </summary>
	///
	interface UnicodeReplacer {
	
	    /// <summary>
	    /// Replace characters in 'text' from 'start' to 'limit' with the output text
	    /// of this object. Update the 'cursor' parameter to give the cursor position
	    /// and return the length of the replacement text.
	    /// </summary>
	    ///
	    /// <param name="text">the text to be matched</param>
	    /// <param name="start">inclusive start index of text to be replaced</param>
	    /// <param name="limit">exclusive end index of text to be replaced; must be greaterthan or equal to start</param>
	    /// <param name="cursor">output parameter for the cursor position. Not all replacerobjects will update this, but in a complete tree of replacerobjects, representing the entire output side of atransliteration rule, at least one must update it.</param>
	    /// <returns>the number of 16-bit code units in the text replacing the
	    /// characters at offsets start..(limit-1) in text</returns>
	    int Replace(Replaceable text, int start, int limit,
	            int[] cursor);
	
	    /// <summary>
	    /// Returns a string representation of this replacer. If the result of
	    /// calling this function is passed to the appropriate parser, typically
	    /// TransliteratorParser, it will produce another replacer that is equal to
	    /// this one.
	    /// </summary>
	    ///
	    /// <param name="escapeUnprintable">if TRUE then convert unprintable character to their hex escaperepresentations, \\uxxxx or \\Uxxxxxxxx. Unprintablecharacters are defined by Utility.isUnprintable().</param>
	    String ToReplacerPattern(bool escapeUnprintable);
	
	    /// <summary>
	    /// Union the set of all characters that may output by this object into the
	    /// given set.
	    /// </summary>
	    ///
	    /// <param name="toUnionTo">the set into which to union the output characters</param>
	    void AddReplacementSetTo(UnicodeSet toUnionTo);
	}
	
	// eof
}
