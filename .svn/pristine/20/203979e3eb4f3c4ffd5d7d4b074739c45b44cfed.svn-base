/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 11/30/10 3:38 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace ILOG.J2CsMapping.RegEx {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Valid constant zero character match.
	/// </summary>
	///
	internal class EmptySet : LeafSet {
	
		public EmptySet(AbstractSet next) : base(next) {
			charCount = 0;
		}
	
		/*
		 * @see java.util.regex.LeafSet#accepts(int, java.lang.CharSequence)
		 */
		public override int Accepts(int stringIndex, String testString) {
			return 0;
		}
	
		public override int Find(int stringIndex, String testString,
				MatchResultImpl matchResult) {
			int strLength = matchResult.GetRightBound();
			int startStr = matchResult.GetLeftBound();
	
			while (stringIndex <= strLength) {
	
				//check for supplementary codepoints
				if (stringIndex < strLength) {
					char low = testString[stringIndex];
	
					if (System.Char.IsLowSurrogate(low)) {
	
						if (stringIndex > startStr) {
							char high = testString[stringIndex - 1];
							if (System.Char.IsHighSurrogate(high)) {
								stringIndex++;
								continue;
							}
						}
					}
				}
	
				if (next.Matches(stringIndex, testString, matchResult) >= 0) {
					return stringIndex;
				}
				stringIndex++;
			}
	
			return -1;
		}
	
		public override int FindBack(int stringIndex, int startSearch,
				String testString, MatchResultImpl matchResult) {
			int strLength = matchResult.GetRightBound();
			int startStr = matchResult.GetLeftBound();
	
			while (startSearch >= stringIndex) {
	
				//check for supplementary codepoints
				if (startSearch < strLength) {
					char low = testString[startSearch];
	
					if (System.Char.IsLowSurrogate(low)) {
	
						if (startSearch > startStr) {
							char high = testString[startSearch - 1];
							if (System.Char.IsHighSurrogate(high)) {
								startSearch--;
								continue;
							}
						}
					}
				}
	
				if (next.Matches(startSearch, testString, matchResult) >= 0) {
					return startSearch;
				}
				startSearch--;
			}
	
			return -1;
		}
	
		/*
		 * @see java.util.regex.AbstractSet#getName()
		 */
        public override String GetName()
        {
			return "<Empty set>"; //$NON-NLS-1$
		}
	
		public override bool HasConsumed(MatchResultImpl mr) {
			return false;
		}
	
	}
}
