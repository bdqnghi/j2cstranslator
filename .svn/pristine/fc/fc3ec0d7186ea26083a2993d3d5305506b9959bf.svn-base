/*
 ******************************************************************************
 * Copyright (C) 2007, International Business Machines Corporation and   *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/8/10 10:24 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl.Duration {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// 'Enum' for individual time units. Not an actual enum so that it can be used
	/// by Java 1.4.
	/// </summary>
	///
	public sealed class TimeUnit {
	    /// <summary>
	    /// The name of this unit, a key, not for localization. 
	    /// </summary>
	    ///
	    internal readonly String name;
	
	    /// <summary>
	    /// The ordinal of the unit, in order from largest to smallest. 
	    /// </summary>
	    ///
	    internal readonly byte ordinal;
	
	    /// <summary>
	    /// Private constructor 
	    /// </summary>
	    ///
	    private TimeUnit(String name_0, int ordinal_1) {
	        this.name = name_0;
	        this.ordinal = (byte) ordinal_1;
	    }
	
	    public override String ToString() {
	        return name;
	    }
	
	    /// <summary>
	    /// Represents a year. 
	    /// </summary>
	    ///
	    public static readonly TimeUnit YEAR = new TimeUnit("year", 0);
	
	    /// <summary>
	    /// Represents a month. 
	    /// </summary>
	    ///
	    public static readonly TimeUnit MONTH = new TimeUnit("month", 1);
	
	    /// <summary>
	    /// Represents a week. 
	    /// </summary>
	    ///
	    public static readonly TimeUnit WEEK = new TimeUnit("week", 2);
	
	    /// <summary>
	    /// Represents a day. 
	    /// </summary>
	    ///
	    public static readonly TimeUnit DAY = new TimeUnit("day", 3);
	
	    /// <summary>
	    /// Represents an hour. 
	    /// </summary>
	    ///
	    public static readonly TimeUnit HOUR = new TimeUnit("hour", 4);
	
	    /// <summary>
	    /// Represents a minute. 
	    /// </summary>
	    ///
	    public static readonly TimeUnit MINUTE = new TimeUnit("minute", 5);
	
	    /// <summary>
	    /// Represents a second. 
	    /// </summary>
	    ///
	    public static readonly TimeUnit SECOND = new TimeUnit("second", 6);
	
	    /// <summary>
	    /// Represents a millisecond. 
	    /// </summary>
	    ///
	    public static readonly TimeUnit MILLISECOND = new TimeUnit("millisecond", 7);
	
	    /// <summary>
	    /// Returns the next larger time unit, or null if this is the largest. 
	    /// </summary>
	    ///
	    public TimeUnit Larger() {
	        return (ordinal == 0) ? null : units[ordinal - 1];
	    }
	
	    /// <summary>
	    /// Returns the next smaller time unit, or null if this is the smallest. 
	    /// </summary>
	    ///
	    public TimeUnit Smaller() {
	        return (ordinal == units.Length - 1) ? null : units[ordinal + 1];
	    }
	
	    /// <summary>
	    /// The list of units, in order from largest to smallest. 
	    /// </summary>
	    ///
	    static internal readonly TimeUnit[] units = { YEAR, MONTH, WEEK, DAY, HOUR, MINUTE,
	            SECOND, MILLISECOND };
	
	    /// <summary>
	    /// Returns the ordinal value of this time unit, largest is 0. 
	    /// </summary>
	    ///
	    public int Ordinal() {
	        return ordinal;
	    }
	
	    /// <summary>
	    /// Approximate, durations for the units independent of the time at which
	    /// they are measured
	    /// </summary>
	    ///
	
	    // hack, initialization long array using expressions with 'L' at end doesn't
	    // compute entire expression using 'long'. differs from initializtion of
	    // a single constant
	    static internal readonly long[] approxDurations = { 36525L * 24 * 60 * 60 * 10,
	            3045 * 24 * 60 * 60 * 10L, 7 * 24 * 60 * 60 * 1000L,
	            24 * 60 * 60 * 1000L, 60 * 60 * 1000L, 60 * 1000L, 1000L, 1L };
	}
}
