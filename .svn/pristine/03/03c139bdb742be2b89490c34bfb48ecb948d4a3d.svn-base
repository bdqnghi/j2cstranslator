/*
 *******************************************************************************
 * Copyright (C) 2001-2004, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// <c>UnicodeMatcher</c> defines a protocol for objects that can match a
	/// range of characters in a Replaceable string.
	/// </summary>
	///
	/// @stable ICU 2.0
	public interface UnicodeMatcher {
	
	    /// <summary>
	    /// Return a UMatchDegree value indicating the degree of match for the given
	    /// text at the given offset. Zero, one, or more characters may be matched.
	    /// Matching in the forward direction is indicated by limit > offset.
	    /// Characters from offset forwards to limit-1 will be considered for
	    /// matching.
	    /// Matching in the reverse direction is indicated by limit < offset.
	    /// Characters from offset backwards to limit+1 will be considered for
	    /// matching.
	    /// If limit == offset then the only match possible is a zero character match
	    /// (which subclasses may implement if desired).
	    /// If U_MATCH is returned, then as a side effect, advance the offset
	    /// parameter to the limit of the matched substring. In the forward
	    /// direction, this will be the index of the last matched character plus one.
	    /// In the reverse direction, this will be the index of the last matched
	    /// character minus one.
	    /// </summary>
	    ///
	    /// <param name="text">the text to be matched</param>
	    /// <param name="offset">on input, the index into text at which to begin matching. Onoutput, the limit of the matched text. The number of matchedcharacters is the output value of offset minus the inputvalue. Offset should always point to the HIGH SURROGATE(leading code unit) of a pair of surrogates, both on entry andupon return.</param>
	    /// <param name="limit">the limit index of text to be matched. Greater than offset fora forward direction match, less than offset for a backwarddirection match. The last character to be considered formatching will be text.charAt(limit-1) in the forward directionor text.charAt(limit+1) in the backward direction.</param>
	    /// <param name="incremental">if TRUE, then assume further characters may be inserted atlimit and check for partial matching. Otherwise assume thetext as given is complete.</param>
	    /// <returns>a match degree value indicating a full match, a partial match, or
	    /// a mismatch. If incremental is FALSE then U_PARTIAL_MATCH should
	    /// never be returned.</returns>
	    /// @stable ICU 2.0
	    int Matches(Replaceable text, int[] offset, int limit,
	            bool incremental);
	
	    /// <summary>
	    /// Returns a string representation of this matcher. If the result of calling
	    /// this function is passed to the appropriate parser, it will produce
	    /// another matcher that is equal to this one.
	    /// </summary>
	    ///
	    /// <param name="escapeUnprintable">if TRUE then convert unprintable character to their hex escaperepresentations, \\uxxxx or \\Uxxxxxxxx. Unprintablecharacters are those other than U+000A, U+0020..U+007E.</param>
	    /// @stable ICU 2.0
	    String ToPattern(bool escapeUnprintable);
	
	    /// <summary>
	    /// Returns TRUE if this matcher will match a character c, where c & 0xFF ==
	    /// v, at offset, in the forward direction (with limit > offset). This is
	    /// used by <tt>RuleBasedTransliterator</tt> for indexing.
	    /// <p>
	    /// Note: This API uses an int even though the value will be restricted to 8
	    /// bits in order to avoid complications with signedness (bytes convert to
	    /// ints in the range -128..127).
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    bool MatchesIndexValue(int v);
	
	    /// <summary>
	    /// Union the set of all characters that may be matched by this object into
	    /// the given set.
	    /// </summary>
	    ///
	    /// <param name="toUnionTo">the set into which to union the source characters</param>
	    /// @stable ICU 2.2
	    void AddMatchSetTo(UnicodeSet toUnionTo);
	}
	
	// eof
}
