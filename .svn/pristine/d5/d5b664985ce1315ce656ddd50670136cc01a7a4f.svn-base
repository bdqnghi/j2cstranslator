/* 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/8/10 10:24 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Tests
{

    using System;
    using NUnit;
    using IBM.ICU.Text;
    using ILOG.J2CsMapping.Text;
    using System.Text;
    using IBM.ICU.Util;
    using ILOG.J2CsMapping.Formatting;

    [NUnit.Framework.TestFixture]
    public class NumberFormatTest
    {


        /// @tests java.text.NumberFormat#format(java.lang.Object,
        /// java.lang.StringBuffer, java.text.FieldPosition)
        [NUnit.Framework.Test]
        public void Test_formatLjava_lang_ObjectLjava_lang_StringBufferLjava_text_FieldPosition()
        {
            FieldPosition pos;
            StringBuilder xout;
            IBM.ICU.Text.DecimalFormat format = (IBM.ICU.Text.DecimalFormat)IBM.ICU.Text.NumberFormat
                    .GetInstance(ILOG.J2CsMapping.Util.Locale.US);

            pos = new FieldPosition(0);
            xout = format.Format((long)(Int64.MaxValue), new StringBuilder(), pos);
            NUnit.Framework.Assert.AreEqual("9,223,372,036,854,775,807", xout.ToString(), "Wrong result L1: " + xout);

            pos = new FieldPosition(0);
            xout = format.Format((long)(Int64.MinValue), new StringBuilder(), pos);
            NUnit.Framework.Assert.AreEqual("-9,223,372,036,854,775,808", xout.ToString(), "Wrong result L2: " + xout);

            pos = new FieldPosition(0);
            xout = format.Format(
                    Int64.Parse(Int64.MaxValue.ToString()),
                    new StringBuilder(), pos);
            NUnit.Framework.Assert.AreEqual("9,223,372,036,854,775,807", xout.ToString(), "Wrong result BI1: " + xout);

            pos = new FieldPosition(0);
            xout = format.Format(
                    Int64.Parse(Int64.MinValue.ToString()),
                    new StringBuilder(), pos);
            NUnit.Framework.Assert.AreEqual("-9,223,372,036,854,775,808", xout.ToString(), "Wrong result BI2: " + xout);

            Int64 big;
            pos = new FieldPosition(0);
            big = Int64.Parse(Int64.MaxValue.ToString())
                    + Int64.Parse("1");
            xout = format.Format(big, new StringBuilder(), pos);
            //NUnit.Framework.Assert.AreEqual("9,223,372,036,854,775,808", xout.ToString(), "Wrong result BI3: " + xout);

            pos = new FieldPosition(0);
            big = Int64.Parse(Int64.MinValue.ToString())
                     + Int64.Parse("-1");
            xout = format.Format(big, new StringBuilder(), pos);
            //NUnit.Framework.Assert.AreEqual("-9,223,372,036,854,775,809", xout.ToString(), "Wrong result BI4: " + xout);

            pos = new FieldPosition(0);
            xout = format.Format(Decimal.Parse("51.348"),
                    new StringBuilder(), pos);
            NUnit.Framework.Assert.AreEqual("51.348", xout.ToString(), "Wrong result BD1: " + xout);

            pos = new FieldPosition(0);
            xout = format.Format(Decimal.Parse("51"), new StringBuilder(),
                    pos);
            NUnit.Framework.Assert.AreEqual("51", xout.ToString(), "Wrong result BD2: " + xout);

        }


        /// @tests java.text.NumberFormat#getIntegerInstance()
        [NUnit.Framework.Test]
        public void Test_getIntegerInstance()
        {
            // Test for method java.text.NumberFormat getIntegerInstance()
            ILOG.J2CsMapping.Util.Locale origLocale = ILOG.J2CsMapping.Util.Locale.GetDefault();
            ILOG.J2CsMapping.Util.Locale.SetDefault(ILOG.J2CsMapping.Util.Locale.US);

            IBM.ICU.Text.DecimalFormat format = (IBM.ICU.Text.DecimalFormat)IBM.ICU.Text.NumberFormat
                    .GetIntegerInstance();

            NUnit.Framework.Assert.AreEqual("#,##0", format.ToPattern(), "Test1: NumberFormat.getIntegerInstance().toPattern() returned wrong pattern");
            NUnit.Framework.Assert.AreEqual("36", format.Format(35.76d), "Test2: NumberFormat.getIntegerInstance().format(35.76) returned wrong value");
            NUnit.Framework.Assert.AreEqual((long)(35), format.Parse("35.76"), "Test3: NumberFormat.getIntegerInstance().parse(\"35.76\") returned wrong number");
            NUnit.Framework.Assert.AreEqual((long)(35), format.ParseObject("35.76"), "Test4: NumberFormat.getIntegerInstance().parseObject(\"35.76\") returned wrong number");
            ILOG.J2CsMapping.Util.Locale.SetDefault(origLocale);
        }


        /// @tests java.text.NumberFormat#getIntegerInstance(java.util.ILOG.J2CsMapping.Util.Locale)
        [NUnit.Framework.Test]
        public void Test_getIntegerInstanceLLocale()
        {
            // Test for method java.text.NumberFormat
            // getIntegerInstance(java.util.ILOG.J2CsMapping.Util.Locale)
            ILOG.J2CsMapping.Util.Locale usLocale = ILOG.J2CsMapping.Util.Locale.US;
            ILOG.J2CsMapping.Util.Locale arLocale = new ILOG.J2CsMapping.Util.Locale("ar", "AE");

            IBM.ICU.Text.DecimalFormat format = (IBM.ICU.Text.DecimalFormat)IBM.ICU.Text.NumberFormat
                    .GetIntegerInstance(usLocale);
            NUnit.Framework.Assert.AreEqual("#,##0", format.ToPattern(), "Test1: NumberFormat.getIntegerInstance().toPattern() returned wrong pattern");
            NUnit.Framework.Assert.AreEqual("-36", format.Format(-35.76d), "Test2: NumberFormat.getIntegerInstance().format(-35.76) returned wrong value");
            NUnit.Framework.Assert.AreEqual((long)(-36), format.Parse("-36"), "Test3: NumberFormat.getIntegerInstance().parse(\"-36\") returned wrong number");
            NUnit.Framework.Assert.AreEqual((long)(-36), format.ParseObject("-36"), "Test4: NumberFormat.getIntegerInstance().parseObject(\"-36\") returned wrong number");
            NUnit.Framework.Assert.AreEqual(0, format.GetMaximumFractionDigits(), "Test5: NumberFormat.getIntegerInstance().getMaximumFractionDigits() returned wrong value");
            NUnit.Framework.Assert.IsTrue(format.IsParseIntegerOnly(), "Test6: NumberFormat.getIntegerInstance().isParseIntegerOnly() returned wrong value");

            // try with a ILOG.J2CsMapping.Util.Locale that has a different integer pattern
            format = (IBM.ICU.Text.DecimalFormat)IBM.ICU.Text.NumberFormat.GetIntegerInstance(arLocale);
            NUnit.Framework.Assert.AreEqual("#,##0;#,##0-", format.ToPattern(), "Test7: NumberFormat.getIntegerInstance(new ILOG.J2CsMapping.Util.Locale(\"ar\", \"AE\")).toPattern() returned wrong pattern");
            //NUnit.Framework.Assert.AreEqual("36-", format.Format(-6), "Test8: NumberFormat.getIntegerInstance(new ILOG.J2CsMapping.Util.Locale(\"ar\", \"AE\")).format(-35.76) returned wrong value");
            NUnit.Framework.Assert.AreEqual((long)(-36), format.Parse("36-"), "Test9: NumberFormat.getIntegerInstance(new ILOG.J2CsMapping.Util.Locale(\"ar\", \"AE\")).parse(\"-36-\") returned wrong number");
            NUnit.Framework.Assert.AreEqual((long)(-36), format.ParseObject("36-"), "Test10: NumberFormat.getIntegerInstance(new ILOG.J2CsMapping.Util.Locale(\"ar\", \"AE\")).parseObject(\"36-\") returned wrong number");

            NUnit.Framework.Assert.AreEqual(0, format.GetMaximumFractionDigits(), "Test11: NumberFormat.getIntegerInstance(new ILOG.J2CsMapping.Util.Locale(\"ar\", \"AE\")).getMaximumFractionDigits() returned wrong value");
            NUnit.Framework.Assert.IsTrue(format.IsParseIntegerOnly(), "Test12: NumberFormat.getIntegerInstance(new ILOG.J2CsMapping.Util.Locale(\"ar\", \"AE\")).isParseIntegerOnly() returned wrong value");
        }


        /// @tests java.text.NumberFormat#getCurrency()
        [NUnit.Framework.Test]
        public void Test_getCurrency()
        {
            // Test for method java.util.Currency getCurrency()

            // a subclass that supports currency formatting
            Currency currH = Currency.GetInstance("HUF");
            IBM.ICU.Text.NumberFormat format = IBM.ICU.Text.NumberFormat.GetInstance(new ILOG.J2CsMapping.Util.Locale("hu", "HU"));
            NUnit.Framework.Assert.AreEqual(currH, format.GetCurrency(), "Returned incorrect currency");

            // a subclass that doesn't support currency formatting
            ChoiceFormat cformat = new ChoiceFormat(
                    "0#Less than one|1#one|1<Between one and two|2<Greater than two");
            try
            {
                //((IBM.ICU.Text.NumberFormat)cformat).GetCurrency();
                //NUnit.Framework.Assert.Fail("Expected UnsupportedOperationException");
            }
            catch (NotSupportedException e)
            {
            }
        }


        /// @tests java.text.NumberFormat#getMaximumIntegerDigits()
        [NUnit.Framework.Test]
        public void Test_getMaximumIntegerDigits()
        {
            IBM.ICU.Text.NumberFormat format = IBM.ICU.Text.NumberFormat.GetInstance();
            format.SetMaximumIntegerDigits(2);
            NUnit.Framework.Assert.AreEqual("23", format.Format(123), "Wrong result");
        }


        /// @tests java.text.NumberFormat#setCurrency(java.util.Currency)
        [NUnit.Framework.Test]
        public void Test_setCurrencyLjava_util_Currency()
        {
            // Test for method void setCurrency(java.util.Currency)
            // a subclass that supports currency formatting
            Currency currA = Currency.GetInstance("ARS");
            IBM.ICU.Text.NumberFormat format = IBM.ICU.Text.NumberFormat.GetInstance(new ILOG.J2CsMapping.Util.Locale("hu", "HU"));
            format.SetCurrency(currA);
            NUnit.Framework.Assert.AreSame(currA, format.GetCurrency(), "Returned incorrect currency");

            // a subclass that doesn't support currency formatting
            ChoiceFormat cformat = new ChoiceFormat(
                    "0#Less than one|1#one|1<Between one and two|2<Greater than two");
            try
            {
                //((IBM.ICU.Text.NumberFormat)cformat).SetCurrency(currA);
                //NUnit.Framework.Assert.Fail("Expected UnsupportedOperationException");
            }
            catch (NotSupportedException e)
            {
            }
        }


        /// @tests java.text.NumberFormat#parseObject(java.lang.String,
        /// java.text.ParsePosition)
        [NUnit.Framework.Test]
        public void Test_parseObjectLjava_lang_StringLjava_text_ParsePosition()
        {
            // regression test for HARMONY-1003
            //NUnit.Framework.Assert.IsNull(IBM.ICU.Text.NumberFormat.GetInstance().ParseObject("0",
            //                new ParsePosition(-1)));

            // Regression for HARMONY-1685
            try
            {
                IBM.ICU.Text.NumberFormat.GetInstance().ParseObject("test", null);
                NUnit.Framework.Assert.Fail("NullPointerException expected");
            }
            catch (NullReferenceException e)
            {
                // expected
            }
        }
    }
}
