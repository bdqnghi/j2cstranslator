/*
 *******************************************************************************
 * Copyright (C) 1996-2006, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:48 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A holiday whose date can be represented by a month, day, and optionally day
	/// of week in the Gregorian calendar.
	/// </summary>
	///
	/// @draft ICU 2.8 (retainAll)
	/// @provisional This API might change or be removed in a future release.
	public class SimpleHoliday : Holiday {
	    /// <summary>
	    /// Construct an object representing a holiday
	    /// </summary>
	    ///
	    /// <param name="month">The month in which this holiday occurs (0-based)</param>
	    /// <param name="dayOfMonth">The date within the month (1-based).</param>
	    /// <param name="name">The name of this holiday. This string is used as a key to lookup the holiday's name a resource bundle. If the name is notfound in the resource bundle, getDisplayName will return thisstring instead.</param>
	    /// <seealso cref="M:IBM.ICU.Util.Holiday.GetDisplayName(System.Globalization.CultureInfo)"/>
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public SimpleHoliday(int month, int dayOfMonth, String name) : base(name, new SimpleDateRule(month,dayOfMonth)) {
	    }
	
	    /// <summary>
	    /// Construct an object representing a holiday
	    /// </summary>
	    ///
	    /// <param name="month">The month in which this holiday occurs (0-based)</param>
	    /// <param name="dayOfMonth">The date within the month (1-based).</param>
	    /// <param name="name">The name of this holiday. This string is used as a key to lookup the holiday's name a resource bundle. If the name is notfound in the resource bundle, getDisplayName will return thisstring instead.</param>
	    /// <seealso cref="M:IBM.ICU.Util.Holiday.GetDisplayName(System.Globalization.CultureInfo)"/>
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public SimpleHoliday(int month, int dayOfMonth, String name, int startYear) : base(name, RangeRule(startYear,0,new SimpleDateRule(month,dayOfMonth))) {
	    }
	
	    /// <summary>
	    /// Construct an object representing a holiday
	    /// </summary>
	    ///
	    /// <param name="month">The month in which this holiday occurs (0-based)</param>
	    /// <param name="dayOfMonth">The date within the month (1-based).</param>
	    /// <param name="name">The name of this holiday. This string is used as a key to lookup the holiday's name a resource bundle. If the name is notfound in the resource bundle, getDisplayName will return thisstring instead.</param>
	    /// <seealso cref="M:IBM.ICU.Util.Holiday.GetDisplayName(System.Globalization.CultureInfo)"/>
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public SimpleHoliday(int month, int dayOfMonth, String name, int startYear,
	            int endYear) : base(name, RangeRule(startYear,endYear,new SimpleDateRule(month,dayOfMonth))) {
	    }
	
	    /// <summary>
	    /// // TODO: remove Construct an object representing a holiday
	    /// </summary>
	    ///
	    /// <param name="month">The month in which this holiday occurs (0-based)</param>
	    /// <param name="dayOfMonth">A date within the month (1-based). The interpretation of thisparameter depends on the value of <c>dayOfWeek</c>.</param>
	    /// <param name="dayOfWeek">The day of the week on which this holiday occurs. Thefollowing values are legal:<ul><li>dayOfWeek == 0 - use dayOfMonth only<li>dayOfWeek < 0 - use last -dayOfWeek before or ondayOfMonth<li>dayOfWeek > 0 - use first dayOfWeek after or on dayOfMonth</ul></param>
	    /// <param name="name">The name of this holiday. This string is used as a key to lookup the holiday's name a resource bundle. If the name is notfound in the resource bundle, getDisplayName will return thisstring instead.</param>
	    /// <seealso cref="M:IBM.ICU.Util.Holiday.GetDisplayName(System.Globalization.CultureInfo)"/>
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public SimpleHoliday(int month, int dayOfMonth, int dayOfWeek, String name) : base(name, new SimpleDateRule(month,dayOfMonth,(dayOfWeek > 0)?dayOfWeek:-dayOfWeek,dayOfWeek > 0)) {
	    }
	
	    
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public SimpleHoliday(int month, int dayOfMonth, int dayOfWeek, String name,
	            int startYear) : base(name, RangeRule(startYear,0,new SimpleDateRule(month,dayOfMonth,(dayOfWeek > 0)?dayOfWeek:-dayOfWeek,dayOfWeek > 0))) {
	    }
	
	    
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public SimpleHoliday(int month, int dayOfMonth, int dayOfWeek, String name,
	            int startYear, int endYear) : base(name, RangeRule(startYear,endYear,new SimpleDateRule(month,dayOfMonth,(dayOfWeek > 0)?dayOfWeek:-dayOfWeek,dayOfWeek > 0))) {
	    }
	
	    private static DateRule RangeRule(int startYear, int endYear, DateRule rule) {
	        if (startYear == 0 && endYear == 0) {
	            return rule;
	        }
	
	        RangeDateRule rangeRule = new RangeDateRule();
	
	        if (startYear != 0) {
	            Calendar start = new GregorianCalendar(startYear, IBM.ICU.Util.Calendar.JANUARY,
	                    1);
	            rangeRule.Add(start.GetTime(), rule);
	        } else {
	            rangeRule.Add(rule);
	        }
	        if (endYear != 0) {
	            DateTime end = new GregorianCalendar(endYear, IBM.ICU.Util.Calendar.DECEMBER, 31)
	                    .GetTime();
	            rangeRule.Add(end, null);
	        }
	
	        return rangeRule;
	    }
	
	    /*
	     * Constants for holidays that are common throughout the Western and
	     * Christian worlds....
	     */
	
	    /// <summary>
	    /// New Year's Day - January 1st
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public static readonly SimpleHoliday NEW_YEARS_DAY = new SimpleHoliday(
	            IBM.ICU.Util.Calendar.JANUARY, 1, "New Year's Day");
	
	    /// <summary>
	    /// Epiphany, January 6th
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public static readonly SimpleHoliday EPIPHANY = new SimpleHoliday(
	            IBM.ICU.Util.Calendar.JANUARY, 6, "Epiphany");
	
	    /// <summary>
	    /// May Day, May 1st
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public static readonly SimpleHoliday MAY_DAY = new SimpleHoliday(IBM.ICU.Util.Calendar.MAY,
	            1, "May Day");
	
	    /// <summary>
	    /// Assumption, August 15th
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public static readonly SimpleHoliday ASSUMPTION = new SimpleHoliday(
	            IBM.ICU.Util.Calendar.AUGUST, 15, "Assumption");
	
	    /// <summary>
	    /// All Saints' Day, November 1st
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public static readonly SimpleHoliday ALL_SAINTS_DAY = new SimpleHoliday(
	            IBM.ICU.Util.Calendar.NOVEMBER, 1, "All Saints' Day");
	
	    /// <summary>
	    /// All Souls' Day, November 1st
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public static readonly SimpleHoliday ALL_SOULS_DAY = new SimpleHoliday(
	            IBM.ICU.Util.Calendar.NOVEMBER, 2, "All Souls' Day");
	
	    /// <summary>
	    /// Immaculate Conception, December 8th
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public static readonly SimpleHoliday IMMACULATE_CONCEPTION = new SimpleHoliday(
	            IBM.ICU.Util.Calendar.DECEMBER, 8, "Immaculate Conception");
	
	    /// <summary>
	    /// Christmas Eve, December 24th
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public static readonly SimpleHoliday CHRISTMAS_EVE = new SimpleHoliday(
	            IBM.ICU.Util.Calendar.DECEMBER, 24, "Christmas Eve");
	
	    /// <summary>
	    /// Christmas, December 25th
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public static readonly SimpleHoliday CHRISTMAS = new SimpleHoliday(
	            IBM.ICU.Util.Calendar.DECEMBER, 25, "Christmas");
	
	    /// <summary>
	    /// Boxing Day, December 26th
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public static readonly SimpleHoliday BOXING_DAY = new SimpleHoliday(
	            IBM.ICU.Util.Calendar.DECEMBER, 26, "Boxing Day");
	
	    /// <summary>
	    /// Saint Stephen's Day, December 26th
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public static readonly SimpleHoliday ST_STEPHENS_DAY = new SimpleHoliday(
	            IBM.ICU.Util.Calendar.DECEMBER, 26, "St. Stephen's Day");
	
	    /// <summary>
	    /// New Year's Eve, December 31st
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public static readonly SimpleHoliday NEW_YEARS_EVE = new SimpleHoliday(
	            IBM.ICU.Util.Calendar.DECEMBER, 31, "New Year's Eve");
	
	}
}
