// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 10:46 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2001-2007, International Business Machines Corporation and    
/// others. All Rights Reserved.                                                
/// </summary>
///
namespace IBM.ICU.Charset {
	
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Reflection;
	using System.Resources;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Ray: An adapter class for TestDataMoule to make it like TestFmwk
	/// A convenience extension of TestFmwk for use by data module-driven tests.
	/// Tests can implement this if they make extensive use of information in a
	/// TestDataModule.
	/// Subclasses can allow for test methods that don't use data from the module by
	/// overriding validateMethod to return true for these methods. Tests are also
	/// free to instantiate their own modules and run from them, though care should
	/// be taken not to interfere with the methods in this class.
	/// See CollationTest for an example.
	/// </summary>
	///
	public abstract class ModuleTest : TestFmwk {
	    private TestDataModule m;
	
	    protected internal TestDataModule_Constants.TestData t;
	
	    private String localeName;
	
	    private String baseName;
	
	    abstract protected internal void ProcessModules();
	
	    protected internal ModuleTest(String baseName_0, String locName) {
	        this.t = null;
	        this.localeName = null;
	        this.baseName = null;
	        localeName = locName;
	        this.baseName = baseName_0;
	    }
	
	    protected internal override TestFmwk.Target  GetTargets(String targetName) {
	        if (paras.DoMethods()) {
	            TestFmwk.Target  target = null;
	            if (!Validate()) {
	                return null;
	            }
	            IIterator testData = m.GetTestDataIterator();
	            if (testData != null) {
	                try {
	                    MethodInfo method = ILOG.J2CsMapping.Reflect.Helper.GetMethod(GetType(),"processModules",(Type[]) null);
	                    while (testData.HasNext()) {
	                        target = new TestFmwk.MethodTarget (
	                                this, ((TestDataModule_Constants.TestData) testData.Next()).GetName(), method)
	                                .SetNext(target);
	                    }
	                } catch (Exception e) {
	                    Console.Error.WriteLine(e.StackTrace);
	                    throw new InvalidOperationException(e.Message);
	                }
	            }
	            return target;
	        } else {
	            return null;
	        }
	    }
	
	    /// <summary>
	    /// TestFmwk calls this before trying to run a suite of tests. The test suite
	    /// if valid if a module whose name is the name of this class + "Data" can be
	    /// opened. Subclasses can override this if there are different or additional
	    /// data required.
	    /// </summary>
	    ///
	    protected internal override bool Validate() {
	        try {
	            m = IBM.ICU.Charset.TestDataModule_Constants.Factory.Get(baseName, localeName);
	        } catch (TestDataModule_Constants.DataModuleFormatError e) {
	            Console.Error.WriteLine(e.StackTrace);
	            m = null;
	        } catch (MissingManifestResourceException e_0) {
	            Warnln("Could not load data: " + e_0.Message);
	        }
	        return m != null;
	    }
	
	    /// <summary>
	    /// TestFmwk calls this before trying to invoke a test method. The method is
	    /// valid if there is test data with the name of this method in the module.
	    /// Subclasses can override this to allow for tests that do not require test
	    /// data from the module, or if there are different or additional data
	    /// required.
	    /// </summary>
	    ///
	    protected internal override bool ValidateMethod(String methodName) {
	        return OpenTestData(methodName);
	    }
	
	    /// <summary>
	    /// Override of TestFmwk method to get the test suite description from the
	    /// DESCRIPTION field of the module info.
	    /// </summary>
	    ///
	    protected internal override String GetDescription() {
	        TestDataModule_Constants.DataMap info = ModuleInfo();
	        if (info != null) {
	            // return info.getString(TestDataModule.DESCRIPTION);
	        }
	        return null;
	    }
	
	    /// <summary>
	    /// Override of TestFmwk method to get the test method description from the
	    /// DESCRIPTION field of the test info.
	    /// </summary>
	    ///
	    protected internal override String GetMethodDescription(String methodName) {
	        if (OpenTestData(methodName)) {
	            TestDataModule_Constants.DataMap info = TestInfo();
	            if (info != null) {
	                // return info.getString(TestDataModule.DESCRIPTION);
	            }
	        }
	        return null;
	    }
	
	    /// <summary>
	    /// Open the test data in the module with the given name, and return true if
	    /// success. The current test is reset.
	    /// </summary>
	    ///
	    /// <exception cref="TestDataModule_Constants.DataModuleFormatError"></exception>
	    protected internal bool OpenTestData(String name) {
	        try {
	            t = (m == null) ? null : m.GetTestData(name);
	        } catch (TestDataModule_Constants.DataModuleFormatError e) {
	            return false;
	        }
	        return t != null;
	    }
	
	    /// <summary>
	    /// Get information on this module. Returns null if no module open or no info
	    /// for the module.
	    /// </summary>
	    ///
	    private TestDataModule_Constants.DataMap ModuleInfo() {
	        return (m == null) ? null : m.GetInfo();
	    }
	
	    /// <summary>
	    /// Get information on this test. Returns null if no module open or no test
	    /// open or not info for this test.
	    /// </summary>
	    ///
	    private TestDataModule_Constants.DataMap TestInfo() {
	        return (t == null) ? null : t.GetInfo();
	    }
	
	    public override void Msg(String message, int level, bool incCount, bool newln) {
	        if (level == IBM.ICU.Charset.TestLog_Constants.ERR && t != null) {
	            // t.stopIteration();
	        }
	        base.Msg(message,level,incCount,newln);
	    }
	
	}
}
