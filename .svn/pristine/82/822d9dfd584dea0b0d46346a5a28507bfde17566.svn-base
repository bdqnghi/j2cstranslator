// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2001-2006, International Business Machines Corporation and    
/// others. All Rights Reserved.                                                
/// </summary>
///
namespace IBM.ICU.Charset {
	
	using IBM.ICU.Impl;
	using IBM.ICU.Text;
	using IBM.ICU.Util;
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using ILOG.J2CsMapping.Threading;
	using ILOG.J2CsMapping.Util;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Threading;
	
	public class ICUServiceTestSample {
	    static public void Main(String[] args) {
	        ICUServiceTestSample.HelloServiceClient  client = new ICUServiceTestSample.HelloServiceClient ();
	
	        ThreadWrapper t = new ICUServiceTestSample.HelloUpdateThread ();
	        t.Start();
	        try {
	            t.Join();
	        } catch (ThreadInterruptedException e) {
	        }
	        System.Console.Out.WriteLine("done");
	        if (client == null) {
	        }
	    }
	
	    /// <summary>
	    /// A class that displays the current names in the Hello service. Each time
	    /// the service changes, it redisplays the names.
	    /// </summary>
	    ///
	    internal class HelloServiceClient : 
	            HelloService.HelloServiceListener {
	
	        internal HelloServiceClient() {
	            IBM.ICU.Charset.ICUServiceTestSample.HelloService.AddListener(this);
	            Display();
	        }
	
	        /// <summary>
	        /// This will be called in the notification thread of ICUNotifier.
	        /// ICUNotifier could spawn a (non-daemon) thread for each listener, so
	        /// that impolite listeners wouldn't hold up notification, but right now
	        /// it doesn't. Instead, all notifications are delivered on the
	        /// notification thread. Since that's a daemon thread, a notification
	        /// might not complete before main terminates.
	        /// </summary>
	        ///
	        public virtual void HelloServiceChanged() {
	            Display();
	        }
	
	        public void Display() {
	            IDictionary names = IBM.ICU.Charset.ICUServiceTestSample.HelloService.GetDisplayNames(IBM.ICU.Util.ULocale.US);
	            System.Console.Out.WriteLine("displaying " + names.Count + " names.");
	            IIterator iter = new ILOG.J2CsMapping.Collections.IteratorAdapter(names.GetEnumerator());
	            while (iter.HasNext()) {
	                DictionaryEntry entry = (DictionaryEntry) iter.Next();
	                String displayName = (String) ((DictionaryEntry) entry).Key;
	                ICUServiceTestSample.HelloService  service = IBM.ICU.Charset.ICUServiceTestSample.HelloService.Get((String) ((DictionaryEntry) entry).Value);
	                System.Console.Out.WriteLine(displayName + " says " + service.Hello());
	                try {
	                    ILOG.J2CsMapping.Threading.ThreadWrapper.Sleep(50);
	                } catch (ThreadInterruptedException e) {
	                }
	            }
	            System.Console.Out.WriteLine("----");
	        }
	    }
	
	    /// <summary>
	    /// A thread to update the service.
	    /// </summary>
	    ///
	    internal class HelloUpdateThread : ThreadWrapper {
	        public HelloUpdateThread() {
	            this.updates = new String[][] {
	                            new String[] { "Hey", "en_US_INFORMAL" },
	                            new String[] { "Hallo", "de_DE_INFORMAL" },
	                            new String[] { "Yo!", "en_US_CALIFORNIA_INFORMAL" },
	                            new String[] { "Chi Fanle Ma?", "zh__INFORMAL" },
	                            new String[] { "Munch munch... Burger?", "en" },
	                            new String[] { "Sniff", "fr" },
	                            new String[] {
	                                    "TongZhi! MaoZeDong SiXiang Wan Sui!",
	                                    "zh_CN" },
	                            new String[] { "Bier? Ja!", "de" } };
	        }
	
	        internal String[][] updates;
	
	        public override void Run() {
	            for (int i = 0; i < updates.Length; ++i) {
	                try {
	                    ILOG.J2CsMapping.Threading.ThreadWrapper.Sleep(500);
	                } catch (ThreadInterruptedException e) {
	                }
	                IBM.ICU.Charset.ICUServiceTestSample.HelloService
	                        .Register(updates[i][0], new ULocale(updates[i][1]));
	            }
	        }
	    }
	
	    /// <summary>
	    /// An example service that wraps an ICU service in order to export custom
	    /// API and notification. The service just implements 'hello'.
	    /// </summary>
	    ///
	    internal sealed class HelloService {
	        private static ICUService registry;
	
	        private String name;
	
	        public HelloService(String name_0) {
	            this.name = name_0;
	        }
	
	        /// <summary>
	        /// The hello service...
	        /// </summary>
	        ///
	        public String Hello() {
	            return name;
	        }
	
	        public override String ToString() {
	            return base.ToString() + ": " + name;
	        }
	
	        /// <summary>
	        /// Deferred init.
	        /// </summary>
	        ///
	        public static ICUService Registry() {
	            if (registry == null) {
	                InitRegistry();
	            }
	            return registry;
	        }
	
	        public static void InitRegistry() {
	            registry = new IBM.ICU.Charset.ICUServiceTestSample.HelloService.Anonymous_C0 ();
	
	            // initialize
	            DoRegister("Hello", "en");
	            DoRegister("Bonjour", "fr");
	            DoRegister("Ni Hao", "zh_CN");
	            DoRegister("Guten Tag", "de");
	        }
	
	        public sealed class Anonymous_C0 : ICULocaleService {
	            protected override bool AcceptsListener(IEventListener l) {
	                return true; // we already verify in our wrapper APIs
	            }
	
	            protected override void NotifyListener(IEventListener l) {
	                ((IBM.ICU.Charset.ICUServiceTestSample.HelloService.HelloServiceListener ) l).HelloServiceChanged();
	            }
	        }
	
	        /// <summary>
	        /// A custom listener for changes to this service. We don't need to point
	        /// to the service since it is defined by this class and not an object.
	        /// </summary>
	        ///
	        public interface HelloServiceListener : IEventListener {
	            void HelloServiceChanged();
	        }
	
	        /// <summary>
	        /// Type-safe notification for this service.
	        /// </summary>
	        ///
	        public static void AddListener(IBM.ICU.Charset.ICUServiceTestSample.HelloService.HelloServiceListener  l) {
	            Registry().AddListener(l);
	        }
	
	        /// <summary>
	        /// Type-safe notification for this service.
	        /// </summary>
	        ///
	        public static void RemoveListener(IBM.ICU.Charset.ICUServiceTestSample.HelloService.HelloServiceListener  l) {
	            Registry().RemoveListener(l);
	        }
	
	        /// <summary>
	        /// Type-safe access to the service.
	        /// </summary>
	        ///
	        public static ICUServiceTestSample.HelloService  Get(String id) {
	            return (ICUServiceTestSample.HelloService ) Registry().Get(id);
	        }
	
	        public static ILOG.J2CsMapping.Collections.ISet GetVisibleIDs() {
	            return Registry().GetVisibleIDs();
	        }
	
	        public static IDictionary GetDisplayNames(ULocale locale) {
	            return GetDisplayNames(Registry(), locale);
	        }
	
	        /// <summary>
	        /// Register a new hello string for this locale.
	        /// </summary>
	        ///
	        public static void Register(String helloString, ULocale locale) {
	            if (helloString == null || locale == null) {
	                throw new NullReferenceException();
	            }
	            DoRegister(helloString, locale.ToString());
	        }
	
	        public static void DoRegister(String hello, String id) {
	            Registry().RegisterObject(new ICUServiceTestSample.HelloService (hello), id);
	        }
	
	        /// <summary>
	        /// Convenience override of getDisplayNames(ULocale, Comparator, String)
	        /// that uses the default collator for the locale as the comparator to
	        /// sort the display names, and null for the matchID.
	        /// </summary>
	        ///
	        public static SortedList GetDisplayNames(ICUService service,
	                ULocale locale) {
	            Collator col = IBM.ICU.Text.Collator.GetInstance(locale);
	            return service.GetDisplayNames(locale, col, null);
	        }
	    }
	}
}
