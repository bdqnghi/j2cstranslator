/*
 *******************************************************************************
 * Copyright (C) 2005-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:48 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Globalization;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Implement the Coptic calendar system.
	/// <p>
	/// CopticCalendar usually should be instantiated using<see cref="M:IBM.ICU.Util.Calendar.GetInstance(IBM.ICU.Util.ULocale)"/> passing in a
	/// <c>ULocale</c> with the tag <c>"@calendar=coptic"</c>.
	/// </p>
	/// </summary>
	///
	/// <seealso cref="T:IBM.ICU.Util.Calendar"/>
	/// @stable ICU 3.4
	public sealed class CopticCalendar : CECalendar {
	    // jdk1.4.2 serialver
	    private const long serialVersionUID = 5903818751846742911L;
	
	    /// <summary>
	    /// Constant for &#x03c9;&#x03bf;&#x03b3;&#x03c4;/&#x062a;&#xfeee;&#xfe97;,
	    /// the 1st month of the Coptic year.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int TOUT = 0;
	
	    /// <summary>
	    /// Constant for
	    /// &#x03a0;&#x03b1;&#x03bf;&#x03c0;&#x03b9;/&#xfeea;&#xfe91;&#xfe8e
	    /// ;&#xfe91;, the 2nd month of the Coptic year.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int BABA = 1;
	
	    /// <summary>
	    /// Constant for
	    /// &#x0391;&#x03b8;&#x03bf;&#x03c1;/&#x0631;&#xfeee;&#xfe97;&#xfe8e
	    /// ;&#xfeeb;, the 3rd month of the Coptic year.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int HATOR = 2;
	
	    /// <summary>
	    /// Constant for
	    /// &#x03a7;&#x03bf;&#x03b9;&#x03b1;&#x03ba;/&#xfeda;&#xfeec;&#xfef4
	    /// ;&#xfedb;, the 4th month of the Coptic year.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int KIAHK = 3;
	
	    /// <summary>
	    /// Constant for
	    /// &#x03a4;&#x03c9;&#x03b2;&#x03b9;/&#x0637;&#xfeee;&#xfe92;&#xfeeb;, the
	    /// 5th month of the Coptic year.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int TOBA = 4;
	
	    /// <summary>
	    /// Constant for
	    /// &#x039c;&#x03b5;&#x03e3;&#x03b9;&#x03c1;/&#xfeae;&#xfef4;&#xfeb8
	    /// ;&#xfee3;&#x0623;, the 6th month of the Coptic year.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int AMSHIR = 5;
	
	    /// <summary>
	    /// Constant for
	    /// &#x03a0;&#x03b1;&#x03c1;&#x03b5;&#x03bc;&#x03e9;&#x03b1;&#x03c4
	    /// ;/&#x062a;&#xfe8e;&#xfeec;&#xfee3;&#xfeae;&#xfe91;, the 7th month of the
	    /// Coptic year.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int BARAMHAT = 6;
	
	    /// <summary>
	    /// Constant for
	    /// &#x03a6;&#x03b1;&#x03c1;&#x03bc;&#x03bf;&#x03b8;&#x03b9;/&#x0647
	    /// ;&#x062f;&#xfeee;&#xfee3;&#xfeae;&#xfe91;, the 8th month of the Coptic
	    /// year.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int BARAMOUDA = 7;
	
	    /// <summary>
	    /// Constant for
	    /// &#x03a0;&#x03b1;&#x03e3;&#x03b1;&#x03bd;/&#xfeb2;&#xfee8;&#xfeb8
	    /// ;&#xfe91;, the 9th month of the Coptic year.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int BASHANS = 8;
	
	    /// <summary>
	    /// Constant for
	    /// &#x03a0;&#x03b1;&#x03c9;&#x03bd;&#x03b9;/&#xfeea;&#xfee7;&#x0624
	    /// ;&#xfeee;&#xfe91;, the 10th month of the Coptic year.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int PAONA = 9;
	
	    /// <summary>
	    /// Constant for
	    /// &#x0395;&#x03c0;&#x03b7;&#x03c0;/&#xfe90;&#xfef4;&#xfe91;&#x0623;, the
	    /// 11th month of the Coptic year.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int EPEP = 10;
	
	    /// <summary>
	    /// Constant for
	    /// &#x039c;&#x03b5;&#x03f2;&#x03c9;&#x03c1;&#x03b7;/&#x0649;&#xfeae
	    /// ;&#xfeb4;&#xfee3;, the 12th month of the Coptic year.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int MESRA = 11;
	
	    /// <summary>
	    /// Constant for &#x03a0;&#x03b9;&#x03ba;&#x03bf;&#x03b3;&#x03eb;&#x03b9;
	    /// &#x03bc
	    /// ;&#x03b1;&#x03b2;&#x03bf;&#x03c4;/&#xfeae;&#xfef4;&#xfed0;&#xfebc;&
	    /// #xfedf;&#x0627; &#xfeae;&#xfeec;&#xfeb8;&#xfedf;&#x0627;, the 13th month
	    /// of the Coptic year.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public const int NASIE = 12;
	
	    private const int JD_EPOCH_OFFSET = 1824665;
	
	    /// <summary>
	    /// Constructs a default <c>CopticCalendar</c> using the current time
	    /// in the default time zone with the default locale.
	    /// </summary>
	    ///
	    /// @stable ICU 3.4
	    public CopticCalendar() : base() {
	        jdEpochOffset = JD_EPOCH_OFFSET;
	    }
	
	    /// <summary>
	    /// Constructs a <c>CopticCalendar</c> based on the current time in the
	    /// given time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="zone">The time zone for the new calendar.</param>
	    /// @stable ICU 3.4
	    public CopticCalendar(TimeZone zone) : base(zone) {
	        jdEpochOffset = JD_EPOCH_OFFSET;
	    }
	
	    /// <summary>
	    /// Constructs a <c>CopticCalendar</c> based on the current time in the
	    /// default time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="aLocale">The locale for the new calendar.</param>
	    /// @stable ICU 3.4
        public CopticCalendar(ILOG.J2CsMapping.Util.Locale aLocale)
            : base(aLocale)
        {
	        jdEpochOffset = JD_EPOCH_OFFSET;
	    }
	
	    /// <summary>
	    /// Constructs a <c>CopticCalendar</c> based on the current time in the
	    /// default time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="locale">The icu locale for the new calendar.</param>
	    /// @stable ICU 3.4
	    public CopticCalendar(ULocale locale) : base(locale) {
	        jdEpochOffset = JD_EPOCH_OFFSET;
	    }
	
	    /// <summary>
	    /// Constructs a <c>CopticCalendar</c> based on the current time in the
	    /// given time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="zone">The time zone for the new calendar.</param>
	    /// <param name="aLocale">The locale for the new calendar.</param>
	    /// @stable ICU 3.4
        public CopticCalendar(TimeZone zone, ILOG.J2CsMapping.Util.Locale aLocale)
            : base(zone, aLocale)
        {
	        jdEpochOffset = JD_EPOCH_OFFSET;
	    }
	
	    /// <summary>
	    /// Constructs a <c>CopticCalendar</c> based on the current time in the
	    /// given time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="zone">The time zone for the new calendar.</param>
	    /// <param name="locale">The icu locale for the new calendar.</param>
	    /// @stable ICU 3.4
	    public CopticCalendar(TimeZone zone, ULocale locale) : base(zone, locale) {
	        jdEpochOffset = JD_EPOCH_OFFSET;
	    }
	
	    /// <summary>
	    /// Constructs a <c>CopticCalendar</c> with the given date set in the
	    /// default time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="year">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CopticCalendar.YEAR YEAR"/> timefield.</param>
	    /// <param name="month">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CopticCalendar.MONTH MONTH"/> timefield. The value is 0-based. e.g., 0 for Tout.</param>
	    /// <param name="date">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CopticCalendar.DATE DATE"/> timefield.</param>
	    /// @stable ICU 3.4
	    public CopticCalendar(int year, int month, int date) : base(year, month, date) {
	        jdEpochOffset = JD_EPOCH_OFFSET;
	    }
	
	    /// <summary>
	    /// Constructs a <c>CopticCalendar</c> with the given date set in the
	    /// default time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="date">The date to which the new calendar is set.</param>
	    /// @stable ICU 3.4
	    public CopticCalendar(DateTime date) : base(date) {
	        jdEpochOffset = JD_EPOCH_OFFSET;
	    }
	
	    /// <summary>
	    /// Constructs a <c>CopticCalendar</c> with the given date and time set
	    /// for the default time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="year">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CopticCalendar.YEAR YEAR"/> timefield.</param>
	    /// <param name="month">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CopticCalendar.MONTH MONTH"/> timefield. The value is 0-based. e.g., 0 for Tout.</param>
	    /// <param name="date">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CopticCalendar.DATE DATE"/> timefield.</param>
	    /// <param name="hour">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CopticCalendar.HOUR_OF_DAYHOUR_OF_DAY"/> time field.</param>
	    /// <param name="minute">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CopticCalendar.MINUTE MINUTE"/>time field.</param>
	    /// <param name="second">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CopticCalendar.SECOND SECOND"/>time field.</param>
	    /// @stable ICU 3.4
	    public CopticCalendar(int year, int month, int date, int hour, int minute,
	            int second) : base(year, month, date, hour, minute, second) {
	        jdEpochOffset = JD_EPOCH_OFFSET;
	    }
	
	    /// <summary>
	    /// Convert an Coptic year, month, and day to a Julian day.
	    /// </summary>
	    ///
	    /// <param name="year">the year</param>
	    /// <param name="month">the month</param>
	    /// <param name="date">the day</param>
	    /// @draft ICU 3.4
	    /// @provisional This API might change or be removed in a future release.
	    public static int CopticToJD(long year, int month, int date) {
	        return IBM.ICU.Util.CECalendar.CeToJD(year, month, date, JD_EPOCH_OFFSET);
	    }
	
	    /// <exclude/>
	    public static Int32[] GetDateFromJD(int julianDay) {
	        return IBM.ICU.Util.CECalendar.GetDateFromJD(julianDay, JD_EPOCH_OFFSET);
	    }
	
	    /// <summary>
	    /// 
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public override String GetType() {
	        return "coptic";
	    }
	}
}
