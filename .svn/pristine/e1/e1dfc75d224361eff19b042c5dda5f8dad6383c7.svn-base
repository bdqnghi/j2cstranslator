/*
 *******************************************************************************
 * Copyright (C) 2005-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:48 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Globalization;
	using System.IO;
	using System.Runtime.CompilerServices;
     using ILOG.J2CsMapping.Util;
	
	/// <exclude/>
	/// <summary>
	/// Base class for EthiopicCalendar and CopticCalendar.
	/// </summary>
	///
	public class CECalendar : Calendar {
	    // jdk1.4.2 serialver
	    private const long serialVersionUID = -999547623066414271L;
	
	    private static readonly int[][] LIMITS = { new int[] { 0, 0, 1, 1 },
	            new int[] { 1, 1, 5828963, 5838270 }, new int[] { 0, 0, 12, 12 },
	            new int[] { 1, 1, 52, 53 }, new int[] { 0, 0, 0, 6 },
	            new int[] { 1, 1, 5, 30 }, new int[] { 1, 1, 365, 366 },
	            new int[] {}, new int[] { -1, -1, 1, 5 }, new int[] {},
	            new int[] {}, new int[] {}, new int[] {}, new int[] {},
	            new int[] {}, new int[] {}, new int[] {},
	            new int[] { -5838270, -5838270, 5828964, 5838271 }, new int[] {},
	            new int[] { -5838269, -5838269, 5828963, 5838270 }, new int[] {},
	            new int[] {} };
	
	    /* ceToJD() doesn't use this data */
	    /*
	     * private static final int[][] ceMONTH_COUNT = { //len len2 st st2 {30, 30,
	     * 0, 0}, // Meskerem {30, 30, 30, 30}, // Tekemt {30, 30, 60, 60}, // Hedar
	     * {30, 30, 90, 90}, // Tahsas {30, 30, 120, 120}, // Ter {30, 30, 150,
	     * 150}, // Yekatit {30, 30, 180, 180}, // Megabit {30, 30, 210, 210}, //
	     * Miazia {30, 30, 240, 244}, // Genbot {30, 30, 270, 270}, // Sene {30, 30,
	     * 300, 300}, // Hamle {30, 30, 330, 330}, // Nehasse { 5, 6, 360, 360} //
	     * Pwagme // len length of month // len2 length of month in a leap year //
	     * st days in year before start of month // st2 days in year before month in
	     * leap year };
	     */
	
	    // The Coptic and Ethiopic calendars differ only in their epochs.
	    // We handle this by setting the jdOffset to the difference between
	    // the Julian and Coptic or Ethiopic epoch.
	    // This value is set in the class initialization phase of the two
	    // subclasses, CopticCalendar and EthiopicCalendar
	    /// <exclude/>
	    /// <summary>
	    /// The difference between the Julian and Coptic epoch.
	    /// </summary>
	    ///
	    protected internal int jdEpochOffset;
	
	    protected internal override int HandleGetLimit(int field, int limitType) {
	        return LIMITS[field][limitType];
	    }
	
	    // -------------------------------------------------------------------------
	    // Constructors...
	    // -------------------------------------------------------------------------
	
	    /// <summary>
	    /// Constructs a default <c>CECalendar</c> using the current time in
	    /// the default time zone with the default locale.
	    /// </summary>
	    ///
	    protected internal CECalendar() : this(IBM.ICU.Util.TimeZone.GetDefault(), IBM.ICU.Util.ULocale.GetDefault()) {
	    }
	
	    /// <summary>
	    /// Constructs a <c>CECalendar</c> based on the current time in the
	    /// given time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="zone">The time zone for the new calendar.</param>
	    protected internal CECalendar(TimeZone zone) : this(zone, IBM.ICU.Util.ULocale.GetDefault()) {
	    }
	
	    /// <summary>
	    /// Constructs a <c>CECalendar</c> based on the current time in the
	    /// default time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="aLocale">The locale for the new calendar.</param>
        protected internal CECalendar(Locale aLocale)
            : this(IBM.ICU.Util.TimeZone.GetDefault(), aLocale)
        {
	    }
	
	    /// <summary>
	    /// Constructs a <c>CECalendar</c> based on the current time in the
	    /// default time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="locale">The locale for the new calendar.</param>
	    protected internal CECalendar(ULocale locale) : this(IBM.ICU.Util.TimeZone.GetDefault(), locale) {
	    }
	
	    /// <summary>
	    /// Constructs a <c>CECalendar</c> based on the current time in the
	    /// given time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="zone">The time zone for the new calendar.</param>
	    /// <param name="aLocale">The locale for the new calendar.</param>
        protected internal CECalendar(TimeZone zone, Locale aLocale)
            : base(zone, aLocale)
        {
	        this.jdEpochOffset = -1;
	        SetTimeInMillis(DateTime.Now.Millisecond);
	    }
	
	    /// <summary>
	    /// Constructs a <c>CECalendar</c> based on the current time in the
	    /// given time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="zone">The time zone for the new calendar.</param>
	    /// <param name="locale">The locale for the new calendar.</param>
	    protected internal CECalendar(TimeZone zone, ULocale locale) : base(zone, locale) {
	        this.jdEpochOffset = -1;
	        SetTimeInMillis(DateTime.Now.Millisecond);
	    }
	
	    /// <summary>
	    /// Constructs a <c>CECalendar</c> with the given date set in the
	    /// default time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="year">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CECalendar.YEAR YEAR"/> timefield.</param>
	    /// <param name="month">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CECalendar.MONTH MONTH"/> timefield. The value is 0-based. e.g., 0 for Tishri.</param>
	    /// <param name="date">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CECalendar.DATE DATE"/> timefield.</param>
	    protected internal CECalendar(int year, int month, int date) : base(IBM.ICU.Util.TimeZone.GetDefault(), IBM.ICU.Util.ULocale.GetDefault()) {
	        this.jdEpochOffset = -1;
	        this.Set(year, month, date);
	    }
	
	    /// <summary>
	    /// Constructs a <c>CECalendar</c> with the given date set in the
	    /// default time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="date">The date to which the new calendar is set.</param>
	    protected internal CECalendar(DateTime date) : base(IBM.ICU.Util.TimeZone.GetDefault(), IBM.ICU.Util.ULocale.GetDefault()) {
	        this.jdEpochOffset = -1;
	        this.SetTime(date);
	    }
	
	    /// <summary>
	    /// Constructs a <c>CECalendar</c> with the given date and time set for
	    /// the default time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="year">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CECalendar.YEAR YEAR"/> timefield.</param>
	    /// <param name="month">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CECalendar.MONTH MONTH"/> timefield. The value is 0-based. e.g., 0 for Tishri.</param>
	    /// <param name="date">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CECalendar.DATE DATE"/> timefield.</param>
	    /// <param name="hour">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CECalendar.HOUR_OF_DAYHOUR_OF_DAY"/> time field.</param>
	    /// <param name="minute">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CECalendar.MINUTE MINUTE"/>time field.</param>
	    /// <param name="second">The value used to set the calendar's <see cref="M:IBM.ICU.Util.CECalendar.SECOND SECOND"/>time field.</param>
	    protected internal CECalendar(int year, int month, int date, int hour, int minute,
	            int second) : base(IBM.ICU.Util.TimeZone.GetDefault(), IBM.ICU.Util.ULocale.GetDefault()) {
	        this.jdEpochOffset = -1;
	        this.Set(year, month, date, hour, minute, second);
	    }
	
	    // -------------------------------------------------------------------------
	    // Calendar system Converstion methods...
	    // -------------------------------------------------------------------------
	
	    /// <exclude/>
	    protected internal override int HandleComputeMonthStart(int eyear, int emonth,
	            bool useMonth) {
	        return CeToJD(eyear, emonth, 0, jdEpochOffset);
	    }
	
	    /// <exclude/>
	    protected internal override int HandleGetExtendedYear() {
	        int year;
	        if (NewerField(IBM.ICU.Util.Calendar.EXTENDED_YEAR, IBM.ICU.Util.Calendar.YEAR) == IBM.ICU.Util.Calendar.EXTENDED_YEAR) {
	            year = InternalGet(IBM.ICU.Util.Calendar.EXTENDED_YEAR, 1); // Default to year 1
	        } else {
	            year = InternalGet(IBM.ICU.Util.Calendar.YEAR, 1); // Default to year 1
	        }
	        return year;
	    }
	
	    /// <exclude/>
	    protected internal override void HandleComputeFields(int julianDay) {
	        Int32[] date = GetDateFromJD(julianDay, jdEpochOffset);
	        int _year = date[0];
	        int _month = date[1];
	        int _day = date[2];
	        int ceyear = 0;
	
	        // Do we want to use EthiopicCalendar.AA, .AM here?
	        int era = IBM.ICU.Util.GregorianCalendar.AD;
	        if (_year < 0) { // dlf: this is what the test says to do
	            era = IBM.ICU.Util.GregorianCalendar.BC;
	            ceyear = 1 - _year;
	        } else {
	            ceyear = _year;
	        }
	
	        InternalSet(IBM.ICU.Util.Calendar.MONTH, _month);
	        InternalSet(IBM.ICU.Util.Calendar.DAY_OF_MONTH, _day);
	        InternalSet(IBM.ICU.Util.Calendar.DAY_OF_YEAR, (30 * _month) + _day);
	        InternalSet(IBM.ICU.Util.Calendar.EXTENDED_YEAR, ceyear);
	        InternalSet(IBM.ICU.Util.Calendar.ERA, era);
	        InternalSet(IBM.ICU.Util.Calendar.YEAR, _year);
	    }
	
	    /// <exclude/>
	    public static int CeToJD(long year, int month, int date, int jdEpochOffset_0) {
	
	        // Julian<->Ethiopic algorithms from:
	        // "Calendars in Ethiopia", Berhanu Beyene, Manfred Kudlek,
	        // International Conference
	        // of Ethiopian Studies XV, Hamburg, 2003
	
	        return (int) ((jdEpochOffset_0 + 365) // difference from Julian epoch to
	                                            // 1,1,1
	                + 365 * (year - 1) // number of days from years
	                + Quotient(year, 4) // extra day of leap year
	                + 30 * (month + 1) // number of days from months
	                + date // number of days for present month
	        - 31 // slack?
	        );
	    }
	
	    /// <exclude/>
	    /// @provisional This API might change or be removed in a future release.
	    public static Int32[] GetDateFromJD(int julianDay, int jdEpochOffset_0) {
	        // 1461 is the number of days in 4 years
	        long r4 = Mod(julianDay - jdEpochOffset_0, 1461); // number of days within
	                                                        // a 4 year period
	        long n = Mod(r4, 365) + 365 * Quotient(r4, 1460); // days in present
	                                                          // year
	
	        long aprime = 4 // number of years in the leap year cycle
	                * Quotient(julianDay - jdEpochOffset_0, 1461) // number of 4 year
	                                                            // periods between
	                                                            // epochs?
	                + Quotient(r4, 365) // number of regular years?
	                - Quotient(r4, 1460) // number of 4 year periods?
	                - 1;
	
	        int _year = (int) (aprime + 1);
	        int _month = (int) (Quotient(n, 30));
	        int _day = Mod(n, 30) + 1;
	
	        return new Int32[] { ((int)(_year)), ((int)(_month)),
	                ((int)(_day)) };
	    }
	
	    /// <summary>
	    /// These utility functions can be replaced by equivalent functions from ICU
	    /// if available.
	    /// </summary>
	    ///
	    static internal int Mod(long i, int j) {
	        return (int) (i - (long) j * Quotient(i, j));
	    }
	
	    static internal int Quotient(long i, int j) {
	        return (int) Math.Floor((double) i / j);
	    }
	}
}
