/*
 *******************************************************************************
 * Copyright (C) 1996-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Globalization;
	using System.IO;
	using System.Resources;
	using System.Runtime.CompilerServices;
     using ILOG.J2CsMapping.Util;
     using ILOG.J2CsMapping.Util;
	
	/// <summary>
	/// An abstract class representing a holiday.
	/// </summary>
	///
	/// @draft ICU 2.8 (retainAll)
	/// @provisional This API might change or be removed in a future release.
	public abstract class Holiday : DateRule {
	    
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public static Holiday[] GetHolidays() {
	        return GetHolidays(IBM.ICU.Util.ULocale.GetDefault());
	    }
	
	    
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public static Holiday[] GetHolidays(Locale locale) {
	        return GetHolidays(IBM.ICU.Util.ULocale.ForLocale(locale));
	    }
	
	    
	    /// @draft ICU 3.2
	    /// @provisional This API might change or be removed in a future release.
	    public static Holiday[] GetHolidays(ULocale locale) {
	        Holiday[] result = noHolidays;
	
	        try {
	            ResourceBundle bundle = IBM.ICU.Util.UResourceBundle.GetBundleInstance(
	                    "com.ibm.icu.impl.data.HolidayBundle", locale);
	
	            result = (Holiday[]) bundle.GetObject("holidays");
	        } catch (MissingManifestResourceException e) {
	        }
	        return result;
	    }
	
	    /// <summary>
	    /// Return the first occurrance of this holiday on or after the given date
	    /// </summary>
	    ///
	    /// <param name="start">Only holidays on or after this date are returned.</param>
	    /// <returns>The date on which this holiday occurs, or null if it does not
	    /// occur on or after the start date.</returns>
	    /// <seealso cref="M:IBM.ICU.Util.Holiday.FirstBetween(null, null)"/>
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual DateTime FirstAfter(DateTime start) {
	        return rule.FirstAfter(start);
	    }
	
	    /// <summary>
	    /// Return the first occurrance of this holiday that is on or after the given
	    /// start date and before the given end date.
	    /// </summary>
	    ///
	    /// <param name="start">Only occurrances on or after this date are returned.</param>
	    /// <param name="end">Only occurrances before this date are returned.</param>
	    /// <returns>The date on which this event occurs, or null if it does not occur
	    /// between the start and end dates.</returns>
	    /// <seealso cref="M:IBM.ICU.Util.Holiday.FirstAfter(null)"/>
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual DateTime FirstBetween(DateTime start, DateTime end) {
	        return rule.FirstBetween(start, end);
	    }
	
	    /// <summary>
	    /// Checks whether this holiday falls on the given date. This does
	    /// <em>not</em> take time of day into account; instead it checks whether the
	    /// holiday and the given date are on the same day.
	    /// </summary>
	    ///
	    /// <param name="date">The date to check.</param>
	    /// <returns>true if this holiday occurs on the given date.</returns>
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual bool IsOn(DateTime date) {
	        // System.out.println(name + ".isOn(" + date.toString() + "):");
	        return rule.IsOn(date);
	    }
	
	    /// <summary>
	    /// Check whether this holiday occurs at least once between the two dates
	    /// given.
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public virtual bool IsBetween(DateTime start, DateTime end) {
	        return rule.IsBetween(start, end);
	    }
	
	    /// <summary>
	    /// Construct a new Holiday object. This is for use by subclasses only. This
	    /// constructs a new holiday with the given name and date rules.
	    /// </summary>
	    ///
	    /// <param name="name">The name of this holiday. The getDisplayName method uses thisstring as a key to look up the holiday's name a resourcebundle object named HolidayBundle.</param>
	    /// <param name="rule">The date rules used for determining when this holiday falls.Holiday's implementation of the DateRule inteface simplydelegates to this DateRule object.</param>
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    protected internal Holiday(String name, DateRule rule) {
	        this.name = name;
	        this.rule = rule;
	    }
	
	    /// <summary>
	    /// Return the name of this holiday in the language of the default locale
	    /// </summary>
	    ///
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public String GetDisplayName() {
	        return GetDisplayName(IBM.ICU.Util.ULocale.GetDefault());
	    }
	
	    /// <summary>
	    /// Return the name of this holiday in the language of the specified locale
	    /// The <c>name</c> parameter passed to this object's constructor is
	    /// used as a key to look up the holiday's localized name in a ResourceBundle
	    /// object named HolidayBundle.
	    /// </summary>
	    ///
	    /// <param name="locale">A locale specifying the language in which the name is desired.</param>
	    /// <seealso cref="null"/>
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public String GetDisplayName(Locale locale) {
	        return GetDisplayName(IBM.ICU.Util.ULocale.ForLocale(locale));
	    }
	
	    /// <summary>
	    /// Return the name of this holiday in the language of the specified locale
	    /// The <c>name</c> parameter passed to this object's constructor is
	    /// used as a key to look up the holiday's localized name in a ResourceBundle
	    /// object named HolidayBundle.
	    /// </summary>
	    ///
	    /// <param name="locale">A locale specifying the language in which the name is desired.</param>
	    /// <seealso cref="null"/>
	    /// @draft ICU 3.2
	    /// @provisional This API might change or be removed in a future release.
	    public String GetDisplayName(ULocale locale) {
	        String name = this.name;
	
	        try {
	            ResourceBundle bundle = IBM.ICU.Util.UResourceBundle.GetBundleInstance(
	                    "HolidayBundle", locale);
	            name = bundle.GetString(name);
	        } catch (MissingManifestResourceException e) {
	            // System.out.println("Using default display name for " + name);
	        }
	        return name;
	    }
	
	    
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public DateRule GetRule() {
	        return rule;
	    }
	
	    
	    /// @draft ICU 2.8
	    /// @provisional This API might change or be removed in a future release.
	    public void SetRule(DateRule rule) {
	        this.rule = rule;
	    }
	
	    private String name;
	
	    private DateRule rule;
	
	    private static Holiday[] noHolidays = {};
	}
}
