/*
 *******************************************************************************
 * Copyright (C) 1996-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Charset {
	
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	public class XEquivalenceClass {
	
	    // quick test
	    static public void Main(String[] args) {
	        XEquivalenceClass foo1 = new XEquivalenceClass("NONE");
	        String[][] tests = { new String[] { "b", "a1" }, new String[] { "b", "c" },
	                new String[] { "a1", "c" }, new String[] { "d", "e" },
	                new String[] { "e", "f" }, new String[] { "c", "d" } };
	        for (int i = 0; i < tests.Length; ++i) {
	            System.Console.Out.WriteLine("Adding: " + tests[i][0] + ", " + tests[i][1]);
	            foo1.Add(tests[i][0], tests[i][1], ((int)(i)));
	            for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(foo1.GetExplicitItems().GetEnumerator()); it.HasNext();) {
	                Object item = it.Next();
	                System.Console.Out.WriteLine("\t" + item + ";\t" + foo1.GetSample(item)
	                        + ";\t" + foo1.GetEquivalences(item));
	                System.Console.Out.WriteLine("\t\t"
	                        + foo1.GetReasons(item, foo1.GetSample(item)));
	            }
	        }
	    }
	
	    private IDictionary toPartitionSet;
	
	    private IDictionary obj_obj_reasons;
	
	    private Object defaultReason;
	
	    /// <summary>
	    /// empty, as if just created
	    /// </summary>
	    ///
	    public XEquivalenceClass Clear(Object defaultReasonArg) {
	        toPartitionSet.Clear();
	        obj_obj_reasons.Clear();
	        this.defaultReason = defaultReasonArg;
	        return this;
	    }
	
	    /// <summary>
	    /// Create class with comparator, and default reason.
	    /// </summary>
	    ///
	    public XEquivalenceClass(Object defaultReason_0) {
	        this.toPartitionSet = new Hashtable();
	        this.obj_obj_reasons = new Hashtable();
	        this.defaultReason = defaultReason_0;
	    }
	
	    /// <summary>
	    /// Add two equivalent items, with NO_REASON for the reason.
	    /// </summary>
	    ///
	    public XEquivalenceClass Add(Object a, Object b) {
	        return Add(a, b, null);
	    }
	
	    /// <summary>
	    /// Add two equivalent items, plus a reason. The reason is only used for
	    /// getReasons
	    /// </summary>
	    ///
	    public XEquivalenceClass Add(Object a, Object b, Object reason) {
	        if (a.Equals(b))
	            return this;
	        if (reason == null)
	            reason = defaultReason;
	        AddReason(a, b, reason);
	        AddReason(b, a, reason);
	        ILOG.J2CsMapping.Collections.ISet aPartitionSet = (ISet) ILOG.J2CsMapping.Collections.Collections.Get(toPartitionSet,a);
	        ILOG.J2CsMapping.Collections.ISet bPartitionSet = (ISet) ILOG.J2CsMapping.Collections.Collections.Get(toPartitionSet,b);
	        if (aPartitionSet == null) {
	            if (bPartitionSet == null) { // both null, set up bSet
	                bPartitionSet = new HashedSet();
	                ILOG.J2CsMapping.Collections.Generics.Collections.Add(bPartitionSet,b);
	                ILOG.J2CsMapping.Collections.Collections.Put(toPartitionSet,b,bPartitionSet);
	            }
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(bPartitionSet,a);
	            ILOG.J2CsMapping.Collections.Collections.Put(toPartitionSet,a,bPartitionSet);
	        } else if (bPartitionSet == null) { // aSet is not null, bSet null
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(aPartitionSet,b);
	            ILOG.J2CsMapping.Collections.Collections.Put(toPartitionSet,b,aPartitionSet);
	        } else if (aPartitionSet != bPartitionSet) { // both non-null, not
	                                                     // equal, merge. Equality
	                                                     // check ok here
	            ILOG.J2CsMapping.Collections.Generics.Collections.AddAll(bPartitionSet,aPartitionSet);
	            // remap every x that had x => bPartitionSet
	            for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(bPartitionSet.GetEnumerator()); it.HasNext();) {
	                ILOG.J2CsMapping.Collections.Collections.Put(toPartitionSet,it.Next(),aPartitionSet);
	            }
	        }
	        return this;
	    }
	
	    /// <summary>
	    /// Add all the information from the other class
	    /// </summary>
	    ///
	    public XEquivalenceClass AddAll(XEquivalenceClass other) {
	        // For now, does the simple, not optimized version
	        for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(new ILOG.J2CsMapping.Collections.ListSet(other.obj_obj_reasons.Keys).GetEnumerator()); it
	                .HasNext();) {
	            Object a = it.Next();
	            IDictionary obj_reasons = (IDictionary) ILOG.J2CsMapping.Collections.Collections.Get(other.obj_obj_reasons,a);
	            for (IIterator it2 = new ILOG.J2CsMapping.Collections.IteratorAdapter(new ILOG.J2CsMapping.Collections.ListSet(obj_reasons.Keys).GetEnumerator()); it2.HasNext();) {
	                Object b = it2.Next();
	                ILOG.J2CsMapping.Collections.ISet reasons = (ISet) ILOG.J2CsMapping.Collections.Collections.Get(obj_reasons,b);
	                for (IIterator it3 = new ILOG.J2CsMapping.Collections.IteratorAdapter(reasons.GetEnumerator()); it3.HasNext();) {
	                    Object reason = it3.Next();
	                    Add(a, b, reason);
	                }
	            }
	        }
	        return this;
	    }
	
	    private void AddReason(Object a, Object b, Object reason) {
	        IDictionary obj_reasons = (IDictionary) ILOG.J2CsMapping.Collections.Collections.Get(obj_obj_reasons,a);
	        if (obj_reasons == null)
	            ILOG.J2CsMapping.Collections.Collections.Put(obj_obj_reasons,a,obj_reasons = new Hashtable());
	        ILOG.J2CsMapping.Collections.ISet reasons = (ISet) ILOG.J2CsMapping.Collections.Collections.Get(obj_reasons,b);
	        if (reasons == null)
	            ILOG.J2CsMapping.Collections.Collections.Put(obj_reasons,b,reasons = new HashedSet());
	        ILOG.J2CsMapping.Collections.Generics.Collections.Add(reasons,reason);
	    }
	
	    /// <summary>
	    /// Returns a set of all the explicit items in the equivalence set. (Any
	    /// non-explicit items only have themselves as equivalences.)
	    /// </summary>
	    ///
	    public ILOG.J2CsMapping.Collections.ISet GetExplicitItems() {
	        return ILOG.J2CsMapping.Collections.Generics.Collections.UnmodifiableSet(new ILOG.J2CsMapping.Collections.ListSet(toPartitionSet.Keys));
	    }
	
	    /// <summary>
	    /// Returns an unmodifiable set of all the equivalent objects
	    /// </summary>
	    ///
	    public ILOG.J2CsMapping.Collections.ISet GetEquivalences(Object a) {
	        ILOG.J2CsMapping.Collections.ISet aPartitionSet = (ISet) ILOG.J2CsMapping.Collections.Collections.Get(toPartitionSet,a);
	        if (aPartitionSet == null) { // manufacture an equivalence
	            aPartitionSet = new HashedSet();
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(aPartitionSet,a);
	        }
	        return ILOG.J2CsMapping.Collections.Generics.Collections.UnmodifiableSet(aPartitionSet);
	    }
	
	    public ILOG.J2CsMapping.Collections.ISet GetEquivalenceSets() {
	        ILOG.J2CsMapping.Collections.ISet result = new HashedSet();
	        for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(new ILOG.J2CsMapping.Collections.ListSet(toPartitionSet.Keys).GetEnumerator()); it.HasNext();) {
	            Object item = it.Next();
	            ILOG.J2CsMapping.Collections.ISet partition = (ISet) ILOG.J2CsMapping.Collections.Collections.Get(toPartitionSet,item);
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,ILOG.J2CsMapping.Collections.Generics.Collections.UnmodifiableSet(partition));
	        }
	        return result;
	    }
	
	    /// <summary>
	    /// returns true iff a is equivalent to b (or a.equals b)
	    /// </summary>
	    ///
	    public bool IsEquivalent(Object a, Object b) {
	        if (a.Equals(b))
	            return true;
	        ILOG.J2CsMapping.Collections.ISet aPartitionSet = (ISet) ILOG.J2CsMapping.Collections.Collections.Get(toPartitionSet,a);
	        if (aPartitionSet == null)
	            return false;
	        return ILOG.J2CsMapping.Collections.Collections.Contains(b,aPartitionSet);
	    }
	
	    /// <summary>
	    /// Gets a sample object in the equivalence set for a.
	    /// </summary>
	    ///
	    public Object GetSample(Object a) {
	        ILOG.J2CsMapping.Collections.ISet aPartitionSet = (ISet) ILOG.J2CsMapping.Collections.Collections.Get(toPartitionSet,a);
	        if (aPartitionSet == null)
	            return a; // singleton
	        return new ILOG.J2CsMapping.Collections.IteratorAdapter(aPartitionSet.GetEnumerator()).Next();
	    }
	
	    public interface Filter {
	        bool Matches(Object o);
	    }
	
	    public Object GetSample(Object a, XEquivalenceClass.Filter  f) {
	        ILOG.J2CsMapping.Collections.ISet aPartitionSet = (ISet) ILOG.J2CsMapping.Collections.Collections.Get(toPartitionSet,a);
	        if (aPartitionSet == null)
	            return a; // singleton
	        for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(aPartitionSet.GetEnumerator()); it.HasNext();) {
	            Object obj = it.Next();
	            if (f.Matches(obj))
	                return obj;
	        }
	        return a;
	    }
	
	    /// <summary>
	    /// gets the set of all the samples, one from each equivalence class.
	    /// </summary>
	    ///
	    public ILOG.J2CsMapping.Collections.ISet GetSamples() {
	        ILOG.J2CsMapping.Collections.ISet seenAlready = new HashedSet();
	        ILOG.J2CsMapping.Collections.ISet result = new HashedSet();
	        for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(new ILOG.J2CsMapping.Collections.ListSet(toPartitionSet.Keys).GetEnumerator()); it.HasNext();) {
	            Object item = it.Next();
	            if (ILOG.J2CsMapping.Collections.Collections.Contains(item,seenAlready))
	                continue;
	            ILOG.J2CsMapping.Collections.ISet partition = (ISet) ILOG.J2CsMapping.Collections.Collections.Get(toPartitionSet,item);
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,new ILOG.J2CsMapping.Collections.IteratorAdapter(partition.GetEnumerator()).Next());
	            ILOG.J2CsMapping.Collections.Generics.Collections.AddAll(partition,seenAlready);
	        }
	        return result;
	    }
	
	    /// <summary>
	    /// Returns a list of lists. Each sublist is in the form [reasons, obj,
	    /// reasons, obj,..., reasons] where each reasons is a set of reasons to go
	    /// from one obj to the next.<br>
	    /// Returns null if there is no connection.
	    /// </summary>
	    ///
	    public IList GetReasons(Object a, Object b) {
	        // use dumb algorithm for getting shortest path
	        // don't bother with optimization
	        ILOG.J2CsMapping.Collections.ISet aPartitionSet = (ISet) ILOG.J2CsMapping.Collections.Collections.Get(toPartitionSet,a);
	        ILOG.J2CsMapping.Collections.ISet bPartitionSet = (ISet) ILOG.J2CsMapping.Collections.Collections.Get(toPartitionSet,b);
	
	        // see if they connect
	        if (aPartitionSet == null || bPartitionSet == null
	                || aPartitionSet != bPartitionSet || a.Equals(b))
	            return null;
	
	        ArrayList list = new ArrayList();
	        ILOG.J2CsMapping.Collections.Generics.Collections.Add(list,a);
	        ArrayList lists = new ArrayList();
	        ILOG.J2CsMapping.Collections.Generics.Collections.Add(lists,list);
	
	        // this will contain the results
	        IList foundLists = new ArrayList();
	        ILOG.J2CsMapping.Collections.ISet sawLastTime = new HashedSet();
	        ILOG.J2CsMapping.Collections.Generics.Collections.Add(sawLastTime,a);
	
	        // each time, we extend the lists by one (adding multiple other lists)
	        while (foundLists.Count == 0) {
	            ArrayList extendedList = new ArrayList();
	            ILOG.J2CsMapping.Collections.ISet sawThisTime = new HashedSet();
	            for (IIterator it = new ILOG.J2CsMapping.Collections.IteratorAdapter(lists.GetEnumerator()); it.HasNext();) {
	                ArrayList lista = (ArrayList) it.Next();
	                Object last = lista[lista.Count - 1];
	                IDictionary obj_reasons = (IDictionary) ILOG.J2CsMapping.Collections.Collections.Get(obj_obj_reasons,last);
	                for (IIterator it2 = new ILOG.J2CsMapping.Collections.IteratorAdapter(new ILOG.J2CsMapping.Collections.ListSet(obj_reasons.Keys).GetEnumerator()); it2
	                        .HasNext();) {
	                    Object item = it2.Next();
	                    if (ILOG.J2CsMapping.Collections.Collections.Contains(item,sawLastTime)) {
	                        continue; // skip since we have shorter
	                    }
	                    ILOG.J2CsMapping.Collections.Generics.Collections.Add(sawThisTime,item);
	                    ILOG.J2CsMapping.Collections.ISet reasons = (ISet) ILOG.J2CsMapping.Collections.Collections.Get(obj_reasons,item);
	                    ArrayList lista2 = (ArrayList) lista.Clone();
	                    ILOG.J2CsMapping.Collections.Generics.Collections.Add(lista2,reasons);
	                    ILOG.J2CsMapping.Collections.Generics.Collections.Add(lista2,item);
	                    ILOG.J2CsMapping.Collections.Generics.Collections.Add(extendedList,lista2);
	                    if (item.Equals(b)) {
	                        // remove first and last
	                        ArrayList found = (ArrayList) lista2.Clone();
	                        ILOG.J2CsMapping.Collections.Collections.RemoveAt(found,0);
	                        ILOG.J2CsMapping.Collections.Collections.RemoveAt(found,found.Count - 1);
	                        ILOG.J2CsMapping.Collections.Generics.Collections.Add(foundLists,found);
	                    }
	                }
	            }
	            lists = extendedList;
	            ILOG.J2CsMapping.Collections.Generics.Collections.AddAll(sawThisTime,sawLastTime);
	        }
	        return foundLists;
	    }
	}}
