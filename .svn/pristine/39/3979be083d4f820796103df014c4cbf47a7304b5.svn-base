/*
 * *****************************************************************************
 * Copyright (C) 2005-2007, International Business Machines Corporation and * others.
 * All Rights Reserved. *
 * *****************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl {
	
	using IBM.ICU.Impl;
	using IBM.ICU.Util;
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using ILOG.J2CsMapping.Threading;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Globalization;
	using System.IO;
	using System.Reflection;
	using System.Resources;
	using System.Runtime.CompilerServices;
	using System.Text;
     using ILOG.J2CsMapping.Util;
     using ILOG.J2CsMapping.Util;
	
	public class ICUResourceBundle : UResourceBundle {
	    /// <summary>
	    /// The data path to be used with getBundleInstance API
	    /// </summary>
	    ///
	    /// @draft ICU 3.0
	    protected internal const String ICU_DATA_PATH = "com/ibm/icu/impl/";
	
	    /// <summary>
	    /// The data path to be used with getBundleInstance API
	    /// </summary>
	    ///
	    /// @draft ICU 3.0
	    public const String ICU_BUNDLE = "data/icudt"
	            + IBM.ICU.Util.VersionInfo.ICU_DATA_VERSION;
	
	    /// <summary>
	    /// The base name of ICU data to be used with getBundleInstance API
	    /// </summary>
	    ///
	    /// @draft ICU 3.0
	    public const String ICU_BASE_NAME = ICU_DATA_PATH + ICU_BUNDLE;
	
	    /// <summary>
	    /// The base name of collation data to be used with getBundleInstance API
	    /// </summary>
	    ///
	    /// @draft ICU 3.0
	    public const String ICU_COLLATION_BASE_NAME = ICU_BASE_NAME
	            + "/coll";
	
	    /// <summary>
	    /// The base name of rbbi data to be used with getData API
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    public const String ICU_BRKITR_NAME = "/brkitr";
	
	    /// <summary>
	    /// The base name of rbbi data to be used with getBundleInstance API
	    /// </summary>
	    ///
	    /// @draft ICU 3.6
	    public const String ICU_BRKITR_BASE_NAME = ICU_BASE_NAME
	            + ICU_BRKITR_NAME;
	
	    /// <summary>
	    /// The base name of rbnf data to be used with getBundleInstance API
	    /// </summary>
	    ///
	    /// @draft ICU 3.0
	    public const String ICU_RBNF_BASE_NAME = ICU_BASE_NAME + "/rbnf";
	
	    /// <summary>
	    /// The base name of transliterator data to be used with getBundleInstance
	    /// API
	    /// </summary>
	    ///
	    /// @draft ICU 3.0
	    public const String ICU_TRANSLIT_BASE_NAME = ICU_BASE_NAME
	            + "/translit";
	
	    /// <summary>
	    /// The actual path of the resource
	    /// </summary>
	    ///
	    protected internal String resPath;
	
	    protected internal const long UNSIGNED_INT_MASK = 0xffffffffL;
	
	    /// <summary>
	    /// The class loader constant to be used with getBundleInstance API
	    /// </summary>
	    ///
	    /// @draft ICU 3.0
	    public static readonly Assembly ICU_DATA_CLASS_LOADER;
	    /// <summary>
	    /// The name of the resource containing the installed locales
	    /// </summary>
	    ///
	    /// @draft ICU 3.0
	    protected internal const String INSTALLED_LOCALES = "InstalledLocales";
	
	    public const int FROM_FALLBACK = 1, FROM_ROOT = 2, FROM_DEFAULT = 3,
	            FROM_LOCALE = 4;
	
	    private int loadingStatus;
	
	    public override void SetLoadingStatus(int newStatus) {
	        loadingStatus = newStatus;
	    }
	
	    /// <summary>
	    /// Returns the loading status of a particular resource.
	    /// </summary>
	    ///
	    /// <returns>FROM_FALLBACK if the resource is fetched from fallback bundle
	    /// FROM_ROOT if the resource is fetched from root bundle.
	    /// FROM_DEFAULT if the resource is fetched from the default locale.</returns>
	    public int GetLoadingStatus() {
	        return loadingStatus;
	    }
	
	    public static void SetLoadingStatus(UResourceBundle b,
	            String requestedLocale) {
	        ICUResourceBundle bundle = (ICUResourceBundle) b;
	        String locale = bundle.GetLocaleID();
	        if (locale.Equals("root")) {
	            bundle.SetLoadingStatus(FROM_ROOT);
	            return;
	        }
	        if (locale.Equals(requestedLocale)) {
	            bundle.SetLoadingStatus(FROM_LOCALE);
	        } else {
	            bundle.SetLoadingStatus(FROM_FALLBACK);
	        }
	    }
	
	    /// <summary>
	    /// Returns the respath of this bundle
	    /// </summary>
	    ///
	    /// <returns></returns>
	    public String GetResPath() {
	        return resPath;
	    }
	
	    /// <exclude/>
	    /// <summary>
	    /// Returns a functionally equivalent locale, considering keywords as well,
	    /// for the specified keyword.
	    /// </summary>
	    ///
	    /// <param name="baseName">resource specifier</param>
	    /// <param name="resName">top level resource to consider (such as "collations")</param>
	    /// <param name="keyword">a particular keyword to consider (such as "collation" )</param>
	    /// <param name="locID">The requested locale</param>
	    /// <param name="isAvailable">If non-null, 1-element array of fillin parameter thatindicates whether the requested locale was available. Thelocale is defined as 'available' if it physically existswithin the specified tree and included in 'InstalledLocales'.</param>
	    /// <returns>the locale</returns>
	    public static ULocale GetFunctionalEquivalent(String baseName,
	            String resName, String keyword, ULocale locID,
	            bool[] isAvailable) {
	        String kwVal = locID.GetKeywordValue(keyword);
	        String baseLoc = locID.GetBaseName();
	        String defStr = null;
	        ULocale parent = new ULocale(baseLoc);
	        ULocale defLoc = null; // locale where default (found) resource is
	        bool lookForDefault = false; // true if kwVal needs to be set
	        ULocale fullBase = null; // base locale of found (target) resource
	        int defDepth = 0; // depth of 'default' marker
	        int resDepth = 0; // depth of found resource;
	
	        if ((kwVal == null) || (kwVal.Length == 0)
	                || kwVal.Equals(DEFAULT_TAG)) {
	            kwVal = ""; // default tag is treated as no keyword
	            lookForDefault = true;
	        }
	
	        // Check top level locale first
	        ICUResourceBundle r = null;
	
	        r = (ICUResourceBundle) IBM.ICU.Util.UResourceBundle.GetBundleInstance(baseName,
	                parent);
	        if (isAvailable != null) {
	            isAvailable[0] = false;
	            ULocale[] availableULocales = GetAvailEntry(baseName)
	                    .GetULocaleList();
	            for (int i = 0; i < availableULocales.Length; i++) {
	                if (parent.Equals(availableULocales[i])) {
	                    isAvailable[0] = true;
	                    break;
	                }
	            }
	        }
	        // determine in which locale (if any) the currently relevant 'default'
	        // is
	        do {
	            try {
	                ICUResourceBundle irb = (ICUResourceBundle) r.Get(resName);
	                defStr = irb.GetString(DEFAULT_TAG);
	                if (lookForDefault == true) {
	                    kwVal = defStr;
	                    lookForDefault = false;
	                }
	                defLoc = r.GetULocale();
	            } catch (MissingManifestResourceException t) {
	                // Ignore error and continue search.
	            }
	            if (defLoc == null) {
	                r = (ICUResourceBundle) r.GetParent();
	                defDepth++;
	            }
	        } while ((r != null) && (defLoc == null));
	
	        // Now, search for the named resource
	        parent = new ULocale(baseLoc);
	        r = (ICUResourceBundle) IBM.ICU.Util.UResourceBundle.GetBundleInstance(baseName,
	                parent);
	        // determine in which locale (if any) the named resource is located
	        do {
	            try {
	                ICUResourceBundle irb_0 = (ICUResourceBundle) r.Get(resName);
	                /* UResourceBundle urb = */irb_0.Get(kwVal);
	                fullBase = irb_0.GetULocale();
	                // If the get() completed, we have the full base locale
	                // If we fell back to an ancestor of the old 'default',
	                // we need to re calculate the "default" keyword.
	                if ((fullBase != null) && ((resDepth) > defDepth)) {
	                    defStr = irb_0.GetString(DEFAULT_TAG);
	                    defLoc = r.GetULocale();
	                    defDepth = resDepth;
	                }
	            } catch (MissingManifestResourceException t_1) {
	                // Ignore error,
	            }
	            if (fullBase == null) {
	                r = (ICUResourceBundle) r.GetParent();
	                resDepth++;
	            }
	        } while ((r != null) && (fullBase == null));
	
	        if (fullBase == null && // Could not find resource 'kwVal'
	                (defStr != null) && // default was defined
	                !defStr.Equals(kwVal)) { // kwVal is not default
	            // couldn't find requested resource. Fall back to default.
	            kwVal = defStr; // Fall back to default.
	            parent = new ULocale(baseLoc);
	            r = (ICUResourceBundle) IBM.ICU.Util.UResourceBundle.GetBundleInstance(baseName,
	                    parent);
	            resDepth = 0;
	            // determine in which locale (if any) the named resource is located
	            do {
	                try {
	                    ICUResourceBundle irb_2 = (ICUResourceBundle) r.Get(resName);
	                    UResourceBundle urb = irb_2.Get(kwVal);
	
	                    // if we didn't fail before this..
	                    fullBase = r.GetULocale();
	
	                    // If the fetched item (urb) is in a different locale than
	                    // our outer locale (r/fullBase)
	                    // then we are in a 'fallback' situation. treat as a missing
	                    // resource situation.
	                    if (!fullBase.ToString().Equals(urb.GetLocale().ToString())) {
	                        fullBase = null; // fallback condition. Loop and try
	                                         // again.
	                    }
	
	                    // If we fell back to an ancestor of the old 'default',
	                    // we need to re calculate the "default" keyword.
	                    if ((fullBase != null) && ((resDepth) > defDepth)) {
	                        defStr = irb_2.GetString(DEFAULT_TAG);
	                        defLoc = r.GetULocale();
	                        defDepth = resDepth;
	                    }
	                } catch (MissingManifestResourceException t_3) {
	                    // Ignore error, continue search.
	                }
	                if (fullBase == null) {
	                    r = (ICUResourceBundle) r.GetParent();
	                    resDepth++;
	                }
	            } while ((r != null) && (fullBase == null));
	        }
	
	        if (fullBase == null) {
	            throw new MissingManifestResourceException("Could not find locale containing requested or default keyword.");
	        }
	
	        if (defStr.Equals(kwVal) // if default was requested and
	                && resDepth <= defDepth) { // default was set in same locale or
	                                           // child
	            return fullBase; // Keyword value is default - no keyword needed in
	                             // locale
	        } else {
	            return new ULocale(fullBase.ToString() + "@" + keyword + "="
	                    + kwVal);
	        }
	    }
	
	    /// <exclude/>
	    /// <summary>
	    /// Given a tree path and keyword, return a string enumeration of all
	    /// possible values for that keyword.
	    /// </summary>
	    ///
	    /// <param name="baseName">resource specifier</param>
	    /// <param name="keyword">a particular keyword to consider, must match a top levelresource name within the tree. (i.e. "collations")</param>
	    public static String[] GetKeywordValues(String baseName,
	            String keyword) {
	        ILOG.J2CsMapping.Collections.ISet keywords = new HashedSet();
	        ULocale[] locales = CreateULocaleList(baseName, ICU_DATA_CLASS_LOADER);
	        int i;
	
	        for (i = 0; i < locales.Length; i++) {
	            try {
	                UResourceBundle b = IBM.ICU.Util.UResourceBundle.GetBundleInstance(baseName,
	                        locales[i]);
	                // downcast to ICUResourceBundle?
	                ICUResourceBundle irb = (ICUResourceBundle) (b
	                        .GetObject(keyword));
                    IIterator<String> e = irb.GetKeys();
	                Object s;
	                while (e.HasNext()) {
	                    s = e.Next();
	                    if ((s  is  String) && !DEFAULT_TAG.Equals(s)) {
	                        // don't add 'default' items
	                        ILOG.J2CsMapping.Collections.Generics.Collections.Add(keywords,s);
	                    }
	                }
	            } catch (Exception t) {
	                // System.err.println("Error in - " + new Integer(i).toString()
	                // + " - " + t.toString());
	                // ignore the err - just skip that resource
	            }
	        }
	        return (String[]) ILOG.J2CsMapping.Collections.Generics.Collections.ToArray(keywords,new String[0]);
	    }
	
	    /// <summary>
	    /// This method performs multilevel fallback for fetching items from the
	    /// bundle e.g: If resource is in the form de__PHONEBOOK{ collations{
	    /// default{ "phonebook"} } } If the value of "default" key needs to be
	    /// accessed, then do: <code>
	    /// UResourceBundle bundle = UResourceBundle.getBundleInstance("de__PHONEBOOK");
	    /// ICUResourceBundle result = null;
	    /// if(bundle instanceof ICUResourceBundle){
	    /// result = ((ICUResourceBundle) bundle).getWithFallback("collations/default");
	    /// }
	    /// </code>
	    /// </summary>
	    ///
	    /// <param name="path">The path to the required resource key</param>
	    /// <returns>resource represented by the key</returns>
	    /// <exception cref="MissingResourceException"></exception>
	    public ICUResourceBundle GetWithFallback(String path) {
	        ICUResourceBundle result = null;
	        ICUResourceBundle actualBundle = this;
	
	        // now recuse to pick up sub levels of the items
	        result = FindResourceWithFallback(path, actualBundle, null);
	
	        if (result == null) {
	            throw new MissingManifestResourceException("Can't find resource for bundle "
	                                        + ((object) this).GetType().FullName + ", key " + GetType());
	        }
	        return result;
	    }
	
	    // will throw type mismatch exception if the resource is not a string
	    public String GetStringWithFallback(String path) {
	        return GetWithFallback(path).GetString();
	    }
	
	    /// <summary>
	    /// Return a set of the locale names supported by a collection of resource
	    /// bundles.
	    /// </summary>
	    ///
	    /// <param name="bundlePrefix">the prefix of the resource bundles to use.</param>
	    public static ILOG.J2CsMapping.Collections.ISet GetAvailableLocaleNameSet(String bundlePrefix) {
	        return GetAvailEntry(bundlePrefix).GetLocaleNameSet();
	    }
	
	    /// <summary>
	    /// Return a set of all the locale names supported by a collection of
	    /// resource bundles.
	    /// </summary>
	    ///
	    public static ILOG.J2CsMapping.Collections.ISet GetFullLocaleNameSet() {
	        return GetFullLocaleNameSet(ICU_BASE_NAME);
	    }
	
	    /// <summary>
	    /// Return a set of all the locale names supported by a collection of
	    /// resource bundles.
	    /// </summary>
	    ///
	    /// <param name="bundlePrefix">the prefix of the resource bundles to use.</param>
	    public static ILOG.J2CsMapping.Collections.ISet GetFullLocaleNameSet(String bundlePrefix) {
	        return GetAvailEntry(bundlePrefix).GetFullLocaleNameSet();
	    }
	
	    /// <summary>
	    /// Return a set of the locale names supported by a collection of resource
	    /// bundles.
	    /// </summary>
	    ///
	    public static ILOG.J2CsMapping.Collections.ISet GetAvailableLocaleNameSet() {
	        return GetAvailableLocaleNameSet(ICU_BASE_NAME);
	    }
	
	    /// <summary>
	    /// Get the set of Locales installed in the specified bundles.
	    /// </summary>
	    ///
	    /// <returns>the list of available locales</returns>
	    /// @draft ICU 3.0
	    public static ULocale[] GetAvailableULocales(String baseName) {
	        return GetAvailEntry(baseName).GetULocaleList();
	    }
	
	    /// <summary>
	    /// Get the set of ULocales installed the base bundle.
	    /// </summary>
	    ///
	    /// <returns>the list of available locales</returns>
	    /// @draft ICU 3.0
	    public static ULocale[] GetAvailableULocales() {
	        return GetAvailableULocales(ICU_BASE_NAME);
	    }
	
	    /// <summary>
	    /// Get the set of Locales installed in the specified bundles.
	    /// </summary>
	    ///
	    /// <returns>the list of available locales</returns>
	    /// @draft ICU 3.0
        public static Locale[] GetAvailableLocales(String baseName)
        {
	        return GetAvailEntry(baseName).GetLocaleList();
	    }
	
	    /// <summary>
	    /// Get the set of Locales installed the base bundle.
	    /// </summary>
	    ///
	    /// <returns>the list of available locales</returns>
	    /// @draft ICU 3.0
        public static Locale[] GetAvailableLocales()
        {
	        return GetAvailEntry(ICU_BASE_NAME).GetLocaleList();
	    }
	
	    /// <summary>
	    /// Convert a list of ULocales to a list of Locales. ULocales with a script
	    /// code will not be converted since they cannot be represented as a Locale.
	    /// This means that the two lists will <b>not</b> match one-to-one, and that
	    /// the returned list might be shorter than the input list.
	    /// </summary>
	    ///
	    /// <param name="ulocales">a list of ULocales to convert to a list of Locales.</param>
	    /// <returns>the list of converted ULocales</returns>
	    /// @draft ICU 3.0
	    public static Locale[] GetLocaleList(ULocale[] ulocales) {
	        ArrayList list = new ArrayList();
	        for (int i = 0; i < ulocales.Length; i++) {
	            // if the ULocale does not contain a script code
	            // only then convert it to a Locale object
	            if (ulocales[i].GetScript().Length == 0) {
	                ILOG.J2CsMapping.Collections.Generics.Collections.Add(list,ulocales[i].ToLocale());
	            }
	        }
            return (Locale[])ILOG.J2CsMapping.Collections.Generics.Collections.ToArray(list, new Locale[list.Count]);
	    }
	
	    /// <summary>
	    /// Returns the locale of this resource bundle. This method can be used after
	    /// a call to getBundle() to determine whether the resource bundle returned
	    /// really corresponds to the requested locale or is a fallback.
	    /// </summary>
	    ///
	    /// <returns>the locale of this resource bundle</returns>
        public override Locale GetLocale()
        {
	        return GetULocale().ToLocale();
	    }
	
	    // ========== privates ==========
	    private const String ICU_RESOURCE_INDEX = "res_index";
	
	    private const String DEFAULT_TAG = "default";
	
	    // Flag for enabling/disabling debugging code
	    private static readonly bool DEBUG = IBM.ICU.Impl.ICUDebug.Enabled("localedata");
	
	    // Cache for getAvailableLocales
	    private static WeakReference GET_AVAILABLE_CACHE;
	
	    private static ULocale[] CreateULocaleList(String baseName,
	            Assembly root) {
	        // the canned list is a subset of all the available .res files, the idea
	        // is we don't export them
	        // all. gotta be a better way to do this, since to add a locale you have
	        // to update this list,
	        // and it's embedded in our binary resources.
	        ICUResourceBundle bundle = (ICUResourceBundle) IBM.ICU.Util.UResourceBundle
	                .InstantiateBundle(baseName, ICU_RESOURCE_INDEX, root, true);
	
	        bundle = (ICUResourceBundle) bundle.Get(INSTALLED_LOCALES);
	        int length = bundle.GetSize();
	        int i = 0;
	        ULocale[] locales = new ULocale[length];
	        UResourceBundleIterator iter = bundle.GetIterator();
	        iter.Reset();
	        while (iter.HasNext()) {
	            locales[i++] = new ULocale(iter.Next().GetKey());
	        }
	        bundle = null;
	        return locales;
	    }
	
	    private static Locale[] CreateLocaleList(String baseName) {
	        ULocale[] ulocales = GetAvailEntry(baseName).GetULocaleList();
	        return GetLocaleList(ulocales);
	    }
	
	    private static String[] CreateLocaleNameArray(String baseName,
	            Assembly root) {
	        ICUResourceBundle bundle = (ICUResourceBundle) IBM.ICU.Util.UResourceBundle
	                .InstantiateBundle(baseName, ICU_RESOURCE_INDEX, root, true);
	        bundle = (ICUResourceBundle) bundle.Get(INSTALLED_LOCALES);
	        int length = bundle.GetSize();
	        int i = 0;
	        String[] locales = new String[length];
	        UResourceBundleIterator iter = bundle.GetIterator();
	        iter.Reset();
	        while (iter.HasNext()) {
	            locales[i++] = iter.Next().GetKey();
	        }
	        bundle = null;
	        return locales;
	    }
	
	    private static ArrayList CreateFullLocaleNameArray(
	            String baseName, Assembly root) {
	
	        ArrayList list = (ArrayList) new ICUResourceBundle.Anonymous_C0 (baseName, root).Run();
	
	        return list;
	    }
	
	    private static ILOG.J2CsMapping.Collections.ISet CreateFullLocaleNameSet(String baseName) {
	        ArrayList list = CreateFullLocaleNameArray(baseName,
	                ICU_DATA_CLASS_LOADER);
	        HashedSet set = new HashedSet();
	        if (list == null) {
	            throw new MissingManifestResourceException("Could not find "
	                                + ICU_RESOURCE_INDEX);
	        }
	        ILOG.J2CsMapping.Collections.Generics.Collections.AddAll(list,set);
	        return ILOG.J2CsMapping.Collections.Generics.Collections.UnmodifiableSet(set);
	    }
	
	    private static ILOG.J2CsMapping.Collections.ISet CreateLocaleNameSet(String baseName) {
	        try {
	            String[] locales = CreateLocaleNameArray(baseName,
	                    ICU_DATA_CLASS_LOADER);
	
	            HashedSet set = new HashedSet();
	            ILOG.J2CsMapping.Collections.Generics.Collections.AddAll(ILOG.J2CsMapping.Collections.Arrays.AsList(locales),set);
	            return ILOG.J2CsMapping.Collections.Generics.Collections.UnmodifiableSet(set);
	        } catch (MissingManifestResourceException e) {
	           /* if (DEBUG) {
	                System.Console.Out.WriteLine("couldn't find index for bundleName: "
	                        + baseName);
	                ILOG.J2CsMapping.Threading.ThreadWrapper.DumpStack();
	            }*/
	        }
	        return ILOG.J2CsMapping.Collections.Generics.Collections.EMPTY_SET;
	    }
	
	    public sealed class Anonymous_C0 : 
	            Object {
	        public sealed class Anonymous_C1 : IBM.ICU.Impl.URLHandler.URLVisitor  {
	            private readonly ArrayList list;
	
	            
	            /// <param name="list_0"></param>
	            public Anonymous_C1(ArrayList list_0) {
	                this.list = list_0;
	            }
	
	            public void Visit(String s) {
	                if (s.EndsWith(".res")
	                        && !"res_index.res".Equals(s)) {
	                    ILOG.J2CsMapping.Collections.Generics.Collections.Add(list,s.Substring(0,(s.Length - 4)-(0))); // strip
	                                                              // '.res'
	                }
	            }
	        }
	
	        private readonly String baseName;
	
	        private readonly Assembly root;
	
	        
	        /// <param name="baseName_0"></param>
	        /// <param name="root_1"></param>
	        public Anonymous_C0(String baseName_0, Assembly root_1) {
	            this.baseName = baseName_0;
	            this.root = root_1;
	        }
	
	        public Object Run() {
	            // WebSphere class loader will return null for a raw
	            // directory name without trailing slash
	            String bn = (baseName.EndsWith("/")) ? baseName
	                    : baseName + "/";
	
	            // look for prebuilt indices first
	            try {
	                Stream s = ILOG.J2CsMapping.IO.IOUtility.GetResourceAsStream(root, "Resources/", bn
	                                        + IBM.ICU.Impl.ICUResourceBundle.ICU_RESOURCE_INDEX + ".txt");
	                if (s != null) {
	                    ArrayList list_0 = new ArrayList();
	                    TextReader br = new StreamReader(s,System.Text.Encoding.GetEncoding("ASCII"));
	                    String line;
	                    while ((line = br.ReadLine()) != null) {
	                        if (line.Length != 0
	                                && !line.StartsWith("#")) {
	                            ILOG.J2CsMapping.Collections.Generics.Collections.Add(list_0,line);
	                        }
	                    }
	                    return list_0;
	                }
	            } catch (IOException e) {
	                // swallow it
	            }

                String[] files = root.GetManifestResourceNames();
                ArrayList res = new ArrayList();
                String pattern = bn.Replace("/", ".");
                foreach (String file in files)
                {
                    String name = file;
                    int index = name.IndexOf(pattern) + pattern.Length;
                    int length = name.Length - pattern.Length - 3;
                    String n = name.Substring(index);
                    int indexOFPoint = n.IndexOf(".");
                    n = n.Substring(0, indexOFPoint);
                    res.Add(n);
                }
                return res;

	            /*Uri url = ILOG.J2CsMapping.IO.IOUtility.GetResource(root,bn);
	            URLHandler handler = IBM.ICU.Impl.URLHandler.Get(url);
	            if (handler != null) {
	                ArrayList list_1 = new ArrayList();
	                IBM.ICU.Impl.URLHandler.URLVisitor  v = new IBM.ICU.Impl.ICUResourceBundle.Anonymous_C0.Anonymous_C1 (list_1);
	                handler.Guide(v, false);
	                return list_1;
	            }
	
	            return null;*/
	        }
	    }
	
	    /// <summary>
	    /// Holds the prefix, and lazily creates the Locale[] list or the locale name
	    /// Set as needed.
	    /// </summary>
	    ///
	    private sealed class AvailEntry {
	        private String prefix;
	
	        private ULocale[] ulocales;

            private Locale[] locales;
	
	        private ILOG.J2CsMapping.Collections.ISet nameSet;
	
	        private ILOG.J2CsMapping.Collections.ISet fullNameSet;
	
	        internal AvailEntry(String prefix_0) {
	            this.prefix = prefix_0;
	        }
	
	        internal ULocale[] GetULocaleList() {
	            if (ulocales == null) {
	                ulocales = IBM.ICU.Impl.ICUResourceBundle.CreateULocaleList(prefix, IBM.ICU.Impl.ICUResourceBundle.ICU_DATA_CLASS_LOADER);
	            }
	            return ulocales;
	        }

            internal Locale[] GetLocaleList()
            {
	            if (locales == null) {
	                locales = IBM.ICU.Impl.ICUResourceBundle.CreateLocaleList(prefix);
	            }
	            return locales;
	        }
	
	        internal ILOG.J2CsMapping.Collections.ISet GetLocaleNameSet() {
	            if (nameSet == null) {
	                nameSet = IBM.ICU.Impl.ICUResourceBundle.CreateLocaleNameSet(prefix);
	            }
	            return nameSet;
	        }
	
	        internal ILOG.J2CsMapping.Collections.ISet GetFullLocaleNameSet() {
	            if (fullNameSet == null) {
	                fullNameSet = IBM.ICU.Impl.ICUResourceBundle.CreateFullLocaleNameSet(prefix);
	            }
	            return fullNameSet;
	        }
	    }
	
	    /// <summary>
	    /// Stores the locale information in a cache accessed by key (bundle prefix).
	    /// The cached objects are AvailEntries. The cache is held by a SoftReference
	    /// so it can be GC'd.
	    /// </summary>
	    ///
	    private static ICUResourceBundle.AvailEntry  GetAvailEntry(String key) {
	        ICUResourceBundle.AvailEntry  ae = null;
	        IDictionary lcache = null;
	        if (GET_AVAILABLE_CACHE != null) {
	            lcache = (IDictionary) GET_AVAILABLE_CACHE.Target;
	            if (lcache != null) {
	                ae = (ICUResourceBundle.AvailEntry ) ILOG.J2CsMapping.Collections.Collections.Get(lcache,key);
	            }
	        }
	
	        if (ae == null) {
	            ae = new ICUResourceBundle.AvailEntry (key);
	            if (lcache == null) {
	                lcache = new Hashtable();
	                ILOG.J2CsMapping.Collections.Collections.Put(lcache,key,ae);
	                GET_AVAILABLE_CACHE = new WeakReference(lcache);
	            } else {
	                ILOG.J2CsMapping.Collections.Collections.Put(lcache,key,ae);
	            }
	        }
	
	        return ae;
	    }
	
	    protected static internal ICUResourceBundle FindResourceWithFallback(
	            String path, UResourceBundle actualBundle, UResourceBundle requested) {
	        ICUResourceBundle sub = null;
	        if (requested == null) {
	            requested = actualBundle;
	        }
	        while (actualBundle != null) {
	            IBM.ICU.Util.StringTokenizer st = new IBM.ICU.Util.StringTokenizer(path, "/");
	            ICUResourceBundle current = (ICUResourceBundle) actualBundle;
	            while (st.HasMoreTokens()) {
	                String subKey = st.NextToken();
	                sub = (ICUResourceBundle) current.HandleGet(subKey, null,
	                        requested);
	                if (sub == null) {
	                    break;
	                }
	                current = sub;
	            }
	            if (sub != null) {
	                // we found it
	                break;
	            }
	            if (((ICUResourceBundle) actualBundle).resPath.Length != 0) {
	                path = ((ICUResourceBundle) actualBundle).resPath + "/" + path;
	            }
	            // if not try the parent bundle
	            actualBundle = ((ICUResourceBundle) actualBundle).GetParent();
	
	        }
	        if (sub != null) {
	            SetLoadingStatus(sub, ((ICUResourceBundle) requested).GetLocaleID());
	        }
	        return sub;
	    }
	
	    public override bool Equals(Object other) {
	        if (other  is  ICUResourceBundle) {
	            ICUResourceBundle o = (ICUResourceBundle) other;
	            if (GetBaseName().Equals(o.GetBaseName())
	                    && GetLocaleID().Equals(o.GetLocaleID())) {
	                return true;
	            }
	        }
	        return false;
	    }
	
	    // This method is for super class's instantiateBundle method
	    public static UResourceBundle GetBundleInstance(String baseName_0,
	            String localeID, Assembly root_1, bool disableFallback) {
	        UResourceBundle b = InstantiateBundle(baseName_0, localeID, root_1,
	                disableFallback);
	        if (b == null) {
	            throw new MissingManifestResourceException("Could not find the bundle "
	                                + baseName_0 + "/" + localeID + ".res");
	        }
	        return b;
	    }
	
	    // recursively build bundle .. over-ride super class method.
	    [MethodImpl(MethodImplOptions.Synchronized)]
	    protected static internal UResourceBundle InstantiateBundle(
	            String baseName_0, String localeID, Assembly root_1,
	            bool disableFallback) {
	        ULocale defaultLocale = IBM.ICU.Util.ULocale.GetDefault();
	        String localeName = localeID;
	        if (localeName.IndexOf('@') > 0) {
	            localeName = IBM.ICU.Util.ULocale.GetBaseName(localeID);
	        }
	        String fullName = IBM.ICU.Impl.ICUResourceBundleReader.GetFullName(baseName_0,
	                localeName);
	        ICUResourceBundle b = (ICUResourceBundle) IBM.ICU.Util.UResourceBundle.LoadFromCache(root_1, fullName,
	                defaultLocale);
	
	        // here we assume that java type resource bundle organization
	        // is required then the base name contains '.' else
	        // the resource organization is of ICU type
	        // so clients can instantiate resources of the type
	        // com.mycompany.data.MyLocaleElements_en.res and
	        // com.mycompany.data.MyLocaleElements.res
	        //
	        String rootLocale = (baseName_0.IndexOf('.') == -1) ? "root" : "";
	        String defaultID = IBM.ICU.Util.ULocale.GetDefault().ToString();
	
	        if (localeName.Equals("")) {
	            localeName = rootLocale;
	        }
	        if (DEBUG)
	            System.Console.Out.WriteLine("Creating " + fullName + " currently b is " + b);
	        if (b == null) {
	            b = ICUResourceBundle.CreateBundle(baseName_0, localeName, root_1);
	
	            if (DEBUG)
	                System.Console.Out.WriteLine("The bundle created is: " + b
	                        + " and disableFallback=" + disableFallback
	                        + " and bundle.getNoFallback="
	                        + (b != null && b.GetNoFallback()));
	            if (disableFallback || (b != null && b.GetNoFallback())) {
	                IBM.ICU.Util.UResourceBundle.AddToCache(root_1, fullName, defaultLocale, b);
	                // no fallback because the caller said so or because the bundle
	                // says so
	                return b;
	            }
	
	            // fallback to locale ID parent
	            if (b == null) {
	                int i = localeName.LastIndexOf('_');
	                if (i != -1) {
	                    String temp = localeName.Substring(0,(i)-(0));
	                    b = (ICUResourceBundle) InstantiateBundle(baseName_0, temp,
	                            root_1, disableFallback);
	                    if (b != null && b.GetULocale().Equals(temp)) {
	                        b.SetLoadingStatus(ICUResourceBundle.FROM_FALLBACK);
	                    }
	                } else {
	                    if (defaultID.IndexOf(localeName) == -1) {
	                        b = (ICUResourceBundle) InstantiateBundle(baseName_0,
	                                defaultID, root_1, disableFallback);
	                        if (b != null) {
	                            b.SetLoadingStatus(ICUResourceBundle.FROM_DEFAULT);
	                        }
	                    } else if (rootLocale.Length != 0) {
	                        b = ICUResourceBundle.CreateBundle(baseName_0,
	                                rootLocale, root_1);
	                        if (b != null) {
	                            b.SetLoadingStatus(ICUResourceBundle.FROM_ROOT);
	                        }
	                    }
	                }
	            } else {
	                UResourceBundle parent = null;
	                localeName = b.GetLocaleID();
	                int i_2 = localeName.LastIndexOf('_');
	
	                IBM.ICU.Util.UResourceBundle.AddToCache(root_1, fullName, defaultLocale, b);
	
	                if (i_2 != -1) {
	                    parent = InstantiateBundle(baseName_0,
	                            localeName.Substring(0,(i_2)-(0)), root_1, disableFallback);
	                } else if (!localeName.Equals(rootLocale)) {
	                    parent = InstantiateBundle(baseName_0, rootLocale, root_1, true);
	                }
	
	                if (!b.Equals(parent)) {
	                    b.SetParent(parent);
	                }
	            }
	        }
	        return b;
	    }
	
	    internal UResourceBundle Get(String key, Hashtable table, UResourceBundle requested) {
	        ICUResourceBundle obj = (ICUResourceBundle) HandleGet(key, table,
	                requested);
	        if (obj == null) {
	            obj = (ICUResourceBundle) GetParent();
	            if (obj != null) {
	                // call the get method to recursively fetch the resource
	                obj = (ICUResourceBundle) obj.Get(key, table, requested);
	            }
	            if (obj == null) {
	                String fullName = IBM.ICU.Impl.ICUResourceBundleReader.GetFullName(
	                        GetBaseName(), GetLocaleID());
	                throw new MissingManifestResourceException("Can't find resource for bundle " + fullName + ", key "
	                                                + key);
	            }
	        }
	        ICUResourceBundle.SetLoadingStatus(obj,
	                ((ICUResourceBundle) requested).GetLocaleID());
	        return obj;
	    }
	
	    // protected byte[] version;
	    protected internal sbyte[] rawData;
	
	    protected internal long rootResource;
	
	    protected internal bool noFallback;
	
	    protected internal String localeID;
	
	    protected internal String baseName;
	
	    protected internal ULocale ulocale;
	
	    protected internal Assembly loader;
	
	    protected internal const bool ASSERT = false;
	
	    
	    /// <param name="baseName_0"></param>
	    /// <param name="localeID_1"></param>
	    /// <param name="root_2"></param>
	    /// <returns>the new bundle</returns>
	    public static ICUResourceBundle CreateBundle(String baseName_0,
	            String localeID_1, Assembly root_2) {
	
	        ICUResourceBundleReader reader = IBM.ICU.Impl.ICUResourceBundleReader.GetReader(
	                baseName_0, localeID_1, root_2);
	        // could not open the .res file so return null
	        if (reader == null) {
	            return null;
	        }
	        return GetBundle(reader, baseName_0, localeID_1, root_2);
	    }
	
	    protected internal override String GetLocaleID() {
	        return localeID;
	    }
	
	    protected internal override String GetBaseName() {
	        return baseName;
	    }
	
	    public override ULocale GetULocale() {
	        return ulocale;
	    }
	
	    public override UResourceBundle GetParent() {
	        return (UResourceBundle) parent;
	    }
	
	    public void SetParent(ResourceBundle parent) {
	        this.parent = parent;
	    }
	
	    /// <summary>
	    /// Get the noFallback flag specified in the loaded bundle.
	    /// </summary>
	    ///
	    /// <returns>The noFallback flag.</returns>
	    protected internal bool GetNoFallback() {
	        return noFallback;
	    }
	
	    private static ICUResourceBundle GetBundle(ICUResourceBundleReader reader,
	            String baseName_0, String localeID_1, Assembly loader_2) {
	
	        long rootResource_3 = (UNSIGNED_INT_MASK) & reader.GetRootResource();
	
	        int type = RES_GET_TYPE(rootResource_3);
	        if (type == IBM.ICU.Util.UResourceBundle.TABLE) {
	            ICUResourceBundleImpl.ResourceTable table = new ICUResourceBundleImpl.ResourceTable(
	                    reader, baseName_0, localeID_1, loader_2);
	            if (table.GetSize() >= 1) { // ticket#5683 ICU4J 3.6 data for zh_xx
	                                        // contains an entry other than %%ALIAS
	                UResourceBundle b = table.HandleGet(0, null, table);
	                String itemKey = b.GetKey();
	
	                // %%ALIAS is such a hack!
	                if (itemKey.Equals("%%ALIAS")) {
	                    String locale = b.GetString();
	                    UResourceBundle actual = IBM.ICU.Util.UResourceBundle.GetBundleInstance(
	                            baseName_0, locale);
	                    return (ICUResourceBundleImpl.ResourceTable) actual;
	                } else {
	                    return table;
	                }
	            } else {
	                return table;
	            }
	        } else if (type == IBM.ICU.Util.UResourceBundle.TABLE32) {
	
	            // genrb does not generate Table32 with %%ALIAS
	            return new ICUResourceBundleImpl.ResourceTable32(reader, baseName_0,
	                    localeID_1, loader_2);
	        } else {
	            throw new InvalidOperationException("Invalid format error");
	        }
	    }
	
	    // private constructor for inner classes
	    protected internal ICUResourceBundle() {
	        this.loadingStatus = -1;
	    }
	
	    public static int RES_GET_TYPE(long res) {
	        return (int) ((res) >> 28);
	    }
	
	    protected static internal int RES_GET_OFFSET(long res) {
	        return (int) ((res & 0x0fffffff) * 4);
	    }
	
	    /* get signed and unsigned integer values directly from the Resource handle */
	    protected static internal int RES_GET_INT(long res) {
	        return (((int) ((res) << 4)) >> 4);
	    }
	
	    static internal long RES_GET_UINT(long res) {
	        long t = ((res) & 0x0fffffffL);
	        return t;
	    }
	
	    static internal StringBuilder RES_GET_KEY(sbyte[] rawData_0, int keyOffset) {
	        char ch = (char) (0xFFFF); // sentinel
	        StringBuilder key = new StringBuilder();
	        while ((ch = (char) rawData_0[keyOffset]) != 0) {
	            key.Append(ch);
	            keyOffset++;
	        }
	        return key;
	    }
	
	    protected static internal int GetIntOffset(int offset) {
	        return (offset * 4);
	    }
	
	    static internal int GetCharOffset(int offset) {
	        return (offset * 2);
	    }
	
	    protected internal ICUResourceBundle CreateBundleObject(String key,
	            long resource, String resPath_0, Hashtable table,
	            UResourceBundle requested, ICUResourceBundle bundle) {
	        // if (resource != RES_BOGUS) {
	        switch (RES_GET_TYPE(resource)) {
	        case IBM.ICU.Util.UResourceBundle.STRING: {
	            return new ICUResourceBundleImpl.ResourceString(key, resPath_0,
	                    resource, this);
	        }
	        case IBM.ICU.Util.UResourceBundle.BINARY: {
	            return new ICUResourceBundleImpl.ResourceBinary(key, resPath_0,
	                    resource, this);
	        }
	        case IBM.ICU.Util.UResourceBundle.ALIAS: {
	            return FindResource(key, resource, table, requested);
	        }
	        case IBM.ICU.Util.UResourceBundle.INT: {
	            return new ICUResourceBundleImpl.ResourceInt(key, resPath_0,
	                    resource, this);
	        }
	        case IBM.ICU.Util.UResourceBundle.INT_VECTOR: {
	            return new ICUResourceBundleImpl.ResourceIntVector(key, resPath_0,
	                    resource, this);
	        }
	        case IBM.ICU.Util.UResourceBundle.ARRAY: {
	            return new ICUResourceBundleImpl.ResourceArray(key, resPath_0,
	                    resource, this);
	        }
	        case IBM.ICU.Util.UResourceBundle.TABLE32: {
	            return new ICUResourceBundleImpl.ResourceTable32(key, resPath_0,
	                    resource, this);
	        }
	        case IBM.ICU.Util.UResourceBundle.TABLE: {
	            return new ICUResourceBundleImpl.ResourceTable(key, resPath_0,
	                    resource, this);
	        }
	        default:
	            throw new InvalidOperationException("The resource type is unknown");
	        }
	        // }
	        // return null;
	    }
	
	    static internal void Assign(ICUResourceBundle b1, ICUResourceBundle b2) {
	        b1.rawData = b2.rawData;
	        b1.rootResource = b2.rootResource;
	        b1.noFallback = b2.noFallback;
	        b1.baseName = b2.baseName;
	        b1.localeID = b2.localeID;
	        b1.ulocale = b2.ulocale;
	        b1.loader = b2.loader;
	        b1.parent = b2.parent;
	    }
	
	    internal int FindKey(int size, int currentOffset, ICUResourceBundle res,
	            String target) {
	        int mid = 0, start = 0, limit = size, rc;
	        int lastMid = -1;
	        // int myCharOffset = 0, keyOffset = 0;
	        for (;;) {
	            mid = ((start + limit) / 2);
	            if (lastMid == mid) { /* Have we moved? */
	                break; /* We haven't moved, and it wasn't found. */
	            }
	            lastMid = mid;
	            String comp = res.GetKey(currentOffset, mid);
	            rc = String.CompareOrdinal(target,comp);
	            if (rc < 0) {
	                limit = mid;
	            } else if (rc > 0) {
	                start = mid;
	            } else {
	                return mid;
	            }
	        }
	        return -1;
	    }
	
	    public virtual String GetKey(int currentOfset, int index) {
	        return null;
	    }
	
	    private static char MakeChar(sbyte b1, sbyte b0) {
	        return (char) ((b1 << 8) | (b0 & 0xff));
	    }
	
	    static internal char GetChar(sbyte[] data, int offset) {
	        return MakeChar(data[offset], data[offset + 1]);
	    }
	
	    private static int MakeInt(sbyte b3, sbyte b2, sbyte b1, sbyte b0) {
	        return (int) ((((b3 & 0xff) << 24) | ((b2 & 0xff) << 16)
	                | ((b1 & 0xff) << 8) | ((b0 & 0xff) << 0)));
	    }
	
	    protected static internal int GetInt(sbyte[] data, int offset) {
	        if (ASSERT)
	            IBM.ICU.Impl.Assert.Assrt("offset < data.length", offset < data.Length);
	        return MakeInt(data[offset], data[offset + 1], data[offset + 2],
	                data[offset + 3]);
	    }
	
	    internal String GetStringValue(long resource) {
	        if (resource == 0) {
	            /*
	             * The data structure is documented as supporting resource==0 for
	             * empty strings. Return a fixed pointer in such a case. This was
	             * dropped in uresdata.c 1.17 as part of Jitterbug 1005 work on code
	             * coverage for ICU 2.0. Re-added for consistency with the design
	             * and with other code.
	             */
	            return "";
	        }
	        int offset = RES_GET_OFFSET(resource);
	        int length = GetInt(rawData, offset);
	        int stringOffset = offset + GetIntOffset(1);
	        char[] dst = new char[length];
	        if (ASSERT)
	            IBM.ICU.Impl.Assert.Assrt(
	                    "(stringOffset+getCharOffset(length)) < rawData.length",
	                    (stringOffset + GetCharOffset(length)) < rawData.Length);
	        for (int i = 0; i < length; i++) {
	            dst[i] = GetChar(rawData, stringOffset + GetCharOffset(i));
	        }
	        return ILOG.J2CsMapping.Util.StringUtil.NewString(dst);
	    }
	
	    private const char RES_PATH_SEP_CHAR = '/';
	
	    private const String RES_PATH_SEP_STR = "/";
	
	    private const String ICUDATA = "ICUDATA";
	
	    private const char HYPHEN = '-';
	
	    private const String LOCALE = "LOCALE";
	
	    protected static internal int GetIndex(String s) {
	        if (s.Length >= 1) {
	            return ((Int32 )Int32.Parse(s));
	        }
	        return -1;
	    }
	
	    private ICUResourceBundle FindResource(String key, long resource,
	            Hashtable table, UResourceBundle requested) {
	        Assembly loaderToUse = loader;
	        String locale = null, keyPath = null;
	        String bundleName;
	        String resPath_0 = GetStringValue(resource);
	        if (table == null) {
	            table = new Hashtable();
	        }
	        if (ILOG.J2CsMapping.Collections.Collections.Get(table,resPath_0) != null) {
	            throw new ArgumentException(
	                    "Circular references in the resource bundles");
	        }
	        ILOG.J2CsMapping.Collections.Collections.Put(table,resPath_0,"");
	        if (resPath_0.IndexOf(RES_PATH_SEP_CHAR) == 0) {
	            int i = resPath_0.IndexOf(RES_PATH_SEP_CHAR, 1);
	            int j = resPath_0.IndexOf(RES_PATH_SEP_CHAR, i + 1);
	            bundleName = resPath_0.Substring(1,(i)-(1));
	            locale = resPath_0.Substring(i + 1);
	            if (j != -1) {
	                locale = resPath_0.Substring(i + 1,(j)-(i + 1));
	                keyPath = resPath_0.Substring(j + 1,(resPath_0.Length)-(j + 1));
	            }
	            // there is a path included
	            if (bundleName.Equals(ICUDATA)) {
	                bundleName = ICU_BASE_NAME;
	                loaderToUse = ICU_DATA_CLASS_LOADER;
	            } else if (bundleName.IndexOf(ICUDATA) > -1) {
	                int idx = bundleName.IndexOf(HYPHEN);
	                if (idx > -1) {
	                    bundleName = ICU_BASE_NAME
	                            + RES_PATH_SEP_STR
	                            + bundleName.Substring(idx + 1,(bundleName.Length)-(idx + 1));
	                    loaderToUse = ICU_DATA_CLASS_LOADER;
	                }
	            }
	        } else {
	            // no path start with locale
	            int i_1 = resPath_0.IndexOf(RES_PATH_SEP_CHAR);
	            keyPath = resPath_0.Substring(i_1 + 1);
	            if (i_1 != -1) {
	                locale = resPath_0.Substring(0,(i_1)-(0));
	            } else {
	                locale = keyPath;
	                keyPath = null;// keyPath.substring(i, keyPath.length());
	            }
	            bundleName = baseName;
	        }
	        ICUResourceBundle bundle = null;
	        ICUResourceBundle sub = null;
	        if (bundleName.Equals(LOCALE)) {
	            bundleName = baseName;
	            bundle = (ICUResourceBundle) requested;
	            keyPath = resPath_0.Substring(LOCALE.Length + 2 /*
	                                                                        * prepending and
	                                                                        * appending /
	                                                                        */,(resPath_0.Length)-(LOCALE.Length + 2 /*
	                                                                        * prepending and
	                                                                        * appending /
	                                                                        */));
	            locale = ((ICUResourceBundle) requested).GetLocaleID();
	            sub = ICUResourceBundle.FindResourceWithFallback(keyPath,
	                    requested, null);
	            sub.resPath = "/" + sub.GetLocaleID() + "/" + keyPath;
	        } else {
	            if (locale == null) {
	                // {dlf} must use requestor's class loader to get resources from
	                // same jar
	                bundle = (ICUResourceBundle) GetBundleInstance(bundleName, "",
	                        loaderToUse, false);
	            } else {
	                bundle = (ICUResourceBundle) GetBundleInstance(bundleName,
	                        locale, loaderToUse, false);
	            }
	            if (keyPath != null) {
	                IBM.ICU.Util.StringTokenizer st = new IBM.ICU.Util.StringTokenizer(keyPath, "/");
	                ICUResourceBundle current = bundle;
	                while (st.HasMoreTokens()) {
	                    String subKey = st.NextToken();
	                    sub = (ICUResourceBundle) ((ICUResourceBundle) current)
	                            .Get(subKey, table, requested);
	                    if (sub == null) {
	                        break;
	                    }
	                    current = sub;
	                }
	            } else {
	                // if the sub resource is not found
	                // try fetching the sub resource with
	                // the key of this alias resource
	                sub = (ICUResourceBundle) bundle.Get(key);
	            }
	            sub.resPath = resPath_0;
	        }
	        if (sub == null) {
	            throw new MissingManifestResourceException(localeID);
	        }
	        return sub;
	    }
	
	    static ICUResourceBundle() {
	            Assembly loader = typeof(ICUData).Assembly;
	            if (loader == null) {
	                loader = System.Reflection.Assembly.GetEntryAssembly();
	            }
	            ICU_DATA_CLASS_LOADER = loader;
	        }
	}
}
