/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 11/30/10 3:38 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace ILOG.J2CsMapping.RegEx {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Special node for ".///" construction.
	/// The main idea here is to find line terminator and try to find the rest of
	/// the construction from this point.
	/// </summary>
	///
	internal class DotQuantifierSet : QuantifierSet {
	
		internal AbstractLineTerminator lt;
	
		public DotQuantifierSet(AbstractSet innerSet, AbstractSet next, int type,
				AbstractLineTerminator lt_0) : base(innerSet, next, type) {
			this.lt = lt_0;
		}
	
		public override int Matches(int stringIndex, String testString,
				MatchResultImpl matchResult) {
	
			int strLength = matchResult.GetRightBound();
	
			int startSearch = /* testString.toString().indexOf('\n', stringIndex); */
			FindLineTerminator(stringIndex, strLength, testString);
	
			if (startSearch < 0) {
				startSearch = strLength;
			}
	
			if (startSearch <= stringIndex) {
				return next.Matches(stringIndex, testString, matchResult);
			}
			return next.FindBack(stringIndex, startSearch, testString, matchResult);
		}
	
		public override int Find(int stringIndex, String testString,
				MatchResultImpl matchResult) {
			// String testStr = testString.toString();
			int strLength = matchResult.GetRightBound();
			// 1. skip line terminators ???
			// //
			// we don't skip line terminators here, but return zero match instead
			// //
	
			// 2. find first occurrence of the searched pattern
			// //
			int res = next.Find(stringIndex, testString, matchResult);
	
			// 3. Check if we have other occurrences till the end of line
			// (because .* is greedy and we need last one)
			// //
			if (res >= 0) {
				int nextSearch = FindLineTerminator(res, strLength, testString);
				// testStr.indexOf('\n', res);
				if (nextSearch < 0) {
					nextSearch = strLength;
				}
				nextSearch = next
						.FindBack(res, nextSearch, testString, matchResult);
				res = (res < nextSearch) ? nextSearch : res;
			} else {
				return -1;
			}
	
			// 4. find left boundary of this search
			// //
			int leftBound = (res > 0) ? FindBackLineTerminator(stringIndex,
					res - 1, testString)/* testStr.lastIndexOf('\n', res - 1) */
			: (res == 0) ? 0 : -1;
			res = (leftBound >= stringIndex) ? ((leftBound < res) ? leftBound + 1
					: leftBound) : stringIndex;
	
			return res;
		}
	
		/*
		 * All line terminators are from Basic Multilingual Pane
		 */
		private int FindLineTerminator(int from, int to, String testString) {
			for (int i = from; i < to; i++) {
				if (lt.IsLineTerminator(testString[i])) {
					return i;
				}
			}
			return -1;
		}
	
		private int FindBackLineTerminator(int from, int to, String testString) {
			for (int i = to; i >= from; i--) {
				if (lt.IsLineTerminator(testString[i])) {
					return i;
				}
			}
			return -1;
		}

        public override String GetName()
        {
			return "<DotQuant>";
		}
	}
}
