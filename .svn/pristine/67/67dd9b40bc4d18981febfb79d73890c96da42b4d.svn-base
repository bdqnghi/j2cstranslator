/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 11/30/10 3:38 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace ILOG.J2CsMapping.RegEx {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Represents RE quantifier; contains two fields responsible for min and max
	/// number of repetitions. Negative value for maximum number of repetition
	/// represents infinity(i.e. +,///)
	/// </summary>
	///
	internal class Quantifier : SpecialToken, ICloneable {
	
		private int min;
	
		private int max;
	
		private int counter;
	
		public Quantifier(int min_0) {
			this.counter = 0;
			this.min = this.max = min_0;
		}
	
		public Quantifier(int min_0, int max_1) {
			this.counter = 0;
			this.min = min_0;
			this.max = max_1;
		}
	
		public void ResetCounter() {
			counter = 0;
		}
	
		public int GetCounter() {
			return counter;
		}
	
		public void SetCounter(int counter_0) {
			this.counter = counter_0;
		}
	
		public int Min() {
			return min;
		}
	
		public int Max() {
			return max;
		}
	
		public override String ToString() {
			return "{" //$NON-NLS-1$
					+ min + "," //$NON-NLS-1$
					+ ((max == Int32.MaxValue) ? "" : ((int)(max))
							.ToString()) + "}"; //$NON-NLS-1$
		}
	
		public override int GetType() {
			return ILOG.J2CsMapping.RegEx.SpecialToken.TOK_QUANTIFIER;
		}
	
		public virtual Object Clone() {
			return new Quantifier(min, max);
		}
	}
}
