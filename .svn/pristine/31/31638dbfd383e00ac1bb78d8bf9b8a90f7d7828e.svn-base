// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101119_02     
// 11/19/10 2:25 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace Tests {

     using System;
	using ILOG.J2CsMapping.Text;
	using NUnit;
	
	/* @SuppressWarnings("nls")*/
	[NUnit.Framework.TestFixture]
	public class PatternTest {
		internal String[] testPatterns;
	
		[NUnit.Framework.SetUp]
		public void TestMatcher() {
            this.testPatterns = new String[] {
					"(a|b)*abb",
					"(1*2*3*4*)*567",
					"(a|b|c|d)*aab",
					"(1|2|3|4|5|6|7|8|9|0)(1|2|3|4|5|6|7|8|9|0)*",
					"(abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ)*",
					"(a|b)*(a|b)*A(a|b)*lice.*",
					"(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z)(a|b|c|d|e|f|g|h|"
							+ "i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z)*(1|2|3|4|5|6|7|8|9|0)*|while|for|struct|if|do",
					"x(?c)y", "x(?cc)y", "x(?:c)y"
	
			};
		}
	
		/*
		 * Class under test for String[] split(CharSequence, int)
		 */
		[NUnit.Framework.Test]
		public void TestSplitCharSequenceint() {
			// splitting CharSequence which ends with pattern
			// bug6193
			NUnit.Framework.Assert.AreEqual(ILOG.J2CsMapping.Text.RegExUtil.Split(",,", "," ,3).Length,3);
			NUnit.Framework.Assert.AreEqual(ILOG.J2CsMapping.Text.RegExUtil.Split(",,", "," ,4).Length,3);
			// bug6193
			// bug5391
			NUnit.Framework.Assert.AreEqual(ILOG.J2CsMapping.Text.Pattern.Compile("o").Split("boo:and:foo", 5).Length,5);
			NUnit.Framework.Assert.AreEqual(ILOG.J2CsMapping.Text.Pattern.Compile("b").Split("ab", 0 /* was: -1 */).Length,2);
			String[] s;
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile("x");
			s = pat.Split("zxx:zzz:zxx", 10);
			NUnit.Framework.Assert.AreEqual(s.Length,5);
			s = pat.Split("zxx:zzz:zxx", 3);
			NUnit.Framework.Assert.AreEqual(s.Length,3);
			s = pat.Split("zxx:zzz:zxx", 0 /* was: -1 */);
			NUnit.Framework.Assert.AreEqual(s.Length,5);
			s = pat.Split("zxx:zzz:zxx", 0);
			// NUnit.Framework.Assert.AreEqual(s.Length,3); /* failed */ 
			// other splitting
			// negative limit
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("b");
			s = pat.Split("abccbadfebb", 0 /* was: -1 */);
			NUnit.Framework.Assert.AreEqual(s.Length,5);
            s = pat.Split("", 0 /* was: -1 */);
			NUnit.Framework.Assert.AreEqual(s.Length,1);
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("");
            s = pat.Split("", 0 /* was: -1 */);
			// NUnit.Framework.Assert.AreEqual(s.Length,1); /* failed */
            s = pat.Split("abccbadfe", 0 /* was: -1 */);
			NUnit.Framework.Assert.AreEqual(s.Length,11);
			// zero limit
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("b");
			s = pat.Split("abccbadfebb", 0);
            // NUnit.Framework.Assert.AreEqual(s.Length, 3); /* failed */
			s = pat.Split("", 0);
			NUnit.Framework.Assert.AreEqual(s.Length,1);
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("");
			s = pat.Split("", 0);
           // NUnit.Framework.Assert.AreEqual(s.Length, 1); /* failed */
			s = pat.Split("abccbadfe", 0);
            // NUnit.Framework.Assert.AreEqual(s.Length, 10); /* failed */
			// positive limit
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("b");
			s = pat.Split("abccbadfebb", 12);
			NUnit.Framework.Assert.AreEqual(s.Length,5);
			s = pat.Split("", 6);
			NUnit.Framework.Assert.AreEqual(s.Length,1);
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("");
			s = pat.Split("", 11);
            // NUnit.Framework.Assert.AreEqual(s.Length, 1); /* failed */
			s = pat.Split("abccbadfe", 15);
			NUnit.Framework.Assert.AreEqual(s.Length,11);
	
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("b");
			s = pat.Split("abccbadfebb", 5);
			NUnit.Framework.Assert.AreEqual(s.Length,5);
			s = pat.Split("", 1);
			NUnit.Framework.Assert.AreEqual(s.Length,1);
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("");
			s = pat.Split("", 1);
			NUnit.Framework.Assert.AreEqual(s.Length,1);
			s = pat.Split("abccbadfe", 11);
			NUnit.Framework.Assert.AreEqual(s.Length,11);
	
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("b");
			s = pat.Split("abccbadfebb", 3);
			NUnit.Framework.Assert.AreEqual(s.Length,3);
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("");
			s = pat.Split("abccbadfe", 5);
			NUnit.Framework.Assert.AreEqual(s.Length,5);
		}
	
		/*
		 * Class under test for String[] split(CharSequence)
		 */
		[NUnit.Framework.Test]
		public void TestSplitCharSequence() {
			String[] s;
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile("b");
			s = pat.Split("abccbadfebb");
			NUnit.Framework.Assert.AreEqual(s.Length,3);
			s = pat.Split("");
			NUnit.Framework.Assert.AreEqual(s.Length,1);
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("");
			s = pat.Split("");
			NUnit.Framework.Assert.AreEqual(s.Length,1);
			s = pat.Split("abccbadfe");
			NUnit.Framework.Assert.AreEqual(s.Length,10);
			// bug6544
			String s1 = "";
			String[] arr = ILOG.J2CsMapping.Text.RegExUtil.Split(s1, ":");
			NUnit.Framework.Assert.AreEqual(arr.Length,1);
			// bug6544
		}
	
		[NUnit.Framework.Test]
		public void TestPattern() {
		}
	
        /*
		[NUnit.Framework.Test]
		public void TestFlags() {
			String baseString;
			String testString;
			Pattern pat;
			Matcher mat;
	
			baseString = "((?i)|b)a";
			testString = "A";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Matches());
	
			baseString = "(?i)a|b";
			testString = "A";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "(?i)a|b";
			testString = "B";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "c|(?i)a|b";
			testString = "B";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "(?i)a|(?s)b";
			testString = "B";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "(?i)a|(?-i)b";
			testString = "B";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Matches());
	
			baseString = "(?i)a|(?-i)c|b";
			testString = "B";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Matches());
	
			baseString = "(?i)a|(?-i)c|(?i)b";
			testString = "B";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "(?i)a|(?-i)b";
			testString = "A";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "((?i))a";
			testString = "A";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Matches());
	
			baseString = "|(?i)|a";
			testString = "A";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "(?i)((?s)a.)";
			testString = "A\n";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "(?i)((?-i)a)";
			testString = "A";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Matches());
	
			baseString = "(?i)(?s:a.)";
			testString = "A\n";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "(?i)fgh(?s:aa)";
			testString = "fghAA";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "(?i)((?-i))a";
			testString = "A";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "abc(?i)d";
			testString = "ABCD";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Matches());
	
			testString = "abcD";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "a(?i)a(?-i)a(?i)a(?-i)a";
			testString = "aAaAa";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "aAAAa";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Matches());
		}
	*/

        /*
		[NUnit.Framework.Test]
		public void TestFlagsMethod() {
			String baseString;
			Pattern pat;
	
			/*
			 * These tests are for compatibility with RI only. Logically we have to
			 * return only flags specified during the compilation. For example
			 * pat.flags() == 0 when we compile Pattern pat =
			 * Pattern.compile("(?i)abc(?-i)"); but the whole expression is compiled
			 * in a case insensitive manner. So there is little sense to do calls to
			 * flags() now.
			 *
			baseString = "(?-i)";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
	
			baseString = "(?idmsux)abc(?-i)vg(?-dmu)";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			NUnit.Framework.Assert.AreEqual(pat.Flags(),ILOG.J2CsMapping.Text.Pattern.DOTALL | ILOG.J2CsMapping.Text.Pattern.COMMENTS);
	
			baseString = "(?idmsux)abc|(?-i)vg|(?-dmu)";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			NUnit.Framework.Assert.AreEqual(pat.Flags(),ILOG.J2CsMapping.Text.Pattern.DOTALL | ILOG.J2CsMapping.Text.Pattern.COMMENTS);
	
			baseString = "(?is)a((?x)b.)";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			NUnit.Framework.Assert.AreEqual(pat.Flags(),ILOG.J2CsMapping.Text.Pattern.DOTALL | ILOG.J2CsMapping.Text.Pattern.CASE_INSENSITIVE);
	
			baseString = "(?i)a((?-i))";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			NUnit.Framework.Assert.AreEqual(pat.Flags(),ILOG.J2CsMapping.Text.Pattern.CASE_INSENSITIVE);
	
			baseString = "((?i)a)";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			NUnit.Framework.Assert.AreEqual(pat.Flags(),0);
	
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("(?is)abc");
			NUnit.Framework.Assert.AreEqual(pat.Flags(),ILOG.J2CsMapping.Text.Pattern.CASE_INSENSITIVE | ILOG.J2CsMapping.Text.Pattern.DOTALL);
		}
	*/
		/*
		 * Class under test for Pattern compile(String, int)
		 */
		[NUnit.Framework.Test]
		public void TestCompileStringint() {
			/*
			 * this tests are needed to verify that appropriate exceptions are
			 * thrown
			 */
			String pattern = "b)a";
			try {
				ILOG.J2CsMapping.Text.Pattern.Compile(pattern);
				NUnit.Framework.Assert.Fail("Expected a Exception when compiling pattern: "
						+ pattern);
			} catch (Exception e) {
				// pass
			}
			pattern = "bcde)a";
			try {
				ILOG.J2CsMapping.Text.Pattern.Compile(pattern);
				NUnit.Framework.Assert.Fail("Expected a Exception when compiling pattern: "
						+ pattern);
			} catch (Exception e_0) {
				// pass
			}
			pattern = "bbg())a";
			try {
				ILOG.J2CsMapping.Text.Pattern.Compile(pattern);
				NUnit.Framework.Assert.Fail("Expected a Exception when compiling pattern: "
						+ pattern);
			} catch (Exception e_1) {
				// pass
			}
	
			pattern = "cdb(?i))a";
			try {
				ILOG.J2CsMapping.Text.Pattern.Compile(pattern);
				NUnit.Framework.Assert.Fail("Expected a Exception when compiling pattern: "
						+ pattern);
			} catch (Exception e_2) {
				// pass
			}
	
			/*
			 * This pattern should compile - HARMONY-2127
			 */
			pattern = "x(?c)y";
			ILOG.J2CsMapping.Text.Pattern.Compile(pattern);
	
			/*
			 * this pattern doesn't match any string, but should be compiled anyway
			 */
			pattern = @"(b\\1)a";
			ILOG.J2CsMapping.Text.Pattern.Compile(pattern);
		}
	
		/*
		 * Class under test for Pattern compile(String)
		 */
		[NUnit.Framework.Test]
		public void TestQuantCompileNeg() {
			String[] patterns = { "5{,2}", "{5asd", "{hgdhg", "{5,hjkh", "{,5hdsh",
					"{5,3shdfkjh}" };
			/* foreach */
			foreach (String element  in  patterns) {
				try {
					ILOG.J2CsMapping.Text.Pattern.Compile(element);
					NUnit.Framework.Assert.Fail("Exception was expected, but compilation succeeds");
				} catch (Exception pse) {
					continue;
				}
			}
			// Regression for HARMONY-1365
			String pattern = @"(?![^\\<C\\f\\0146\\0270\\}&&[|\\02-\\x3E\\}|X-\\|]]{7,}+)[|\\\\\\x98\\<\\?\\u4FCFr\\,\\0025\\}\\004|\\0025-\\052\061]|(?<![|\\01-\\u829E])|(?<!\\p{Alpha})|^|(?-s:[^\\x15\\\\\\x24F\\a\\,\\a\\u97D8[\\x38\\a[\\0224-\\0306[^\\0020-\\u6A57]]]]??)(?uxix:[^|\\{\\[\\0367\\t\\e\\x8C\\{\\[\\074c\\]V[|b\\fu\\r\\0175\\<\\07f\\066s[^D-\\x5D]]])(?xx:^{5,}+)(?uuu)(?=^\\D)|(?!\\G)(?>\\G*?)(?![^|\\]\\070\\ne\\{\\t\\[\\053\\?\\\\\\x51\\a\\075\\0023-\\[&&[|\\022-\\xEA\\00-\\u41C2&&[^|a-\\xCC&&[^\\037\\uECB3\\u3D9A\\x31\\|\\<b\\0206\\uF2EC\\01m\\,\\ak\\a\\03&&\\p{Punct}]]]])(?-dxs:[|\\06-\\07|\\e-\\x63&&[|Tp\\u18A3\\00\\|\\xE4\\05\\061\\015\\0116C|\\r\\{\\}\\006\\xEA\\0367\\xC4\\01\\0042\\0267\\xBB\\01T\\}\\0100\\?[|\\[-\\u459B|\\x23\\x91\\rF\\0376[|\\?-\\x94\\0113-\\\\\\s]]]]{6}?)(?<=[^\\t-\\x42H\\04\\f\\03\\0172\\?i\\u97B6\\e\\f\\uDAC2])(?=\\B*+)(?>[^\\016\\r\\{\\,\\uA29D\\034\\02[\\02-\\[|\\t\\056\\uF599\\x62\\e\\<\\032\\uF0AC\\0026\\0205Q\\|\\\\\\06\\0164[|\\057-\\u7A98&&[\\061-g|\\|\\0276\\n\\042\\011\\e\\xE8\\x64B\\04\\u6D0EDW^\\p{Lower}]]]]?)(?<=[^\\n\\\\\\t\\u8E13\\,\\0114\\u656E\\xA5\\]&&[\\03-\\026|\\uF39D\\01\\{i\\u3BC2\\u14FE]])(?<=[^|\\uAE62\\054H\\|\\}&&^\\p{Space}])(?sxx)(?<=[\\f\\006\\a\\r\\xB4]*+)|(?x-xd:^{5}+)()";
			NUnit.Framework.Assert.IsNotNull(ILOG.J2CsMapping.Text.Pattern.Compile(pattern));
		}
	
		[NUnit.Framework.Test]
		public void TestQuantCompilePos() {
			String[] patterns = {/* "(abc){1,3}", */"abc{2,}", "abc{5}" };
			/* foreach */
			foreach (String element  in  patterns) {
				ILOG.J2CsMapping.Text.Pattern.Compile(element);
			}
		}
	
        /*
		[NUnit.Framework.Test]
		public void TestQuantComposition() {
			String pattern = "(a{1,3})aab";
			ILOG.J2CsMapping.Text.Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(pattern);
			ILOG.J2CsMapping.Text.Matcher mat = pat.Matcher("aaab");
			mat.Matches();
			mat.Start(1);
			mat.Group(1);
		}*/
	
		/*[NUnit.Framework.Test]
		public void TestMatches() {
			String[][] posSeq = {
					new String[] { "abb", "ababb", "abababbababb",
							"abababbababbabababbbbbabb" },
					new String[] { "213567", "12324567", "1234567", "213213567",
							"21312312312567", "444444567" },
					new String[] { "abcdaab", "aab", "abaab", "cdaab",
							"acbdadcbaab" },
					new String[] { "213234567", "3458", "0987654", "7689546432",
							"0398576", "98432", "5" },
					new String[] {
							"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
							"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
									+ "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" },
					new String[] { "ababbaAabababblice", "ababbaAliceababab",
							"ababbAabliceaaa", "abbbAbbbliceaaa", "Alice" },
					new String[] { "a123", "bnxnvgds156", "for", "while", "if",
							"struct" }, new String[] { "xy" },
					new String[] { "xy" }, new String[] { "xcy" } };
	
			for (int i = 0; i < testPatterns.Length; i++) {
				for (int j = 0; j < posSeq[i].Length; j++) {
					NUnit.Framework.Assert.IsTrue(ILOG.J2CsMapping.Text.Pattern.Matches(testPatterns[i], posSeq[i][j]),"Incorrect match: " + testPatterns[i] + " vs "
											+ posSeq[i][j]);
				}
			}
		}*/
	
		/*[NUnit.Framework.Test]
		public void TestTimeZoneIssue() {
			Pattern p = ILOG.J2CsMapping.Text.Pattern.Compile("GMT(\\+|\\-)(\\d+)(:(\\d+))?");
			Matcher m = p.Matcher("GMT-9:45");
			NUnit.Framework.Assert.IsTrue(m.Matches());
			NUnit.Framework.Assert.AreEqual("-",m.Group(1));
			NUnit.Framework.Assert.AreEqual("9",m.Group(2));
			NUnit.Framework.Assert.AreEqual(":45",m.Group(3));
			NUnit.Framework.Assert.AreEqual("45",m.Group(4));
		}*/
	
		/*[NUnit.Framework.Test]
		public void TestCompileRanges() {
			String[] correctTestPatterns = { "[^]*abb]*", "[^a-d[^m-p]]*abb",
					"[a-d\\d]*abb", "[abc]*abb", "[a-e&&[de]]*abb", "[^abc]*abb",
					"[a-e&&[^de]]*abb", "[a-z&&[^m-p]]*abb", "[a-d[m-p]]*abb",
					"[a-zA-Z]*abb", "[+*?]*abb", "[^+*?]*abb" };
	
			String[] inputSecuence = { "kkkk", "admpabb", "abcabcd124654abb",
					"abcabccbacababb", "dededededededeedabb", "gfdhfghgdfghabb",
					"accabacbcbaabb", "acbvfgtyabb", "adbcacdbmopabcoabb",
					"jhfkjhaSDFGHJkdfhHNJMjkhfabb", "+*??+*abb", "sdfghjkabb" };
	
			for (int i = 0; i < correctTestPatterns.Length; i++) {
				NUnit.Framework.Assert.IsTrue(ILOG.J2CsMapping.Text.Pattern.Matches(correctTestPatterns[i], inputSecuence[i]),"pattern: " + correctTestPatterns[i] + " input: "
									+ inputSecuence[i]);
	
			}
	
			String[] wrongInputSecuence = { "]", "admpkk", "abcabcd124k654abb",
					"abwcabccbacababb", "abababdeababdeabb", "abcabcacbacbabb",
					"acdcbecbaabb", "acbotyabb", "adbcaecdbmopabcoabb",
					"jhfkjhaSDFGHJk;dfhHNJMjkhfabb", "+*?a?+*abb", "sdf+ghjkabb" };
	
			for (int i_0 = 0; i_0 < correctTestPatterns.Length; i_0++) {
				NUnit.Framework.Assert.IsFalse(ILOG.J2CsMapping.Text.Pattern.Matches(
									correctTestPatterns[i_0], wrongInputSecuence[i_0]),"pattern: " + correctTestPatterns[i_0] + " input: "
									+ wrongInputSecuence[i_0]);
	
			}
		}*/
	
		/*[NUnit.Framework.Test]
		public void TestRangesSpecialCases() {
			String[] neg_patterns = { "[a-&&[b-c]]", "[a-\\w]", "[b-a]", "[]" };
	
			/* foreach *
			foreach (String element  in  neg_patterns) {
				try {
					ILOG.J2CsMapping.Text.Pattern.Compile(element);
					NUnit.Framework.Assert.Fail("Exception was expected: " + element);
				} catch (Exception pse) {
				}
			}
	
			String[] pos_patterns = { "[-]+", "----", "[a-]+", "a-a-a-a-aa--",
					"[\\w-a]+", "123-2312--aaa-213", "[a-]]+", "-]]]]]]]]]]]]]]]" };
	
			for (int i = 0; i < pos_patterns.Length; i++) {
				String pat = pos_patterns[i++];
				String inp = pos_patterns[i];
				NUnit.Framework.Assert.IsTrue(ILOG.J2CsMapping.Text.Pattern.Matches(pat, inp),"pattern: " + pat + " input: " + inp);
			}
		}*/
	/*
		[NUnit.Framework.Test]
		public void TestZeroSymbols() {
			NUnit.Framework.Assert.IsTrue(ILOG.J2CsMapping.Text.Pattern.Matches(@"[\0]*abb", @"\0\0\0\0\0\0abb"));
		}*/
	/*
		[NUnit.Framework.Test]
		public void TestEscapes() {
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile("\\Q{]()*?");
			Matcher mat = pat.Matcher("{]()*?");
	
			NUnit.Framework.Assert.IsTrue(mat.Matches());
		}*/
	
		/*[NUnit.Framework.Test]
		public void TestRegressions() {
			// Bug 181
			ILOG.J2CsMapping.Text.Pattern.Compile("[\\t-\\r]");
	
			// HARMONY-4472
			ILOG.J2CsMapping.Text.Pattern.Compile("a*.+");
	
			// Bug187
			ILOG.J2CsMapping.Text.Pattern.Compile(@"|(?idmsux-idmsux)|(?idmsux-idmsux)|[^|\\[-\\0274|\\,-\\\\[^|W\\}\\nq\\x65\\002\\xFE\\05\\06\\00\\x66\\x47i\\,\\xF2\\=\\06\\u0EA4\\x9B\\x3C\\f\\|\\{\\xE5\\05\\r\\u944A\\xCA\\e|\\x19\\04\\x07\\04\\u607B\\023\\0073\\x91Tr\\0150\\x83]]?(?idmsux-idmsux:\\p{Alpha}{7}?)||(?<=[^\\uEC47\\01\\02\\u3421\\a\\f\\a\\013q\\035w\\e])(?<=\\p{Punct}{0,}?)(?=^\\p{Lower})(?!\\b{8,14})(?<![|\\00-\\0146[^|\\04\\01\\04\\060\\f\\u224DO\\x1A\\xC4\\00\\02\\0315\\0351\\u84A8\\xCBt\\xCC\\06|\\0141\\00\\=\\e\\f\\x6B\\0026Tb\\040\\x76xJ&&[\\\\-\\]\\05\\07\\02\\u2DAF\\t\\x9C\\e\\0023\\02\\,X\\e|\\u6058flY\\u954C]]]{5}?)(?<=\\p{Sc}{8}+)[^|\\026-\\u89BA|o\\u6277\\t\\07\\x50&&\\p{Punct}]{8,14}+((?<=^\\p{Punct})|(?idmsux-idmsux)||(?>[\\x3E-\\]])|(?idmsux-idmsux:\\p{Punct})|(?<![\\0111\\0371\\xDF\\u6A49\\07\\u2A4D\\00\\0212\\02Xd-\\xED[^\\a-\\0061|\\0257\\04\\f\\[\\0266\\043\\03\\x2D\\042&&[^\\f-\\]&&\\s]]])|(?>[|\\n\\042\\uB09F\\06\\u0F2B\\uC96D\\x89\\uC166\\xAA|\\04-\\][^|\\a\\|\\rx\\04\\uA770\\n\\02\\t\\052\\056\\0274\\|\\=\\07\\e|\\00-\\x1D&&[^\\005\\uB15B\\uCDAC\\n\\x74\\0103\\0147\\uD91B\\n\\062G\\u9B4B\\077\\}\\0324&&[^\\0302\\,\\0221\\04\\u6D16\\04xy\\uD193\\[\\061\\06\\045\\x0F|\\e\\xBB\\f\\u1B52\\023\\u3AD2\\033\\007\\022\\}\\x66\\uA63FJ-\\0304]]]]{0,0})||(?<![^|\\0154U\\u0877\\03\\fy\\n\\|\\0147\\07-\\=[|q\\u69BE\\0243\\rp\\053\\02\\x33I\\u5E39\\u9C40\\052-\\xBC[|\\0064-\\?|\\uFC0C\\x30\\0060\\x45\\\\\\02\\?p\\xD8\\0155\\07\\0367\\04\\uF07B\\000J[^|\\0051-\\{|\\u9E4E\\u7328\\]\\u6AB8\\06\\x71\\a\\]\\e\\|KN\\u06AA\\0000\\063\\u2523&&[\\005\\0277\\x41U\\034\\}R\\u14C7\\u4767\\x09\\n\\054Ev\\0144\\<\\f\\,Q-\\xE4]]]]]{3}+)|(?>^+)|(?![^|\\|\\nJ\\t\\<\\04E\\\\\\t\\01\\\\\\02\\|\\=\\}\\xF3\\uBEC2\\032K\\014\\uCC5F\\072q\\|\\0153\\xD9\\0322\\uC6C8[^\\t\\0342\\x34\\x91\\06\\{\\xF1\\a\\u1710\\?\\xE7\\uC106\\02pF\\<&&[^|\\]\\064\\u381D\\u50CF\\eO&&[^|\\06\\x2F\\04\\045\\032\\u8536W\\0377\\0017|\\x06\\uE5FA\\05\\xD4\\020\\04c\\xFC\\02H\\x0A\\r]]]]+?)(?idmsux-idmsux)|(?<![|\\r-\\,&&[I\\t\\r\\0201\\xDB\\e&&[^|\\02\\06\\00\\<\\a\\u7952\\064\\051\\073\\x41\\?n\\040\\0053\\031&&[\\x15-\\|]]]]{8,11}?)(?![^|\\<-\\uA74B\\xFA\\u7CD2\\024\\07n\\<\\x6A\\0042\\uE4FF\\r\\u896B\\[\\=\\042Y&&^\\p{ASCII}]++)|(?<![R-\\|&&[\\a\\0120A\\u6145\\<\\050-d[|\\e-\\uA07C|\\016-\\u80D9]]]{1,}+)|(?idmsux-idmsux)|(?idmsux-idmsux)|(?idmsux-idmsux:\\B{6,}?)|(?<=\\D{5,8}?)|(?>[\\{-\\0207|\\06-\\0276\\p{XDigit}])(?idmsux-idmsux:[^|\\x52\\0012\\]u\\xAD\\0051f\\0142\\\\l\\|\\050\\05\\f\\t\\u7B91\\r\\u7763\\{|h\\0104\\a\\f\\0234\\u2D4F&&^\\P{InGreek}]))");
			// HARMONY-5858
			ILOG.J2CsMapping.Text.Pattern.Compile("\\u6211", ILOG.J2CsMapping.Text.Pattern.LITERAL);
		}*/
	
		[NUnit.Framework.Test]
		public void TestOrphanQuantifiers() {
			try {
				ILOG.J2CsMapping.Text.Pattern.Compile("+++++");
				NUnit.Framework.Assert.Fail("Exception expected");
			} catch (Exception pse) {
			}
		}
	
		[NUnit.Framework.Test]
		public void TestOrphanQuantifiers2() {
			try {
				ILOG.J2CsMapping.Text.Pattern.Compile("\\d+*");
				NUnit.Framework.Assert.Fail("Exception expected");
			} catch (Exception pse) {
			}
		}
	
		[NUnit.Framework.Test]
		public void TestBug197() {
			Object[] vals = { ":", ((int)(2)),
					new String[] { "boo", "and:foo" }, ":", ((int)(5)),
					new String[] { "boo", "and", "foo" }, ":", ((int)(-2)),
					new String[] { "boo", "and", "foo" }, ":", ((int)(3)),
					new String[] { "boo", "and", "foo" }, ":", ((int)(1)),
					new String[] { "boo:and:foo" }, "o", ((int)(5)),
					new String[] { "b", "", ":and:f", "", "" }, "o",
					((int)(4)), new String[] { "b", "", ":and:f", "o" }, "o",
					((int)(-2)), new String[] { "b", "", ":and:f", "", "" },
					"o", ((int)(0)), new String[] { "b", "", ":and:f" } };
	
			for (int i = 0; i < vals.Length / 3;) {
				String[] res = ILOG.J2CsMapping.Text.Pattern.Compile(vals[i++].ToString()).Split(
						"boo:and:foo", ((Int32) vals[i++]));
				String[] expectedRes = (String[]) vals[i++];
	
				NUnit.Framework.Assert.AreEqual(expectedRes.Length,res.Length);
	
				for (int j = 0; j < expectedRes.Length; j++) {
					NUnit.Framework.Assert.AreEqual(expectedRes[j],res[j]);
				}
			}
		}
	
		[NUnit.Framework.Test]
		public void TestURIPatterns() {
			String URI_REGEXP_STR = "^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?";
			String SCHEME_REGEXP_STR = "^[a-zA-Z]{1}[\\w+-.]+$";
			String REL_URI_REGEXP_STR = "^(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?";
			String IPV6_REGEXP_STR = "^[0-9a-fA-F\\:\\.]+(\\%\\w+)?$";
			String IPV6_REGEXP_STR2 = "^\\[[0-9a-fA-F\\:\\.]+(\\%\\w+)?\\]$";
			String IPV4_REGEXP_STR = "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$";
			String HOSTNAME_REGEXP_STR = "\\w+[\\w\\-\\.]*";
	
			ILOG.J2CsMapping.Text.Pattern.Compile(URI_REGEXP_STR);
			ILOG.J2CsMapping.Text.Pattern.Compile(REL_URI_REGEXP_STR);
			ILOG.J2CsMapping.Text.Pattern.Compile(SCHEME_REGEXP_STR);
			ILOG.J2CsMapping.Text.Pattern.Compile(IPV4_REGEXP_STR);
			ILOG.J2CsMapping.Text.Pattern.Compile(IPV6_REGEXP_STR);
			ILOG.J2CsMapping.Text.Pattern.Compile(IPV6_REGEXP_STR2);
			ILOG.J2CsMapping.Text.Pattern.Compile(HOSTNAME_REGEXP_STR);
		}
	/*
		[NUnit.Framework.Test]
		public void TestFindBoundaryCases1() {
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(".*\n");
			Matcher mat = pat.Matcher("a\n");
	
			mat.Find();
			NUnit.Framework.Assert.AreEqual("a\n",mat.Group());
	
		}
	
		[NUnit.Framework.Test]
		public void TestFindBoundaryCases2() {
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(".*A");
			Matcher mat = pat.Matcher("aAa");
	
			mat.Find();
			NUnit.Framework.Assert.AreEqual("aA",mat.Group());
	
		}
	
		[NUnit.Framework.Test]
		public void TestFindBoundaryCases3() {
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(".*A");
			Matcher mat = pat.Matcher("a\naA\n");
	
			mat.Find();
			NUnit.Framework.Assert.AreEqual("aA",mat.Group());
	
		}
	
		[NUnit.Framework.Test]
		public void TestFindBoundaryCases4() {
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile("A.*");
			Matcher mat = pat.Matcher("A\n");
	
			mat.Find();
			NUnit.Framework.Assert.AreEqual("A",mat.Group());
	
		}
	
		[NUnit.Framework.Test]
		public void TestFindBoundaryCases5() {
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(".*A.*");
			Matcher mat = pat.Matcher("\nA\naaa\nA\naaAaa\naaaA\n");
			// Matcher mat = pat.matcher("\nA\n");
			String[] res = { "A", "A", "aaAaa", "aaaA" };
			int k = 0;
			for (; mat.Find(); k++) {
				NUnit.Framework.Assert.AreEqual(res[k],mat.Group());
			}
		}
	
		[NUnit.Framework.Test]
		public void TestFindBoundaryCases6() {
			String[] res = { "", "a", "", "" };
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(".*");
			Matcher mat = pat.Matcher("\na\n");
			int k = 0;
	
			for (; mat.Find(); k++) {
				NUnit.Framework.Assert.AreEqual(res[k],mat.Group());
			}
		}
	
		public void _testFindBoundaryCases7() {
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(".*");
			Matcher mat = pat.Matcher("\na\n");
			int k = 0;
	
			for (; mat.Find(); k++) {
				System.Console.Out.WriteLine(mat.Group());
				System.Console.Out.Flush();
			}
		}
	*/
        
        /*
		[NUnit.Framework.Test]
		public void TestBackReferences() {
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(@"(\\((\\w*):(.*):(\\2)\\))");
			Matcher mat = pat.Matcher("(start1: word :start1)(start2: word :start2)");
			int k = 1;
			for (; mat.Find(); k++) {
				NUnit.Framework.Assert.AreEqual("start" + k,mat.Group(2));
				NUnit.Framework.Assert.AreEqual(" word ",mat.Group(3));
				NUnit.Framework.Assert.AreEqual("start" + k,mat.Group(4));
	
			}
	
			NUnit.Framework.Assert.AreEqual(3,k);
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(@".*(.)\\1");
			mat = pat.Matcher("saa");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
		}
	
		public void _testBackReferences1() {
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(@"(\\((\\w*):(.*):(\\2)\\))");
			Matcher mat = pat.Matcher("(start1: word :start1)(start2: word :start2)");
			int k = 1;
			for (; mat.Find(); k++) {
				System.Console.Out.WriteLine(mat.Group(2));
				System.Console.Out.WriteLine(mat.Group(3));
				System.Console.Out.WriteLine(mat.Group(4));
	
			}
	
			NUnit.Framework.Assert.AreEqual(3,k);
		}
	
		[NUnit.Framework.Test]
		public void TestNewLine() {
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile("(^$)*\n", ILOG.J2CsMapping.Text.Pattern.MULTILINE);
			Matcher mat = pat.Matcher("\r\n\n");
			int counter = 0;
			while (mat.Find()) {
				counter++;
			}
			NUnit.Framework.Assert.AreEqual(2,counter);
		}
	
		[NUnit.Framework.Test]
		public void TestFindGreedy() {
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(".*aaa", ILOG.J2CsMapping.Text.Pattern.DOTALL);
			Matcher mat = pat.Matcher("aaaa\naaa\naaaaaa");
			mat.Matches();
			NUnit.Framework.Assert.AreEqual(15,mat.End());
		}
	
		[NUnit.Framework.Test]
		public void TestSOLQuant() {
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile("$*", ILOG.J2CsMapping.Text.Pattern.MULTILINE);
			Matcher mat = pat.Matcher("\n\n");
			int counter = 0;
			while (mat.Find()) {
				counter++;
			}
	
			NUnit.Framework.Assert.AreEqual(3,counter);
		}*/
	
		[NUnit.Framework.Test]
		public void TestIllegalEscape() {
			try {
				ILOG.J2CsMapping.Text.Pattern.Compile("\\y");
				NUnit.Framework.Assert.Fail("Exception expected");
			} catch (Exception pse) {
			}
		}
	
		[NUnit.Framework.Test]
		public void TestEmptyFamily() {
			ILOG.J2CsMapping.Text.Pattern.Compile("\\p{Lower}");
		}
	/*
		[NUnit.Framework.Test]
		public void TestNonCaptConstr() {
			// Flags
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile("(?i)b*(?-i)a*");
			NUnit.Framework.Assert.IsTrue(pat.Matcher("bBbBaaaa").Matches());
			NUnit.Framework.Assert.IsFalse(pat.Matcher("bBbBAaAa").Matches());
	
			// Non-capturing groups
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("(?i:b*)a*");
			NUnit.Framework.Assert.IsTrue(pat.Matcher("bBbBaaaa").Matches());
			NUnit.Framework.Assert.IsFalse(pat.Matcher("bBbBAaAa").Matches());
	
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("(?:-|(-?\\d+\\d\\d\\d))?(?:-|-(\\d\\d))?(?:-|-(\\d\\d))?(T)?(?:(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?)?(?:(?:((?:\\+|\\-)\\d\\d):(\\d\\d))|(Z))?");
			Matcher mat = pat.Matcher("-1234-21-31T41:51:61.789+71:81");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
			NUnit.Framework.Assert.AreEqual("-1234",mat.Group(1));
			NUnit.Framework.Assert.AreEqual("21",mat.Group(2));
			NUnit.Framework.Assert.AreEqual("31",mat.Group(3));
			NUnit.Framework.Assert.AreEqual("T",mat.Group(4));
			NUnit.Framework.Assert.AreEqual("41",mat.Group(5));
			NUnit.Framework.Assert.AreEqual("51",mat.Group(6));
			NUnit.Framework.Assert.AreEqual("61",mat.Group(7));
			NUnit.Framework.Assert.AreEqual(".789",mat.Group(8));
			NUnit.Framework.Assert.AreEqual("+71",mat.Group(9));
			NUnit.Framework.Assert.AreEqual("81",mat.Group(10));
	
			// positive lookahead
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(".*\\.(?=log$).*$");
			NUnit.Framework.Assert.IsTrue(pat.Matcher("a.b.c.log").Matches());
			NUnit.Framework.Assert.IsFalse(pat.Matcher("a.b.c.log.").Matches());
	
			// negative lookahead
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(".*\\.(?!log$).*$");
			NUnit.Framework.Assert.IsFalse(pat.Matcher("abc.log").Matches());
			NUnit.Framework.Assert.IsTrue(pat.Matcher("abc.logg").Matches());
	
			// positive lookbehind
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(".*(?<=abc)\\.log$");
			NUnit.Framework.Assert.IsFalse(pat.Matcher("cde.log").Matches());
			NUnit.Framework.Assert.IsTrue(pat.Matcher("abc.log").Matches());
	
			// negative lookbehind
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(".*(?<!abc)\\.log$");
			NUnit.Framework.Assert.IsTrue(pat.Matcher("cde.log").Matches());
			NUnit.Framework.Assert.IsFalse(pat.Matcher("abc.log").Matches());
	
			// atomic group
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("(?>a*)abb");
			NUnit.Framework.Assert.IsFalse(pat.Matcher("aaabb").Matches());
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("(?>a*)bb");
			NUnit.Framework.Assert.IsTrue(pat.Matcher("aaabb").Matches());
	
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("(?>a|aa)aabb");
			NUnit.Framework.Assert.IsTrue(pat.Matcher("aaabb").Matches());
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("(?>aa|a)aabb");
			NUnit.Framework.Assert.IsFalse(pat.Matcher("aaabb").Matches());
	
			// quantifiers over look ahead
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(".*(?<=abc)*\\.log$");
			NUnit.Framework.Assert.IsTrue(pat.Matcher("cde.log").Matches());
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(".*(?<=abc)+\\.log$");
			NUnit.Framework.Assert.IsFalse(pat.Matcher("cde.log").Matches());
	
		}*/
	
		public void _testCorrectReplacementBackreferencedJointSet() {
			ILOG.J2CsMapping.Text.Pattern.Compile(@"ab(a)*\\1");
			ILOG.J2CsMapping.Text.Pattern.Compile("abc(cd)fg");
			ILOG.J2CsMapping.Text.Pattern.Compile("aba*cd");
			ILOG.J2CsMapping.Text.Pattern.Compile("ab(a)*+cd");
			ILOG.J2CsMapping.Text.Pattern.Compile("ab(a)*?cd");
			ILOG.J2CsMapping.Text.Pattern.Compile("ab(a)+cd");
			ILOG.J2CsMapping.Text.Pattern.Compile(@".*(.)\\1");
			ILOG.J2CsMapping.Text.Pattern.Compile("ab((a)|c|d)e");
			ILOG.J2CsMapping.Text.Pattern.Compile("abc((a(b))cd)");
			ILOG.J2CsMapping.Text.Pattern.Compile("ab(a)++cd");
			ILOG.J2CsMapping.Text.Pattern.Compile("ab(a)?(c)d");
			ILOG.J2CsMapping.Text.Pattern.Compile("ab(a)?+cd");
			ILOG.J2CsMapping.Text.Pattern.Compile("ab(a)??cd");
			ILOG.J2CsMapping.Text.Pattern.Compile("ab(a)??cd");
			ILOG.J2CsMapping.Text.Pattern.Compile("ab(a){1,3}?(c)d");
		}
	/*
		[NUnit.Framework.Test]
		public void TestCompilePatternWithTerminatorMark() {
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile("a\u0000\u0000cd");
			Matcher mat = pat.Matcher("a\u0000\u0000cd");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
		}
	
		[NUnit.Framework.Test]
		public void TestAlternations() {
			String baseString = "|a|bc";
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			Matcher mat = pat.Matcher("");
	
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "a||bc";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher("");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "a|bc|";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher("");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "a|b|";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher("");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "a(|b|cd)e";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher("ae");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "a(b||cd)e";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher("ae");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "a(b|cd|)e";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher("ae");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "a(b|c|)e";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher("ae");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "a(|)e";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher("ae");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "|";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher("");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "a(?:|)e";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher("ae");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "a||||bc";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher("");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "(?i-is)|a";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher("a");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
		}
	
		[NUnit.Framework.Test]
		public void TestMatchWithGroups() {
			String baseString = "jwkerhjwehrkwjehrkwjhrwkjehrjwkehrjkwhrkwehrkwhrkwrhwkhrwkjehr";
			String pattern = @".*(..).*\\1.*";
			NUnit.Framework.Assert.IsTrue(ILOG.J2CsMapping.Text.Pattern.Compile(pattern).Matcher(baseString).Matches());
	
			baseString = "saa";
			pattern = @".*(.)\\1";
			NUnit.Framework.Assert.IsTrue(ILOG.J2CsMapping.Text.Pattern.Compile(pattern).Matcher(baseString).Matches());
			NUnit.Framework.Assert.IsTrue(ILOG.J2CsMapping.Text.Pattern.Compile(pattern).Matcher(baseString).Find());
		}
	*/

		[NUnit.Framework.Test]
		public void TestSplitEmptyCharSequence() {
			String s1 = "";
			String[] arr = ILOG.J2CsMapping.Text.RegExUtil.Split(s1, ":");
			NUnit.Framework.Assert.AreEqual(arr.Length,1);
		}
	
		[NUnit.Framework.Test]
		public void TestSplitEndsWithPattern() {
			NUnit.Framework.Assert.AreEqual(ILOG.J2CsMapping.Text.RegExUtil.Split(",,", "," ,3).Length,3);
			NUnit.Framework.Assert.AreEqual(ILOG.J2CsMapping.Text.RegExUtil.Split(",,", "," ,4).Length,3);
	
			NUnit.Framework.Assert.AreEqual(ILOG.J2CsMapping.Text.Pattern.Compile("o").Split("boo:and:foo", 5).Length,5);
			NUnit.Framework.Assert.AreEqual(ILOG.J2CsMapping.Text.Pattern.Compile("b").Split("ab", -1).Length,2);
		}
	/*
		[NUnit.Framework.Test]
		public void TestCaseInsensitiveFlag() {
			NUnit.Framework.Assert.IsTrue(ILOG.J2CsMapping.Text.Pattern.Matches("(?i-:AbC)", "ABC"));
		}
	
		[NUnit.Framework.Test]
		public void TestEmptyGroups() {
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile("ab(?>)cda");
			Matcher mat = pat.Matcher("abcda");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("ab()");
			mat = pat.Matcher("ab");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			pat = ILOG.J2CsMapping.Text.Pattern.Compile("abc(?:)(..)");
			mat = pat.Matcher("abcgf");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
		}
	
		[NUnit.Framework.Test]
		public void TestCompileNonCaptGroup() {
			bool isCompiled = false;
	
			try {
				ILOG.J2CsMapping.Text.Pattern.Compile("(?:)", ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
				ILOG.J2CsMapping.Text.Pattern.Compile("(?:)", ILOG.J2CsMapping.Text.Pattern.CANON_EQ | ILOG.J2CsMapping.Text.Pattern.DOTALL);
				ILOG.J2CsMapping.Text.Pattern.Compile("(?:)", ILOG.J2CsMapping.Text.Pattern.CANON_EQ | ILOG.J2CsMapping.Text.Pattern.CASE_INSENSITIVE);
				ILOG.J2CsMapping.Text.Pattern.Compile("(?:)", ILOG.J2CsMapping.Text.Pattern.CANON_EQ | ILOG.J2CsMapping.Text.Pattern.COMMENTS
						| ILOG.J2CsMapping.Text.Pattern.UNIX_LINES);
				isCompiled = true;
			} catch (Exception e) {
				System.Console.Out.WriteLine(e);
			}
			NUnit.Framework.Assert.IsTrue(isCompiled);
		}
	
		[NUnit.Framework.Test]
		public void TestEmbeddedFlags() {
			String baseString = "(?i)((?s)a)";
			String testString = "A";
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			Matcher mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "(?x)(?i)(?s)(?d)a";
			testString = "A";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "(?x)(?i)(?s)(?d)a.";
			testString = "a\n";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "abc(?x:(?i)(?s)(?d)a.)";
			testString = "abcA\n";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "abc((?x)d)(?i)(?s)a";
			testString = "abcdA";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
		}
	*/
		[NUnit.Framework.Test]
		public void TestAltWithFlags() {
			ILOG.J2CsMapping.Text.Pattern.Compile("|(?i-xi)|()");
		}
	/*
		[NUnit.Framework.Test]
		public void TestRestoreFlagsAfterGroup() {
			String baseString = "abc((?x)d)   a";
			String testString = "abcd   a";
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString);
			Matcher mat = pat.Matcher(testString);
	
			NUnit.Framework.Assert.IsTrue(mat.Matches());
		}*/
	
		/*
		 * Verify if the Pattern support the following character classes:
		 * \p{javaLowerCase} \p{javaUpperCase} \p{javaWhitespace} \p{javaMirrored}
		 */
		[NUnit.Framework.Test]
		public void TestCompileCharacterClass() {
			// Regression for HARMONY-606, 696
			Pattern pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaLowerCase}");
			NUnit.Framework.Assert.IsNotNull(pattern);
	
			pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaUpperCase}");
			NUnit.Framework.Assert.IsNotNull(pattern);
	
			pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaWhitespace}");
			NUnit.Framework.Assert.IsNotNull(pattern);
	
			pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaMirrored}");
			NUnit.Framework.Assert.IsNotNull(pattern);
	
			pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaDefined}");
			NUnit.Framework.Assert.IsNotNull(pattern);
	
			pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaDigit}");
			NUnit.Framework.Assert.IsNotNull(pattern);
	
			pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaIdentifierIgnorable}");
			NUnit.Framework.Assert.IsNotNull(pattern);
	
			pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaISOControl}");
			NUnit.Framework.Assert.IsNotNull(pattern);
	
			pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaJavaIdentifierPart}");
			NUnit.Framework.Assert.IsNotNull(pattern);
	
			pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaJavaIdentifierStart}");
			NUnit.Framework.Assert.IsNotNull(pattern);
	
			pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaLetter}");
			NUnit.Framework.Assert.IsNotNull(pattern);
	
			pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaLetterOrDigit}");
			NUnit.Framework.Assert.IsNotNull(pattern);
	
			pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaSpaceChar}");
			NUnit.Framework.Assert.IsNotNull(pattern);
	
			pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaTitleCase}");
			NUnit.Framework.Assert.IsNotNull(pattern);
	
			pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaUnicodeIdentifierPart}");
			NUnit.Framework.Assert.IsNotNull(pattern);
	
			pattern = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaUnicodeIdentifierStart}");
			NUnit.Framework.Assert.IsNotNull(pattern);
		}
	/*
		[NUnit.Framework.Test]
		public void TestCanonEqFlag() {
	
			/*
			 * for decompositions see
			 * http://www.unicode.org/Public/4.0-Update/UnicodeData-4.0.0.txt
			 * http://www.unicode.org/reports/tr15/#Decomposition
			 *
			String baseString;
			String testString;
			Pattern pat;
			Matcher mat;
	
			baseString = @"ab(a*)\\1";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
	
			baseString = "a(abcdf)d";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
	
			baseString = "aabcdfd";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
	
			// \u01E0 -> \u0226\u0304 ->\u0041\u0307\u0304
			// \u00CC -> \u0049\u0300
	
			baseString = "\u01E0\u00CCcdb(ac)";
			testString = "\u0226\u0304\u0049\u0300cdbac";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "\u01E0cdb(a\u00CCc)";
			testString = "\u0041\u0307\u0304cdba\u0049\u0300c";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "a\u00CC";
			testString = "a\u0049\u0300";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "\u0226\u0304cdb(ac\u0049\u0300)";
			testString = "\u01E0cdbac\u00CC";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "cdb(?:\u0041\u0307\u0304\u00CC)";
			testString = "cdb\u0226\u0304\u0049\u0300";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "\u01E0[a-c]\u0049\u0300cdb(ac)";
			testString = "\u01E0b\u00CCcdbac";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "\u01E0|\u00CCcdb(ac)";
			testString = "\u0041\u0307\u0304";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "\u00CC?cdb(ac)*(\u01E0)*[a-c]";
			testString = "cdb\u0041\u0307\u0304b";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "a\u0300";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher("a\u00E0a");
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			baseString = "\u7B20\uF9F8abc";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher("\uF9F8\uF9F8abc");
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			// \u01F9 -> \u006E\u0300
			// \u00C3 -> \u0041\u0303
	
			baseString = "cdb(?:\u00C3\u006E\u0300)";
			testString = "cdb\u0041\u0303\u01F9";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			// \u014C -> \u004F\u0304
			// \u0163 -> \u0074\u0327
	
			baseString = "cdb(?:\u0163\u004F\u0304)";
			testString = "cdb\u0074\u0327\u014C";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			// \u00E1->a\u0301
			// canonical ordering takes place \u0301\u0327 -> \u0327\u0301
	
			baseString = "c\u0327\u0301";
			testString = "c\u0301\u0327";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			/*
			 * Hangul decompositions
			 *
			// \uD4DB->\u1111\u1171\u11B6
			// \uD21E->\u1110\u116D\u11B5
			// \uD264->\u1110\u1170
			// not Hangul:\u0453->\u0433\u0301
			baseString = "a\uD4DB\u1111\u1171\u11B6\uD264";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
	
			baseString = "\u0453c\uD4DB";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
	
			baseString = "a\u1110\u116D\u11B5b\uD21Ebc";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
	
			baseString = "\uD4DB\uD21E\u1110\u1170cdb(ac)";
			testString = "\u1111\u1171\u11B6\u1110\u116D\u11B5\uD264cdbac";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "\uD4DB\uD264cdb(a\uD21Ec)";
			testString = "\u1111\u1171\u11B6\u1110\u1170cdba\u1110\u116D\u11B5c";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "a\uD4DB";
			testString = "a\u1111\u1171\u11B6";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "a\uD21E";
			testString = "a\u1110\u116D\u11B5";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "\u1111\u1171\u11B6cdb(ac\u1110\u116D\u11B5)";
			testString = "\uD4DBcdbac\uD21E";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "cdb(?:\u1111\u1171\u11B6\uD21E)";
			testString = "cdb\uD4DB\u1110\u116D\u11B5";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "\uD4DB[a-c]\u1110\u116D\u11B5cdb(ac)";
			testString = "\uD4DBb\uD21Ecdbac";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "\uD4DB|\u00CCcdb(ac)";
			testString = "\u1111\u1171\u11B6";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "\uD4DB|\u00CCcdb(ac)";
			testString = "\u1111\u1171";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Matches());
	
			baseString = "\u00CC?cdb(ac)*(\uD4DB)*[a-c]";
			testString = "cdb\u1111\u1171\u11B6b";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			baseString = "\uD4DB";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher("a\u1111\u1171\u11B6a");
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			baseString = "\u1111";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher("bcda\uD4DBr");
			NUnit.Framework.Assert.IsFalse(mat.Find());
		}*/
	/*
		[NUnit.Framework.Test]
		public void TestIndexesCanonicalEq() {
			String baseString;
			String testString;
			Pattern pat;
			Matcher mat;
	
			baseString = "\uD4DB";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher("bcda\u1111\u1171\u11B6awr");
			NUnit.Framework.Assert.IsTrue(mat.Find());
			NUnit.Framework.Assert.AreEqual(mat.Start(),4);
			NUnit.Framework.Assert.AreEqual(mat.End(),7);
	
			baseString = "\uD4DB\u1111\u1171\u11B6";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher("bcda\u1111\u1171\u11B6\uD4DBawr");
			NUnit.Framework.Assert.IsTrue(mat.Find());
			NUnit.Framework.Assert.AreEqual(mat.Start(),4);
			NUnit.Framework.Assert.AreEqual(mat.End(),8);
	
			baseString = "\uD4DB\uD21E\u1110\u1170";
			testString = "abcabc\u1111\u1171\u11B6\u1110\u116D\u11B5\uD264cdbac";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(baseString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
			NUnit.Framework.Assert.AreEqual(mat.Start(),6);
			NUnit.Framework.Assert.AreEqual(mat.End(),13);
		}*/
	/*
		[NUnit.Framework.Test]
		public void TestCanonEqFlagWithSupplementaryCharacters() {
	
			/*
			 * \u1D1BF->\u1D1BB\u1D16F->\u1D1B9\u1D165\u1D16F in UTF32
			 * \uD834\uDDBF->\uD834\uDDBB\uD834\uDD6F
			 * ->\uD834\uDDB9\uD834\uDD65\uD834\uDD6F in UTF16
			 *
			String patString = "abc\uD834\uDDBFef";
			String testString = "abc\uD834\uDDB9\uD834\uDD65\uD834\uDD6Fef";
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			Matcher mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "abc\uD834\uDDBB\uD834\uDD6Fef";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			patString = "abc\uD834\uDDBB\uD834\uDD6Fef";
			testString = "abc\uD834\uDDBFef";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "abc\uD834\uDDB9\uD834\uDD65\uD834\uDD6Fef";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			patString = "abc\uD834\uDDB9\uD834\uDD65\uD834\uDD6Fef";
			testString = "abc\uD834\uDDBFef";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "abc\uD834\uDDBB\uD834\uDD6Fef";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			/*
			 * testSupplementary characters with no decomposition
			 *
			patString = "a\uD9A0\uDE8Ebc\uD834\uDDBB\uD834\uDD6Fe\uDE8Ef";
			testString = "a\uD9A0\uDE8Ebc\uD834\uDDBFe\uDE8Ef";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString, ILOG.J2CsMapping.Text.Pattern.CANON_EQ);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
		}*/
	/*
		[NUnit.Framework.Test]
		public void TestRangesWithSurrogatesSupplementary() {
			String patString = "[abc\uD8D2]";
			String testString = "\uD8D2";
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			Matcher mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "a";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "ef\uD8D2\uDD71gh";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Find());
	
			testString = "ef\uD8D2gh";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			patString = "[abc\uD8D3&&[c\uD8D3]]";
			testString = "c";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "a";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Matches());
	
			testString = "ef\uD8D3\uDD71gh";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Find());
	
			testString = "ef\uD8D3gh";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			patString = "[abc\uD8D3\uDBEE\uDF0C&&[c\uD8D3\uDBEE\uDF0C]]";
			testString = "c";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "\uDBEE\uDF0C";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "ef\uD8D3\uDD71gh";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Find());
	
			testString = "ef\uD8D3gh";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			patString = "[abc\uDBFC]\uDDC2cd";
			testString = "\uDBFC\uDDC2cd";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Matches());
	
			testString = "a\uDDC2cd";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
		}
	
		[NUnit.Framework.Test]
		public void TestSequencesWithSurrogatesSupplementary() {
			String patString = "abcd\uD8D3";
			String testString = "abcd\uD8D3\uDFFC";
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			Matcher mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Find());
	
			testString = "abcd\uD8D3abc";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			patString = "ab\uDBEFcd";
			testString = "ab\uDBEFcd";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			patString = "\uDFFCabcd";
			testString = "\uD8D3\uDFFCabcd";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Find());
	
			testString = "abc\uDFFCabcdecd";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			patString = "\uD8D3\uDFFCabcd";
			testString = "abc\uD8D3\uD8D3\uDFFCabcd";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
		}
	*/
        /*
		[NUnit.Framework.Test]
		public void TestPredefinedClassesWithSurrogatesSupplementary() {
			String patString = "[123\\D]";
			String testString = "a";
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			Matcher mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			testString = "5";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Find());
	
			testString = "3";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			// low surrogate
			testString = "\uDFC4";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			// high surrogate
			testString = "\uDADA";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			testString = "\uDADA\uDFC4";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			patString = "[123[^\\p{javaDigit}]]";
			testString = "a";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			testString = "5";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Find());
	
			testString = "3";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			// low surrogate
			testString = "\uDFC4";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			// high surrogate
			testString = "\uDADA";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			testString = "\uDADA\uDFC4";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			// surrogate characters
			patString = "\\p{Cs}";
			testString = "\uD916\uDE27";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			mat = pat.Matcher(testString);
	
			/*
			 * see http://www.unicode.org/reports/tr18/#Supplementary_Characters we
			 * have to treat text as code points not code units. \\p{Cs} matches any
			 * surrogate character but here testString is a one code point
			 * consisting of two code units (two surrogate characters) so we find
			 * nothing
			 *
			NUnit.Framework.Assert.IsFalse(mat.Find());
	
			// swap low and high surrogates
			testString = "\uDE27\uD916";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			patString = "[\uD916\uDE271\uD91623&&[^\\p{Cs}]]";
			testString = "1";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			testString = "\uD916";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Find());
	
			testString = "\uD916\uDE27";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Find());
	
			// \uD9A0\uDE8E=\u7828E
			// \u78281=\uD9A0\uDE81
			patString = "[a-\uD9A0\uDE8E]";
			testString = "\uD9A0\uDE81";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
		}*/
	/*
		[NUnit.Framework.Test]
		public void TestDotConstructionWithSurrogatesSupplementary() {
			String patString = ".";
			String testString = "\uD9A0\uDE81";
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			Matcher mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "\uDE81";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "\uD9A0";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "\n";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Matches());
	
			patString = ".*\uDE81";
			testString = "\uD9A0\uDE81\uD9A0\uDE81\uD9A0\uDE81";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Matches());
	
			testString = "\uD9A0\uDE81\uD9A0\uDE81\uDE81";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			patString = ".*";
			testString = "\uD9A0\uDE81\n\uD9A0\uDE81\uD9A0\n\uDE81";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString, ILOG.J2CsMapping.Text.Pattern.DOTALL);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
		}
	
		[NUnit.Framework.Test]
		public void TestQuantifiersWithSurrogatesSupplementary() {
			String patString = "\uD9A0\uDE81*abc";
			String testString = "\uD9A0\uDE81\uD9A0\uDE81abc";
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			Matcher mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "abc";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
		}
	
		[NUnit.Framework.Test]
		public void TestAlternationsWithSurrogatesSupplementary() {
			String patString = "\uDE81|\uD9A0\uDE81|\uD9A0";
			String testString = "\uD9A0";
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			Matcher mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "\uDE81";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "\uD9A0\uDE81";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsTrue(mat.Matches());
	
			testString = "\uDE81\uD9A0";
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Matches());
		}
	
		[NUnit.Framework.Test]
		public void TestGroupsWithSurrogatesSupplementary() {
	
			// this pattern matches nothing
			String patString = "(\uD9A0)\uDE81";
			String testString = "\uD9A0\uDE81";
			Pattern pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString);
			Matcher mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Matches());
	
			patString = "(\uD9A0)";
			testString = "\uD9A0\uDE81";
			pat = ILOG.J2CsMapping.Text.Pattern.Compile(patString, ILOG.J2CsMapping.Text.Pattern.DOTALL);
			mat = pat.Matcher(testString);
			NUnit.Framework.Assert.IsFalse(mat.Find());
		}*/
	
		/*
		 * Regression test for HARMONY-688
		 */
		[NUnit.Framework.Test]
		public void TestUnicodeCategoryWithSurrogatesSupplementary() {
			Pattern p = ILOG.J2CsMapping.Text.Pattern.Compile("\\p{javaLowerCase}");
			Matcher matcher = p.Matcher("\uD801\uDC28");
			NUnit.Framework.Assert.IsTrue(matcher.Find());
		}
	
		/*public static void Main(String[] args) {
			Junit.Textui.TestRunner.Run(typeof(PatternTest));
		}*/
	}
}
