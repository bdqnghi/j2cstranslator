// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:02 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2001-2007, International Business Machines Corporation and    
/// others. All Rights Reserved.                                                
/// </summary>
///
namespace IBM.ICU.Charset
{

    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Resources;
    using System.Runtime.CompilerServices;
    using NUnit.Framework;
    using IBM.ICU.Impl;

    [TestFixture]
    public sealed class ICUListResourceBundleTest : TestFmwk
    {
        public ICUListResourceBundleTest()
        {
        }

        [SetUp]
        public void SetUp() {
            this.simpleAlias = "Open";
            this.zoneTests = new Object[][] {
	                                new Object[] {
	                                        "zoneAlias",
	                                        new String[] { "PST",
	                                                "Pacific Standard Time", "PST",
	                                                "Pacific Daylight Time", "PDT",
	                                                "Los Angeles" } },
	                                new Object[] {
	                                        "zoneAlias1",
	                                        new String[] { "America/Denver",
	                                                "Mountain Standard Time",
	                                                "MST",
	                                                "Mountain Daylight Time",
	                                                "MDT", "Denver" } },
	                                new Object[] { "zoneAlias2", "America/Denver" } };
            this.zoneStrings = new Object[] {
	                new String[] {
	
	                "PST", "Pacific Standard Time", "PST", "Pacific Daylight Time",
	                        "PDT", "Los Angeles",
	
	                },
	                new String[] { "America/Los_Angeles", "Pacific Standard Time",
	                        "PST", "Pacific Daylight Time", "PDT", "Los Angeles",
	
	                }, };
            this.testGetStringByIndexAliasing = new String[] { "PST",
	                "Pacific Standard Time", "PDT", "Los Angeles", };
            this.testGetStringByKeyAliasing = new Object[][] {
	                        new Object[] { "KeyAlias0PST", "PST" },
	                        new Object[] { "KeyAlias1PacificStandardTime",
	                                "Pacific Standard Time" },
	                        new Object[] { "KeyAlias2PDT", "PDT" },
	                        new Object[] { "KeyAlias3LosAngeles", "Los Angeles" } };
        }

        public static void Main(String[] args)
        {
            ICUListResourceBundleTest test = new ICUListResourceBundleTest();
            test.Run(args);

        }

        [Test]
        public void TestReferences()
        {
            ILOG.J2CsMapping.Util.ResourceBundle rb = ICULocaleData.GetLocaleElements("th");
            // logln("got rb:" + rb);
            byte[] binaryData = (byte[])rb.GetObject("%%CollationBin");
            Object colElem = rb.GetObject("collations");
            if (colElem is Object[][])
            {
                Object[][] colElemArr = (Object[][])colElem;
                if (((String)colElemArr[0][0]).Equals("%%CollationBin"))
                {
                    binaryData = (byte[])colElemArr[0][1];
                }
            }
            else
            {
                Errln("Did not get the expected object");
            }
            Logln("got binaryData: " + binaryData + " length: "
                    + ((binaryData == null) ? 0 : binaryData.Length));
            Object[] stringArrayData = (Object[])rb.GetObject("collations");
            // String[] collationData = new String[] {
            // (String)stringArrayData[0],
            // (String)stringArrayData[0]
            // };
            Logln("got stringData: " + stringArrayData + " length: "
                    + stringArrayData.Length);
            Logln("got stringDataElement: " + stringArrayData[0] + " length: "
                    + stringArrayData.Length);
            // System.out.println("got sdee: " + collationData[0]);
            // System.out.println("char data length: " + stringArrayData.length());
        }

        internal String simpleAlias;

        internal Object[][] zoneTests;

        internal Object[] zoneStrings;

        internal Object[] testGetStringByIndexAliasing;

        internal Object[][] testGetStringByKeyAliasing;
        /*
         * private boolean arrayEquals(Object[][] s1, Object[][] s2){ boolean
         * isEqual = true; if(s1.length != s2.length){ return false; } for (int i =
         * 0; i<s1.length; i++){ if(s1[i] instanceof Object[][] && s2[i] instanceof
         * Object[][]){ if(!arrayEquals((Object[][])s1[i],(Object[][]) s2[i])){
         * isEqual = false; } }else if (s1[i] instanceof Object[] && s2[i]
         * instanceof Object[]){ if(!Utility.arrayEquals(s1[i],s2[i])){ isEqual =
         * false; } }else if(s1[i] instanceof Object && s2[i] instanceof Object){
         * if(!s1[i].equals(s2[i])){ isEqual = false; } }else{ isEqual = false;
         * break; } } return isEqual; }
         */

        /*
         * public void TestAliases(){ ResourceBundle rb =
         * ICULocaleData.getResourceBundle
         * ("com.ibm.icu.dev.data","TestDataElements","testaliases");
         * //rb.getObject("CollationElements"); String s1 =
         * rb.getString("simplealias"); if(s1.equals(simpleAlias)){
         * logln("Alias mechanism works for simplealias"); }else{
         * errln("Did not get the expected output for simplealias"); } { Object o =
         * null; // test aliasing through another alias s1 =
         * rb.getString("referencingalias"); ResourceBundle uk =
         * ICULocaleData.getResourceBundle
         * ("com.ibm.icu.impl.data","LocaleElements","uk"); if(uk instanceof
         * ICUListResourceBundle){ o =
         * ((ICUListResourceBundle)uk).getObjectWithFallback("collations/standard");
         * if(o instanceof Object[][]){ Object[][] val = (Object[][]) o;
         * if(s1.equals(val[1][1])){
         * logln("Alias mechanism works for referencingalias"); }else{
         * errln("Did not get the expected result for referencingalias"); } }else{
         * errln
         * ("Did not get the expected result for collations resource of uk bundle");
         * } } Object anotheralias = rb.getObject("anotheralias"); if(anotheralias
         * instanceof Object[][]&& o instanceof Object[][]){
         * if(arrayEquals((Object[][])o, (Object[][])anotheralias)){
         * logln("Alias mechanism works for anotheralias"); }else{
         * errln("Did not get the expected output for anotheralias"); }
         * 
         * }else{ errln("Alias mechanism failed for anotheralias in TestAlias"); } o
         * = ((ICUListResourceBundle)uk).getObject("collations"); Object o1 =
         * rb.getObject("collations"); if(o1 instanceof Object[][]&& o instanceof
         * Object[][]){ if(arrayEquals((Object[][])o, (Object[][])o1)){
         * logln("Alias mechanism works for CollationElements"); }else{
         * errln("Did not get the expected output for collations"); }
         * 
         * }else{ errln("Alias mechanism failed for collations in TestAlias"); }
         * 
         * }
         * 
         * Object o1 = rb.getObject("zoneTests"); if(o1 instanceof Object[][]){
         * if(arrayEquals(zoneTests, (Object[][])o1)){
         * logln("Alias mechanism works for zoneTests"); }else{
         * errln("Did not get the expected output for zoneTests"); }
         * 
         * }else{ errln("Alias mechanism failed for zoneTest in TestAlias"); } o1 =
         * rb.getObject("zoneStrings"); if(o1 instanceof Object[]){
         * if(Utility.arrayEquals(zoneStrings, (Object[])o1)){
         * logln("Alias mechanism works for zoneStrings"); }else{
         * errln("Did not get the expected output for zoneStrings"); }
         * 
         * }else{ errln("Alias mechanism failed for zoneStrings in TestAlias"); } o1
         * = rb.getObject("testGetStringByIndexAliasing"); if(o1 instanceof
         * Object[]){ if(Utility.arrayEquals(testGetStringByIndexAliasing,
         * (Object[])o1)){
         * logln("Alias mechanism works for testGetStringByIndexAliasing"); }else{
         * errln
         * ("Did not get the expected output for testGetStringByIndexAliasing"); }
         * 
         * }else{
         * errln("Alias mechanism failed for testGetStringByIndexAliasing in TestAlias"
         * ); }
         * 
         * o1 = rb.getObject("testGetStringByKeyAliasing"); if(o1 instanceof
         * Object[][]){ if(arrayEquals(testGetStringByKeyAliasing, (Object[][])o1)){
         * logln("Alias mechanism works for testGetStringByKeyAliasing"); }else{
         * errln("Did not get the expected output for testGetStringByKeyAliasing");
         * }
         * 
         * }else{
         * errln("Alias mechanism failed for testGetStringByKeyAliasing in TestAlias"
         * ); } /* should not get an exception rb =
         * ICULocaleData.getResourceBundle("com.ibm.icu.impl.data"
         * ,"LocaleElements","fr_BE"); Object o = rb.getObject("SpelloutRules");
         * if(o instanceof String){ logln("Alias mechanism works"); }else{
         * errln("Alias mechanism failed for fr_BE SpelloutRules"); } rb =
         * ICULocaleData
         * .getResourceBundle("com.ibm.icu.impl.data","LocaleElements","zh_TW"); o =
         * rb.getObject("collations"); if(o instanceof Object[][]){ Object[][] arr =
         * (Object[][])o; if(((String)arr[0][0])== "default"){
         * logln("Alias mechanism works"); }else{
         * errln("Alias mechanism failed for zh_TW collations"); } }else{
         * errln("Did not get the expected object for collations"); }
         * 
         * 
         * }
         */
        /*
         * public void TestCircularAliases(){ try{ ResourceBundle rb =
         * ICULocaleData.
         * getResourceBundle("com.ibm.icu.dev.data","TestDataElements",
         * "testcircularalias"); rb.getObject("aaa");
         * }catch(java.util.MissingResourceException e){
         * if(e.toString().indexOf("ircular")==-1){
         * errln("Did not get the expected Exception for circular aliases"); }
         * return; }
         * errln("Did not get the expected Exception for circular aliases"); }
         */
        /*
         * public void TestGetObjectWithFallback(){ ResourceBundle bundle =
         * ICULocaleData
         * .getResourceBundle("com.ibm.icu.impl.data","LocaleElements","te_IN");
         * if(bundle instanceof ICUListResourceBundle){ ICUListResourceBundle ilrb =
         * (ICUListResourceBundle) bundle; String key = (String)
         * ilrb.getObjectWithFallback("Keys/collation");
         * if(!key.equals("COLLATION")){
         * errln("Did not get the expected result from getObjectWithFallback method."
         * ); } String type = (String)
         * ilrb.getObjectWithFallback("Types/collation/direct");
         * if(!type.equals("DIRECT")){
         * errln("Did not get the expected result form getObjectWithFallback method."
         * ); } }else{ errln("Did not get the expected bundle."); }
         * 
         * try{ ResourceBundle bundle1 =
         * ICULocaleData.getResourceBundle("com.ibm.icu.impl.data"
         * ,"LocaleElements","de__PHONEBOOK"); if(bundle instanceof
         * ICUListResourceBundle){ ICUListResourceBundle ilrb =
         * (ICUListResourceBundle) bundle1; String key = (String)
         * ilrb.getObjectWithFallback("collations/collation/default");
         * if(!key.equals("phonebook")){
         * errln("Did not get the expected result from getObjectWithFallback method."
         * ); }
         * 
         * }else{ errln("Did not get the expected bundle."); }
         * errln("Did not get the expected exception.");
         * }catch(MissingResourceException ex){ logln("got the expected exception");
         * }
         * 
         * 
         * ResourceBundle bundle1 =
         * ICULocaleData.getResourceBundle("com.ibm.icu.impl.data"
         * ,"LocaleElements","fr_FR"); if(bundle instanceof ICUListResourceBundle){
         * ICUListResourceBundle ilrb = (ICUListResourceBundle) bundle1; String key
         * = (String) ilrb.getObjectWithFallback("collations/default");
         * if(!key.equals("standard")){
         * errln("Did not get the expected result from getObjectWithFallback method."
         * ); }
         * 
         * }else{ errln("Did not get the expected bundle."); }
         * 
         * bundle1 =
         * ICULocaleData.getResourceBundle("com.ibm.icu.impl.data","LocaleElements"
         * ,"es_ES"); if(bundle instanceof ICUListResourceBundle){
         * ICUListResourceBundle ilrb = (ICUListResourceBundle) bundle1; String key
         * = (String) ilrb.getObjectWithFallback("collations/default");
         * if(!key.equals("standard")){
         * errln("Did not get the expected result from getObjectWithFallback method."
         * ); } String nkey = "collations/" + key; Object o =
         * ilrb.getObjectWithFallback(nkey); if(o instanceof Object[][]){
         * if(!((String) ((Object[][])o)[0][0]).equals("%%CollationBin")){
         * errln("Did not get the expected object for "+ nkey); }else{
         * logln("Got the expected object for "+ nkey); } }else{
         * errln("Did not get the expected object for "+ nkey); } }else{
         * errln("Did not get the expected bundle."); } }
         */

    }
}
