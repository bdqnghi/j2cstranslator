// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/8/10 10:24 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2001-2007, International Business Machines Corporation and    
/// others. All Rights Reserved.                                                
/// </summary>
///
namespace IBM.ICU.Impl.Data {
	
	using IBM.ICU.Impl;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A reader for text resource data in the current package or the package of a
	/// given class object. The resource data is loaded through the class loader, so
	/// it will typically be a file in the same directory as the///.class files, or a
	/// file within a JAR file in the corresponding subdirectory. The file must be a
	/// text file in one of the supported encodings; when the resource is opened by
	/// constructing a <c>ResourceReader</c> object the encoding is specified.
	/// </summary>
	///
	public class ResourceReader {
	    private TextReader reader;
	
	    private String resourceName;
	
	    private String encoding; // null for default encoding
	
	    private Type root;
	
	    /// <summary>
	    /// The one-based line number. Has the special value -1 before the object is
	    /// initialized. Has the special value 0 after initialization but before the
	    /// first line is read.
	    /// </summary>
	    ///
	    private int lineNo;
	
	    /// <summary>
	    /// Construct a reader object for the text file of the given name in this
	    /// package, using the given encoding.
	    /// </summary>
	    ///
	    /// <param name="resourceName_0">the name of the text file located in this package's ".data"subpackage.</param>
	    /// <param name="encoding_1">the encoding of the text file; if unsupported an exception isthrown</param>
	    /// <exception cref="UnsupportedEncodingException">if <c>encoding</c> is not supported by the JDK.</exception>
	    public ResourceReader(String resourceName_0, String encoding_1) : this(typeof(ICUData), "data/" + resourceName_0, encoding_1) {
	    }
	
	    /// <summary>
	    /// Construct a reader object for the text file of the given name in this
	    /// package, using the default encoding.
	    /// </summary>
	    ///
	    /// <param name="resourceName_0">the name of the text file located in this package's ".data"subpackage.</param>
	    public ResourceReader(String resourceName_0) : this(typeof(ICUData), "data/" + resourceName_0) {
	    }
	
	    /// <summary>
	    /// Construct a reader object for the text file of the given name in the
	    /// given class's package, using the given encoding.
	    /// </summary>
	    ///
	    /// <param name="resourceName_0">the name of the text file located in the given class'spackage.</param>
	    /// <param name="encoding_1">the encoding of the text file; if unsupported an exception isthrown</param>
	    /// <exception cref="UnsupportedEncodingException">if <c>encoding</c> is not supported by the JDK.</exception>
	    public ResourceReader(Type rootClass, String resourceName_0, String encoding_1) {
	        this.root = rootClass;
	        this.resourceName = resourceName_0;
	        this.encoding = encoding_1;
	        lineNo = -1;
	        _reset();
	    }
	
	    /// <summary>
	    /// Construct a reader object for the input stream associated with the given
	    /// resource name.
	    /// </summary>
	    ///
	    /// <param name="is">the input stream of the resource</param>
	    /// <param name="resourceName_0">the name of the resource</param>
	    public ResourceReader(Stream mask0, String resourceName_0) {
	        this.root = null;
	        this.resourceName = resourceName_0;
	        this.encoding = null;
	
	        this.lineNo = -1;
	        try {
	            StreamReader isr = (encoding == null) ? new StreamReader(mask0) : new StreamReader(mask0,System.Text.Encoding.GetEncoding(encoding));
	
	            this.reader = isr;
	            this.lineNo = 0;
	        } catch (IOException e) {
	        }
	    }
	
	    /// <summary>
	    /// Construct a reader object for the text file of the given name in the
	    /// given class's package, using the default encoding.
	    /// </summary>
	    ///
	    /// <param name="resourceName_0">the name of the text file located in the given class'spackage.</param>
	    public ResourceReader(Type rootClass, String resourceName_0) {
	        this.root = rootClass;
	        this.resourceName = resourceName_0;
	        this.encoding = null;
	        lineNo = -1;
	        try {
	            _reset();
	        } catch (IOException e) {
	        }
	    }
	
	    /// <summary>
	    /// Read and return the next line of the file or <c>null</c> if the end
	    /// of the file has been reached.
	    /// </summary>
	    ///
	    public String ReadLine() {
	        if (lineNo == 0) {
	            // Remove BOMs
	            ++lineNo;
	            String line = reader.ReadLine();
	            if (line[0] == '\uFFEF' || line[0] == '\uFEFF') {
	                line = line.Substring(1);
	            }
	            return line;
	        }
	        ++lineNo;
	        return reader.ReadLine();
	    }
	
	    /// <summary>
	    /// Read a line, ignoring blank lines and lines that start with '#'.
	    /// </summary>
	    ///
	    /// <param name="trim">if true then trim leading rule white space.</param>
	    public String ReadLineSkippingComments(bool trim) {
	        for (;;) {
	            String line = ReadLine();
	            if (line == null) {
	                return line;
	            }
	            // Skip over white space
	            int pos = IBM.ICU.Impl.Utility.SkipWhitespace(line, 0);
	            // Ignore blank lines and comment lines
	            if (pos == line.Length || line[pos] == '#') {
	                continue;
	            }
	            // Process line
	            if (trim)
	                line = line.Substring(pos);
	            return line;
	        }
	    }
	
	    /// <summary>
	    /// Read a line, ignoring blank lines and lines that start with '#'. Do not
	    /// trim leading rule white space.
	    /// </summary>
	    ///
	    public String ReadLineSkippingComments() {
	        return ReadLineSkippingComments(false);
	    }
	
	    /// <summary>
	    /// Return the one-based line number of the last line returned by readLine()
	    /// or readLineSkippingComments(). Should only be called after a call to one
	    /// of these methods; otherwise the return value is undefined.
	    /// </summary>
	    ///
	    public int GetLineNumber() {
	        return lineNo;
	    }
	
	    /// <summary>
	    /// Return a string description of the position of the last line returned by
	    /// readLine() or readLineSkippingComments().
	    /// </summary>
	    ///
	    public String DescribePosition() {
	        return resourceName + ':' + lineNo;
	    }
	
	    /// <summary>
	    /// Reset this reader so that the next call to <c>readLine()</c>
	    /// returns the first line of the file again. This is a somewhat expensive
	    /// call, however, calling <c>reset()</c> after calling it the first
	    /// time does nothing if <c>readLine()</c> has not been called in
	    /// between.
	    /// </summary>
	    ///
	    public void Reset() {
	        try {
	            _reset();
	        } catch (IOException e) {
	        }
	        // We swallow this exception, if there is one. If the encoding is
	        // invalid, the constructor will have thrown this exception already and
	        // the caller shouldn't use the object afterwards.
	    }
	
	    /// <summary>
	    /// Reset to the start by reconstructing the stream and readers. We could
	    /// also use mark() and reset() on the stream or reader, but that would cause
	    /// them to keep the stream data around in memory. We don't want that because
	    /// some of the resource files are large, e.g., 400k.
	    /// </summary>
	    ///
	    private void _reset() {
	        if (lineNo == 0) {
	            return;
	        }
	        Stream mask0 = IBM.ICU.Impl.ICUData.GetStream(root, resourceName);
	        if (mask0 == null) {
	            throw new ArgumentException("Can't open " + resourceName);
	        }
	
	        StreamReader isr = (encoding == null) ? new StreamReader(mask0)
	                : new StreamReader(mask0,System.Text.Encoding.GetEncoding(encoding));
	        reader = isr;
	        lineNo = 0;
	    }
	}
}
