/*
 ******************************************************************************
 * Copyright (C) 2007, International Business Machines Corporation and   *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/8/10 10:24 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl.Duration.Impl {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Resources;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A PeriodFormatterDataService that serves PeriodFormatterData objects based on
	/// data files stored as resources in this directory. These are text files named
	/// after the locale, for example, 'pfd_he_IL.txt' specifies an period formatter
	/// data file for Hebrew as spoken in Israel. Data is in a JSON-like format.
	/// </summary>
	///
	public class ResourceBasedPeriodFormatterDataService :         PeriodFormatterDataService {
	    private ICollection availableLocales; // of String
	
	    private PeriodFormatterData lastData;
	
	    private String lastLocale;
	
	    private IDictionary cache; // String -> PeriodFormatterData
	
	    private PeriodFormatterData fallbackFormatterData;
	
	    private const String PATH = "data/";
	
	    private static readonly ResourceBasedPeriodFormatterDataService singleton = new ResourceBasedPeriodFormatterDataService();
	
	    /// <summary>
	    /// Returns the singleton instance of this class.
	    /// </summary>
	    ///
	    public static ResourceBasedPeriodFormatterDataService GetInstance() {
	        return singleton;
	    }
	
	    /// <summary>
	    /// Constructs the service.
	    /// </summary>
	    ///
	    private ResourceBasedPeriodFormatterDataService() {
	        this.lastData = null;
	        this.lastLocale = null;
	        this.cache = new Hashtable();
	        IList localeNames = new ArrayList(); // of String
	        Stream mask0 = IBM.ICU.Impl.ICUData.GetRequiredStream(GetType(), PATH
	                + "index.txt");
	        try {
	            TextReader br = new StreamReader(mask0,System.Text.Encoding.GetEncoding("UTF-8"));
	            String str0 = null;
	            while (null != (str0 = br.ReadLine())) {
	                str0 = str0.Trim();
	                if (str0.StartsWith("#") || str0.Length == 0) {
	                    continue;
	                }
	                ILOG.J2CsMapping.Collections.Generics.Collections.Add(localeNames,str0);
	            }
	        } catch (IOException e) {
	            throw new InvalidOperationException("IO Error reading " + PATH
	                    + "index.txt: " + e.ToString());
	        }
	        availableLocales = ILOG.J2CsMapping.Collections.Collections.UnmodifiableList(localeNames);
	    }
	
	    public override PeriodFormatterData Get(String localeName) {
	         lock (this) {
	                    if (lastLocale != null && lastLocale.Equals(localeName)) {
	                        return lastData;
	                    }
	        
	                    PeriodFormatterData ld = (PeriodFormatterData) ILOG.J2CsMapping.Collections.Collections.Get(cache,localeName);
	                    if (ld == null) {
	                        String ln = localeName;
	                        while (!ILOG.J2CsMapping.Collections.Collections.Contains(ln,availableLocales)) {
	                            int ix = ln.LastIndexOf("_");
	                            if (ix > -1) {
	                                ln = ln.Substring(0,(ix)-(0));
	                            } else if (!"test".Equals(ln)) {
	                                ln = "test";
	                            } else {
	                                ln = null;
	                                break;
	                            }
	                        }
	                        if (ln != null) {
	                            String name = PATH + "pfd_" + ln + ".xml";
	                            try {
	                                Stream mask0 = IBM.ICU.Impl.ICUData.GetStream(GetType(), name);
	                                if (mask0 == null) {
	                                    throw new MissingManifestResourceException("no resource named " + name);
	                                } else {
	                                    DataRecord dr = IBM.ICU.Impl.Duration.Impl.DataRecord.Read(ln,
	                                            new XMLRecordReader(new StreamReader(mask0,System.Text.Encoding.GetEncoding("UTF-8"))));
	                                    if (dr != null) {
	                                        // debug
	                                        // if (false && ln.equals("ar_EG")) {
	                                        // OutputStreamWriter osw = new
	                                        // OutputStreamWriter(System.out, "UTF-8");
	                                        // XMLRecordWriter xrw = new
	                                        // XMLRecordWriter(osw);
	                                        // dr.write(xrw);
	                                        // osw.flush();
	                                        // }
	                                        ld = new PeriodFormatterData(localeName, dr);
	                                    }
	                                }
	                            } catch (IOException e) {
	                                throw new MissingManifestResourceException("Unhandled Encoding for resource " + name);
	                            }
	                        } else {
	                            throw new MissingManifestResourceException("Duration data not found for  " + localeName);
	                        }
	        
	                        // if (ld == null) {
	                        // ld = getFallbackFormatterData();
	                        // }
	                        ILOG.J2CsMapping.Collections.Collections.Put(cache,localeName,ld);
	                    }
	                    lastData = ld;
	                    lastLocale = localeName;
	        
	                    return ld;
	                }
	    }
	
	    public override ICollection GetAvailableLocales() {
	        return availableLocales;
	    }
	
	    // PeriodFormatterData getFallbackFormatterData() {
	    // synchronized (this) {
	    // if (fallbackFormatterData == null) {
	    // DataRecord dr = new DataRecord(); // hack, no default, will die if used
	    // fallbackFormatterData = new PeriodFormatterData(null, dr);
	    // }
	    // return fallbackFormatterData;
	    // }
	    // }
	}
}
