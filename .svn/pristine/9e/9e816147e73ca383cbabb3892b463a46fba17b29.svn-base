/*
 ******************************************************************************
 * Copyright (C) 2005, International Business Machines Corporation and        *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace IBM.ICU.Charset
{

    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    /// <summary>
    /// Provides a flexible mechanism for controlling access, without requiring that
    /// a class be immutable. Once locked, an object can never be unlocked, so it is
    /// thread-safe from that point onward. The implementation of both methods must
    /// be synchronized. Once the object has been locked, it must guarantee that no
    /// changes can be made to it. Any attempt to alter it must raise an
    /// UnsupportedOperationException exception. This means that when the object
    /// returns internal objects, or if anyone has references to those internal
    /// objects, that those internal objects must either be immutable, or must also
    /// raise exceptions if any attempt to modify them is made. Of course, the object
    /// can return clones of internal objects, since those are safe./// @author davis
    /// </summary>
    ///
    public interface Lockable : ICloneable
    {
        /// <summary>
        /// Determines whether the object has been locked or not.
        /// </summary>
        ///
        bool IsLocked();

        /// <summary>
        /// Locks the object.
        /// </summary>
        ///
        /// <returns>the object itself.</returns>
        Object Lock();

        /// <summary>
        /// Provides for the clone operation. Any clone is initially unlocked.
        /// </summary>
        ///
        Object Clone();
    }
}
