/*
 *******************************************************************************
 * Copyright (C) 1996-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:48 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using IBM.ICU.Impl;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Globalization;
	using System.IO;
	using System.Runtime.CompilerServices;
     using ILOG.J2CsMapping.Util;
	
	/// <summary>
	/// <c>IslamicCalendar</c> is a subclass of <c>Calendar</c> that that
	/// implements the Islamic civil and religious calendars. It is used as the civil
	/// calendar in most of the Arab world and the liturgical calendar of the Islamic
	/// faith worldwide. This calendar is also known as the "Hijri" calendar, since
	/// it starts at the time of Mohammed's emigration (or "hijra") to Medinah on
	/// Thursday, July 15, 622 AD (Julian).
	/// <p>
	/// The Islamic calendar is strictly lunar, and thus an Islamic year of twelve
	/// lunar months does not correspond to the solar year used by most other
	/// calendar systems, including the Gregorian. An Islamic year is, on average,
	/// about 354 days long, so each successive Islamic year starts about 11 days
	/// earlier in the corresponding Gregorian year.
	/// <p>
	/// Each month of the calendar starts when the new moon's crescent is visible at
	/// sunset. However, in order to keep the time fields in this class synchronized
	/// with those of the other calendars and with local clock time, we treat days
	/// and months as beginning at midnight, roughly 6 hours after the corresponding
	/// sunset.
	/// <p>
	/// There are two main variants of the Islamic calendar in existence. The first
	/// is the <em>civil</em> calendar, which uses a fixed cycle of alternating 29-
	/// and 30-day months, with a leap day added to the last month of 11 out of every
	/// 30 years. This calendar is easily calculated and thus predictable in advance,
	/// so it is used as the civil calendar in a number of Arab countries. This is
	/// the default behavior of a newly-created <c>IslamicCalendar</c> object.
	/// <p>
	/// The Islamic <em>religious</em> calendar, however, is based on the
	/// <em>observation</em> of the crescent moon. It is thus affected by the
	/// position at which the observations are made, seasonal variations in the time
	/// of sunset, the eccentricities of the moon's orbit, and even the weather at
	/// the observation site. This makes it impossible to calculate in advance, and
	/// it causes the start of a month in the religious calendar to differ from the
	/// civil calendar by up to three days.
	/// <p>
	/// Using astronomical calculations for the position of the sun and moon, the
	/// moon's illumination, and other factors, it is possible to determine the start
	/// of a lunar month with a fairly high degree of certainty. However, these
	/// calculations are extremely complicated and thus slow, so most algorithms,
	/// including the one used here, are only approximations of the true astronical
	/// calculations. At present, the approximations used in this class are fairly
	/// simplistic; they will be improved in later versions of the code.
	/// <p>
	/// The <see cref="M:IBM.ICU.Util.IslamicCalendar.SetCivil setCivil"/> method determines which approach is used to
	/// determine the start of a month. By default, the fixed-cycle civil calendar is
	/// used. However, if <c>setCivil(false)</c> is called, an approximation of
	/// the true lunar calendar will be used.
	/// <p>
	/// This class should not be subclassed.
	/// </p>
	/// <p>
	/// IslamicCalendar usually should be instantiated using<see cref="M:IBM.ICU.Util.Calendar.GetInstance(IBM.ICU.Util.ULocale)"/> passing in a
	/// <c>ULocale</c> with the tag <c>"@calendar=islamic"</c> or
	/// <c>"@calendar=islamic-civil"</c>.
	/// </p>
	/// </summary>
	///
	/// <seealso cref="T:IBM.ICU.Util.GregorianCalendar"/>
	/// <seealso cref="T:IBM.ICU.Util.Calendar"/>
	/// @stable ICU 2.8
	public class IslamicCalendar : Calendar {
	    // jdk1.4.2 serialver
	    private const long serialVersionUID = -6253365474073869325L;
	
	    // -------------------------------------------------------------------------
	    // Constants...
	    // -------------------------------------------------------------------------
	
	    /// <summary>
	    /// Constant for Muharram, the 1st month of the Islamic year.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public const int MUHARRAM = 0;
	
	    /// <summary>
	    /// Constant for Safar, the 2nd month of the Islamic year.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public const int SAFAR = 1;
	
	    /// <summary>
	    /// Constant for Rabi' al-awwal (or Rabi' I), the 3rd month of the Islamic
	    /// year.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public const int RABI_1 = 2;
	
	    /// <summary>
	    /// Constant for Rabi' al-thani or (Rabi' II), the 4th month of the Islamic
	    /// year.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public const int RABI_2 = 3;
	
	    /// <summary>
	    /// Constant for Jumada al-awwal or (Jumada I), the 5th month of the Islamic
	    /// year.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public const int JUMADA_1 = 4;
	
	    /// <summary>
	    /// Constant for Jumada al-thani or (Jumada II), the 6th month of the Islamic
	    /// year.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public const int JUMADA_2 = 5;
	
	    /// <summary>
	    /// Constant for Rajab, the 7th month of the Islamic year.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public const int RAJAB = 6;
	
	    /// <summary>
	    /// Constant for Sha'ban, the 8th month of the Islamic year.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public const int SHABAN = 7;
	
	    /// <summary>
	    /// Constant for Ramadan, the 9th month of the Islamic year.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public const int RAMADAN = 8;
	
	    /// <summary>
	    /// Constant for Shawwal, the 10th month of the Islamic year.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public const int SHAWWAL = 9;
	
	    /// <summary>
	    /// Constant for Dhu al-Qi'dah, the 11th month of the Islamic year.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public const int DHU_AL_QIDAH = 10;
	
	    /// <summary>
	    /// Constant for Dhu al-Hijjah, the 12th month of the Islamic year.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public const int DHU_AL_HIJJAH = 11;
	
	    private const long HIJRA_MILLIS = -42521587200000L; // 7/16/622 AD
	                                                               // 00:00
	
	    // -------------------------------------------------------------------------
	    // Constructors...
	    // -------------------------------------------------------------------------
	
	    /// <summary>
	    /// Constructs a default <c>IslamicCalendar</c> using the current time
	    /// in the default time zone with the default locale.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public IslamicCalendar() : this(IBM.ICU.Util.TimeZone.GetDefault(), IBM.ICU.Util.ULocale.GetDefault()) {
	    }
	
	    /// <summary>
	    /// Constructs an <c>IslamicCalendar</c> based on the current time in
	    /// the given time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="zone">the given time zone.</param>
	    /// @stable ICU 2.8
	    public IslamicCalendar(TimeZone zone) : this(zone, IBM.ICU.Util.ULocale.GetDefault()) {
	    }
	
	    /// <summary>
	    /// Constructs an <c>IslamicCalendar</c> based on the current time in
	    /// the default time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="aLocale">the given locale.</param>
	    /// @stable ICU 2.8
        public IslamicCalendar(Locale aLocale)
            : this(IBM.ICU.Util.TimeZone.GetDefault(), aLocale)
        {
	    }
	
	    /// <summary>
	    /// Constructs an <c>IslamicCalendar</c> based on the current time in
	    /// the default time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="locale">the given ulocale.</param>
	    /// @stable ICU 3.2
	    public IslamicCalendar(ULocale locale) : this(IBM.ICU.Util.TimeZone.GetDefault(), locale) {
	    }
	
	    /// <summary>
	    /// Constructs an <c>IslamicCalendar</c> based on the current time in
	    /// the given time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="zone">the given time zone.</param>
	    /// <param name="aLocale">the given locale.</param>
	    /// @stable ICU 2.8
        public IslamicCalendar(TimeZone zone, Locale aLocale)
            : base(zone, aLocale)
        {
	        this.civil = true;
	        SetTimeInMillis(DateTime.Now.Millisecond);
	    }
	
	    /// <summary>
	    /// Constructs an <c>IslamicCalendar</c> based on the current time in
	    /// the given time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="zone">the given time zone.</param>
	    /// <param name="locale">the given ulocale.</param>
	    /// @stable ICU 3.2
	    public IslamicCalendar(TimeZone zone, ULocale locale) : base(zone, locale) {
	        this.civil = true;
	        SetTimeInMillis(DateTime.Now.Millisecond);
	    }
	
	    /// <summary>
	    /// Constructs an <c>IslamicCalendar</c> with the given date set in the
	    /// default time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="date">The date to which the new calendar is set.</param>
	    /// @stable ICU 2.8
	    public IslamicCalendar(DateTime date) : base(IBM.ICU.Util.TimeZone.GetDefault(), IBM.ICU.Util.ULocale.GetDefault()) {
	        this.civil = true;
	        this.SetTime(date);
	    }
	
	    /// <summary>
	    /// Constructs an <c>IslamicCalendar</c> with the given date set in the
	    /// default time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="year">the value used to set the <see cref="M:IBM.ICU.Util.IslamicCalendar.YEAR YEAR"/> time field in thecalendar.</param>
	    /// <param name="month">the value used to set the <see cref="M:IBM.ICU.Util.IslamicCalendar.MONTH MONTH"/> time field inthe calendar. Note that the month value is 0-based. e.g., 0for Muharram.</param>
	    /// <param name="date">the value used to set the <see cref="M:IBM.ICU.Util.IslamicCalendar.DATE DATE"/> time field in thecalendar.</param>
	    /// @stable ICU 2.8
	    public IslamicCalendar(int year, int month, int date) : base(IBM.ICU.Util.TimeZone.GetDefault(), IBM.ICU.Util.ULocale.GetDefault()) {
	        this.civil = true;
	        this.Set(IBM.ICU.Util.Calendar.YEAR, year);
	        this.Set(IBM.ICU.Util.Calendar.MONTH, month);
	        this.Set(IBM.ICU.Util.Calendar.DATE, date);
	    }
	
	    /// <summary>
	    /// Constructs an <c>IslamicCalendar</c> with the given date and time
	    /// set for the default time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="year">the value used to set the <see cref="M:IBM.ICU.Util.IslamicCalendar.YEAR YEAR"/> time field in thecalendar.</param>
	    /// <param name="month">the value used to set the <see cref="M:IBM.ICU.Util.IslamicCalendar.MONTH MONTH"/> time field inthe calendar. Note that the month value is 0-based. e.g., 0for Muharram.</param>
	    /// <param name="date">the value used to set the <see cref="M:IBM.ICU.Util.IslamicCalendar.DATE DATE"/> time field in thecalendar.</param>
	    /// <param name="hour">the value used to set the <see cref="M:IBM.ICU.Util.IslamicCalendar.HOUR_OF_DAY HOUR_OF_DAY"/>time field in the calendar.</param>
	    /// <param name="minute">the value used to set the <see cref="M:IBM.ICU.Util.IslamicCalendar.MINUTE MINUTE"/> time field inthe calendar.</param>
	    /// <param name="second">the value used to set the <see cref="M:IBM.ICU.Util.IslamicCalendar.SECOND SECOND"/> time field inthe calendar.</param>
	    /// @stable ICU 2.8
	    public IslamicCalendar(int year, int month, int date, int hour, int minute,
	            int second) : base(IBM.ICU.Util.TimeZone.GetDefault(), IBM.ICU.Util.ULocale.GetDefault()) {
	        this.civil = true;
	        this.Set(IBM.ICU.Util.Calendar.YEAR, year);
	        this.Set(IBM.ICU.Util.Calendar.MONTH, month);
	        this.Set(IBM.ICU.Util.Calendar.DATE, date);
	        this.Set(IBM.ICU.Util.Calendar.HOUR_OF_DAY, hour);
	        this.Set(IBM.ICU.Util.Calendar.MINUTE, minute);
	        this.Set(IBM.ICU.Util.Calendar.SECOND, second);
	    }
	
	    /// <summary>
	    /// Determines whether this object uses the fixed-cycle Islamic civil
	    /// calendar or an approximation of the religious, astronomical calendar.
	    /// </summary>
	    ///
	    /// <param name="beCivil"><c>true</c> to use the civil calendar,<c>false</c> to use the astronomical calendar.</param>
	    /// @stable ICU 2.8
	    public void SetCivil(bool beCivil) {
	        if (civil != beCivil) {
	            // The fields of the calendar will become invalid, because the
	            // calendar
	            // rules are different
	            long m = GetTimeInMillis();
	            civil = beCivil;
	            Clear();
	            SetTimeInMillis(m);
	        }
	    }
	
	    /// <summary>
	    /// Returns <c>true</c> if this object is using the fixed-cycle civil
	    /// calendar, or <c>false</c> if using the religious, astronomical
	    /// calendar.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public bool IsCivil() {
	        return civil;
	    }
	
	    // -------------------------------------------------------------------------
	    // Minimum / Maximum access functions
	    // -------------------------------------------------------------------------
	
	    private static readonly int[][] LIMITS = { new int[] { 0, 0, 0, 0 },
	            new int[] { 1, 1, 5000000, 5000000 }, new int[] { 0, 0, 11, 11 },
	            new int[] { 1, 1, 50, 51 }, new int[] { 0, 0, 4, 6 },
	            new int[] { 1, 1, 29, 30 }, new int[] { 1, 1, 354, 355 },
	            new int[] {}, new int[] { -1, -1, 5, 5 }, new int[] {},
	            new int[] {}, new int[] {}, new int[] {}, new int[] {},
	            new int[] {}, new int[] {}, new int[] {},
	            new int[] { -5000001, -5000001, 5000001, 5000001 }, new int[] {},
	            new int[] { -5000000, -5000000, 5000000, 5000000 }, new int[] {},
	            new int[] {} };
	
	    
	    /// @stable ICU 2.8
	    protected internal override int HandleGetLimit(int field, int limitType) {
	        return LIMITS[field][limitType];
	    }
	
	    // -------------------------------------------------------------------------
	    // Assorted calculation utilities
	    //
	
	    // Unused code - Alan 2003-05
	    // /**
	    // * Find the day of the week for a given day
	    // *
	    // * @param day The # of days since the start of the Islamic calendar.
	    // */
	    // // private and uncalled, perhaps not used yet?
	    // private static final int absoluteDayToDayOfWeek(long day)
	    // {
	    // // Calculate the day of the week.
	    // // This relies on the fact that the epoch was a Thursday.
	    // int dayOfWeek = (int)(day + THURSDAY) % 7 + SUNDAY;
	    // if (dayOfWeek < 0) {
	    // dayOfWeek += 7;
	    // }
	    // return dayOfWeek;
	    // }
	
	    /// <summary>
	    /// Determine whether a year is a leap year in the Islamic civil calendar
	    /// </summary>
	    ///
	    private static bool CivilLeapYear(int year) {
	        return (14 + 11 * year) % 30 < 11;
	
	    }
	
	    /// <summary>
	    /// Return the day # on which the given year starts. Days are counted from
	    /// the Hijri epoch, origin 0.
	    /// </summary>
	    ///
	    private long YearStart(int year) {
	        if (civil) {
	            return (year - 1) * 354 + (long) Math.Floor((3 + 11 * year) / 30.0d);
	        } else {
	            return TrueMonthStart(12 * (year - 1));
	        }
	    }
	
	    /// <summary>
	    /// Return the day # on which the given month starts. Days are counted from
	    /// the Hijri epoch, origin 0.
	    /// </summary>
	    ///
	    /// <param name="year">The hijri year</param>
	    /// <param name="month">The hijri month, 0-based</param>
	    private long MonthStart(int year, int month) {
	        if (civil) {
	            return (long) Math.Ceiling(29.5d * month) + (year - 1) * 354
	                    + (long) Math.Floor((3 + 11 * year) / 30.0d);
	        } else {
	            return TrueMonthStart(12 * (year - 1) + month);
	        }
	    }
	
	    /// <summary>
	    /// Find the day number on which a particular month of the true/lunar Islamic
	    /// calendar starts.
	    /// </summary>
	    ///
	    /// <param name="month">The month in question, origin 0 from the Hijri epoch</param>
	    /// <returns>The day number on which the given month starts.</returns>
	    private static long TrueMonthStart(long month) {
	        long start = cache.Get(month);
	
	        if (start == IBM.ICU.Impl.CalendarCache.EMPTY) {
	            // Make a guess at when the month started, using the average length
	            long origin = HIJRA_MILLIS
	                    + (long) Math.Floor(month
	                                                * IBM.ICU.Impl.CalendarAstronomer.SYNODIC_MONTH - 1) * IBM.ICU.Util.Calendar.ONE_DAY;
	
	            double age = MoonAge(origin);
	
	            if (MoonAge(origin) >= 0) {
	                // The month has already started
	                do {
	                    origin -= IBM.ICU.Util.Calendar.ONE_DAY;
	                    age = MoonAge(origin);
	                } while (age >= 0);
	            } else {
	                // Preceding month has not ended yet.
	                do {
	                    origin += IBM.ICU.Util.Calendar.ONE_DAY;
	                    age = MoonAge(origin);
	                } while (age < 0);
	            }
	
	            start = (origin - HIJRA_MILLIS) / IBM.ICU.Util.Calendar.ONE_DAY + 1;
	
	            cache.Put(month, start);
	        }
	        return start;
	    }
	
	    /// <summary>
	    /// Return the "age" of the moon at the given time; this is the difference in
	    /// ecliptic latitude between the moon and the sun. This method simply calls
	    /// CalendarAstronomer.moonAge, converts to degrees, and adjusts the resultto
	    /// be in the range [-180, 180].
	    /// </summary>
	    ///
	    /// <param name="time">The time at which the moon's age is desired, in millis since1/1/1970.</param>
	    static internal double MoonAge(long time) {
	        double age = 0;
	
	         lock (astro) {
	                    astro.SetTime(time);
	                    age = astro.GetMoonAge();
	                }
	        // Convert to degrees and normalize...
	        age = age * 180 / System.Math.PI;
	        if (age > 180) {
	            age = age - 360;
	        }
	
	        return age;
	    }
	
	    // -------------------------------------------------------------------------
	    // Internal data....
	    //
	
	    // And an Astronomer object for the moon age calculations
	    private static CalendarAstronomer astro = new CalendarAstronomer();
	
	    private static CalendarCache cache = new CalendarCache();
	
	    /// <summary>
	    /// <c>true</c> if this object uses the fixed-cycle Islamic civil
	    /// calendar, and <c>false</c> if it approximates the true religious
	    /// calendar using astronomical calculations for the time of the new moon.
	    /// </summary>
	    ///
	    /// @serial
	    private bool civil;
	
	    // ----------------------------------------------------------------------
	    // Calendar framework
	    // ----------------------------------------------------------------------
	
	    /// <summary>
	    /// Return the length (in days) of the given month.
	    /// </summary>
	    ///
	    /// <param name="extendedYear">The hijri year</param>
	    /// <param name="month">The hijri month, 0-based</param>
	    /// @stable ICU 2.8
	    protected internal override int HandleGetMonthLength(int extendedYear, int month) {
	
	        int length = 0;
	
	        if (civil) {
	            length = 29 + (month + 1) % 2;
	            if (month == DHU_AL_HIJJAH && CivilLeapYear(extendedYear)) {
	                length++;
	            }
	        } else {
	            month = 12 * (extendedYear - 1) + month;
	            length = (int) (TrueMonthStart(month + 1) - TrueMonthStart(month));
	        }
	        return length;
	    }
	
	    /// <summary>
	    /// Return the number of days in the given Islamic year
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    protected internal override int HandleGetYearLength(int extendedYear) {
	        if (civil) {
	            return 354 + ((CivilLeapYear(extendedYear)) ? 1 : 0);
	        } else {
	            int month = 12 * (extendedYear - 1);
	            return (int) (TrueMonthStart(month + 12) - TrueMonthStart(month));
	        }
	    }
	
	    // -------------------------------------------------------------------------
	    // Functions for converting from field values to milliseconds....
	    // -------------------------------------------------------------------------
	
	    // Return JD of start of given month/year
	    
	    /// @stable ICU 2.8
	    protected internal override int HandleComputeMonthStart(int eyear, int month, bool useMonth) {
	        return (int) MonthStart(eyear, month) + 1948439;
	    }
	
	    // -------------------------------------------------------------------------
	    // Functions for converting from milliseconds to field values
	    // -------------------------------------------------------------------------
	
	    
	    /// @stable ICU 2.8
	    protected internal override int HandleGetExtendedYear() {
	        int year;
	        if (NewerField(IBM.ICU.Util.Calendar.EXTENDED_YEAR, IBM.ICU.Util.Calendar.YEAR) == IBM.ICU.Util.Calendar.EXTENDED_YEAR) {
	            year = InternalGet(IBM.ICU.Util.Calendar.EXTENDED_YEAR, 1); // Default to year 1
	        } else {
	            year = InternalGet(IBM.ICU.Util.Calendar.YEAR, 1); // Default to year 1
	        }
	        return year;
	    }
	
	    /// <summary>
	    /// Override Calendar to compute several fields specific to the Islamic
	    /// calendar system. These are:
	    /// <ul>
	    /// <li>ERA
	    /// <li>YEAR
	    /// <li>MONTH
	    /// <li>DAY_OF_MONTH
	    /// <li>DAY_OF_YEAR
	    /// <li>EXTENDED_YEAR
	    /// </ul>
	    /// The DAY_OF_WEEK and DOW_LOCAL fields are already set when this method is
	    /// called. The getGregorianXxx() methods return Gregorian calendar
	    /// equivalents for the given Julian day.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    protected internal override void HandleComputeFields(int julianDay) {
	        int year, month, dayOfMonth, dayOfYear;
	        long monthStart;
	        long days = julianDay - 1948440;
	
	        if (civil) {
	            // Use the civil calendar approximation, which is just arithmetic
	            year = (int) Math.Floor((30 * days + 10646) / 10631.0d);
	            month = (int) Math.Ceiling((days - 29 - YearStart(year)) / 29.5d);
	            month = Math.Min(month,11);
	            monthStart = MonthStart(year, month);
	        } else {
	            // Guess at the number of elapsed full months since the epoch
	            int months = (int) Math.Floor(days
	                                / IBM.ICU.Impl.CalendarAstronomer.SYNODIC_MONTH);
	
	            monthStart = (long) Math.Floor(months
	                                * IBM.ICU.Impl.CalendarAstronomer.SYNODIC_MONTH - 1);
	
	            if (days - monthStart >= 28
	                    && MoonAge(InternalGetTimeInMillis()) > 0) {
	                // If we're near the end of the month, assume next month and
	                // search backwards
	                months++;
	            }
	
	            // Find out the last time that the new moon was actually visible at
	            // this longitude
	            // This returns midnight the night that the moon was visible at
	            // sunset.
	            while ((monthStart = TrueMonthStart(months)) > days) {
	                // If it was after the date in question, back up a month and try
	                // again
	                months--;
	            }
	
	            year = months / 12 + 1;
	            month = months % 12;
	        }
	
	        dayOfMonth = (int) (days - MonthStart(year, month)) + 1;
	
	        // Now figure out the day of the year.
	        dayOfYear = (int) (days - MonthStart(year, 0) + 1);
	
	        InternalSet(IBM.ICU.Util.Calendar.ERA, 0);
	        InternalSet(IBM.ICU.Util.Calendar.YEAR, year);
	        InternalSet(IBM.ICU.Util.Calendar.EXTENDED_YEAR, year);
	        InternalSet(IBM.ICU.Util.Calendar.MONTH, month);
	        InternalSet(IBM.ICU.Util.Calendar.DAY_OF_MONTH, dayOfMonth);
	        InternalSet(IBM.ICU.Util.Calendar.DAY_OF_YEAR, dayOfYear);
	    }
	
	    /// <summary>
	    /// 
	    /// </summary>
	    ///
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public override String GetType() {
	        return "islamic";
	    }
	
	    /*
	     * private static CalendarFactory factory; public static CalendarFactory
	     * factory() { if (factory == null) { factory = new CalendarFactory() {
	     * public Calendar create(TimeZone tz, ULocale loc) { return new
	     * IslamicCalendar(tz, loc); }
	     * 
	     * public String factoryName() { return "Islamic"; } }; } return factory; }
	     */
	}
}
