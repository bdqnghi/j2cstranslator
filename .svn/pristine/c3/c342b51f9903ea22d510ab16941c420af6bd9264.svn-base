/*
 *******************************************************************************
 * Copyright (C) 2005, International Business Machines Corporation and         *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:02 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace IBM.ICU.Charset
{

    using IBM.ICU.Text;
    using IBM.ICU.Util;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using System.IO;
    using System.Runtime.CompilerServices;
    using NUnit.Framework;

    /// <summary>
    /// Tests for the <c>EthiopicCalendar</c> class.
    /// </summary>
    [TestFixture]
    public class EthiopicTest : CalendarTest
    {
        public static void Main(String[] args)
        {
            new EthiopicTest().Run(args);
        }

        /// <summary>
        /// Constants to save typing. 
        /// </summary>
        ///
        public const int MESKEREM = IBM.ICU.Util.EthiopicCalendar.MESKEREM;

        public const int TEKEMT = IBM.ICU.Util.EthiopicCalendar.TEKEMT;

        public const int HEDAR = IBM.ICU.Util.EthiopicCalendar.HEDAR;

        public const int TAHSAS = IBM.ICU.Util.EthiopicCalendar.TAHSAS;

        public const int TER = IBM.ICU.Util.EthiopicCalendar.TER;

        public const int YEKATIT = IBM.ICU.Util.EthiopicCalendar.YEKATIT;

        public const int MEGABIT = IBM.ICU.Util.EthiopicCalendar.MEGABIT;

        public const int MIAZIA = IBM.ICU.Util.EthiopicCalendar.MIAZIA;

        public const int GENBOT = IBM.ICU.Util.EthiopicCalendar.GENBOT;

        public const int SENE = IBM.ICU.Util.EthiopicCalendar.SENE;

        public const int HAMLE = IBM.ICU.Util.EthiopicCalendar.HAMLE;

        public const int NEHASSE = IBM.ICU.Util.EthiopicCalendar.NEHASSE;

        public const int PAGUMEN = IBM.ICU.Util.EthiopicCalendar.PAGUMEN;

        /*
         * DY[20050507] I don't know what this is for yet: public void TestRoll() {
         * int[][] tests = new int[][] { // input roll by output // year month day
         * field amount year month day
         * 
         * { 0001, QIDAH, 2, MONTH, 1, 0001, HIJJAH, 2 }, // non-leap years { 0001,
         * QIDAH, 2, MONTH, 2, 0001, MUHARRAM, 2 }, { 0001, QIDAH, 2, MONTH, -1,
         * 0001, SHAWWAL, 2 }, { 0001, MUHARRAM, 2, MONTH, 12, 0001, MUHARRAM, 2 },
         * { 0001, MUHARRAM, 2, MONTH, 13, 0001, SAFAR, 2 },
         * 
         * { 0001, HIJJAH, 1, DATE, 30, 0001, HIJJAH, 2 }, // 29-day month { 0002,
         * HIJJAH, 1, DATE, 31, 0002, HIJJAH, 2 }, // 30-day month
         * 
         * // Try some rolls that require other fields to be adjusted { 0001,
         * MUHARRAM, 30, MONTH, 1, 0001, SAFAR, 29 }, { 0002, HIJJAH, 30, YEAR, -1,
         * 0001, HIJJAH, 29 }, };
         * 
         * EthiopicCalendar cal = newCivil();
         * 
         * doRollAdd(ROLL, cal, tests); }
         */

        /*
         * Test dates from: "The Amharic Letters of Emperor Theodore of Ethiopia to
         * Queen Victoria and Her Special Envoy", David Appleyard, Girma Selasse
         * Asfaw, Oxford University Press, June 1 1979, ISBN: 0856726605, Longwood
         * Pr Ltd
         * 
         * Ethiopic Gregorian JD 20/02/1855 29/10/1862 2401443 29/10/1857 05/07/1865
         * 2402423 22/05/1858 29/01/1866 2402631 10/08/1858 17/04/1866 2402709
         * 28/04/1859 05/01/1867 2402972 05/05/1860 13/01/1868 2403345
         * 
         * --------------------------------------------------
         * 
         * From the Calendrica applet:
         * http://emr.cs.iit.edu/home/reingold/calendar-book/Calendrica.html
         * 
         * Ethiopic Gregorian JD 07/05/-8 01/01/0000 1721060 08/05/-7 01/01/0001
         * 1721426 06/13/-1 27/08/0007 1723855
         * 
         * 01/01/0000 28/08/0007 1723856 01/01/0001 27/08/0008 1724221 01/01/0002
         * 27/08/0009 1724586 01/01/0003 27/08/0010 1724951 01/01/0004 28/08/0011
         * 1724537 05/13/0000 26/08/0008 1724220 05/13/0001 26/08/0009 1724585
         * 05/13/0002 26/08/0010 1724950 05/13/0003 26/08/0011 1725315 06/13/0003
         * 27/08/0011 1725316 first ethiopian leap year 05/13/0004 26/08/0012
         * 1725561
         * 
         * 06/02/1575 13/10/1582 2299159 07/02/1575 14/10/1582 2299160 Julian
         * 04/10/1582 08/02/1575 15/10/1582 2299161 09/02/1575 16/10/1582 2299162
         * 
         * 23/04/1892 01/01/1900 2415021 23/04/1997 01/01/2005 2453372 05/13/2000
         * 10/09/2008 2454720
         */

        /// <summary>
        /// A huge list of test cases to make sure that computeTime and computeFields
        /// work properly for a wide range of data in the civil calendar.
        /// </summary>
        ///
        public void TestCases()
        {
            TestCase[] tests = {
                    //
                    // The months in this table are 1-based rather than 0-based,
                    // because it's easier to edit that way.
                    // Ethiopic
                    // Julian Day Era Year Month Day WkDay Hour Min Sec
                    //
                    // Dates from "Emporer Theodore..."
	
                    new TestCase(2401442.5d, 1, 1855, 2, 20, IBM.ICU.Charset.CalendarTest.WED, 0, 0, 0), // Gregorian:
                                                                           // 29/10/1862
                    new TestCase(2402422.5d, 1, 1857, 10, 29, IBM.ICU.Charset.CalendarTest.WED, 0, 0, 0), // Gregorian:
                                                                            // 05/07/1865
                    new TestCase(2402630.5d, 1, 1858, 5, 22, IBM.ICU.Charset.CalendarTest.MON, 0, 0, 0), // Gregorian:
                                                                           // 29/01/1866
                    new TestCase(2402708.5d, 1, 1858, 8, 10, IBM.ICU.Charset.CalendarTest.TUE, 0, 0, 0), // Gregorian:
                                                                           // 17/04/1866
                    new TestCase(2402971.5d, 1, 1859, 4, 28, IBM.ICU.Charset.CalendarTest.SAT, 0, 0, 0), // Gregorian:
                                                                           // 05/01/1867
                    new TestCase(2403344.5d, 1, 1860, 5, 5, IBM.ICU.Charset.CalendarTest.MON, 0, 0, 0), // Gregorian:
                                                                          // 13/01/1868
	
                    // Miscellaneous:
                    /*
                     * Skip these tests until JD bug fixed in the Gregorian
                     * calendar:
                     * http://www.jtcsv.com/cgibin/icu-bugs/incoming?id=4406
                     * ;page=2;user=guest
                     **/
                    new TestCase(1721059.5d, 0, -8, 5, 7, IBM.ICU.Charset.CalendarTest.SAT, 0, 0, 0), // Gregorian:
                                                                        // 01/01/0000
                    new TestCase(1721425.5d, 0, -7, 5, 8, IBM.ICU.Charset.CalendarTest.MON, 0, 0, 0), // Gregorian:
                                                                        // 01/01/0001
                    new TestCase(1723854.5d, 0, -1, 13, 6, IBM.ICU.Charset.CalendarTest.MON, 0, 0, 0), // Gregorian:
                                                                         // 27/08/0007
	
                    new TestCase(1723855.5d, 1, 0, 1, 1, IBM.ICU.Charset.CalendarTest.TUE, 0, 0, 0), // Gregorian:
                                                                       // 28/08/0007
                    new TestCase(1724220.5d, 1, 1, 1, 1, IBM.ICU.Charset.CalendarTest.WED, 0, 0, 0), // Gregorian:
                                                                       // 27/08/0008
                    new TestCase(1724585.5d, 1, 2, 1, 1, IBM.ICU.Charset.CalendarTest.THU, 0, 0, 0), // Gregorian:
                                                                       // 27/08/0009
                    new TestCase(1724950.5d, 1, 3, 1, 1, IBM.ICU.Charset.CalendarTest.FRI, 0, 0, 0), // Gregorian:
                                                                       // 27/08/0010
	
                    // new TestCase(1724536.5, 1, 4, 1, 1, SUN, 0, 0, 0), //
                    // Gregorian: 28/08/0011
                    new TestCase(1725316.5d, 1, 4, 1, 1, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0), // Gregorian:
                                                                       // 28/08/0011
                                                                       // - dlf
                    new TestCase(1724219.5d, 1, 0, 13, 5, IBM.ICU.Charset.CalendarTest.TUE, 0, 0, 0), // Gregorian:
                                                                        // 26/08/0008
                    new TestCase(1724584.5d, 1, 1, 13, 5, IBM.ICU.Charset.CalendarTest.WED, 0, 0, 0), // Gregorian:
                                                                        // 26/08/0009
                    new TestCase(1724949.5d, 1, 2, 13, 5, IBM.ICU.Charset.CalendarTest.THU, 0, 0, 0), // Gregorian:
                                                                        // 26/08/0010
                    new TestCase(1725314.5d, 1, 3, 13, 5, IBM.ICU.Charset.CalendarTest.FRI, 0, 0, 0), // Gregorian:
                                                                        // 26/08/0011
                    new TestCase(1725315.5d, 1, 3, 13, 6, IBM.ICU.Charset.CalendarTest.SAT, 0, 0, 0), // Gregorian:
                                                                        // 27/08/0011
                                                                        // - first
                                                                        // ethiopic
                                                                        // leap year
                    // new TestCase(1725560.5, 1, 4, 13, 5, SUN, 0, 0, 0), //
                    // Gregorian: 26/08/0012 - dlf
                    new TestCase(1725680.5d, 1, 4, 13, 5, IBM.ICU.Charset.CalendarTest.SUN, 0, 0, 0), // Gregorian:
                                                                        // 26/08/0012
                    new TestCase(2299158.5d, 1, 1575, 2, 6, IBM.ICU.Charset.CalendarTest.WED, 0, 0, 0), // Gregorian:
                                                                          // 13/10/1582
                    new TestCase(2299159.5d, 1, 1575, 2, 7, IBM.ICU.Charset.CalendarTest.THU, 0, 0, 0), // Gregorian:
                                                                          // 14/10/1582
                                                                          // Julian
                                                                          // 04/10/1582
	
                    new TestCase(2299160.5d, 1, 1575, 2, 8, IBM.ICU.Charset.CalendarTest.FRI, 0, 0, 0), // Gregorian:
                                                                          // 15/10/1582
                    new TestCase(2299161.5d, 1, 1575, 2, 9, IBM.ICU.Charset.CalendarTest.SAT, 0, 0, 0), // Gregorian:
                                                                          // 16/10/1582
	
                    new TestCase(2415020.5d, 1, 1892, 4, 23, IBM.ICU.Charset.CalendarTest.MON, 0, 0, 0), // Gregorian:
                                                                           // 01/01/1900
                    new TestCase(2453371.5d, 1, 1997, 4, 23, IBM.ICU.Charset.CalendarTest.SAT, 0, 0, 0), // Gregorian:
                                                                           // 01/01/2005
                    new TestCase(2454719.5d, 1, 2000, 13, 5, IBM.ICU.Charset.CalendarTest.WED, 0, 0, 0), // Gregorian:
                                                                           // 10/09/2008
            };

            EthiopicCalendar testCalendar = new EthiopicCalendar();
            testCalendar.SetLenient(true);
            DoTestCases(tests, testCalendar);
        }

        // basic check to see that we print out eras ok
        // eventually should modify to use locale strings and formatter appropriate
        // to coptic calendar
        [Test]
        public void TestEraStart()
        {
            EthiopicCalendar cal = new EthiopicCalendar(0, 0, 1);
            SimpleDateFormat fmt = new SimpleDateFormat("EEE MMM dd, yyyy GG");
            AssertEquals("Ethiopic Date", "Tue Jan 01, 0000 AD", fmt.FormatObject(cal));

            // The gregorian calendar gets off by two days when
            // the date gets low, unless the gregorian changeover is set to
            // very early. The funny thing is, it's ok for dates in the year
            // 283, but not in the year 7, and it claims to be ok until the year 4.
            // should track down when the dates start to differ...

            IBM.ICU.Util.GregorianCalendar gc = new IBM.ICU.Util.GregorianCalendar();
            gc.SetGregorianChange(ILOG.J2CsMapping.Util.DateUtil.DateFromJavaMillis((Int64.MinValue))); // act like proleptic
            // Gregorian
            gc.SetTime(cal.GetTime());
            AssertEquals("Gregorian Date", "Tue Aug 28, 0007 AD", fmt.FormatObject(gc));
        }

        [Test]
        public void TestBasic()
        {
            EthiopicCalendar cal = new EthiopicCalendar();
            cal.Clear();
            cal.Set(1000, 0, 30);
            Logln("1000/0/30-> " + cal.Get(IBM.ICU.Charset.CalendarTest.YEAR) + "/" + cal.Get(IBM.ICU.Charset.CalendarTest.MONTH) + "/"
                    + cal.Get(IBM.ICU.Charset.CalendarTest.DATE));
            cal.Clear();
            cal.Set(1, 0, 30);
            Logln("1/0/30 -> " + cal.Get(IBM.ICU.Charset.CalendarTest.YEAR) + "/" + cal.Get(IBM.ICU.Charset.CalendarTest.MONTH) + "/"
                    + cal.Get(IBM.ICU.Charset.CalendarTest.DATE));
        }

        [Test]
        public void TestJD()
        {
            int jd = IBM.ICU.Util.EthiopicCalendar.EthiopicToJD(1567, 8, 9);
            Int32[] l = IBM.ICU.Util.EthiopicCalendar.GetDateFromJD(jd);
            if (l[0] == 1567 && l[1] == 8
                    && l[2] == 9)
            {
                Logln("EthiopicCalendar.getDateFromJD tested");
            }
            else
            {
                Errln("EthiopicCalendar.getDateFromJD failed");
            }
        }

        /// <summary>
        /// Test limits of the Coptic calendar
        /// </summary>
        [Test]
        public void TestLimits()
        {
            IBM.ICU.Util.Calendar cal = IBM.ICU.Util.Calendar.GetInstance();
            cal.Set(2007, IBM.ICU.Util.Calendar.JANUARY, 1);
            EthiopicCalendar ethiopic = new EthiopicCalendar();
            if (!SkipIfBeforeICU(3, 9, 0))
            {
                DoLimitsTest(ethiopic, null, cal.GetTime());
            }
            DoTheoreticalLimitsTest(ethiopic, true);
        }

        [Test]
        public void TestCoverage()
        {

            {
                // new EthiopicCalendar(TimeZone)
                EthiopicCalendar cal = new EthiopicCalendar(IBM.ICU.Util.TimeZone.GetDefault());
                if (cal == null)
                {
                    Errln("could not create EthiopicCalendar with TimeZone");
                }
            }

            {
                // new EthiopicCalendar(ULocale)
                EthiopicCalendar cal_0 = new EthiopicCalendar(IBM.ICU.Util.ULocale.GetDefault());
                if (cal_0 == null)
                {
                    Errln("could not create EthiopicCalendar with ULocale");
                }
            }

            {
                // new EthiopicCalendar(Locale)
                EthiopicCalendar cal_1 = new EthiopicCalendar(ILOG.J2CsMapping.Util.Locale.GetDefault());
                if (cal_1 == null)
                {
                    Errln("could not create EthiopicCalendar with Locale");
                }
            }

            {
                // new EthiopicCalendar(TimeZone, Locale)
                EthiopicCalendar cal_2 = new EthiopicCalendar(IBM.ICU.Util.TimeZone.GetDefault(),
                        ILOG.J2CsMapping.Util.Locale.GetDefault());
                if (cal_2 == null)
                {
                    Errln("could not create EthiopicCalendar with TimeZone,Locale");
                }
            }

            {
                // new EthiopicCalendar(TimeZone, ULocale)
                EthiopicCalendar cal_3 = new EthiopicCalendar(IBM.ICU.Util.TimeZone.GetDefault(),
                        IBM.ICU.Util.ULocale.GetDefault());
                if (cal_3 == null)
                {
                    Errln("could not create EthiopicCalendar with TimeZone,ULocale");
                }
            }

            {
                // new EthiopicCalendar(Date)
                EthiopicCalendar cal_4 = new EthiopicCalendar(DateTime.Now);
                if (cal_4 == null)
                {
                    Errln("could not create EthiopicCalendar with Date");
                }
            }

            {
                // new EthiopicCalendar(int year, int month, int date)
                EthiopicCalendar cal_5 = new EthiopicCalendar(1997,
                        IBM.ICU.Util.EthiopicCalendar.MESKEREM, 1);
                if (cal_5 == null)
                {
                    Errln("could not create EthiopicCalendar with year,month,date");
                }
            }

            {
                // new EthiopicCalendar(int year, int month, int date, int hour, int
                // minute, int second)
                EthiopicCalendar cal_6 = new EthiopicCalendar(1997,
                        IBM.ICU.Util.EthiopicCalendar.MESKEREM, 1, 1, 1, 1);
                if (cal_6 == null)
                {
                    Errln("could not create EthiopicCalendar with year,month,date,hour,minute,second");
                }
            }

            {
                // setCivil/isCivil
                // operations on non-civil calendar
                EthiopicCalendar cal_7 = NewAmeteAlemEraCalendar();
                cal_7.SetAmeteAlemEra(false);
                if (cal_7.IsAmeteAlemEra())
                {
                    Errln("EthiopicCalendar calendar is old system");
                }

                DateTime now = DateTime.Now;
                cal_7.SetTime(now);

                DateTime then = cal_7.GetTime();                
                if (now != then)
                {
                    Errln("get/set time failed with non-civil EthiopicCalendar calendar");
                }

                Logln(then.ToString());

                cal_7.Add(IBM.ICU.Util.Calendar.MONTH, 1);
                cal_7.Add(IBM.ICU.Util.Calendar.DAY_OF_MONTH, 1);
                cal_7.Add(IBM.ICU.Util.Calendar.YEAR, 1);

                Logln(cal_7.GetTime().ToString());
            }

            {
                // data
                EthiopicCalendar cal_8 = new EthiopicCalendar(1997,
                        IBM.ICU.Util.EthiopicCalendar.MESKEREM, 1);
                DateTime time = cal_8.GetTime();

                String[] calendarLocales = { "am_ET", "gez_ET", "ti_ET" };

                String[] formatLocales = { "en", "am", "gez", "ti" };
                for (int i = 0; i < calendarLocales.Length; ++i)
                {
                    String calLocName = calendarLocales[i];
                    ILOG.J2CsMapping.Util.Locale calLocale = IBM.ICU.Impl.LocaleUtility.GetLocaleFromName(calLocName);
                    cal_8 = new EthiopicCalendar(calLocale);

                    for (int j = 0; j < formatLocales.Length; ++j)
                    {
                        String locName = formatLocales[j];
                        ILOG.J2CsMapping.Util.Locale formatLocale = IBM.ICU.Impl.LocaleUtility
                                .GetLocaleFromName(locName);
                        DateFormat format = IBM.ICU.Text.DateFormat.GetDateTimeInstance(cal_8,
                                IBM.ICU.Text.DateFormat.FULL, IBM.ICU.Text.DateFormat.FULL, formatLocale);
                        Logln(calLocName + "/" + locName + " --> "
                                + format.Format(time));
                    }
                }
            }
        }

        private static EthiopicCalendar NewAmeteAlemEraCalendar()
        {
            EthiopicCalendar alemawiCalendar = new EthiopicCalendar();
            alemawiCalendar.SetAmeteAlemEra(true);
            return alemawiCalendar;
        }
    }
}
