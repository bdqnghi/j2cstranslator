/*
 **********************************************************************
 *   Copyright (c) 2002-2007, International Business Machines Corporation
 *   and others.  All Rights Reserved.
 **********************************************************************
 *   Date        Name        Description
 *   01/14/2002  aliu        Creation.
 **********************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using IBM.ICU.Util;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
     using ILOG.J2CsMapping.Util;
	
	/// <summary>
	/// Parsing component for transliterator IDs. This class contains only static
	/// members; it cannot be instantiated. Methods in this class parse various ID
	/// formats, including the following:
	/// A basic ID, which contains source, target, and variant, but no filter and no
	/// explicit inverse. Examples include "Latin-Greek/UNGEGN" and "Null".
	/// A single ID, which is a basic ID plus optional filter and optional explicit
	/// inverse. Examples include "[a-zA-Z] Latin-Greek" and "Lower (Upper)".
	/// A compound ID, which is a sequence of one or more single IDs, separated by
	/// semicolons, with optional forward and reverse global filters. The global
	/// filters are UnicodeSet patterns prepended or appended to the IDs, separated
	/// by semicolons. An appended filter must be enclosed in parentheses and applies
	/// in the reverse direction.
	/// </summary>
	///
	internal class TransliteratorIDParser {
	
	    private const char ID_DELIM = ';';
	
	    private const char TARGET_SEP = '-';
	
	    private const char VARIANT_SEP = '/';
	
	    private const char OPEN_REV = '(';
	
	    private const char CLOSE_REV = ')';
	
	    private const String ANY = "Any";
	
	    private const int FORWARD = IBM.ICU.Text.Transliterator.FORWARD;
	
	    private const int REVERSE = IBM.ICU.Text.Transliterator.REVERSE;
	
	    private static readonly Hashtable SPECIAL_INVERSES = new Hashtable();
	
	    /// <summary>
	    /// A structure containing the parsed data of a filtered ID, that is, a basic
	    /// ID optionally with a filter.
	    /// 'source' and 'target' will always be non-null. The 'variant' will be
	    /// non-null only if a non-empty variant was parsed.
	    /// 'sawSource' is true if there was an explicit source in the parsed id. If
	    /// there was no explicit source, then an implied source of ANY is returned
	    /// and 'sawSource' is set to false.
	    /// 'filter' is the parsed filter pattern, or null if there was no filter.
	    /// </summary>
	    ///
	    private class Specs {
	        public String source; // not null
	
	        public String target; // not null
	
	        public String variant; // may be null
	
	        public String filter; // may be null
	
	        public bool sawSource;
	
	        internal Specs(String s, String t, String v, bool sawS, String f) {
	            source = s;
	            target = t;
	            variant = v;
	            sawSource = sawS;
	            filter = f;
	        }
	    }
	
	    /// <summary>
	    /// A structure containing the canonicalized data of a filtered ID, that is,
	    /// a basic ID optionally with a filter.
	    /// 'canonID' is always non-null. It may be the empty string "". It is the id
	    /// that should be assigned to the created transliterator. It _cannot_ be
	    /// instantiated directly.
	    /// 'basicID' is always non-null and non-empty. It is always of the form S-T
	    /// or S-T/V. It is designed to be fed to low-level instantiation code that
	    /// only understands these two formats.
	    /// 'filter' may be null, if there is none, or non-null and non-empty.
	    /// </summary>
	    ///
	    internal class SingleID {
	        public String canonID;
	
	        public String basicID;
	
	        public String filter;
	
	        internal SingleID(String c, String b, String f) {
	            canonID = c;
	            basicID = b;
	            filter = f;
	        }
	
	        internal SingleID(String c, String b) : this(c, b, null) {
	        }
	
	        internal Transliterator GetInstance() {
	            Transliterator t;
	            if (basicID == null || basicID.Length == 0) {
	                t = IBM.ICU.Text.Transliterator.GetBasicInstance("Any-Null", canonID);
	            } else {
	                t = IBM.ICU.Text.Transliterator.GetBasicInstance(basicID, canonID);
	            }
	            if (t != null) {
	                if (filter != null) {
	                    t.SetFilter(new UnicodeSet(filter));
	                }
	            }
	            return t;
	        }
	    }
	
	    /// <summary>
	    /// Parse a filter ID, that is, an ID of the general form "[f1] s1-t1/v1",
	    /// with the filters optional, and the variants optional.
	    /// </summary>
	    ///
	    /// <param name="id">the id to be parsed</param>
	    /// <param name="pos">INPUT-OUTPUT parameter. On input, the position of the firstcharacter to parse. On output, the position after the lastcharacter parsed.</param>
	    /// <returns>a SingleID object or null if the parse fails</returns>
	    public static TransliteratorIDParser.SingleID  ParseFilterID(String id, int[] pos) {
	
	        int start = pos[0];
	        TransliteratorIDParser.Specs  specs = ParseFilterID(id, pos, true);
	        if (specs == null) {
	            pos[0] = start;
	            return null;
	        }
	
	        // Assemble return results
	        TransliteratorIDParser.SingleID  single = SpecsToID(specs, FORWARD);
	        single.filter = specs.filter;
	        return single;
	    }
	
	    /// <summary>
	    /// Parse a single ID, that is, an ID of the general form
	    /// "[f1] s1-t1/v1 ([f2] s2-t3/v2)", with the parenthesized element optional,
	    /// the filters optional, and the variants optional.
	    /// </summary>
	    ///
	    /// <param name="id">the id to be parsed</param>
	    /// <param name="pos">INPUT-OUTPUT parameter. On input, the position of the firstcharacter to parse. On output, the position after the lastcharacter parsed.</param>
	    /// <param name="dir">the direction. If the direction is REVERSE then the SingleIDis constructed for the reverse direction.</param>
	    /// <returns>a SingleID object or null</returns>
	    public static TransliteratorIDParser.SingleID  ParseSingleID(String id, int[] pos, int dir) {
	
	        int start = pos[0];
	
	        // The ID will be of the form A, A(), A(B), or (B), where
	        // A and B are filter IDs.
	        TransliteratorIDParser.Specs  specsA = null;
	        TransliteratorIDParser.Specs  specsB = null;
	        bool sawParen = false;
	
	        // On the first pass, look for (B) or (). If this fails, then
	        // on the second pass, look for A, A(B), or A().
	        for (int pass = 1; pass <= 2; ++pass) {
	            if (pass == 2) {
	                specsA = ParseFilterID(id, pos, true);
	                if (specsA == null) {
	                    pos[0] = start;
	                    return null;
	                }
	            }
	            if (IBM.ICU.Impl.Utility.ParseChar(id, pos, OPEN_REV)) {
	                sawParen = true;
	                if (!IBM.ICU.Impl.Utility.ParseChar(id, pos, CLOSE_REV)) {
	                    specsB = ParseFilterID(id, pos, true);
	                    // Must close with a ')'
	                    if (specsB == null
	                            || !IBM.ICU.Impl.Utility.ParseChar(id, pos, CLOSE_REV)) {
	                        pos[0] = start;
	                        return null;
	                    }
	                }
	                break;
	            }
	        }
	
	        // Assemble return results
	        TransliteratorIDParser.SingleID  single;
	        if (sawParen) {
	            if (dir == FORWARD) {
	                single = SpecsToID(specsA, FORWARD);
	                single.canonID = single.canonID + OPEN_REV
	                        + SpecsToID(specsB, FORWARD).canonID + CLOSE_REV;
	                if (specsA != null) {
	                    single.filter = specsA.filter;
	                }
	            } else {
	                single = SpecsToID(specsB, FORWARD);
	                single.canonID = single.canonID + OPEN_REV
	                        + SpecsToID(specsA, FORWARD).canonID + CLOSE_REV;
	                if (specsB != null) {
	                    single.filter = specsB.filter;
	                }
	            }
	        } else {
	            // assert(specsA != null);
	            if (dir == FORWARD) {
	                single = SpecsToID(specsA, FORWARD);
	            } else {
	                single = SpecsToSpecialInverse(specsA);
	                if (single == null) {
	                    single = SpecsToID(specsA, REVERSE);
	                }
	            }
	            single.filter = specsA.filter;
	        }
	
	        return single;
	    }
	
	    /// <summary>
	    /// Parse a global filter of the form "[f]" or "([f])", depending on
	    /// 'withParens'.
	    /// </summary>
	    ///
	    /// <param name="id">the pattern the parse</param>
	    /// <param name="pos">INPUT-OUTPUT parameter. On input, the position of the firstcharacter to parse. On output, the position after the lastcharacter parsed.</param>
	    /// <param name="dir">the direction.</param>
	    /// <param name="withParens">INPUT-OUTPUT parameter. On entry, if withParens[0] is 0, thenparens are disallowed. If it is 1, then parens are requires.If it is -1, then parens are optional, and the return resultwill be set to 0 or 1.</param>
	    /// <param name="canonID_0">OUTPUT parameter. The pattern for the filter added to thecanonID, either at the end, if dir is FORWARD, or at thestart, if dir is REVERSE. The pattern will be enclosed inparentheses if appropriate, and will be suffixed with anID_DELIM character. May be null.</param>
	    /// <returns>a UnicodeSet object or null. A non-null results indicates a
	    /// successful parse, regardless of whether the filter applies to the
	    /// given direction. The caller should discard it if withParens !=
	    /// (dir == REVERSE).</returns>
	    public static UnicodeSet ParseGlobalFilter(String id, int[] pos, int dir,
	            int[] withParens, StringBuilder canonID_0) {
	        UnicodeSet filter_1 = null;
	        int start = pos[0];
	
	        if (withParens[0] == -1) {
	            withParens[0] = (IBM.ICU.Impl.Utility.ParseChar(id, pos, OPEN_REV)) ? 1 : 0;
	        } else if (withParens[0] == 1) {
	            if (!IBM.ICU.Impl.Utility.ParseChar(id, pos, OPEN_REV)) {
	                pos[0] = start;
	                return null;
	            }
	        }
	
	        IBM.ICU.Impl.Utility.SkipWhitespace(id, pos);
	
	        if (IBM.ICU.Text.UnicodeSet.ResemblesPattern(id, pos[0])) {
                ILOG.J2CsMapping.Text.ParsePosition ppos = new ILOG.J2CsMapping.Text.ParsePosition(pos[0]);
	            try {
	                filter_1 = new UnicodeSet(id, ppos, null);
	            } catch (ArgumentException e) {
	                pos[0] = start;
	                return null;
	            }
	
	            String pattern = id.Substring(pos[0],(ppos.GetIndex())-(pos[0]));
	            pos[0] = ppos.GetIndex();
	
	            if (withParens[0] == 1 && !IBM.ICU.Impl.Utility.ParseChar(id, pos, CLOSE_REV)) {
	                pos[0] = start;
	                return null;
	            }
	
	            // In the forward direction, append the pattern to the
	            // canonID. In the reverse, insert it at zero, and invert
	            // the presence of parens ("A" <-> "(A)").
	            if (canonID_0 != null) {
	                if (dir == FORWARD) {
	                    if (withParens[0] == 1) {
	                        pattern = OPEN_REV.ToString() + pattern
	                                + CLOSE_REV;
	                    }
	                    canonID_0.Append(pattern + ID_DELIM);
	                } else {
	                    if (withParens[0] == 0) {
	                        pattern = OPEN_REV.ToString() + pattern
	                                + CLOSE_REV;
	                    }
	                    canonID_0.Insert(0, pattern + ID_DELIM);
	                }
	            }
	        }
	
	        return filter_1;
	    }
	
	    /// <summary>
	    /// Parse a compound ID, consisting of an optional forward global filter, a
	    /// separator, one or more single IDs delimited by separators, an an optional
	    /// reverse global filter. The separator is a semicolon. The global filters
	    /// are UnicodeSet patterns. The reverse global filter must be enclosed in
	    /// parentheses.
	    /// </summary>
	    ///
	    /// <param name="id">the pattern the parse</param>
	    /// <param name="dir">the direction.</param>
	    /// <param name="canonID_0">OUTPUT parameter that receives the canonical ID, consisting ofcanonical IDs for all elements, as returned byparseSingleID(), separated by semicolons. Previous contentsare discarded.</param>
	    /// <param name="list">OUTPUT parameter that receives a list of SingleID objectsrepresenting the parsed IDs. Previous contents are discarded.</param>
	    /// <param name="globalFilter">OUTPUT parameter that receives a pointer to a newly createdglobal filter for this ID in this direction, or null if thereis none.</param>
	    /// <returns>true if the parse succeeds, that is, if the entire id is consumed
	    /// without syntax error.</returns>
	    public static bool ParseCompoundID(String id, int dir,
	            StringBuilder canonID_0, ArrayList list, UnicodeSet[] globalFilter) {
	        int[] pos = new int[] { 0 };
	        int[] withParens = new int[1];
	        list.Clear();
	        UnicodeSet filter_1;
	        globalFilter[0] = null;
	        canonID_0.Length=0;
	
	        // Parse leading global filter, if any
	        withParens[0] = 0; // parens disallowed
	        filter_1 = ParseGlobalFilter(id, pos, dir, withParens, canonID_0);
	        if (filter_1 != null) {
	            if (!IBM.ICU.Impl.Utility.ParseChar(id, pos, ID_DELIM)) {
	                // Not a global filter; backup and resume
	                canonID_0.Length=0;
	                pos[0] = 0;
	            }
	            if (dir == FORWARD) {
	                globalFilter[0] = filter_1;
	            }
	        }
	
	        bool sawDelimiter = true;
	        for (;;) {
	            TransliteratorIDParser.SingleID  single = ParseSingleID(id, pos, dir);
	            if (single == null) {
	                break;
	            }
	            if (dir == FORWARD) {
	                list.Add(single);
	            } else {
	                list.Insert(0,single);
	            }
	            if (!IBM.ICU.Impl.Utility.ParseChar(id, pos, ID_DELIM)) {
	                sawDelimiter = false;
	                break;
	            }
	        }
	
	        if (list.Count == 0) {
	            return false;
	        }
	
	        // Construct canonical ID
	        for (int i = 0; i < list.Count; ++i) {
	            TransliteratorIDParser.SingleID  single_2 = (TransliteratorIDParser.SingleID ) list[i];
	            canonID_0.Append(single_2.canonID);
	            if (i != (list.Count - 1)) {
	                canonID_0.Append(ID_DELIM);
	            }
	        }
	
	        // Parse trailing global filter, if any, and only if we saw
	        // a trailing delimiter after the IDs.
	        if (sawDelimiter) {
	            withParens[0] = 1; // parens required
	            filter_1 = ParseGlobalFilter(id, pos, dir, withParens, canonID_0);
	            if (filter_1 != null) {
	                // Don't require trailing ';', but parse it if present
	                IBM.ICU.Impl.Utility.ParseChar(id, pos, ID_DELIM);
	
	                if (dir == REVERSE) {
	                    globalFilter[0] = filter_1;
	                }
	            }
	        }
	
	        // Trailing unparsed text is a syntax error
	        IBM.ICU.Impl.Utility.SkipWhitespace(id, pos[0]);
	        if (pos[0] != id.Length) {
	            return false;
	        }
	
	        return true;
	    }
	
	    /// <summary>
	    /// Convert the elements of the 'list' vector, which are SingleID objects,
	    /// into actual Transliterator objects. In the course of this, some (or all)
	    /// entries may be removed. If all entries are removed, the Null
	    /// transliterator will be added.
	    /// Delete entries with empty basicIDs; these are generated by elements like
	    /// "(A)" in the forward direction, or "A()" in the reverse. THIS MAY RESULT
	    /// IN AN EMPTY VECTOR. Convert SingleID entries to actual transliterators.
	    /// </summary>
	    ///
	    /// <param name="list">vector of SingleID objects. On exit, vector of one or moreTransliterators.</param>
	    public static void InstantiateList(ArrayList list) {
	        Transliterator t;
	        for (int i = 0; i <= list.Count;) { // [sic]: i<=list.size()
	            // We run the loop too long by one, so we can
	            // do an insert after the last element
	            if (i == list.Count) {
	                break;
	            }
	
	            TransliteratorIDParser.SingleID  single = (TransliteratorIDParser.SingleID ) list[i];
	            if (single.basicID.Length == 0) {
	                ILOG.J2CsMapping.Collections.Collections.RemoveAt(list,i);
	            } else {
	                t = single.GetInstance();
	                if (t == null) {
	                    t = single.GetInstance();
	                    throw new ArgumentException("Illegal ID "
	                            + single.canonID);
	                }
	                list[i]=t;
	                ++i;
	            }
	        }
	
	        // An empty list is equivalent to a Null transliterator.
	        if (list.Count == 0) {
	            t = IBM.ICU.Text.Transliterator.GetBasicInstance("Any-Null", null);
	            if (t == null) {
	                // Should never happen
	                throw new ArgumentException(
	                        "Internal error; cannot instantiate Any-Null");
	            }
	            list.Add(t);
	        }
	    }
	
	    /// <summary>
	    /// Parse an ID into pieces. Take IDs of the form T, T/V, S-T, S-T/V, or
	    /// S/V-T. If the source is missing, return a source of ANY.
	    /// </summary>
	    ///
	    /// <param name="id">the id string, in any of several forms</param>
	    /// <returns>an array of 4 strings: source, target, variant, and
	    /// isSourcePresent. If the source is not present, ANY will be given
	    /// as the source, and isSourcePresent will be null. Otherwise
	    /// isSourcePresent will be non-null. The target may be empty if the
	    /// id is not well-formed. The variant may be empty.</returns>
	    public static String[] IDtoSTV(String id) {
	        String source_0 = ANY;
	        String target_1 = null;
	        String variant_2 = "";
	
	        int sep = id.IndexOf(TARGET_SEP);
	        int var = id.IndexOf(VARIANT_SEP);
	        if (var < 0) {
	            var = id.Length;
	        }
	        bool isSourcePresent = false;
	
	        if (sep < 0) {
	            // Form: T/V or T (or /V)
	            target_1 = id.Substring(0,(var)-(0));
	            variant_2 = id.Substring(var);
	        } else if (sep < var) {
	            // Form: S-T/V or S-T (or -T/V or -T)
	            if (sep > 0) {
	                source_0 = id.Substring(0,(sep)-(0));
	                isSourcePresent = true;
	            }
	            target_1 = id.Substring(++sep,(var)-(++sep));
	            variant_2 = id.Substring(var);
	        } else {
	            // Form: (S/V-T or /V-T)
	            if (var > 0) {
	                source_0 = id.Substring(0,(var)-(0));
	                isSourcePresent = true;
	            }
	            variant_2 = id.Substring(var,(sep++)-(var));
	            target_1 = id.Substring(sep);
	        }
	
	        if (variant_2.Length > 0) {
	            variant_2 = variant_2.Substring(1);
	        }
	
	        return new String[] { source_0, target_1, variant_2,
	                (isSourcePresent) ? "" : null };
	    }
	
	    /// <summary>
	    /// Given source, target, and variant strings, concatenate them into a full
	    /// ID. If the source is empty, then "Any" will be used for the source, so
	    /// the ID will always be of the form s-t/v or s-t.
	    /// </summary>
	    ///
	    public static String STVtoID(String source_0, String target_1, String variant_2) {
	        StringBuilder id = new StringBuilder(source_0);
	        if (id.Length == 0) {
	            id.Append(ANY);
	        }
	        id.Append(TARGET_SEP).Append(target_1);
	        if (variant_2 != null && variant_2.Length != 0) {
	            id.Append(VARIANT_SEP).Append(variant_2);
	        }
	        return id.ToString();
	    }
	
	    /// <summary>
	    /// Register two targets as being inverses of one another. For example,
	    /// calling registerSpecialInverse("NFC", "NFD", true) causes Transliterator
	    /// to form the following inverse relationships:
	    /// <pre>
	    /// NFC => NFD
	    /// Any-NFC => Any-NFD
	    /// NFD => NFC
	    /// Any-NFD => Any-NFC
	    /// </pre>
	    /// (Without the special inverse registration, the inverse of NFC would be
	    /// NFC-Any.) Note that NFD is shorthand for Any-NFD, but that the presence
	    /// or absence of "Any-" is preserved.
	    /// <p>
	    /// The relationship is symmetrical; registering (a, b) is equivalent to
	    /// registering (b, a).
	    /// <p>
	    /// The relevant IDs must still be registered separately as factories or
	    /// classes.
	    /// <p>
	    /// Only the targets are specified. Special inverses always have the form
	    /// Any-Target1 <=> Any-Target2. The target should have canonical casing (the
	    /// casing desired to be produced when an inverse is formed) and should
	    /// contain no whitespace or other extraneous characters.
	    /// </summary>
	    ///
	    /// <param name="target_0">the target against which to register the inverse</param>
	    /// <param name="inverseTarget">the inverse of target, that is Any-target.getInverse() =>Any-inverseTarget</param>
	    /// <param name="bidirectional">if true, register the reverse relation as well, that is,Any-inverseTarget.getInverse() => Any-target</param>
	    public static void RegisterSpecialInverse(String target_0,
	            String inverseTarget, bool bidirectional) {
	        ILOG.J2CsMapping.Collections.Collections.Put(SPECIAL_INVERSES,new CaseInsensitiveString(target_0),inverseTarget);
	        if (bidirectional && !target_0.Equals(inverseTarget,StringComparison.InvariantCultureIgnoreCase)) {
	            ILOG.J2CsMapping.Collections.Collections.Put(SPECIAL_INVERSES,new CaseInsensitiveString(inverseTarget),target_0);
	        }
	    }
	
	    // ----------------------------------------------------------------
	    // Private implementation
	    // ----------------------------------------------------------------
	
	    /// <summary>
	    /// Parse an ID into component pieces. Take IDs of the form T, T/V, S-T,
	    /// S-T/V, or S/V-T. If the source is missing, return a source of ANY.
	    /// </summary>
	    ///
	    /// <param name="id">the id string, in any of several forms</param>
	    /// <param name="pos">INPUT-OUTPUT parameter. On input, pos[0] is the offset of thefirst character to parse in id. On output, pos[0] is theoffset after the last parsed character. If the parse failed,pos[0] will be unchanged.</param>
	    /// <param name="allowFilter">if true, a UnicodeSet pattern is allowed at any locationbetween specs or delimiters, and is returned as the fifthstring in the array.</param>
	    /// <returns>a Specs object, or null if the parse failed. If neither source
	    /// nor target was seen in the parsed id, then the parse fails. If
	    /// allowFilter is true, then the parsed filter pattern is returned
	    /// in the Specs object, otherwise the returned filter reference is
	    /// null. If the parse fails for any reason null is returned.</returns>
	    private static TransliteratorIDParser.Specs  ParseFilterID(String id, int[] pos, bool allowFilter) {
	        String first = null;
	        String source_0 = null;
	        String target_1 = null;
	        String variant_2 = null;
	        String filter_3 = null;
	        char delimiter = (char) (0);
	        int specCount = 0;
	        int start = pos[0];
	
	        // This loop parses one of the following things with each
	        // pass: a filter, a delimiter character (either '-' or '/'),
	        // or a spec (source, target, or variant).
	        for (;;) {
	            IBM.ICU.Impl.Utility.SkipWhitespace(id, pos);
	            if (pos[0] == id.Length) {
	                break;
	            }
	
	            // Parse filters
	            if (allowFilter && filter_3 == null
	                    && IBM.ICU.Text.UnicodeSet.ResemblesPattern(id, pos[0])) {

                            ILOG.J2CsMapping.Text.ParsePosition ppos = new ILOG.J2CsMapping.Text.ParsePosition(pos[0]);
	                // Parse the set to get the position.
	                new UnicodeSet(id, ppos, null);
	                filter_3 = id.Substring(pos[0],(ppos.GetIndex())-(pos[0]));
	                pos[0] = ppos.GetIndex();
	                continue;
	            }
	
	            if (delimiter == 0) {
	                char c = id[pos[0]];
	                if ((c == TARGET_SEP && target_1 == null)
	                        || (c == VARIANT_SEP && variant_2 == null)) {
	                    delimiter = c;
	                    ++pos[0];
	                    continue;
	                }
	            }
	
	            // We are about to try to parse a spec with no delimiter
	            // when we can no longer do so (we can only do so at the
	            // start); break.
	            if (delimiter == 0 && specCount > 0) {
	                break;
	            }
	
	            String spec = IBM.ICU.Impl.Utility.ParseUnicodeIdentifier(id, pos);
	            if (spec == null) {
	                // Note that if there was a trailing delimiter, we
	                // consume it. So Foo-, Foo/, Foo-Bar/, and Foo/Bar-
	                // are legal.
	                break;
	            }
	
	            switch ((int) delimiter) {
	            case 0:
	                first = spec;
	                break;
	            case TARGET_SEP:
	                target_1 = spec;
	                break;
	            case VARIANT_SEP:
	                variant_2 = spec;
	                break;
	            }
	            ++specCount;
	            delimiter = ((Char)0);
	        }
	
	        // A spec with no prior character is either source or target,
	        // depending on whether an explicit "-target" was seen.
	        if (first != null) {
	            if (target_1 == null) {
	                target_1 = first;
	            } else {
	                source_0 = first;
	            }
	        }
	
	        // Must have either source or target
	        if (source_0 == null && target_1 == null) {
	            pos[0] = start;
	            return null;
	        }
	
	        // Empty source or target defaults to ANY
	        bool sawSource_4 = true;
	        if (source_0 == null) {
	            source_0 = ANY;
	            sawSource_4 = false;
	        }
	        if (target_1 == null) {
	            target_1 = ANY;
	        }
	
	        return new TransliteratorIDParser.Specs (source_0, target_1, variant_2, sawSource_4, filter_3);
	    }
	
	    /// <summary>
	    /// Givens a Spec object, convert it to a SingleID object. The Spec object is
	    /// a more unprocessed parse result. The SingleID object contains information
	    /// about canonical and basic IDs.
	    /// </summary>
	    ///
	    /// <returns>a SingleID; never returns null. Returned object always has
	    /// 'filter' field of null.</returns>
	    private static TransliteratorIDParser.SingleID  SpecsToID(TransliteratorIDParser.Specs  specs, int dir) {
	        String canonID_0 = "";
	        String basicID_1 = "";
	        String basicPrefix = "";
	        if (specs != null) {
	            StringBuilder buf = new StringBuilder();
	            if (dir == FORWARD) {
	                if (specs.sawSource) {
	                    buf.Append(specs.source).Append(TARGET_SEP);
	                } else {
	                    basicPrefix = specs.source + TARGET_SEP;
	                }
	                buf.Append(specs.target);
	            } else {
	                buf.Append(specs.target).Append(TARGET_SEP)
	                        .Append(specs.source);
	            }
	            if (specs.variant != null) {
	                buf.Append(VARIANT_SEP).Append(specs.variant);
	            }
	            basicID_1 = basicPrefix + buf.ToString();
	            if (specs.filter != null) {
	                buf.Insert(0, specs.filter);
	            }
	            canonID_0 = buf.ToString();
	        }
	        return new TransliteratorIDParser.SingleID (canonID_0, basicID_1);
	    }
	
	    /// <summary>
	    /// Given a Specs object, return a SingleID representing the special inverse
	    /// of that ID. If there is no special inverse then return null.
	    /// </summary>
	    ///
	    /// <returns>a SingleID or null. Returned object always has 'filter' field of
	    /// null.</returns>
	    private static TransliteratorIDParser.SingleID  SpecsToSpecialInverse(TransliteratorIDParser.Specs  specs) {
	        if (!specs.source.Equals(ANY,StringComparison.InvariantCultureIgnoreCase)) {
	            return null;
	        }
	        String inverseTarget = (String) SPECIAL_INVERSES[new CaseInsensitiveString(specs.target)];
	        if (inverseTarget != null) {
	            // If the original ID contained "Any-" then make the
	            // special inverse "Any-Foo"; otherwise make it "Foo".
	            // So "Any-NFC" => "Any-NFD" but "NFC" => "NFD".
	            StringBuilder buf = new StringBuilder();
	            if (specs.filter != null) {
	                buf.Append(specs.filter);
	            }
	            if (specs.sawSource) {
	                buf.Append(ANY).Append(TARGET_SEP);
	            }
	            buf.Append(inverseTarget);
	
	            String basicID_0 = ANY + TARGET_SEP + inverseTarget;
	
	            if (specs.variant != null) {
	                buf.Append(VARIANT_SEP).Append(specs.variant);
	                basicID_0 = basicID_0 + VARIANT_SEP + specs.variant;
	            }
	            return new TransliteratorIDParser.SingleID (buf.ToString(), basicID_0);
	        }
	        return null;
	    }
	}
	
	// eof
}
