/*
 *******************************************************************************
 * Copyright (C) 1996-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:48 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Util {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Globalization;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// <c>BuddhistCalendar</c> is a subclass of <c>GregorianCalendar</c>
	/// that numbers years since the birth of the Buddha. This is the civil calendar
	/// in some predominantly Buddhist countries such as Thailand, and it is used for
	/// religious purposes elsewhere.
	/// <p>
	/// The Buddhist calendar is identical to the Gregorian calendar in all respects
	/// except for the year and era. Years are numbered since the birth of the Buddha
	/// in 543 BC (Gregorian), so that 1 AD (Gregorian) is equivalent to 544 BE
	/// (Buddhist Era) and 1998 AD is 2541 BE.
	/// <p>
	/// The Buddhist Calendar has only one allowable era: <c>BE</c>. If the
	/// calendar is not in lenient mode (see <c>setLenient</c>), dates before
	/// 1/1/1 BE are rejected with an <c>IllegalArgumentException</c>.
	/// <p>
	/// This class should not be subclassed.
	/// </p>
	/// <p>
	/// BuddhistCalendar usually should be instantiated using<see cref="M:IBM.ICU.Util.Calendar.GetInstance(IBM.ICU.Util.ULocale)"/> passing in a
	/// <c>ULocale</c> with the tag <c>"@calendar=buddhist"</c>.
	/// </p>
	/// </summary>
	///
	/// <seealso cref="T:IBM.ICU.Util.Calendar"/>
	/// <seealso cref="T:IBM.ICU.Util.GregorianCalendar"/>
	/// @stable ICU 2.8
	public class BuddhistCalendar : GregorianCalendar {
	    // jdk1.4.2 serialver
	    private const long serialVersionUID = 2583005278132380631L;
	
	    // -------------------------------------------------------------------------
	    // Constructors...
	    // -------------------------------------------------------------------------
	
	    /// <summary>
	    /// Constant for the Buddhist Era. This is the only allowable
	    /// <c>ERA</c> value for the Buddhist calendar.
	    /// </summary>
	    ///
	    /// <seealso cref="M:IBM.ICU.Util.Calendar.ERA"/>
	    /// @stable ICU 2.8
	    public const int BE = 0;
	
	    /// <summary>
	    /// Constructs a <c>BuddhistCalendar</c> using the current time in the
	    /// default time zone with the default locale.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    public BuddhistCalendar() : base() {
	    }
	
	    /// <summary>
	    /// Constructs a <c>BuddhistCalendar</c> based on the current time in
	    /// the given time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="zone">the given time zone.</param>
	    /// @stable ICU 2.8
	    public BuddhistCalendar(TimeZone zone) : base(zone) {
	    }
	
	    /// <summary>
	    /// Constructs a <c>BuddhistCalendar</c> based on the current time in
	    /// the default time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="aLocale">the given locale.</param>
	    /// @stable ICU 2.8
        public BuddhistCalendar(ILOG.J2CsMapping.Util.Locale aLocale)
            : base(aLocale)
        {
	    }
	
	    /// <summary>
	    /// Constructs a <c>BuddhistCalendar</c> based on the current time in
	    /// the default time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="locale">the given ulocale.</param>
	    /// @stable ICU 3.2
	    public BuddhistCalendar(ULocale locale) : base(locale) {
	    }
	
	    /// <summary>
	    /// Constructs a <c>BuddhistCalendar</c> based on the current time in
	    /// the given time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="zone">the given time zone.</param>
	    /// <param name="aLocale">the given locale.</param>
	    /// @stable ICU 2.8
        public BuddhistCalendar(TimeZone zone, ILOG.J2CsMapping.Util.Locale aLocale)
            : base(zone, aLocale)
        {
	    }
	
	    /// <summary>
	    /// Constructs a <c>BuddhistCalendar</c> based on the current time in
	    /// the given time zone with the given locale.
	    /// </summary>
	    ///
	    /// <param name="zone">the given time zone.</param>
	    /// <param name="locale">the given ulocale.</param>
	    /// @stable ICU 3.2
	    public BuddhistCalendar(TimeZone zone, ULocale locale) : base(zone, locale) {
	    }
	
	    /// <summary>
	    /// Constructs a <c>BuddhistCalendar</c> with the given date set in the
	    /// default time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="date">The date to which the new calendar is set.</param>
	    /// @stable ICU 2.8
	    public BuddhistCalendar(DateTime date) : this() {
	        SetTime(date);
	    }
	
	    /// <summary>
	    /// Constructs a <c>BuddhistCalendar</c> with the given date set in the
	    /// default time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="year">The value used to set the calendar's <see cref="M:IBM.ICU.Util.BuddhistCalendar.YEAR YEAR"/> timefield.</param>
	    /// <param name="month">The value used to set the calendar's <see cref="M:IBM.ICU.Util.BuddhistCalendar.MONTH MONTH"/> timefield. The value is 0-based. e.g., 0 for January.</param>
	    /// <param name="date">The value used to set the calendar's <see cref="M:IBM.ICU.Util.BuddhistCalendar.DATE DATE"/> timefield.</param>
	    /// @stable ICU 2.8
	    public BuddhistCalendar(int year, int month, int date) : base(year, month, date) {
	    }
	
	    /// <summary>
	    /// Constructs a BuddhistCalendar with the given date and time set for the
	    /// default time zone with the default locale.
	    /// </summary>
	    ///
	    /// <param name="year">The value used to set the calendar's <see cref="M:IBM.ICU.Util.BuddhistCalendar.YEAR YEAR"/> timefield.</param>
	    /// <param name="month">The value used to set the calendar's <see cref="M:IBM.ICU.Util.BuddhistCalendar.MONTH MONTH"/> timefield. The value is 0-based. e.g., 0 for January.</param>
	    /// <param name="date">The value used to set the calendar's <see cref="M:IBM.ICU.Util.BuddhistCalendar.DATE DATE"/> timefield.</param>
	    /// <param name="hour">The value used to set the calendar's <see cref="M:IBM.ICU.Util.BuddhistCalendar.HOUR_OF_DAYHOUR_OF_DAY"/> time field.</param>
	    /// <param name="minute">The value used to set the calendar's <see cref="M:IBM.ICU.Util.BuddhistCalendar.MINUTE MINUTE"/>time field.</param>
	    /// <param name="second">The value used to set the calendar's <see cref="M:IBM.ICU.Util.BuddhistCalendar.SECOND SECOND"/>time field.</param>
	    /// @stable ICU 2.8
	    public BuddhistCalendar(int year, int month, int date, int hour,
	            int minute, int second) : base(year, month, date, hour, minute, second) {
	    }
	
	    // -------------------------------------------------------------------------
	    // The only practical difference from a Gregorian calendar is that years
	    // are numbered since the birth of the Buddha. A couple of overrides will
	    // take care of that....
	    // -------------------------------------------------------------------------
	
	    // Starts in -543 AD, ie 544 BC
	    private const int BUDDHIST_ERA_START = -543;
	
	    // Use 1970 as the default value of EXTENDED_YEAR
	    private const int GREGORIAN_EPOCH = 1970;
	
	    
	    /// @stable ICU 2.8
	    protected internal override int HandleGetExtendedYear() {
	        // EXTENDED_YEAR in BuddhistCalendar is a Gregorian year
	        // The default value of EXTENDED_YEAR is 1970 (Buddhist 2513)
	        int year;
	        if (NewerField(IBM.ICU.Util.Calendar.EXTENDED_YEAR, IBM.ICU.Util.Calendar.YEAR) == IBM.ICU.Util.Calendar.EXTENDED_YEAR) {
	            year = InternalGet(IBM.ICU.Util.Calendar.EXTENDED_YEAR, GREGORIAN_EPOCH);
	        } else {
	            year = InternalGet(IBM.ICU.Util.Calendar.YEAR, GREGORIAN_EPOCH - BUDDHIST_ERA_START)
	                    + BUDDHIST_ERA_START;
	        }
	        return year;
	    }
	
	    // Return JD of start of given month/year
	    
	    /// @stable ICU 2.8
	    protected internal override int HandleComputeMonthStart(int eyear, int month, bool useMonth) {
	        return base.HandleComputeMonthStart(eyear,month,useMonth);
	    }
	
	    
	    /// @stable ICU 2.8
	    protected internal override void HandleComputeFields(int julianDay) {
	        base.HandleComputeFields(julianDay);
	        int y = InternalGet(IBM.ICU.Util.Calendar.EXTENDED_YEAR) - BUDDHIST_ERA_START;
	        InternalSet(IBM.ICU.Util.Calendar.ERA, 0);
	        InternalSet(IBM.ICU.Util.Calendar.YEAR, y);
	    }
	
	    /// <summary>
	    /// Override GregorianCalendar. There is only one Buddhist ERA. We should
	    /// really handle YEAR, YEAR_WOY, and EXTENDED_YEAR here too to implement the
	    /// 1..5000000 range, but it's not critical.
	    /// </summary>
	    ///
	    /// @stable ICU 2.8
	    protected internal override int HandleGetLimit(int field, int limitType) {
	        if (field == IBM.ICU.Util.Calendar.ERA) {
	            return BE;
	        }
	        return base.HandleGetLimit(field,limitType);
	    }
	
	    /// <summary>
	    /// Return the current Calendar type.
	    /// </summary>
	    ///
	    /// <returns>type of calendar</returns>
	    /// @draft ICU 3.8
	    /// @provisional This API might change or be removed in a future release.
	    public override String GetType() {
	        return "buddhist";
	    }
	}
}
