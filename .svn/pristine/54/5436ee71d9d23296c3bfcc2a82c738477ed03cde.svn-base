/*
 *******************************************************************************
 * Copyright (C) 1996-2007, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 */
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 4:01 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace IBM.ICU.Charset
{

    using IBM.ICU.Util;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using System.IO;
    using System.Runtime.CompilerServices;
    using NUnit.Framework;

    /// <summary>
    /// Tests for the <c>Holiday</c> class.
    /// </summary>
    [TestFixture]
    public class HolidayTest : TestFmwk
    {
        public static void Main(String[] args)
        {
            new HolidayTest().Run(args);
        }

        [SetUp]
        public void Setup()
        {
            if (cal == null)
            {
                cal = new IBM.ICU.Util.GregorianCalendar(1, 0, 1);
                longTimeAgo = cal.GetTime();
                now = DateTime.Now;
            }
        }

        protected internal override void Init()
        {
            if (cal == null)
            {
                cal = new IBM.ICU.Util.GregorianCalendar(1, 0, 1);
                longTimeAgo = cal.GetTime();
                now = DateTime.Now;
            }
        }

        static internal IBM.ICU.Util.Calendar cal;

        static internal DateTime longTimeAgo;

        static internal DateTime now;

        static internal long awhile = 3600L * 24 * 28; // 28 days

        [Test]
        public void TestAPI()
        {
            {
                // getHolidays
                Holiday[] holidays = IBM.ICU.Util.Holiday.GetHolidays();
                ExerciseHolidays(holidays, ILOG.J2CsMapping.Util.Locale.GetDefault());
            }

            {
                // getHolidays(Locale)
                String[] localeNames = { "en_US", "da", "da_DK", "de", "de_AT",
	                    "de_DE", "el", "el_GR", "en", "en_CA", "en_GB", "es",
	                    "es_MX", "fr", "fr_CA", "fr_FR", "it", "it_IT", "iw",
	                    "iw_IL", "ja", "ja_JP", };

                for (int i = 0; i < localeNames.Length; ++i)
                {
                    ILOG.J2CsMapping.Util.Locale locale = IBM.ICU.Impl.LocaleUtility.GetLocaleFromName(localeNames[i]);
                    IBM.ICU.Util.Holiday[] holidays_0 = IBM.ICU.Util.Holiday.GetHolidays(locale);
                    ExerciseHolidays(holidays_0, locale);
                }
            }
        }

        internal void ExerciseHolidays(Holiday[] holidays, ILOG.J2CsMapping.Util.Locale locale)
        {
            for (int i = 0; i < holidays.Length; ++i)
            {
                ExerciseHoliday(holidays[i], locale);
            }
        }

        internal void ExerciseHoliday(Holiday h, ILOG.J2CsMapping.Util.Locale locale)
        {
            Logln("holiday: " + h.GetDisplayName());
            Logln("holiday in " + locale + ": " + h.GetDisplayName(locale));

            DateTime first = h.FirstAfter(longTimeAgo);
            Logln("firstAfter: " + longTimeAgo + " is " + first);
            if (first == null)
            {
                first = longTimeAgo;
            }
            first = new DateTime(((first.Ticks / 10000) + awhile) * 10000);

            DateTime second = h.FirstBetween(first, now);
            Logln("firstBetween: " + first + " and " + now + " is " + second);
            if (second == null)
            {
                second = now;
            }

            Logln("is on " + first + ": " + h.IsOn(first));
            Logln("is on " + now + ": " + h.IsOn(now));
            Logln("is between " + first + " and " + now + ": "
                    + h.IsBetween(first, now));
            Logln("is between " + first + " and " + second + ": "
                    + h.IsBetween(first, second));

            // logln("rule: " + h.getRule().toString());

            // h.setRule(h.getRule());
        }

        [Test]
        public void TestCoverage()
        {
            Holiday[] h = { new EasterHoliday("Ram's Easter"),
	                new SimpleHoliday(2, 29, 0, "Leap year", 1900, 2100) };
            ExerciseHolidays(h, ILOG.J2CsMapping.Util.Locale.GetDefault());

            RangeDateRule rdr = new RangeDateRule();
            rdr.Add(new SimpleDateRule(7, 10));
            DateTime mbd = IBM.ICU.Charset.TestFmwk.GetDate(1953, IBM.ICU.Util.Calendar.JULY, 10);
            DateTime dbd = IBM.ICU.Charset.TestFmwk.GetDate(1958, IBM.ICU.Util.Calendar.AUGUST, 15);
            DateTime nbd = IBM.ICU.Charset.TestFmwk.GetDate(1990, IBM.ICU.Util.Calendar.DECEMBER, 17);
            DateTime abd = IBM.ICU.Charset.TestFmwk.GetDate(1992, IBM.ICU.Util.Calendar.SEPTEMBER, 16);
            DateTime xbd = IBM.ICU.Charset.TestFmwk.GetDate(1976, IBM.ICU.Util.Calendar.JULY, 4);
            DateTime ybd = IBM.ICU.Charset.TestFmwk.GetDate(2003, IBM.ICU.Util.Calendar.DECEMBER, 8);
            rdr.Add(new SimpleDateRule(IBM.ICU.Util.Calendar.JULY, 10, IBM.ICU.Util.Calendar.MONDAY, false));
            rdr.Add(dbd, new SimpleDateRule(IBM.ICU.Util.Calendar.AUGUST, 15,
                    IBM.ICU.Util.Calendar.WEDNESDAY, true));
            rdr.Add(xbd, null);
            rdr.Add(nbd, new SimpleDateRule(IBM.ICU.Util.Calendar.DECEMBER, 17, IBM.ICU.Util.Calendar.MONDAY,
                    false));
            rdr.Add(ybd, null);

            Logln("first after " + mbd + " is " + rdr.FirstAfter(mbd));
            Logln("first between " + mbd + " and " + dbd + " is "
                    + rdr.FirstBetween(mbd, dbd));
            Logln("first between " + dbd + " and " + nbd + " is "
                    + rdr.FirstBetween(dbd, nbd));
            Logln("first between " + nbd + " and " + abd + " is "
                    + rdr.FirstBetween(nbd, abd));
            Logln("first between " + abd + " and " + xbd + " is "
                    + rdr.FirstBetween(abd, xbd));
            Logln("first between " + abd + " and " + null + " is "
                    + rdr.FirstBetween(abd, default(DateTime)));
            Logln("first between " + xbd + " and " + null + " is "
                    + rdr.FirstBetween(xbd, default(DateTime)));

            // getRule, setRule
            Logln("The rule in the holiday: " + h[1].GetRule());
            ExerciseHoliday(h[1], ILOG.J2CsMapping.Util.Locale.GetDefault());
            h[1].SetRule(rdr);
            Logln("Set the new rule to the SimpleHoliday ...");
            if (!rdr.Equals(h[1].GetRule()))
            {
                Errln("FAIL: getRule and setRule not matched.");
            }
            ExerciseHoliday(h[1], ILOG.J2CsMapping.Util.Locale.GetDefault());
        }

        [Test]
        public void TestIsOn()
        {
            // jb 1901
            SimpleHoliday sh = new SimpleHoliday(IBM.ICU.Util.Calendar.AUGUST, 15, "Doug's Day",
                    1958, 2058);

            IBM.ICU.Util.Calendar cal_0 = new IBM.ICU.Util.GregorianCalendar();
            cal_0.Clear();
            cal_0.Set(IBM.ICU.Util.Calendar.YEAR, 2000);
            cal_0.Set(IBM.ICU.Util.Calendar.MONTH, IBM.ICU.Util.Calendar.AUGUST);
            cal_0.Set(IBM.ICU.Util.Calendar.DAY_OF_MONTH, 15);

            DateTime d0 = cal_0.GetTime();
            cal_0.Add(IBM.ICU.Util.Calendar.SECOND, 1);
            DateTime d1 = cal_0.GetTime();
            cal_0.Add(IBM.ICU.Util.Calendar.SECOND, -2);
            DateTime d2 = cal_0.GetTime();
            cal_0.Add(IBM.ICU.Util.Calendar.DAY_OF_MONTH, 1);
            DateTime d3 = cal_0.GetTime();
            cal_0.Add(IBM.ICU.Util.Calendar.SECOND, 1);
            DateTime d4 = cal_0.GetTime();
            cal_0.Add(IBM.ICU.Util.Calendar.SECOND, -2);
            cal_0.Set(IBM.ICU.Util.Calendar.YEAR, 1957);
            DateTime d5 = cal_0.GetTime();
            cal_0.Set(IBM.ICU.Util.Calendar.YEAR, 1958);
            DateTime d6 = cal_0.GetTime();
            cal_0.Set(IBM.ICU.Util.Calendar.YEAR, 2058);
            DateTime d7 = cal_0.GetTime();
            cal_0.Set(IBM.ICU.Util.Calendar.YEAR, 2059);
            DateTime d8 = cal_0.GetTime();

            DateTime[] dates = { d0, d1, d2, d3, d4, d5, d6, d7, d8 };
            bool[] isOns = { true, true, false, true, false, false, true, true,
	                false };
            for (int i = 0; i < dates.Length; ++i)
            {
                DateTime d = dates[i];
                Logln("\ndate: " + d);
                bool isOn = sh.IsOn(d);
                Logln("isOnDate: " + isOn);
                if (isOn != isOns[i])
                {
                    Errln("date: " + d + " should be on Doug's Day!");
                }
                DateTime h = sh.FirstAfter(d);
                Logln("firstAfter: " + h);
            }
        }
    }
}
