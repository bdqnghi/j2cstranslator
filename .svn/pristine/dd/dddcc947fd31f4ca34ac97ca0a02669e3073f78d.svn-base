// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 1996-2007, International Business Machines Corporation and    
/// others. All Rights Reserved.                                                
/// </summary>
///
namespace IBM.ICU.Impl {
	
	using IBM.ICU.Text;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// <p>
	/// Binary Ordered Compression for Unicode
	/// </p>
	/// <p>
	/// Users are strongly encouraged to read the ICU paper on <a href=
	/// "http://www.icu-project.org/docs/papers/binary_ordered_compression_for_unicode.html"
	/// > BOCU</a> before attempting to use this class.
	/// </p>
	/// <p>
	/// BOCU is used to compress unicode text into a stream of unsigned bytes. For
	/// many kinds of text the compression compares favorably to UTF-8, and for some
	/// kinds of text (such as CJK) it does better. The resulting bytes will compare
	/// in the same order as the original code points. The byte stream does not
	/// contain the values 0, 1, or 2.
	/// </p>
	/// <p>
	/// One example of a use of BOCU is in<see cref="M:IBM.ICU.Impl.Collator.GetCollationKey(System.String)"/> for a
	/// RuleBasedCollator object with collation strength IDENTICAL. The result
	/// CollationKey will consist of the collation order of the source string
	/// followed by the BOCU result of the source string.
	/// </p>
	/// <p>
	/// Unlike a UTF encoding, BOCU-compressed text is not suitable for random
	/// access.
	/// </p>
	/// <p>
	/// Method: Slope Detection<br>
	/// Remember the previous code point (initial 0). For each code point in the
	/// string, encode the difference with the previous one. Similar to a UTF, the
	/// length of the byte sequence is encoded in the lead bytes. Unlike a UTF, the
	/// trail byte values may overlap with lead/single byte values. The signedness of
	/// the difference must be encoded as the most significant part.
	/// </p>
	/// <p>
	/// We encode differences with few bytes if their absolute values are small. For
	/// correct ordering, we must treat the entire value range -10ffff..+10ffff in
	/// ascending order, which forbids encoding the sign and the absolute value
	/// separately. Instead, we split the lead byte range in the middle and encode
	/// non-negative values going up and negative values going down.
	/// </p>
	/// <p>
	/// For very small absolute values, the difference is added to a middle byte
	/// value for single-byte encoded differences. For somewhat larger absolute
	/// values, the difference is divided by the number of byte values available, the
	/// modulo is used for one trail byte, and the remainder is added to a lead byte
	/// avoiding the single-byte range. For large absolute values, the difference is
	/// similarly encoded in three bytes. (Syn Wee, I need examples here.)
	/// </p>
	/// <p>
	/// BOCU does not use byte values 0, 1, or 2, but uses all other byte values for
	/// lead and single bytes, so that the middle range of single bytes is as large
	/// as possible.
	/// </p>
	/// <p>
	/// Note that the lead byte ranges overlap some, but that the sequences as a
	/// whole are well ordered. I.e., even if the lead byte is the same for sequences
	/// of different lengths, the trail bytes establish correct order. It would be
	/// possible to encode slightly larger ranges for each length (>1) by subtracting
	/// the lower bound of the range. However, that would also slow down the
	/// calculation. (Syn Wee, need an example).
	/// </p>
	/// <p>
	/// For the actual string encoding, an optimization moves the previous code point
	/// value to the middle of its Unicode script block to minimize the differences
	/// in same-script text runs. (Syn Wee, need an example.)
	/// </p>
	/// </summary>
	///
	/// @draft 2.2
	public class BOCU {
	    // public constructors --------------------------------------------------
	
	    // public methods -------------------------------------------------------
	
	    /// <summary>
	    /// <p>
	    /// Encode the code points of a string as a sequence of bytes, preserving
	    /// lexical order.
	    /// </p>
	    /// <p>
	    /// The minimum size of buffer required for the compression can be
	    /// preflighted by getCompressionLength(String).
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="source">text source</param>
	    /// <param name="buffer">output buffer</param>
	    /// <param name="offset">to start writing to</param>
	    /// <returns>end offset where the writing stopped</returns>
	    /// <seealso cref="M:IBM.ICU.Impl.BOCU.GetCompressionLength(System.String)"/>
	    /// <exception cref="ArrayIndexOutOfBoundsException">thrown if size of buffer is too small for the output.</exception>
	    public static int Compress(String source, byte[] buffer, int offset) {
	        int prev = 0;
	        UCharacterIterator iterator = IBM.ICU.Text.UCharacterIterator.GetInstance(source);
	        int codepoint = iterator.NextCodePoint();
	        while (codepoint != IBM.ICU.Text.UForwardCharacterIterator_Constants.DONE) {
	            if (prev < 0x4e00 || prev >= 0xa000) {
	                prev = (prev & ~0x7f) - SLOPE_REACH_NEG_1_;
	            } else {
	                // Unihan U+4e00..U+9fa5:
	                // double-bytes down from the upper end
	                prev = 0x9fff - SLOPE_REACH_POS_2_;
	            }
	
	            offset = WriteDiff(codepoint - prev, buffer, offset);
	            prev = codepoint;
	            codepoint = iterator.NextCodePoint();
	        }
	        return offset;
	    }
	
	    /// <summary>
	    /// Return the number of bytes that compress() would write.
	    /// </summary>
	    ///
	    /// <param name="source">text source string</param>
	    /// <returns>the length of the BOCU result</returns>
	    /// <seealso cref="M:IBM.ICU.Impl.BOCU.Compress(System.String, null, System.Int32)"/>
	    public static int GetCompressionLength(String source) {
	        int prev = 0;
	        int result = 0;
	        UCharacterIterator iterator = IBM.ICU.Text.UCharacterIterator.GetInstance(source);
	        int codepoint = iterator.NextCodePoint();
	        while (codepoint != IBM.ICU.Text.UForwardCharacterIterator_Constants.DONE) {
	            if (prev < 0x4e00 || prev >= 0xa000) {
	                prev = (prev & ~0x7f) - SLOPE_REACH_NEG_1_;
	            } else {
	                // Unihan U+4e00..U+9fa5:
	                // double-bytes down from the upper end
	                prev = 0x9fff - SLOPE_REACH_POS_2_;
	            }
	
	            codepoint = iterator.NextCodePoint();
	            result += LengthOfDiff(codepoint - prev);
	            prev = codepoint;
	        }
	        return result;
	    }
	
	    // public setter methods -------------------------------------------------
	
	    // public getter methods ------------------------------------------------
	
	    // public other methods -------------------------------------------------
	
	    // protected constructor ------------------------------------------------
	
	    // protected data members ------------------------------------------------
	
	    // protected methods -----------------------------------------------------
	
	    // private data members --------------------------------------------------
	
	    /// <summary>
	    /// Do not use byte values 0, 1, 2 because they are separators in sort keys.
	    /// </summary>
	    ///
	    private const int SLOPE_MIN_ = 3;
	
	    private const int SLOPE_MAX_ = 0xff;
	
	    private const int SLOPE_MIDDLE_ = 0x81;
	
	    private const int SLOPE_TAIL_COUNT_ = SLOPE_MAX_ - SLOPE_MIN_ + 1;
	
	    // private static final int SLOPE_MAX_BYTES_ = 4;
	
	    /// <summary>
	    /// Number of lead bytes: 1 middle byte for 0 2///80=160 single bytes for !=0
	    /// 2///42=84 for double-byte values 2///3=6 for 3-byte values 2///1=2 for 4-byte
	    /// values
	    /// The sum must be <=SLOPE_TAIL_COUNT.
	    /// Why these numbers? - There should be >=128 single-byte values to cover
	    /// 128-blocks with small scripts. - There should be >=20902
	    /// single/double-byte values to cover Unihan. - It helps CJK Extension B
	    /// some if there are 3-byte values that cover the distance between them and
	    /// Unihan. This also helps to jump among distant places in the BMP. -
	    /// Four-byte values are necessary to cover the rest of Unicode.
	    /// Symmetrical lead byte counts are for convenience. With an equal
	    /// distribution of even and odd differences there is also no advantage to
	    /// asymmetrical lead byte counts.
	    /// </summary>
	    ///
	    private const int SLOPE_SINGLE_ = 80;
	
	    private const int SLOPE_LEAD_2_ = 42;
	
	    private const int SLOPE_LEAD_3_ = 3;
	
	    // private static final int SLOPE_LEAD_4_ = 1;
	
	    /// <summary>
	    /// The difference value range for single-byters.
	    /// </summary>
	    ///
	    private const int SLOPE_REACH_POS_1_ = SLOPE_SINGLE_;
	
	    private const int SLOPE_REACH_NEG_1_ = (-SLOPE_SINGLE_);
	
	    /// <summary>
	    /// The difference value range for double-byters.
	    /// </summary>
	    ///
	    private const int SLOPE_REACH_POS_2_ = SLOPE_LEAD_2_
	            * SLOPE_TAIL_COUNT_ + SLOPE_LEAD_2_ - 1;
	
	    private const int SLOPE_REACH_NEG_2_ = (-SLOPE_REACH_POS_2_ - 1);
	
	    /// <summary>
	    /// The difference value range for 3-byters.
	    /// </summary>
	    ///
	    private const int SLOPE_REACH_POS_3_ = SLOPE_LEAD_3_
	            * SLOPE_TAIL_COUNT_ * SLOPE_TAIL_COUNT_ + (SLOPE_LEAD_3_ - 1)
	            * SLOPE_TAIL_COUNT_ + (SLOPE_TAIL_COUNT_ - 1);
	
	    private const int SLOPE_REACH_NEG_3_ = (-SLOPE_REACH_POS_3_ - 1);
	
	    /// <summary>
	    /// The lead byte start values.
	    /// </summary>
	    ///
	    private const int SLOPE_START_POS_2_ = SLOPE_MIDDLE_ + SLOPE_SINGLE_
	            + 1;
	
	    private const int SLOPE_START_POS_3_ = SLOPE_START_POS_2_
	            + SLOPE_LEAD_2_;
	
	    private const int SLOPE_START_NEG_2_ = SLOPE_MIDDLE_
	            + SLOPE_REACH_NEG_1_;
	
	    private const int SLOPE_START_NEG_3_ = SLOPE_START_NEG_2_
	            - SLOPE_LEAD_2_;
	
	    // private constructor ---------------------------------------------------
	
	    /// <summary>
	    /// Constructor private to prevent initialization
	    /// </summary>
	    ///
	    // /CLOVER:OFF
	    private BOCU() {
	    }
	
	    // /CLOVER:ON
	
	    // private methods -------------------------------------------------------
	
	    /// <summary>
	    /// Integer division and modulo with negative numerators yields negative
	    /// modulo results and quotients that are one more than what we need here.
	    /// </summary>
	    ///
	    /// <param name="number">which operations are to be performed on</param>
	    /// <param name="factor">the factor to use for division</param>
	    /// <returns>(result of division) << 32 | modulo</returns>
	    private static long GetNegDivMod(int number, int factor) {
	        int modulo = number % factor;
	        long result = number / factor;
	        if (modulo < 0) {
	            --result;
	            modulo += factor;
	        }
	        return (result << 32) | modulo;
	    }
	
	    /// <summary>
	    /// Encode one difference value -0x10ffff..+0x10ffff in 1..3 bytes,
	    /// preserving lexical order
	    /// </summary>
	    ///
	    /// <param name="diff"></param>
	    /// <param name="buffer">byte buffer to append to</param>
	    /// <param name="offset">to the byte buffer to start appending</param>
	    /// <returns>end offset where the appending stops</returns>
	    private static int WriteDiff(int diff, byte[] buffer, int offset) {
	        if (diff >= SLOPE_REACH_NEG_1_) {
	            if (diff <= SLOPE_REACH_POS_1_) {
	                buffer[offset++] = (byte) (SLOPE_MIDDLE_ + diff);
	            } else if (diff <= SLOPE_REACH_POS_2_) {
	                buffer[offset++] = (byte) (SLOPE_START_POS_2_ + (diff / SLOPE_TAIL_COUNT_));
	                buffer[offset++] = (byte) (SLOPE_MIN_ + (diff % SLOPE_TAIL_COUNT_));
	            } else if (diff <= SLOPE_REACH_POS_3_) {
	                buffer[offset + 2] = (byte) (SLOPE_MIN_ + (diff % SLOPE_TAIL_COUNT_));
	                diff /= SLOPE_TAIL_COUNT_;
	                buffer[offset + 1] = (byte) (SLOPE_MIN_ + (diff % SLOPE_TAIL_COUNT_));
	                buffer[offset] = (byte) (SLOPE_START_POS_3_ + (diff / SLOPE_TAIL_COUNT_));
	                offset += 3;
	            } else {
	                buffer[offset + 3] = (byte) (SLOPE_MIN_ + diff
	                        % SLOPE_TAIL_COUNT_);
	                diff /= SLOPE_TAIL_COUNT_;
	                buffer[offset] = (byte) (SLOPE_MIN_ + diff % SLOPE_TAIL_COUNT_);
	                diff /= SLOPE_TAIL_COUNT_;
	                buffer[offset + 1] = (byte) (SLOPE_MIN_ + diff
	                        % SLOPE_TAIL_COUNT_);
	                buffer[offset] = (byte) SLOPE_MAX_;
	                offset += 4;
	            }
	        } else {
	            long division = GetNegDivMod(diff, SLOPE_TAIL_COUNT_);
	            int modulo = (int) division;
	            if (diff >= SLOPE_REACH_NEG_2_) {
	                diff = (int) (division >> 32);
	                buffer[offset++] = (byte) (SLOPE_START_NEG_2_ + diff);
	                buffer[offset++] = (byte) (SLOPE_MIN_ + modulo);
	            } else if (diff >= SLOPE_REACH_NEG_3_) {
	                buffer[offset + 2] = (byte) (SLOPE_MIN_ + modulo);
	                diff = (int) (division >> 32);
	                division = GetNegDivMod(diff, SLOPE_TAIL_COUNT_);
	                modulo = (int) division;
	                diff = (int) (division >> 32);
	                buffer[offset + 1] = (byte) (SLOPE_MIN_ + modulo);
	                buffer[offset] = (byte) (SLOPE_START_NEG_3_ + diff);
	                offset += 3;
	            } else {
	                buffer[offset + 3] = (byte) (SLOPE_MIN_ + modulo);
	                diff = (int) (division >> 32);
	                division = GetNegDivMod(diff, SLOPE_TAIL_COUNT_);
	                modulo = (int) division;
	                diff = (int) (division >> 32);
	                buffer[offset + 2] = (byte) (SLOPE_MIN_ + modulo);
	                division = GetNegDivMod(diff, SLOPE_TAIL_COUNT_);
	                modulo = (int) division;
	                buffer[offset + 1] = (byte) (SLOPE_MIN_ + modulo);
	                buffer[offset] = SLOPE_MIN_;
	                offset += 4;
	            }
	        }
	        return offset;
	    }
	
	    /// <summary>
	    /// How many bytes would writeDiff() write?
	    /// </summary>
	    ///
	    /// <param name="diff"></param>
	    private static int LengthOfDiff(int diff) {
	        if (diff >= SLOPE_REACH_NEG_1_) {
	            if (diff <= SLOPE_REACH_POS_1_) {
	                return 1;
	            } else if (diff <= SLOPE_REACH_POS_2_) {
	                return 2;
	            } else if (diff <= SLOPE_REACH_POS_3_) {
	                return 3;
	            } else {
	                return 4;
	            }
	        } else {
	            if (diff >= SLOPE_REACH_NEG_2_) {
	                return 2;
	            } else if (diff >= SLOPE_REACH_NEG_3_) {
	                return 3;
	            } else {
	                return 4;
	            }
	        }
	    }
	}
}
