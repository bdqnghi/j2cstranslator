/*
 ******************************************************************************
 * Copyright (C) 2007, International Business Machines Corporation and   *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/8/10 10:24 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl.Duration {
	
	using IBM.ICU.Impl.Duration.Impl;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Default implementation of PeriodBuilderFactory. This creates builders that
	/// use approximate durations.
	/// </summary>
	///
	internal class BasicPeriodBuilderFactory : PeriodBuilderFactory {
	    internal PeriodFormatterDataService ds;
	
	    private BasicPeriodBuilderFactory.Settings  settings;
	
	    internal const short allBits = 0xff;
	
	    internal BasicPeriodBuilderFactory(PeriodFormatterDataService ds_0) {
	        this.ds = ds_0;
	        this.settings = new BasicPeriodBuilderFactory.Settings (this);
	    }
	
	    static internal long ApproximateDurationOf(TimeUnit unit) {
	        return IBM.ICU.Impl.Duration.TimeUnit.approxDurations[unit.ordinal];
	    }
	
	    public class Settings {
	            private BasicPeriodBuilderFactory outer_BasicPeriodBuilderFactory;
	    
	            public Settings(BasicPeriodBuilderFactory factory) {
	                outer_BasicPeriodBuilderFactory = factory;
	                this.uset = IBM.ICU.Impl.Duration.BasicPeriodBuilderFactory.allBits;
	                this.maxUnit = IBM.ICU.Impl.Duration.TimeUnit.YEAR;
	                this.minUnit = IBM.ICU.Impl.Duration.TimeUnit.MILLISECOND;
	                this.allowZero = true;
	                this.useMilliseconds = true;
	            }
	    
	            internal bool inUse;
	    
	            internal short uset;
	    
	            internal TimeUnit maxUnit;
	    
	            internal TimeUnit minUnit;
	    
	            internal int maxLimit;
	    
	            internal int minLimit;
	    
	            internal bool allowZero;
	    
	            internal bool weeksAloneOnly;
	    
	            internal bool useMilliseconds;
	    
	            internal BasicPeriodBuilderFactory.Settings  SetUnits(int uset_0) {
	                if (this.uset == uset_0) {
	                    return this;
	                }
	                BasicPeriodBuilderFactory.Settings  result = (inUse) ? Copy() : this;
	    
	                result.uset = (short) uset_0;
	    
	                if ((uset_0 & IBM.ICU.Impl.Duration.BasicPeriodBuilderFactory.allBits) == IBM.ICU.Impl.Duration.BasicPeriodBuilderFactory.allBits) {
	                    result.uset = IBM.ICU.Impl.Duration.BasicPeriodBuilderFactory.allBits;
	                    result.maxUnit = IBM.ICU.Impl.Duration.TimeUnit.YEAR;
	                    result.minUnit = IBM.ICU.Impl.Duration.TimeUnit.MILLISECOND;
	                } else {
	                    int lastUnit = -1;
	                    for (int i = 0; i < TimeUnit.units.Length; ++i) {
	                        if (0 != (uset_0 & (1 << i))) {
	                            if (lastUnit == -1) {
	                                result.maxUnit = IBM.ICU.Impl.Duration.TimeUnit.units[i];
	                            }
	                            lastUnit = i;
	                        }
	                    }
	                    if (lastUnit == -1) {
	                        // currently empty, but this might be transient so no fail
	                        result.minUnit = result.maxUnit = null;
	                    } else {
	                        result.minUnit = IBM.ICU.Impl.Duration.TimeUnit.units[lastUnit];
	                    }
	                }
	    
	                return result;
	            }
	    
	            internal short EffectiveSet() {
	                if (useMilliseconds) {
	                    return uset;
	                }
	                return (short) (uset & ~(1 << TimeUnit.MILLISECOND.ordinal));
	            }
	    
	            internal BasicPeriodBuilderFactory.Settings  SetMaxLimit(float maxLimit_0) {
	                int val = (maxLimit_0 <= 0) ? 0 : (int) (maxLimit_0 * 1000);
	                if (maxLimit_0 == val) {
	                    return this;
	                }
	                BasicPeriodBuilderFactory.Settings  result = (inUse) ? Copy() : this;
	                result.maxLimit = val;
	                return result;
	            }
	    
	            internal BasicPeriodBuilderFactory.Settings  SetMinLimit(float minLimit_0) {
	                int val = (minLimit_0 <= 0) ? 0 : (int) (minLimit_0 * 1000);
	                if (minLimit_0 == val) {
	                    return this;
	                }
	                BasicPeriodBuilderFactory.Settings  result = (inUse) ? Copy() : this;
	                result.minLimit = val;
	                return result;
	            }
	    
	            internal BasicPeriodBuilderFactory.Settings  SetAllowZero(bool allow) {
	                if (this.allowZero == allow) {
	                    return this;
	                }
	                BasicPeriodBuilderFactory.Settings  result = (inUse) ? Copy() : this;
	                result.allowZero = allow;
	                return result;
	            }
	    
	            internal BasicPeriodBuilderFactory.Settings  SetWeeksAloneOnly(bool weeksAlone) {
	                if (this.weeksAloneOnly == weeksAlone) {
	                    return this;
	                }
	                BasicPeriodBuilderFactory.Settings  result = (inUse) ? Copy() : this;
	                result.weeksAloneOnly = weeksAlone;
	                return result;
	            }
	    
	            internal BasicPeriodBuilderFactory.Settings  SetAllowMilliseconds(bool useMilliseconds_0) {
	                if (this.useMilliseconds == useMilliseconds_0) {
	                    return this;
	                }
	                BasicPeriodBuilderFactory.Settings  result = (inUse) ? Copy() : this;
	                result.useMilliseconds = useMilliseconds_0;
	                return result;
	            }
	    
	            internal BasicPeriodBuilderFactory.Settings  SetLocale(String localeName) {
	                PeriodFormatterData data = outer_BasicPeriodBuilderFactory.ds.Get(localeName);
	                return this
	                        .SetAllowZero(data.AllowZero())
	                        .SetWeeksAloneOnly(data.WeeksAloneOnly())
	                        .SetAllowMilliseconds(
	                                data.UseMilliseconds() != IBM.ICU.Impl.Duration.Impl.DataRecord.EMilliSupport.NO);
	            }
	    
	            internal BasicPeriodBuilderFactory.Settings  SetInUse() {
	                inUse = true;
	                return this;
	            }
	    
	            internal Period CreateLimited(long duration, bool inPast) {
	                long maxUnitDuration = IBM.ICU.Impl.Duration.BasicPeriodBuilderFactory.ApproximateDurationOf(maxUnit);
	                if (maxLimit > 0 && duration * 1000 > maxLimit * maxUnitDuration) {
	                    return IBM.ICU.Impl.Duration.Period.MoreThan(maxLimit / 1000f, maxUnit)
	                            .InPast(inPast);
	                }
	                long minUnitDuration = IBM.ICU.Impl.Duration.BasicPeriodBuilderFactory.ApproximateDurationOf(minUnit);
	                if (minLimit > 0 && duration * 1000 < minLimit * minUnitDuration) {
	                    return IBM.ICU.Impl.Duration.Period.LessThan(minLimit / 1000f, minUnit)
	                            .InPast(inPast);
	                }
	                return null;
	            }
	    
	            public BasicPeriodBuilderFactory.Settings  Copy() {
	                BasicPeriodBuilderFactory.Settings  result = new BasicPeriodBuilderFactory.Settings (outer_BasicPeriodBuilderFactory);
	                result.inUse = inUse;
	                result.uset = uset;
	                result.maxUnit = maxUnit;
	                result.minUnit = minUnit;
	                result.maxLimit = maxLimit;
	                result.minLimit = minLimit;
	                result.allowZero = allowZero;
	                result.weeksAloneOnly = weeksAloneOnly;
	                result.useMilliseconds = useMilliseconds;
	                return result;
	            }
	        }
	
	    public virtual PeriodBuilderFactory SetAvailableUnitRange(TimeUnit minUnit_0,
	            TimeUnit maxUnit_1) {
	        int uset_2 = 0;
	        for (int i = maxUnit_1.ordinal; i <= minUnit_0.ordinal; ++i) {
	            uset_2 |= 1 << i;
	        }
	        if (uset_2 == 0) {
	            throw new ArgumentException("range " + minUnit_0 + " to "
	                    + maxUnit_1 + " is empty");
	        }
	        settings = settings.SetUnits(uset_2);
	        return this;
	    }
	
	    public virtual PeriodBuilderFactory SetUnitIsAvailable(TimeUnit unit,
	            bool available) {
	        int uset_0 = settings.uset;
	        if (available) {
	            uset_0 |= 1 << unit.ordinal;
	        } else {
	            uset_0 &= ~(1 << unit.ordinal);
	        }
	        settings = settings.SetUnits(uset_0);
	        return this;
	    }
	
	    public virtual PeriodBuilderFactory SetMaxLimit(float maxLimit_0) {
	        settings = settings.SetMaxLimit(maxLimit_0);
	        return this;
	    }
	
	    public virtual PeriodBuilderFactory SetMinLimit(float minLimit_0) {
	        settings = settings.SetMinLimit(minLimit_0);
	        return this;
	    }
	
	    public virtual PeriodBuilderFactory SetAllowZero(bool allow) {
	        settings = settings.SetAllowZero(allow);
	        return this;
	    }
	
	    public virtual PeriodBuilderFactory SetWeeksAloneOnly(bool aloneOnly) {
	        settings = settings.SetWeeksAloneOnly(aloneOnly);
	        return this;
	    }
	
	    public PeriodBuilderFactory SetAllowMilliseconds(bool useMilliseconds_0) {
	        settings = settings.SetAllowMilliseconds(useMilliseconds_0);
	        return this;
	    }
	
	    public virtual PeriodBuilderFactory SetLocale(String localeName) {
	        settings = settings.SetLocale(localeName);
	        return this;
	    }
	
	    private BasicPeriodBuilderFactory.Settings  GetSettings() {
	        if (settings.EffectiveSet() == 0) {
	            return null;
	        }
	        return settings.SetInUse();
	    }
	
	    /// <summary>
	    /// Return a builder that represents relative time in terms of the single
	    /// given TimeUnit
	    /// </summary>
	    ///
	    /// <param name="unit">the single TimeUnit with which to represent times</param>
	    /// <returns>a builder</returns>
	    public virtual PeriodBuilder GetFixedUnitBuilder(TimeUnit unit) {
	        return IBM.ICU.Impl.Duration.FixedUnitBuilder.Get(unit, GetSettings());
	    }
	
	    /// <summary>
	    /// Return a builder that represents relative time in terms of the largest
	    /// period less than or equal to the duration.
	    /// </summary>
	    ///
	    /// <returns>a builder</returns>
	    public virtual PeriodBuilder GetSingleUnitBuilder() {
	        return IBM.ICU.Impl.Duration.SingleUnitBuilder.Get(GetSettings());
	    }
	
	    /// <summary>
	    /// Return a builder that formats the largest one or two periods, Starting
	    /// with the largest period less than or equal to the duration. It formats
	    /// two periods if the first period has a count &lt; 2 and the next period
	    /// has a count &gt;= 1.
	    /// </summary>
	    ///
	    /// <returns>a builder</returns>
	    public virtual PeriodBuilder GetOneOrTwoUnitBuilder() {
	        return IBM.ICU.Impl.Duration.OneOrTwoUnitBuilder.Get(GetSettings());
	    }
	
	    /// <summary>
	    /// Return a builder that formats the given number of periods, starting with
	    /// the largest period less than or equal to the duration.
	    /// </summary>
	    ///
	    /// <returns>a builder</returns>
	    public virtual PeriodBuilder GetMultiUnitBuilder(int periodCount) {
	        return IBM.ICU.Impl.Duration.MultiUnitBuilder.Get(periodCount, GetSettings());
	    }
	}
	
	abstract internal class PeriodBuilderImpl : PeriodBuilder {
	
	    protected internal BasicPeriodBuilderFactory.Settings settings;
	
	    public virtual Period Create(long duration) {
	        return CreateWithReferenceDate(duration, DateTime.Now.Millisecond);
	    }
	
	    public long ApproximateDurationOf(TimeUnit unit) {
	        return IBM.ICU.Impl.Duration.BasicPeriodBuilderFactory.ApproximateDurationOf(unit);
	    }
	
	    public virtual Period CreateWithReferenceDate(long duration, long referenceDate) {
	        bool inPast = duration < 0;
	        if (inPast) {
	            duration = -duration;
	        }
	        Period ts = settings.CreateLimited(duration, inPast);
	        if (ts == null) {
	            ts = HandleCreate(duration, referenceDate, inPast);
	            if (ts == null) {
	                ts = IBM.ICU.Impl.Duration.Period.LessThan(1, settings.minUnit).InPast(inPast);
	            }
	        }
	        return ts;
	    }

        public virtual PeriodBuilder WithTimeZone(IBM.ICU.Util.TimeZone timeZone)
        {
	        // ignore the time zone
	        return this;
	    }
	
	    public virtual PeriodBuilder WithLocale(String localeName) {
	        BasicPeriodBuilderFactory.Settings newSettings = settings
	                .SetLocale(localeName);
	        if (newSettings != settings) {
	            return WithSettings(newSettings);
	        }
	        return this;
	    }
	
	    protected abstract internal PeriodBuilder WithSettings(
	            BasicPeriodBuilderFactory.Settings settings_0);
	
	    protected abstract internal Period HandleCreate(long duration, long referenceDate,
	            bool inPast);
	
	    protected internal PeriodBuilderImpl(BasicPeriodBuilderFactory.Settings settings_0) {
	        this.settings = settings_0;
	    }
	}
	
	internal class FixedUnitBuilder : PeriodBuilderImpl {
	    private TimeUnit unit;
	
	    public static FixedUnitBuilder Get(TimeUnit unit_0,
	            BasicPeriodBuilderFactory.Settings settings_1) {
	        if (settings_1 != null
	                && (settings_1.EffectiveSet() & (1 << unit_0.ordinal)) != 0) {
	            return new FixedUnitBuilder(unit_0, settings_1);
	        }
	        return null;
	    }
	
	    internal FixedUnitBuilder(TimeUnit unit_0, BasicPeriodBuilderFactory.Settings settings_1) : base(settings_1) {
	        this.unit = unit_0;
	    }
	
	    protected internal override PeriodBuilder WithSettings(
	            BasicPeriodBuilderFactory.Settings settings_0) {
	        return Get(unit, settings_0);
	    }
	
	    protected internal override Period HandleCreate(long duration, long referenceDate,
	            bool inPast) {
	        if (unit == null) {
	            return null;
	        }
	        long unitDuration = ApproximateDurationOf(unit);
	        return IBM.ICU.Impl.Duration.Period.At((float) ((double) duration / unitDuration), unit)
	                .InPast(inPast);
	    }
	}
	
	internal class SingleUnitBuilder : PeriodBuilderImpl {
	    internal SingleUnitBuilder(BasicPeriodBuilderFactory.Settings settings_0) : base(settings_0) {
	    }
	
	    public static SingleUnitBuilder Get(
	            BasicPeriodBuilderFactory.Settings settings_0) {
	        if (settings_0 == null) {
	            return null;
	        }
	        return new SingleUnitBuilder(settings_0);
	    }
	
	    protected internal override PeriodBuilder WithSettings(
	            BasicPeriodBuilderFactory.Settings settings_0) {
	        return SingleUnitBuilder.Get(settings_0);
	    }
	
	    protected internal override Period HandleCreate(long duration, long referenceDate,
	            bool inPast) {
	        short uset_0 = settings.EffectiveSet();
	        for (int i = 0; i < TimeUnit.units.Length; ++i) {
	            if (0 != (uset_0 & (1 << i))) {
	                TimeUnit unit_1 = IBM.ICU.Impl.Duration.TimeUnit.units[i];
	                long unitDuration = ApproximateDurationOf(unit_1);
	                if (duration >= unitDuration) {
	                    return IBM.ICU.Impl.Duration.Period.At(
	                            (float) ((double) duration / unitDuration), unit_1)
	                            .InPast(inPast);
	                }
	            }
	        }
	        return null;
	    }
	}
	
	internal class OneOrTwoUnitBuilder : PeriodBuilderImpl {
	    internal OneOrTwoUnitBuilder(BasicPeriodBuilderFactory.Settings settings_0) : base(settings_0) {
	    }
	
	    public static OneOrTwoUnitBuilder Get(
	            BasicPeriodBuilderFactory.Settings settings_0) {
	        if (settings_0 == null) {
	            return null;
	        }
	        return new OneOrTwoUnitBuilder(settings_0);
	    }
	
	    protected internal override PeriodBuilder WithSettings(
	            BasicPeriodBuilderFactory.Settings settings_0) {
	        return OneOrTwoUnitBuilder.Get(settings_0);
	    }
	
	    protected internal override Period HandleCreate(long duration, long referenceDate,
	            bool inPast) {
	        Period period = null;
	        short uset_0 = settings.EffectiveSet();
	        for (int i = 0; i < TimeUnit.units.Length; ++i) {
	            if (0 != (uset_0 & (1 << i))) {
	                TimeUnit unit_1 = IBM.ICU.Impl.Duration.TimeUnit.units[i];
	                long unitDuration = ApproximateDurationOf(unit_1);
	                if (duration >= unitDuration || period != null) {
	                    double count = (double) duration / unitDuration;
	                    if (period == null) {
	                        if (count >= 2) {
	                            period = IBM.ICU.Impl.Duration.Period.At((float) count, unit_1);
	                            break;
	                        }
	                        period = IBM.ICU.Impl.Duration.Period.At(1, unit_1).InPast(inPast);
	                        duration -= unitDuration;
	                    } else {
	                        if (count >= 1) {
	                            period.And((float) count, unit_1);
	                        }
	                        break;
	                    }
	                }
	            }
	        }
	        return period;
	    }
	}
	
	internal class MultiUnitBuilder : PeriodBuilderImpl {
	    private int nPeriods;
	
	    internal MultiUnitBuilder(int nPeriods_0, BasicPeriodBuilderFactory.Settings settings_1) : base(settings_1) {
	        this.nPeriods = nPeriods_0;
	    }
	
	    public static MultiUnitBuilder Get(int nPeriods_0,
	            BasicPeriodBuilderFactory.Settings settings_1) {
	        if (nPeriods_0 > 0 && settings_1 != null) {
	            return new MultiUnitBuilder(nPeriods_0, settings_1);
	        }
	        return null;
	    }
	
	    protected internal override PeriodBuilder WithSettings(
	            BasicPeriodBuilderFactory.Settings settings_0) {
	        return MultiUnitBuilder.Get(nPeriods, settings_0);
	    }
	
	    protected internal override Period HandleCreate(long duration, long referenceDate,
	            bool inPast) {
	        Period period = null;
	        int n = 0;
	        short uset_0 = settings.EffectiveSet();
	        for (int i = 0; i < TimeUnit.units.Length; ++i) {
	            if (0 != (uset_0 & (1 << i))) {
	                TimeUnit unit_1 = IBM.ICU.Impl.Duration.TimeUnit.units[i];
	                if (n == nPeriods) {
	                    break;
	                }
	                long unitDuration = ApproximateDurationOf(unit_1);
	                if (duration >= unitDuration || n > 0) {
	                    ++n;
	                    double count = (double) duration / unitDuration;
	                    if (n < nPeriods) {
	                        count = Math.Floor(count);
	                        duration -= (long) (count * unitDuration);
	                    }
	                    if (period == null) {
	                        period = IBM.ICU.Impl.Duration.Period.At((float) count, unit_1).InPast(inPast);
	                    } else {
	                        period.And((float) count, unit_1);
	                    }
	                }
	            }
	        }
	        return period;
	    }
	}
}
