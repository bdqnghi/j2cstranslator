// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:30 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Text {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	public class UnicodeMatcher_Constants {
	
	    /// <summary>
	    /// Constant returned by <c>matches()</c> indicating a mismatch between
	    /// the text and this matcher. The text contains a character which does not
	    /// match, or the text does not contain all desired characters for a
	    /// non-incremental match.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public const int U_MISMATCH = 0;
	    /// <summary>
	    /// Constant returned by <c>matches()</c> indicating a partial match
	    /// between the text and this matcher. This value is only returned for
	    /// incremental match operations. All characters of the text match, but more
	    /// characters are required for a complete match. Alternatively, for
	    /// variable-length matchers, all characters of the text match, and if more
	    /// characters were supplied at limit, they might also match.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public const int U_PARTIAL_MATCH = 1;
	    /// <summary>
	    /// Constant returned by <c>matches()</c> indicating a complete match
	    /// between the text and this matcher. For an incremental variable-length
	    /// match, this value is returned if the given text matches, and it is known
	    /// that additional characters would not alter the extent of the match.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public const int U_MATCH = 2;
	    /// <summary>
	    /// The character at index i, where i < contextStart || i >= contextLimit, is
	    /// ETHER. This allows explicit matching by rules and UnicodeSets of text
	    /// outside the context. In traditional terms, this allows anchoring at the
	    /// start and/or end.
	    /// </summary>
	    ///
	    /// @stable ICU 2.0
	    public const char ETHER = '\uFFFF'; 
	}
}
