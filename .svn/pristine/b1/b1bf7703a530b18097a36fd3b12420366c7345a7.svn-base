/*
 ******************************************************************************
 * Copyright (C) 1996-2005, International Business Machines Corporation and   *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/2/10 11:47 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl {
	
	using ILOG.J2CsMapping.IO;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Trie implementation which stores data in char, 16 bits.
	/// </summary>
	///
	/// <seealso cref="T:IBM.ICU.Impl.Trie"/>
	
	// note that i need to handle the block calculations later, since chartrie
	// in icu4c uses the same index array.
	public class CharTrie : Trie {
	    // public constructors ---------------------------------------------
	
	    /// <summary>
	    /// <p>
	    /// Creates a new Trie with the settings for the trie data.
	    /// </p>
	    /// <p>
	    /// Unserialize the 32-bit-aligned input stream and use the data for the
	    /// trie.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="inputStream">file input stream to a ICU data file, containing the trie</param>
	    /// <param name="dataManipulate">object which provides methods to parse the char data</param>
	    /// <exception cref="IOException">thrown when data reading fails</exception>
	    /// @draft 2.1
	    public CharTrie(DataInputStream inputStream, Trie.DataManipulate  dataManipulate) : base(inputStream, dataManipulate) {
	        if (!IsCharTrie()) {
	            throw new ArgumentException(
	                    "Data given does not belong to a char trie.");
	        }
	        m_friendAgent_ = new CharTrie.FriendAgent (this);
	    }
	
	    /// <summary>
	    /// Make a dummy CharTrie. A dummy trie is an empty runtime trie, used when a
	    /// real data trie cannot be loaded.
	    /// The trie always returns the initialValue, or the leadUnitValue for lead
	    /// surrogate code points. The Latin-1 part is always set up to be linear.
	    /// </summary>
	    ///
	    /// <param name="initialValue">the initial value that is set for all code points</param>
	    /// <param name="leadUnitValue">the value for lead surrogate code _units_ that do not haveassociated supplementary data</param>
	    /// <param name="dataManipulate">object which provides methods to parse the char data</param>
	    public CharTrie(int initialValue, int leadUnitValue,
	            Trie.DataManipulate  dataManipulate) : base(new char[IBM.ICU.Impl.Trie.BMP_INDEX_LENGTH + IBM.ICU.Impl.Trie.SURROGATE_BLOCK_COUNT], IBM.ICU.Impl.Trie.HEADER_OPTIONS_LATIN1_IS_LINEAR_MASK_, dataManipulate) {
	        int dataLength, latin1Length, i, limit;
	        char block;
	
	        /* calculate the actual size of the dummy trie data */
	
	        /* max(Latin-1, block 0) */
	        dataLength = latin1Length = (IBM.ICU.Impl.Trie.INDEX_STAGE_1_SHIFT_ <= 8) ? 256
	                : IBM.ICU.Impl.Trie.DATA_BLOCK_LENGTH;
	        if (leadUnitValue != initialValue) {
	            dataLength += IBM.ICU.Impl.Trie.DATA_BLOCK_LENGTH;
	        }
	        m_data_ = new char[dataLength];
	        m_dataLength_ = dataLength;
	
	        m_initialValue_ = (char) initialValue;
	
	        /* fill the index and data arrays */
	
	        /* indexes are preset to 0 (block 0) */
	
	        /* Latin-1 data */
	        for (i = 0; i < latin1Length; ++i) {
	            m_data_[i] = (char) initialValue;
	        }
	
	        if (leadUnitValue != initialValue) {
	            /* indexes for lead surrogate code units to the block after Latin-1 */
	            block = (char) (latin1Length >> IBM.ICU.Impl.Trie.INDEX_STAGE_2_SHIFT_);
	            i = 0xd800 >> IBM.ICU.Impl.Trie.INDEX_STAGE_1_SHIFT_;
	            limit = 0xdc00 >> IBM.ICU.Impl.Trie.INDEX_STAGE_1_SHIFT_;
	            for (; i < limit; ++i) {
	                m_index_[i] = block;
	            }
	
	            /* data for lead surrogate code units */
	            limit = latin1Length + IBM.ICU.Impl.Trie.DATA_BLOCK_LENGTH;
	            for (i = latin1Length; i < limit; ++i) {
	                m_data_[i] = (char) leadUnitValue;
	            }
	        }
	
	        m_friendAgent_ = new CharTrie.FriendAgent (this);
	    }
	
	    /// <summary>
	    /// Java friend implementation
	    /// </summary>
	    ///
	        public class FriendAgent {
	            private CharTrie outer_CharTrie;
	    
	            
	            /// <param name="trie"></param>
	            public FriendAgent(CharTrie trie) {
	                outer_CharTrie = trie;
	            }
	    
	            /// <summary>
	            /// Gives out the index array of the trie
	            /// </summary>
	            ///
	            /// <returns>index array of trie</returns>
	            public char[] GetPrivateIndex() {
	                return outer_CharTrie.m_index_;
	            }
	    
	            /// <summary>
	            /// Gives out the data array of the trie
	            /// </summary>
	            ///
	            /// <returns>data array of trie</returns>
	            public char[] GetPrivateData() {
	                return outer_CharTrie.m_data_;
	            }
	    
	            /// <summary>
	            /// Gives out the data offset in the trie
	            /// </summary>
	            ///
	            /// <returns>data offset in the trie</returns>
	            public int GetPrivateInitialValue() {
	                return outer_CharTrie.m_initialValue_;
	            }
	        }
	
	    // public methods --------------------------------------------------
	
	    /// <summary>
	    /// Java friend implementation To store the index and data array into the
	    /// argument.
	    /// </summary>
	    ///
	    /// <param name="friend">java friend UCharacterProperty object to store the array</param>
	    public void PutIndexData(UCharacterProperty friend) {
	        friend.SetIndexData(m_friendAgent_);
	    }
	
	    /// <summary>
	    /// Gets the value associated with the codepoint. If no value is associated
	    /// with the codepoint, a default value will be returned.
	    /// </summary>
	    ///
	    /// <param name="ch">codepoint</param>
	    /// <returns>offset to data</returns>
	    /// @draft 2.1
	    public char GetCodePointValue(int ch) {
	        int offset;
	
	        // fastpath for U+0000..U+D7FF
	        if (0 <= ch && ch < IBM.ICU.Text.UTF16.LEAD_SURROGATE_MIN_VALUE) {
	            // copy of getRawOffset()
	            offset = (m_index_[ch >> IBM.ICU.Impl.Trie.INDEX_STAGE_1_SHIFT_] << IBM.ICU.Impl.Trie.INDEX_STAGE_2_SHIFT_)
	                    + (ch & IBM.ICU.Impl.Trie.INDEX_STAGE_3_MASK_);
	            return m_data_[offset];
	        }
	
	        // handle U+D800..U+10FFFF
	        offset = GetCodePointOffset(ch);
	
	        // return -1 if there is an error, in this case we return the default
	        // value: m_initialValue_
	        return (offset >= 0) ? m_data_[offset] : m_initialValue_;
	    }
	
	    /// <summary>
	    /// Gets the value to the data which this lead surrogate character points to.
	    /// Returned data may contain folding offset information for the next
	    /// trailing surrogate character. This method does not guarantee correct
	    /// results for trail surrogates.
	    /// </summary>
	    ///
	    /// <param name="ch">lead surrogate character</param>
	    /// <returns>data value</returns>
	    /// @draft 2.1
	    public char GetLeadValue(char ch) {
	        return m_data_[GetLeadOffset(ch)];
	    }
	
	    /// <summary>
	    /// Get the value associated with the BMP code point. Lead surrogate code
	    /// points are treated as normal code points, with unfolded values that may
	    /// differ from getLeadValue() results.
	    /// </summary>
	    ///
	    /// <param name="ch">the input BMP code point</param>
	    /// <returns>trie data value associated with the BMP codepoint</returns>
	    /// @draft 2.1
	    public char GetBMPValue(char ch) {
	        return m_data_[GetBMPOffset(ch)];
	    }
	
	    /// <summary>
	    /// Get the value associated with a pair of surrogates.
	    /// </summary>
	    ///
	    /// <param name="lead">a lead surrogate</param>
	    /// <param name="trail">a trail surrogate</param>
	    /// @draft 2.1
	    public char GetSurrogateValue(char lead, char trail) {
	        int offset = GetSurrogateOffset(lead, trail);
	        if (offset > 0) {
	            return m_data_[offset];
	        }
	        return m_initialValue_;
	    }
	
	    /// <summary>
	    /// <p>
	    /// Get a value from a folding offset (from the value of a lead surrogate)
	    /// and a trail surrogate.
	    /// </p>
	    /// <p>
	    /// If the
	    /// </summary>
	    ///
	    /// <param name="leadvalue">value associated with the lead surrogate which contains thefolding offset</param>
	    /// <param name="trail">surrogate</param>
	    /// <returns>trie data value associated with the trail character</returns>
	    /// @draft 2.1
	    public char GetTrailValue(int leadvalue, char trail) {
	        if (m_dataManipulate_ == null) {
	            throw new NullReferenceException(
	                    "The field DataManipulate in this Trie is null");
	        }
	        int offset = m_dataManipulate_.GetFoldingOffset(leadvalue);
	        if (offset > 0) {
	            return m_data_[GetRawOffset(offset,
	                    (char) (trail & IBM.ICU.Impl.Trie.SURROGATE_MASK_))];
	        }
	        return m_initialValue_;
	    }
	
	    /// <summary>
	    /// <p>
	    /// Gets the latin 1 fast path value.
	    /// </p>
	    /// <p>
	    /// Note this only works if latin 1 characters have their own linear array.
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="ch">latin 1 characters</param>
	    /// <returns>value associated with latin character</returns>
	    public char GetLatin1LinearValue(char ch) {
	        return m_data_[IBM.ICU.Impl.Trie.INDEX_STAGE_3_MASK_ + 1 + m_dataOffset_ + ch];
	    }
	
	    /// <summary>
	    /// Checks if the argument Trie has the same data as this Trie
	    /// </summary>
	    ///
	    /// <param name="other">Trie to check</param>
	    /// <returns>true if the argument Trie has the same data as this Trie, false
	    /// otherwise</returns>
	    // /CLOVER:OFF
	    public override bool Equals(Object other) {
	        bool result = base.Equals(other);
	        if (result && other  is  CharTrie) {
	            CharTrie othertrie = (CharTrie) other;
	            return m_initialValue_ == othertrie.m_initialValue_;
	        }
	        return false;
	    }
	
	    // /CLOVER:ON
	
	    // protected methods -----------------------------------------------
	
	    /// <summary>
	    /// <p>
	    /// Parses the input stream and stores its trie content into a index and data
	    /// array
	    /// </p>
	    /// </summary>
	    ///
	    /// <param name="inputStream">data input stream containing trie data</param>
	    /// <exception cref="IOException">thrown when data reading fails</exception>
        protected internal override void Unserialize(DataInputStream inputStream)
        {
            DataInputStream input = inputStream; // new DataInputStream(inputStream);
	        int indexDataLength = m_dataOffset_ + m_dataLength_;
	        m_index_ = new char[indexDataLength];
	        for (int i = 0; i < indexDataLength; i++) {
	            m_index_[i] = input.ReadChar();
	        }
	        m_data_ = m_index_;
	        m_initialValue_ = m_data_[m_dataOffset_];
	    }
	
	    /// <summary>
	    /// Gets the offset to the data which the surrogate pair points to.
	    /// </summary>
	    ///
	    /// <param name="lead">lead surrogate</param>
	    /// <param name="trail">trailing surrogate</param>
	    /// <returns>offset to data</returns>
	    /// @draft 2.1
	    protected internal override int GetSurrogateOffset(char lead, char trail) {
	        if (m_dataManipulate_ == null) {
	            throw new NullReferenceException(
	                    "The field DataManipulate in this Trie is null");
	        }
	
	        // get fold position for the next trail surrogate
	        int offset = m_dataManipulate_.GetFoldingOffset(GetLeadValue(lead));
	
	        // get the real data from the folded lead/trail units
	        if (offset > 0) {
	            return GetRawOffset(offset, (char) (trail & IBM.ICU.Impl.Trie.SURROGATE_MASK_));
	        }
	
	        // return -1 if there is an error, in this case we return the default
	        // value: m_initialValue_
	        return -1;
	    }
	
	    /// <summary>
	    /// Gets the value at the argument index. For use internally in TrieIterator.
	    /// </summary>
	    ///
	    /// <param name="index">value at index will be retrieved</param>
	    /// <returns>32 bit value</returns>
	    /// <seealso cref="T:IBM.ICU.Impl.TrieIterator"/>
	    /// @draft 2.1
	    protected internal override int GetValue(int index) {
	        return m_data_[index];
	    }
	
	    /// <summary>
	    /// Gets the default initial value
	    /// </summary>
	    ///
	    /// <returns>32 bit value</returns>
	    /// @draft 2.1
	    protected internal override int GetInitialValue() {
	        return m_initialValue_;
	    }
	
	    // private data members --------------------------------------------
	
	    /// <summary>
	    /// Default value
	    /// </summary>
	    ///
	    internal char m_initialValue_;
	
	    /// <summary>
	    /// Array of char data
	    /// </summary>
	    ///
	    internal char[] m_data_;
	
	    /// <summary>
	    /// Agent for friends
	    /// </summary>
	    ///
	    private CharTrie.FriendAgent  m_friendAgent_;
	}
}
