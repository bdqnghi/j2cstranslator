/*
 ******************************************************************************
 * Copyright (C) 2007, International Business Machines Corporation and   *
 * others. All Rights Reserved.                                               *
 ******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/8/10 10:24 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace IBM.ICU.Impl.Duration.Impl {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	public class XMLRecordReader : RecordReader {
	    private TextReader r;
	
	    private IList nameStack;
	
	    private bool atTag;
	
	    private String tag; // cache
	
	    public XMLRecordReader(TextReader r_0) {
	        this.r = r_0;
	        this.nameStack = new ArrayList();
	
	        // skip XML prologue
	        if (GetTag().StartsWith("?xml")) {
	            Advance();
	        }
	
	        // skip FIRST comment
	        if (GetTag().StartsWith("!--")) {
	            Advance();
	        }
	    }
	
	    public virtual bool Open(String title) {
	        if (GetTag().Equals(title)) {
	            ILOG.J2CsMapping.Collections.Generics.Collections.Add(nameStack,title);
	            Advance();
	            return true;
	        }
	        return false;
	    }
	
	    public virtual bool Close() {
	        int ix = nameStack.Count - 1;
	        String name = (String) nameStack[ix];
	        if (GetTag().Equals("/" + name)) {
	            ILOG.J2CsMapping.Collections.Collections.RemoveAt(nameStack,ix);
	            Advance();
	            return true;
	        }
	        return false;
	    }
	
	    public virtual bool Bool(String name) {
	        String s = String(name);
	        if (s != null) {
	            return "true".Equals(s);
	        }
	        return false;
	    }
	
	    public virtual bool[] BoolArray(String name) {
	        String[] sa = StringArray(name);
	        if (sa != null) {
	            bool[] result = new bool[sa.Length];
	            for (int i = 0; i < sa.Length; ++i) {
	                result[i] = "true".Equals(sa[i]);
	            }
	            return result;
	        }
	        return null;
	    }
	
	    public virtual char Character(String name) {
	        String s = String(name);
	        if (s != null) {
	            return s[0];
	        }
	        return '\uffff';
	    }
	
	    public virtual char[] CharacterArray(String name) {
	        String[] sa = StringArray(name);
	        if (sa != null) {
	            char[] result = new char[sa.Length];
	            for (int i = 0; i < sa.Length; ++i) {
	                result[i] = sa[i][0];
	            }
	            return result;
	        }
	        return null;
	    }
	
	    public virtual sbyte NamedIndex(String name, String[] names) {
	        String sa = String(name);
	        if (sa != null) {
	            for (int i = 0; i < names.Length; ++i) {
	                if (sa.Equals(names[i])) {
	                    return (sbyte) i;
	                }
	            }
	        }
	        return (sbyte) -1;
	    }
	
	    public virtual sbyte[] NamedIndexArray(String name, String[] names) {
	        String[] sa = StringArray(name);
	        if (sa != null) {
	            sbyte[] result = new sbyte[sa.Length];
	            loop: {
	                for (int i = 0; i < sa.Length; ++i) {
	                    String s = sa[i];
	                    for (int j = 0; j < names.Length; ++j) {
	                        if (names[j].Equals(s)) {
	                            result[i] = (sbyte) j;
	                            goto loop;
	                        }
	                    }
	                    result[i] = (sbyte) -1;
	                }
	            }
	            gotoloop:
	            ;
	            return result;
	        }
	        return null;
	    }
	
	    public virtual String String(String name) {
	        if (Match(name)) {
	            String result = ReadData();
	            if (Match("/" + name)) {
	                return result;
	            }
	        }
	        return null;
	    }
	
	    public virtual String[] StringArray(String name) {
	        if (Match(name + "List")) {
	            IList list = new ArrayList();
	            String s;
	            while (null != (s = String(name))) {
	                if ("Null".Equals(s)) {
	                    s = null;
	                }
	                ILOG.J2CsMapping.Collections.Generics.Collections.Add(list,s);
	            }
	            if (Match("/" + name + "List")) {
	                return (String[]) ILOG.J2CsMapping.Collections.Collections.ToArray(list,new String[list.Count]);
	            }
	        }
	        return null;
	    }
	
	    public virtual String[][] StringTable(String name) {
	        if (Match(name + "Table")) {
	            IList list = new ArrayList();
	            String[] sa;
	            while (null != (sa = StringArray(name))) {
	                ILOG.J2CsMapping.Collections.Generics.Collections.Add(list,sa);
	            }
	            if (Match("/" + name + "Table")) {
	                return (String[][]) ILOG.J2CsMapping.Collections.Collections.ToArray(list,new String[list.Count][]);
	            }
	        }
	        return null;
	    }
	
	    private bool Match(String target) {
	        if (GetTag().Equals(target)) {
	            // System.out.println("match '" + target + "'");
	            Advance();
	            return true;
	        }
	        return false;
	    }
	
	    private String GetTag() {
	        if (tag == null) {
	            tag = ReadNextTag();
	        }
	        return tag;
	    }
	
	    private void Advance() {
	        tag = null;
	    }
	
	    private String ReadData() {
	        StringBuilder sb = new StringBuilder();
	        bool inWhitespace = false;
	        // boolean inAmp = false;
	        while (true) {
	            int c = ReadChar();
	            if (c == -1 || c == '<') {
	                atTag = c == '<';
	                break;
	            }
	            if (c == '&') {
	                c = ReadChar();
	                if (c == '#') {
	                    StringBuilder numBuf = new StringBuilder();
	                    int radix = 10;
	                    c = ReadChar();
	                    if (c == 'x') {
	                        radix = 16;
	                        c = ReadChar();
	                    }
	                    while (c != ';' && c != -1) {
	                        numBuf.Append((char) c);
	                        c = ReadChar();
	                    }
	                    try {
	                        int num = ((Int32 )Convert.ToInt32(numBuf.ToString(),radix));
	                        c = (char) num;
	                    } catch (FormatException ex) {
	                        System.Console.Error.WriteLine("numbuf: " + numBuf.ToString()
	                                + " radix: " + radix);
	                        throw ex;
	                    }
	                } else {
	                    StringBuilder charBuf = new StringBuilder();
	                    while (c != ';' && c != -1) {
	                        charBuf.Append((char) c);
	                        c = ReadChar();
	                    }
	                    String charName = charBuf.ToString();
	                    if (charName.Equals("lt")) {
	                        c = '<';
	                    } else if (charName.Equals("gt")) {
	                        c = '>';
	                    } else if (charName.Equals("quot")) {
	                        c = '"';
	                    } else if (charName.Equals("apos")) {
	                        c = '\'';
	                    } else if (charName.Equals("amp")) {
	                        c = '&';
	                    } else {
	                        System.Console.Error.WriteLine("unrecognized character entity: '"
	                                + charName + "'");
	                        continue;
	                    }
	                }
	            }
	
	            if (IBM.ICU.Lang.UCharacter.IsWhitespace(c)) {
	                if (inWhitespace) {
	                    continue;
	                }
	                c = ' ';
	                inWhitespace = true;
	            } else {
	                inWhitespace = false;
	            }
	            sb.Append((char) c);
	        }
	        // System.err.println("read data: '" + sb.toString() + "'");
	        return sb.ToString();
	    }
	
	    private String ReadNextTag() {
	        int c = '\0';
	        while (!atTag) {
	            c = ReadChar();
	            if (c == '<' || c == -1) {
	                if (c == '<') {
	                    atTag = true;
	                }
	                break;
	            }
	            if (!IBM.ICU.Lang.UCharacter.IsWhitespace(c)) {
	                System.Console.Error.WriteLine("Unexpected non-whitespace character "
	                        + ILOG.J2CsMapping.Util.IlNumber.ToString(c,16));
	                break;
	            }
	        }
	
	        if (atTag) {
	            atTag = false;
	            StringBuilder sb = new StringBuilder();
	            while (true) {
	                c = ReadChar();
	                if (c == '>' || c == -1) {
	                    break;
	                }
	                sb.Append((char) c);
	            }
	            // System.err.println("read tag: '" + sb.toString() + "'");
	            return sb.ToString();
	        }
	        return null;
	    }
	
	    internal int ReadChar() {
	        try {
	            return r.Read();
	        } catch (IOException e) {
	            // assume end of input
	        }
	        return -1;
	    }
	}
}
