/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 11/30/10 3:38 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace ILOG.J2CsMapping.RegEx {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
     using ILOG.J2CsMapping.Util;
	
	/// <summary>
	/// Represents word boundary, checks current character and previous one if
	/// different types returns true;
	/// </summary>
	///
	internal class WordBoundary : AbstractSet {
	
		internal bool positive;
	
		public WordBoundary(bool positive_0) {
			this.positive = positive_0;
		}
	
		public override int Matches(int stringIndex, String testString,
				MatchResultImpl matchResult) {
			bool left;
			bool right;
	
			char ch1 = (stringIndex >= matchResult.GetRightBound()) ? ' '
					: testString[stringIndex];
			char ch2 = (stringIndex == 0) ? ' ' : testString[stringIndex - 1];
	
			int leftBound = (matchResult.HasTransparentBounds()) ? 0 : matchResult
					.GetLeftBound();
			left = (ch1 == ' ') || IsSpace(ch1, stringIndex, leftBound, testString);
			right = (ch2 == ' ')
					|| IsSpace(ch2, stringIndex - 1, leftBound, testString);
			return ((left ^ right) ^ positive) ? -1 : next.Matches(stringIndex,
					testString, matchResult);
		}
	
		/// <summary>
		/// Returns false, because word boundary does not consumes any characters and
		/// do not move string index.
		/// </summary>
		///
		public override bool HasConsumed(MatchResultImpl matchResult) {
			// only checks boundary, do not consumes characters
			return false;
		}

        public override String GetName()
        {
			return "WordBoundary"; //$NON-NLS-1$
		}
	
		private bool IsSpace(char ch, int index, int leftBound,
				String testString) {
			if (System.Char.IsLetterOrDigit(ch) || ch == '_')
				return false;
            if (Character.GetType(ch) == Character.NON_SPACING_MARK)
            {
				for (; --index >= leftBound;) {
					ch = testString[index];
					if (System.Char.IsLetterOrDigit(ch))
						return false;
                    if (Character.GetType(ch) != Character.NON_SPACING_MARK)
						return true;
				}
			}
			return true;
		}
	}
}
