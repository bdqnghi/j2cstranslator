/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 11/30/10 3:38 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace ILOG.J2CsMapping.RegEx {
	
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Represents group, which is alternation of other subexpression.
	/// One should think about "group" in this model as JointSet opening
	/// group and corresponding FSet closing group.
	/// </summary>
	///
	internal class JointSet : AbstractSet {
	
		protected internal ArrayList children;
	
		protected internal AbstractSet fSet;
	
		protected internal int groupIndex;
	
		protected internal JointSet() {
		}
	
		public JointSet(ArrayList children_0, FSet fSet_1) {
			this.children = children_0;
			this.fSet = fSet_1;
			this.groupIndex = fSet_1.GetGroupIndex();
		}
	
		/// <summary>
		/// Returns stringIndex+shift, the next position to match
		/// </summary>
		///
		public override int Matches(int stringIndex, String testString,
				MatchResultImpl matchResult) {
			if (children == null) {
				return -1;
			}
			int start = matchResult.GetStart(groupIndex);
			matchResult.SetStart(groupIndex, stringIndex);
			int size = children.Count;
			for (int i = 0; i < size; i++) {
				AbstractSet e = (AbstractSet) children[i];
				int shift = e.Matches(stringIndex, testString, matchResult);
				if (shift >= 0) {
					return shift;
				}
			}
			matchResult.SetStart(groupIndex, start);
			return -1;
		}
	
		public override void SetNext(AbstractSet next) {
			fSet.SetNext(next);
		}
	
		public override AbstractSet GetNext() {
			return fSet.GetNext();
		}

        public override String GetName()
        {
			return "JointSet"; //$NON-NLS-1$
		}
	
		public int GetGroup() {
			return groupIndex;
		}
	
		public override bool First(AbstractSet set) {
			if (children != null) {
				for (IIterator i = new ILOG.J2CsMapping.Collections.IteratorAdapter(children.GetEnumerator()); i.HasNext();) {
					if (((AbstractSet) i.Next()).First(set)) {
						return true;
					}
				}
			}
	
			return false;
		}
	
		public override bool HasConsumed(MatchResultImpl matchResult) {
			return !(matchResult.GetEnd(groupIndex) >= 0 && matchResult
					.GetStart(groupIndex) == matchResult.GetEnd(groupIndex));
		}
	
		/// <summary>
		/// This method is used for traversing nodes after the 
		/// first stage of compilation.
		/// </summary>
		///
		public override void ProcessSecondPass() {
			this.isSecondPassVisited = true;
	
			if (fSet != null && !fSet.isSecondPassVisited) {
	
				/*
				 * Add here code to do during the pass
				 */
	
				/*
				 * End code to do during the pass
				 */
				fSet.ProcessSecondPass();
			}
	
			if (children != null) {
				int childrenSize = children.Count;
	
				for (int i = 0; i < childrenSize; i++) {
					AbstractSet child = (AbstractSet) children[i];
	
					/*
					 * Add here code to do during the pass
					 */
	
					JointSet set = child.ProcessBackRefReplacement();
	
					if (set != null) {
						child.isSecondPassVisited = true;
						ILOG.J2CsMapping.Collections.Collections.RemoveAt(children,i);
						children.Insert(i, set);
						child = (AbstractSet) set;
					}
	
					/*
					 * End code to do during the pass
					 */
					if (!child.isSecondPassVisited) {
						child.ProcessSecondPass();
					}
				}
			}
	
			if (next != null) {
				base.ProcessSecondPass();
			}
		}
	}
}
