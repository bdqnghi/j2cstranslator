/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 11/30/10 3:38 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace ILOG.J2CsMapping.RegEx {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Base class for nodes representing leaf tokens of the RE, those who consumes
	/// fixed number of characters.
	/// </summary>
	///
	abstract internal class LeafSet : AbstractSet {
	
		protected internal int charCount;
	
		public LeafSet(AbstractSet next) : base(next) {
			this.charCount = 1;
			SetType(ILOG.J2CsMapping.RegEx.AbstractSet.TYPE_LEAF);
		}
	
		public LeafSet() {
			this.charCount = 1;
		}
	
		/// <summary>
		/// Returns "shift", the number of accepted chars commonly internal function,
		/// but called by quantifiers.
		/// </summary>
		///
		public abstract int Accepts(int stringIndex, String testString);
	
		/// <summary>
		/// Checks if we can enter this state and pass the control to the next one.
		/// Return positive value if match succeeds, negative otherwise.
		/// </summary>
		///
		public override int Matches(int stringIndex, String testString,
				MatchResultImpl matchResult) {
	
			if (stringIndex + CharCount() > matchResult.GetRightBound()) {
				matchResult.hitEnd = true;
				return -1;
			}
	
			int shift = Accepts(stringIndex, testString);
			if (shift < 0) {
				return -1;
			}
	
			return next.Matches(stringIndex + shift, testString, matchResult);
		}
	
		/// <summary>
		/// Returns number of characters this node consumes.
		/// </summary>
		///
		/// <returns>number of characters this node consumes.</returns>
		public virtual int CharCount() {
			return charCount;
		}
	
		public override bool HasConsumed(MatchResultImpl mr) {
			return true;
		}
	}
}
