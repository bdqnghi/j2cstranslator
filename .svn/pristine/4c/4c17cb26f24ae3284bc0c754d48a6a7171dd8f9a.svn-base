//##header J2SE15
//#if defined(FOUNDATION10) || defined(J2SE13)
//#else
/*
 *******************************************************************************
 *   Copyright (C) 2007, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 *******************************************************************************
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 12/13/10 10:46 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace IBM.ICU.Charset
{

    using IBM.ICU.Text;
    using NUnit;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;
    using ILOG.J2CsMapping.Text;

    /// <summary>
    /// Regression test for java.text.Bidi compatibility
    /// </summary>
    ///

    [NUnit.Framework.TestFixture]
    public class TestCompatibility : BidiTest
    {

        internal void CompareBidi(Bidi bidi, Bidi jbidi)
        {
            sbyte paraLevel = bidi.GetParaLevel();
            if (bidi.BaseIsLeftToRight() != jbidi.BaseIsLeftToRight())
            {
                Errln("Discrepancy in baseIsLeftToRight for case " + "(level="
                        + paraLevel + "): " + IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.GetTextAsString())
                        + "\n    bidi: " + bidi.BaseIsLeftToRight()
                        + "\n   jbidi: " + jbidi.BaseIsLeftToRight());
            }
            if (bidi.GetBaseLevel() != jbidi.GetBaseLevel())
            {
                Errln("Discrepancy in getBaseLevel for case " + "(level="
                        + paraLevel + "): " + IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.GetTextAsString())
                        + "\n    bidi: " + bidi.GetBaseLevel() + "\n   jbidi: "
                        + jbidi.GetBaseLevel());
            }
            if (bidi.GetLength() != jbidi.GetLength())
            {
                Errln("Discrepancy in getLength for case " + "(level=" + paraLevel
                        + "): " + IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.GetTextAsString())
                        + "\n    bidi: " + bidi.GetLength() + "\n   jbidi: "
                        + jbidi.GetLength());
            }
            int len = bidi.GetLength();
            for (int i = 0; i < len; i++)
            {
                if (bidi.GetLevelAt(i) != jbidi.GetLevelAt(i))
                {
                    Errln("Discrepancy in getLevelAt for offset " + i + " of case "
                            + "(level=" + paraLevel + "): "
                            + IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.GetTextAsString()) + "\n    bidi: "
                            + bidi.GetLevelAt(i) + "\n   jbidi: "
                            + jbidi.GetLevelAt(i));
                }
            }
            if (bidi.GetRunCount() != jbidi.GetRunCount())
            {
                if (!(len == 0 && jbidi.GetRunCount() == 1))
                {
                    Errln("Discrepancy in getRunCount for case " + "(level="
                            + paraLevel + "): "
                            + IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.GetTextAsString()) + "\n    bidi: "
                            + bidi.GetRunCount() + "\n   jbidi: "
                            + jbidi.GetRunCount());
                }
            }
            int runCount = bidi.GetRunCount();
            for (int i_0 = 0; i_0 < runCount; i_0++)
            {
                if (bidi.GetRunLevel(i_0) != jbidi.GetRunLevel(i_0))
                {
                    Errln("Discrepancy in getRunLevel for run " + i_0 + " of case "
                            + "(level=" + paraLevel + "): "
                            + IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.GetTextAsString()) + "\n    bidi: "
                            + bidi.GetRunLevel(i_0) + "\n   jbidi: "
                            + jbidi.GetRunLevel(i_0));
                }
                if (bidi.GetRunLimit(i_0) != jbidi.GetRunLimit(i_0))
                {
                    Errln("Discrepancy in getRunLimit for run " + i_0 + " of case "
                            + "(level=" + paraLevel + "): "
                            + IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.GetTextAsString()) + "\n    bidi: "
                            + bidi.GetRunLimit(i_0) + "\n   jbidi: "
                            + jbidi.GetRunLimit(i_0));
                }
                if (bidi.GetRunStart(i_0) != jbidi.GetRunStart(i_0))
                {
                    Errln("Discrepancy in getRunStart for run " + i_0 + " of case "
                            + "(level=" + paraLevel + "): "
                            + IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.GetTextAsString()) + "\n    bidi: "
                            + bidi.GetRunStart(i_0) + "\n   jbidi: "
                            + jbidi.GetRunStart(i_0));
                }
            }
            if (bidi.IsLeftToRight() != jbidi.IsLeftToRight())
            {
                Errln("Discrepancy in isLeftToRight for case " + "(level="
                        + paraLevel + "): " + IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.GetTextAsString())
                        + "\n    bidi: " + bidi.IsLeftToRight() + "\n   jbidi: "
                        + jbidi.IsLeftToRight());
            }
            if (bidi.IsMixed() != jbidi.IsMixed())
            {
                Errln("Discrepancy in isMixed for case " + "(level=" + paraLevel
                        + "): " + IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.GetTextAsString())
                        + "\n    bidi: " + bidi.IsMixed() + "\n   jbidi: "
                        + jbidi.IsMixed());
            }
            if (bidi.IsRightToLeft() != jbidi.IsRightToLeft())
            {
                Errln("Discrepancy in isRightToLeft for case " + "(level="
                        + paraLevel + "): " + IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.GetTextAsString())
                        + "\n    bidi: " + bidi.IsRightToLeft() + "\n   jbidi: "
                        + jbidi.IsRightToLeft());
            }
            char[] text = bidi.GetText();
            if (IBM.ICU.Text.Bidi.RequiresBidi(text, 0, text.Length) != Bidi
                    .RequiresBidi(text, 0, text.Length))
            {
                Errln("Discrepancy in requiresBidi for case "
                        + IBM.ICU.Charset.BidiTest.U16ToPseudo(bidi.GetTextAsString()) + "\n    bidi: "
                        + IBM.ICU.Text.Bidi.RequiresBidi(text, 0, text.Length) + "\n   jbidi: "
                        + Bidi.RequiresBidi(text, 0, text.Length));
            }
            /*
             * skip the next test, since the toString implementation are not
             * compatible if (!bidi.toString().equals(jbidi.toString())) {
             * errln("Discrepancy in toString for case " + "(level=" + paraLevel +
             * "): " + u16ToPseudo(bidi.getTextAsString() + "\n    bidi: " +
             * bidi.toString() + "\n   jbidi: " + jbidi.toString())); }
             */
        }

        [NUnit.Framework.Test]
        public void TestCompatibility2()
        {
            // This test case does not work well on Java 1.4/1.4.1 environment,
            // because of insufficient Bidi implementation in these versions.
            /*String javaVersion = System.Environment.GetEnvironmentVariable("java.version");
            if (javaVersion.StartsWith("1.4.0") || javaVersion.StartsWith("1.4.1")) {
                Logln("\nSkipping TestCompatibility.  The test case is known to fail on Java "
                        + javaVersion + "\n");
                return;
            }*/
            Logln("\nEntering TestCompatibility\n");
            /* check constant field values */
            int val;
            val = IBM.ICU.Text.Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT;
            val = IBM.ICU.Text.Bidi.DIRECTION_DEFAULT_RIGHT_TO_LEFT;
            val = IBM.ICU.Text.Bidi.DIRECTION_LEFT_TO_RIGHT;
            val = IBM.ICU.Text.Bidi.DIRECTION_RIGHT_TO_LEFT;
            Logln("last val = " + val);

            String[] data = { "",
	        /*
	         * the following 2 cases are skipped, because java.text.Bidi has bugs
	         * which cause discrepancies "abc", "ABC",
	         */
	        "abc def", "ABC DEF", "abc 123 def", "ABC 123 DEF", "abc DEF ghi",
	                "abc DEF 123 xyz", "abc GHIJ 12345 def KLM" };
            int dataCnt = data.Length;
            Bidi bidi;
            Bidi jbidi;
            for (int i = 0; i < dataCnt; i++)
            {
                String src = IBM.ICU.Charset.BidiTest.PseudoToU16(data[i]);
                bidi = new Bidi(src, IBM.ICU.Text.Bidi.DIRECTION_LEFT_TO_RIGHT);
                jbidi = new Bidi(src,
                        Bidi.DIRECTION_LEFT_TO_RIGHT);
                CompareBidi(bidi, jbidi);
                bidi = new Bidi(src, IBM.ICU.Text.Bidi.DIRECTION_RIGHT_TO_LEFT);
                jbidi = new Bidi(src,
                        Bidi.DIRECTION_RIGHT_TO_LEFT);
                CompareBidi(bidi, jbidi);
                char[] chars = src.ToCharArray();
                bidi = new Bidi(chars, 0, null, 0, chars.Length,
                        IBM.ICU.Text.Bidi.DIRECTION_LEFT_TO_RIGHT);
                jbidi = new Bidi(chars, 0, null, 0, chars.Length,
                        Bidi.DIRECTION_LEFT_TO_RIGHT);
                CompareBidi(bidi, jbidi);
            }
            /* check bogus flags */
            bidi = new Bidi("abc", 999);
            AssertEquals("\nDirection should be LTR", IBM.ICU.Text.Bidi.LTR, bidi.GetDirection());
            /* check constructor with overriding embeddings */
            bidi = new Bidi(new char[] { 's', 's', 's' }, 0, new sbyte[] {
	                (sbyte) -7, (sbyte) -2, (sbyte) -3 }, 0, 3,
                    IBM.ICU.Text.Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT);
            jbidi = new Bidi(new char[] { 's', 's', 's' }, 0,
                    new sbyte[] { (sbyte)-7, (sbyte)-2, (sbyte)-3 }, 0, 3,
                    Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT);

            AttributedString al = new AttributedString(
                    "HEBREW 123 english MOREHEB");

            al.AddAttribute(TextAttribute.RUN_DIRECTION,
            TextAttribute.RUN_DIRECTION_RTL);
            al.AddAttribute(TextAttribute.NUMERIC_SHAPING,
            NumericShaper.GetShaper(NumericShaper.ARABIC));
            al.AddAttribute(TextAttribute.BIDI_EMBEDDING, 1, 0, 26);
            al.AddAttribute(TextAttribute.BIDI_EMBEDDING, -1, 0, 6);
            al.AddAttribute(TextAttribute.BIDI_EMBEDDING, -1, 19,
            26);

            AttributedCharacterIterator aci = al.GetIterator();
            bidi = new Bidi(aci);
            jbidi = new Bidi(aci);
            CompareBidi(bidi, jbidi);
            String xout = bidi.WriteReordered(0);
            Logln("Output #1 of Bidi(AttributedCharacterIterator): " + xout);

            al = new AttributedString("HEBREW 123 english MOREHEB");

            al.AddAttribute(TextAttribute.RUN_DIRECTION,
            TextAttribute.RUN_DIRECTION_RTL);
            al.AddAttribute(TextAttribute.BIDI_EMBEDDING, 0, 0, 26);

            aci = al.GetIterator();
            bidi = new Bidi(aci);
            jbidi = new Bidi(aci);
            CompareBidi(bidi, jbidi);
            xout = bidi.WriteReordered(0);
            Logln("Output #2 of Bidi(AttributedCharacterIterator): " + xout);

            al = new AttributedString("HEBREW 123 english MOREHEB");
            aci = al.GetIterator();
            bidi = new Bidi(aci);
            jbidi = new Bidi(aci);
            CompareBidi(bidi, jbidi);
            xout = bidi.WriteReordered(0);
            Logln("Output #3 of Bidi(AttributedCharacterIterator): " + xout);

            char[] text = "abc==(123)==>def".ToCharArray();
            bidi = new Bidi(text, 3, null, 0, 10,
                    IBM.ICU.Text.Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT);
            jbidi = new Bidi(text, 3, null, 0, 10,
                    Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT);
            CompareBidi(bidi, jbidi);
            xout = bidi.WriteReordered(0);
            Logln("Output of Bidi(abc==(123)==>def,3,null,0,10, DEFAULT_LTR): "
                    + xout);
            bidi = new Bidi(text, 3, null, 0, 10,
                    IBM.ICU.Text.Bidi.DIRECTION_DEFAULT_RIGHT_TO_LEFT);
            jbidi = new Bidi(text, 3, null, 0, 10,
                    Bidi.DIRECTION_DEFAULT_RIGHT_TO_LEFT);
            CompareBidi(bidi, jbidi);
            xout = bidi.WriteReordered(0);
            Logln("Output of Bidi(abc==(123)==>def,3,null,0,10, DEFAULT_RTL): "
                    + xout);
            sbyte[] levels = new sbyte[] { 0, 0, 0, -1, -1, -1, 0, 0, 0, 0 };
            bidi = new Bidi(text, 3, levels, 0, 10, IBM.ICU.Text.Bidi.DIRECTION_LEFT_TO_RIGHT);
            jbidi = new Bidi(text, 3, levels, 0, 10,
                    Bidi.DIRECTION_LEFT_TO_RIGHT);
            CompareBidi(bidi, jbidi);
            xout = bidi.WriteReordered(0);
            Logln("Output of Bidi(abc==(123)==>def,3,levels,0,10, LTR): " + xout);
            bidi = new Bidi(text, 3, levels, 0, 10,
                    IBM.ICU.Text.Bidi.DIRECTION_DEFAULT_RIGHT_TO_LEFT);
            jbidi = new Bidi(text, 3, levels, 0, 10,
                    Bidi.DIRECTION_DEFAULT_RIGHT_TO_LEFT);
            CompareBidi(bidi, jbidi);
            xout = bidi.WriteReordered(0);
            Logln("Output of Bidi(abc==(123)==>def,3,levels,0,10, DEFAULT_RTL): "
                    + xout);

            /* test reorderVisually */
            sbyte[] myLevels = new sbyte[] { 1, 2, 0, 1, 2, 1, 2, 0, 1, 2 };
            object[] objects = new object[10];
            levels = new sbyte[objects.Length];
            for (int i_0 = 0; i_0 < objects.Length; i_0++)
            {
                objects[i_0] = (char)((char)('a' + i_0));
                levels[i_0] = myLevels[i_0];
            }
            IBM.ICU.Text.Bidi.ReorderVisually(levels, 3, objects, 3, 7);
            String strbidi = "";
            for (int i_1 = 0; i_1 < objects.Length; i_1++)
            {
                strbidi += objects[i_1].ToString();
            }
            for (int i_2 = 0; i_2 < objects.Length; i_2++)
            {
                objects[i_2] = (char)((char)('a' + i_2));
                levels[i_2] = myLevels[i_2];
            }
            Bidi.ReorderVisually(levels, 3, objects, 3, 7);
            String strjbidi = "";
            for (int i_3 = 0; i_3 < objects.Length; i_3++)
            {
                strjbidi += objects[i_3].ToString();
            }
            if (!strjbidi.Equals(strbidi))
            {
                Errln("Discrepancy in reorderVisually " + "\n      bidi: "
                        + strbidi + "\n     jbidi: " + strjbidi);
            }
            else
            {
                Logln("Correct match in reorderVisually " + "\n      bidi: "
                        + strbidi + "\n     jbidi: " + strjbidi);
            }

            Logln("\nExiting TestCompatibility\n");
        }

        public static void Main(String[] args)
        {
            try
            {
                new TestCompatibility().Run(args);
            }
            catch (Exception e)
            {
                System.Console.Out.WriteLine(e);
            }
        }
    }
    // #endif
}
