/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20101125_01     
// 11/30/10 3:38 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace ILOG.J2CsMapping.RegEx {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Base class for quantifiers.
	/// </summary>
	///
	abstract internal class QuantifierSet : AbstractSet {
	
		protected internal AbstractSet innerSet;
	
		public QuantifierSet(AbstractSet innerSet_0, AbstractSet next, int type) : base(next) {
			this.innerSet = innerSet_0;
			SetType(type);
		}
	
		/// <summary>
		/// Returns the innerSet.
		/// </summary>
		///
		public AbstractSet GetInnerSet() {
			return innerSet;
		}
	
		/// <summary>
		/// Sets an inner set.
		/// </summary>
		///
		/// <param name="innerSet_0">The innerSet to set.</param>
		public virtual void SetInnerSet(AbstractSet innerSet_0) {
			this.innerSet = innerSet_0;
		}
	
		public override bool First(AbstractSet set) {
			return innerSet.First(set) || next.First(set);
		}
	
		public override bool HasConsumed(MatchResultImpl mr) {
			return true;
		}
	
		/// <summary>
		/// This method is used for traversing nodes after the 
		/// first stage of compilation.
		/// </summary>
		///
		public override void ProcessSecondPass() {
			this.isSecondPassVisited = true;
	
			if (next != null) {
	
				if (!next.isSecondPassVisited) {
	
					/*
					 * Add here code to do during the pass
					 */
					JointSet set = next.ProcessBackRefReplacement();
	
					if (set != null) {
						next.isSecondPassVisited = true;
						next = (AbstractSet) set;
					}
	
					/*
					 * End code to do during the pass
					 */
					next.ProcessSecondPass();
				}
			}
	
			if (innerSet != null) {
	
				if (!innerSet.isSecondPassVisited) {
	
					/*
					 * Add here code to do during the pass
					 */
					JointSet set_0 = innerSet.ProcessBackRefReplacement();
	
					if (set_0 != null) {
						innerSet.isSecondPassVisited = true;
						innerSet = (AbstractSet) set_0;
					}
	
					/*
					 * End code to do during the pass
					 */
					innerSet.ProcessSecondPass();
				} else {
	
					/*
					 * We reach node through innerSet but it is already traversed.
					 * You can see this situation for GroupQuantifierSet.innerset
					 * if we compile smth like "(a)+ when 
					 * GroupQuantifierSet == GroupQuantifierSet.innerset.fSet.next
					 */
	
					/*
					 * Add here code to do during the pass
					 */
					if (innerSet  is  SingleSet
							&& ((FSet) ((JointSet) innerSet).fSet).isBackReferenced) {
						innerSet = innerSet.next;
					}
	
					/*
					 * End code to do during the pass
					 */
				}
			}
		}
	}
}
